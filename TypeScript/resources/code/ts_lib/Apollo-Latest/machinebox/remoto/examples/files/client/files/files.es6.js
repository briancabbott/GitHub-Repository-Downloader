// Code generated by Remoto; DO NOT EDIT.

// Remoto JavaScript Client
//
// uses the Fetch API: to support older browsers, use the polyfil https://github.github.io/fetch/

"use strict";

// _filesCount keeps track of the number of files being added, and is used
// to generate unique field names.
var _filesCount = 0


// ImagesClientOptions are the options for the ImagesClient.
export class ImagesClientOptions {
	constructor(data = {}) {
		this._data = data
		this._data.endpoint = this._data.endpoint || "http://localhost:8080"
	}
	get endpoint() { return this._data.endpoint }
	set endpoint(endpoint) { this._data.endpoint = endpoint }
}

// Images provides image services.
export class ImagesClient {
	constructor(options) {
		this.options = options
	}
	
	Flip(flipRequest = null) {
		return this.FlipMulti([flipRequest]).then(function(responses) {
			return responses[0]
		})
	}

	// FlipMulti is the batch version of Flip.
	FlipMulti(flipRequests) {
		var data = new FormData()
		flipRequests.forEach(function(request){
			if (request && !request instanceof FlipRequest) {
				throw 'ImagesClient.Flip: requests must be instances of FlipRequest'
			}
			let allfiles = request.allFiles()
			allfiles.forEach(function(fieldname) {
				data.set(fieldname, allfiles[fieldname])
			})
		})
		data.set('json', JSON.stringify(flipRequests))
		return fetch(this.options.endpoint() + '/remoto/Images.Flip', {
			method: 'post', body: data,
			headers: {'Content-Type': 'multipart/form-data', 'Accept':'application/json'}
		}).then(function(responseData){ // success
			var responses = []
			responseData.json().forEach(function(response){
				responses.push(new remototypes.FileResponse(response))
			})
			return responses
		}, function(error){ // error
			throw 'ImagesClient.Flip: ' + error.message
		})
	}
	
}


// FlipRequest is the request for Images.Flip.
export class FlipRequest {
	constructor(data = {}) {
		this._data = data
		this._files = {}
	}
	
	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.
	addFile(filename, file) {
		let fieldname = 'files['+(_filesCount++)+']'
		this._files[fieldname] = file
		return fieldname
	}

	// allFiles gets an object of files in this request, keyed with
	// the fieldname.
	get allFiles() { return this._files }
	// filesCount gets the number of files in this request.
	get filesCount() { return _filesCount }
	
	// toJSON gets a JSON string describing this object.
	toJSON() { return JSON.stringify(this._data) }

	get image() { return this._data.image }
	setImage(request, filename, image) { this._data.image = request.addFile(filename, image) }
	
}

