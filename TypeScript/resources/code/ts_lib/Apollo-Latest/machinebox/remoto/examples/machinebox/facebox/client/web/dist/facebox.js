// Code generated by Remoto; DO NOT EDIT.

// Remoto JavaScript Client
//
// uses the Fetch API: to support older browsers, use the polyfil https://github.github.io/fetch/

"use strict";

// _filesCount keeps track of the number of files being added, and is used
// to generate unique field names.

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _filesCount = 0;

// FaceboxClientOptions are the options for the FaceboxClient.

var FaceboxClientOptions = exports.FaceboxClientOptions = function () {
	function FaceboxClientOptions() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, FaceboxClientOptions);

		this._data = data;
		this._data.endpoint = this._data.endpoint || "http://localhost:8080";
	}

	_createClass(FaceboxClientOptions, [{
		key: "endpoint",
		get: function get() {
			return this._data.endpoint;
		},
		set: function set(endpoint) {
			this._data.endpoint = endpoint;
		}
	}]);

	return FaceboxClientOptions;
}();

// Facebox provides facial detection and recognition in images.


var FaceboxClient = exports.FaceboxClient = function () {
	function FaceboxClient(options) {
		_classCallCheck(this, FaceboxClient);

		this.options = options;
	}

	// CheckFaceprint checks to see if a Faceprint matches any known
	// faces.


	_createClass(FaceboxClient, [{
		key: "CheckFaceprint",
		value: function CheckFaceprint() {
			var checkFaceprintRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.CheckFaceprintMulti([checkFaceprintRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// CheckFaceprintMulti is the batch version of CheckFaceprint.

	}, {
		key: "CheckFaceprintMulti",
		value: function CheckFaceprintMulti(checkFaceprintRequests) {
			var data = new FormData();
			checkFaceprintRequests.forEach(function (request) {
				if (request && !request instanceof CheckFaceprintRequest) {
					throw 'FaceboxClient.CheckFaceprint: requests must be instances of CheckFaceprintRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(checkFaceprintRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.CheckFaceprint', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new CheckFaceprintResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.CheckFaceprint: ' + error.message;
			});
		}

		// CheckFile checks an image file for faces.

	}, {
		key: "CheckFile",
		value: function CheckFile() {
			var checkFileRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.CheckFileMulti([checkFileRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// CheckFileMulti is the batch version of CheckFile.

	}, {
		key: "CheckFileMulti",
		value: function CheckFileMulti(checkFileRequests) {
			var data = new FormData();
			checkFileRequests.forEach(function (request) {
				if (request && !request instanceof CheckFileRequest) {
					throw 'FaceboxClient.CheckFile: requests must be instances of CheckFileRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(checkFileRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.CheckFile', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new CheckFileResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.CheckFile: ' + error.message;
			});
		}

		// CheckURL checks a hosted image file for faces.

	}, {
		key: "CheckURL",
		value: function CheckURL() {
			var checkURLRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.CheckURLMulti([checkURLRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// CheckURLMulti is the batch version of CheckURL.

	}, {
		key: "CheckURLMulti",
		value: function CheckURLMulti(checkURLRequests) {
			var data = new FormData();
			checkURLRequests.forEach(function (request) {
				if (request && !request instanceof CheckURLRequest) {
					throw 'FaceboxClient.CheckURL: requests must be instances of CheckURLRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(checkURLRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.CheckURL', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new CheckURLResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.CheckURL: ' + error.message;
			});
		}

		// FaceprintCompare compares faceprints to a specified target describing
		// similarity.

	}, {
		key: "FaceprintCompare",
		value: function FaceprintCompare() {
			var faceprintCompareRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.FaceprintCompareMulti([faceprintCompareRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// FaceprintCompareMulti is the batch version of FaceprintCompare.

	}, {
		key: "FaceprintCompareMulti",
		value: function FaceprintCompareMulti(faceprintCompareRequests) {
			var data = new FormData();
			faceprintCompareRequests.forEach(function (request) {
				if (request && !request instanceof FaceprintCompareRequest) {
					throw 'FaceboxClient.FaceprintCompare: requests must be instances of FaceprintCompareRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(faceprintCompareRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.FaceprintCompare', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new FaceprintCompareResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.FaceprintCompare: ' + error.message;
			});
		}

		// GetState gets the Facebox state file.

	}, {
		key: "GetState",
		value: function GetState() {
			var getStateRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.GetStateMulti([getStateRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// GetStateMulti is the batch version of GetState.

	}, {
		key: "GetStateMulti",
		value: function GetStateMulti(getStateRequests) {
			var data = new FormData();
			getStateRequests.forEach(function (request) {
				if (request && !request instanceof GetStateRequest) {
					throw 'FaceboxClient.GetState: requests must be instances of GetStateRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(getStateRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.GetState', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new remototypes.FileResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.GetState: ' + error.message;
			});
		}

		// PutState sets the Facebox state file.

	}, {
		key: "PutState",
		value: function PutState() {
			var putStateRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.PutStateMulti([putStateRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// PutStateMulti is the batch version of PutState.

	}, {
		key: "PutStateMulti",
		value: function PutStateMulti(putStateRequests) {
			var data = new FormData();
			putStateRequests.forEach(function (request) {
				if (request && !request instanceof PutStateRequest) {
					throw 'FaceboxClient.PutState: requests must be instances of PutStateRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(putStateRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.PutState', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new PutStateResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.PutState: ' + error.message;
			});
		}

		// RemoveID removes a face with the specified ID.

	}, {
		key: "RemoveID",
		value: function RemoveID() {
			var removeIDRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.RemoveIDMulti([removeIDRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// RemoveIDMulti is the batch version of RemoveID.

	}, {
		key: "RemoveIDMulti",
		value: function RemoveIDMulti(removeIDRequests) {
			var data = new FormData();
			removeIDRequests.forEach(function (request) {
				if (request && !request instanceof RemoveIDRequest) {
					throw 'FaceboxClient.RemoveID: requests must be instances of RemoveIDRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(removeIDRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.RemoveID', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new RemoveIDResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.RemoveID: ' + error.message;
			});
		}

		// Rename changes a person&#39;s name.

	}, {
		key: "Rename",
		value: function Rename() {
			var renameRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.RenameMulti([renameRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// RenameMulti is the batch version of Rename.

	}, {
		key: "RenameMulti",
		value: function RenameMulti(renameRequests) {
			var data = new FormData();
			renameRequests.forEach(function (request) {
				if (request && !request instanceof RenameRequest) {
					throw 'FaceboxClient.Rename: requests must be instances of RenameRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(renameRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.Rename', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new RenameResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.Rename: ' + error.message;
			});
		}

		// RenameID changes the name of a previously taught face, by ID.

	}, {
		key: "RenameID",
		value: function RenameID() {
			var renameIDRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.RenameIDMulti([renameIDRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// RenameIDMulti is the batch version of RenameID.

	}, {
		key: "RenameIDMulti",
		value: function RenameIDMulti(renameIDRequests) {
			var data = new FormData();
			renameIDRequests.forEach(function (request) {
				if (request && !request instanceof RenameIDRequest) {
					throw 'FaceboxClient.RenameID: requests must be instances of RenameIDRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(renameIDRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.RenameID', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new RenameIDResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.RenameID: ' + error.message;
			});
		}

		// SimilarFile checks for similar faces from the face in an image file.

	}, {
		key: "SimilarFile",
		value: function SimilarFile() {
			var similarFileRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.SimilarFileMulti([similarFileRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// SimilarFileMulti is the batch version of SimilarFile.

	}, {
		key: "SimilarFileMulti",
		value: function SimilarFileMulti(similarFileRequests) {
			var data = new FormData();
			similarFileRequests.forEach(function (request) {
				if (request && !request instanceof SimilarFileRequest) {
					throw 'FaceboxClient.SimilarFile: requests must be instances of SimilarFileRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(similarFileRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.SimilarFile', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new SimilarFileResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.SimilarFile: ' + error.message;
			});
		}

		// SimilarID checks for similar faces by ID.

	}, {
		key: "SimilarID",
		value: function SimilarID() {
			var similarIDRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.SimilarIDMulti([similarIDRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// SimilarIDMulti is the batch version of SimilarID.

	}, {
		key: "SimilarIDMulti",
		value: function SimilarIDMulti(similarIDRequests) {
			var data = new FormData();
			similarIDRequests.forEach(function (request) {
				if (request && !request instanceof SimilarIDRequest) {
					throw 'FaceboxClient.SimilarID: requests must be instances of SimilarIDRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(similarIDRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.SimilarID', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new SimilarIDResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.SimilarID: ' + error.message;
			});
		}

		// SimilarURL checks for similar faces in a hosted image file.

	}, {
		key: "SimilarURL",
		value: function SimilarURL() {
			var similarURLRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.SimilarURLMulti([similarURLRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// SimilarURLMulti is the batch version of SimilarURL.

	}, {
		key: "SimilarURLMulti",
		value: function SimilarURLMulti(similarURLRequests) {
			var data = new FormData();
			similarURLRequests.forEach(function (request) {
				if (request && !request instanceof SimilarURLRequest) {
					throw 'FaceboxClient.SimilarURL: requests must be instances of SimilarURLRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(similarURLRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.SimilarURL', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new SimilarURLResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.SimilarURL: ' + error.message;
			});
		}

		// TeachFaceprint teaches Facebox about a face from a Faceprint.

	}, {
		key: "TeachFaceprint",
		value: function TeachFaceprint() {
			var teachFaceprintRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.TeachFaceprintMulti([teachFaceprintRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// TeachFaceprintMulti is the batch version of TeachFaceprint.

	}, {
		key: "TeachFaceprintMulti",
		value: function TeachFaceprintMulti(teachFaceprintRequests) {
			var data = new FormData();
			teachFaceprintRequests.forEach(function (request) {
				if (request && !request instanceof TeachFaceprintRequest) {
					throw 'FaceboxClient.TeachFaceprint: requests must be instances of TeachFaceprintRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(teachFaceprintRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.TeachFaceprint', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new TeachFaceprintResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.TeachFaceprint: ' + error.message;
			});
		}

		// TeachFile teaches Facebox a new face from an image file.

	}, {
		key: "TeachFile",
		value: function TeachFile() {
			var teachFileRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.TeachFileMulti([teachFileRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// TeachFileMulti is the batch version of TeachFile.

	}, {
		key: "TeachFileMulti",
		value: function TeachFileMulti(teachFileRequests) {
			var data = new FormData();
			teachFileRequests.forEach(function (request) {
				if (request && !request instanceof TeachFileRequest) {
					throw 'FaceboxClient.TeachFile: requests must be instances of TeachFileRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(teachFileRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.TeachFile', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new TeachFileResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.TeachFile: ' + error.message;
			});
		}

		// TeachURL teaches Facebox a new face from an image on the web.

	}, {
		key: "TeachURL",
		value: function TeachURL() {
			var teachURLRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			return this.TeachURLMulti([teachURLRequest]).then(function (responses) {
				return responses[0];
			});
		}

		// TeachURLMulti is the batch version of TeachURL.

	}, {
		key: "TeachURLMulti",
		value: function TeachURLMulti(teachURLRequests) {
			var data = new FormData();
			teachURLRequests.forEach(function (request) {
				if (request && !request instanceof TeachURLRequest) {
					throw 'FaceboxClient.TeachURL: requests must be instances of TeachURLRequest';
				}
				var allfiles = request.allFiles();
				allfiles.forEach(function (fieldname) {
					data.set(fieldname, allfiles[fieldname]);
				});
			});
			data.set('json', JSON.stringify(teachURLRequests));
			return fetch(this.options.endpoint() + '/remoto/Facebox.TeachURL', {
				method: 'post', body: data,
				headers: { 'Content-Type': 'multipart/form-data', 'Accept': 'application/json' }
			}).then(function (responseData) {
				// success
				var responses = [];
				responseData.json().forEach(function (response) {
					responses.push(new TeachURLResponse(response));
				});
				return responses;
			}, function (error) {
				// error
				throw 'FaceboxClient.TeachURL: ' + error.message;
			});
		}
	}]);

	return FaceboxClient;
}();

// CheckFaceprintRequest is the request object for CheckFaceprint calls.


var CheckFaceprintRequest = exports.CheckFaceprintRequest = function () {
	function CheckFaceprintRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckFaceprintRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(CheckFaceprintRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "faceprints",
		get: function get() {
			return this._data.faceprints;
		},
		set: function set(faceprints) {
			this._data.faceprints = faceprints;
		}
	}]);

	return CheckFaceprintRequest;
}();

// CheckFaceprintResponse is the response object for CheckFaceprint calls.


var CheckFaceprintResponse = exports.CheckFaceprintResponse = function () {
	function CheckFaceprintResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckFaceprintResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(CheckFaceprintResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return CheckFaceprintResponse;
}();

// CheckFileRequest is the request object for CheckFile calls.


var CheckFileRequest = exports.CheckFileRequest = function () {
	function CheckFileRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckFileRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(CheckFileRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "setFile",
		value: function setFile(request, filename, file) {
			this._data.file = request.addFile(filename, file);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "file",
		get: function get() {
			return this._data.file;
		}
	}]);

	return CheckFileRequest;
}();

// CheckFileResponse is the response object for CheckFile calls.


var CheckFileResponse = exports.CheckFileResponse = function () {
	function CheckFileResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckFileResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(CheckFileResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return CheckFileResponse;
}();

// CheckURLRequest is the request object for CheckURL calls.


var CheckURLRequest = exports.CheckURLRequest = function () {
	function CheckURLRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckURLRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(CheckURLRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "uRL",
		get: function get() {
			return this._data.url;
		},
		set: function set(url) {
			this._data.url = url;
		}
	}]);

	return CheckURLRequest;
}();

// CheckURLResponse is the response object for CheckURL calls.


var CheckURLResponse = exports.CheckURLResponse = function () {
	function CheckURLResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, CheckURLResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(CheckURLResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return CheckURLResponse;
}();

// Face describes a face.


var Face = exports.Face = function () {
	function Face() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Face);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(Face, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}, {
		key: "matched",
		get: function get() {
			return this._data.matched;
		},
		set: function set(matched) {
			this._data.matched = matched;
		}
	}, {
		key: "faceprint",
		get: function get() {
			return this._data.faceprint;
		},
		set: function set(faceprint) {
			this._data.faceprint = faceprint;
		}
	}, {
		key: "rect",
		get: function get() {
			return this._data.rect;
		},
		set: function set(rect) {
			this._data.rect = rect;
		}
	}]);

	return Face;
}();

// FaceprintCompareRequest is the request object for FaceprintCompare calls.


var FaceprintCompareRequest = exports.FaceprintCompareRequest = function () {
	function FaceprintCompareRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, FaceprintCompareRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(FaceprintCompareRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "target",
		get: function get() {
			return this._data.target;
		},
		set: function set(target) {
			this._data.target = target;
		}
	}, {
		key: "faceprints",
		get: function get() {
			return this._data.faceprints;
		},
		set: function set(faceprints) {
			this._data.faceprints = faceprints;
		}
	}]);

	return FaceprintCompareRequest;
}();

// FaceprintCompareResponse is the response object for FaceprintCompare calls.


var FaceprintCompareResponse = exports.FaceprintCompareResponse = function () {
	function FaceprintCompareResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, FaceprintCompareResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(FaceprintCompareResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "confidences",
		get: function get() {
			return this._data.confidences;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return FaceprintCompareResponse;
}();

// FaceprintFace is a face.


var FaceprintFace = exports.FaceprintFace = function () {
	function FaceprintFace() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, FaceprintFace);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(FaceprintFace, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "matched",
		get: function get() {
			return this._data.matched;
		},
		set: function set(matched) {
			this._data.matched = matched;
		}
	}, {
		key: "confidence",
		get: function get() {
			return this._data.confidence;
		},
		set: function set(confidence) {
			this._data.confidence = confidence;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}]);

	return FaceprintFace;
}();

// GetStateRequest is the request object for GetState calls.


var GetStateRequest = exports.GetStateRequest = function () {
	function GetStateRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, GetStateRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(GetStateRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}]);

	return GetStateRequest;
}();

// PutStateRequest is the request object for PutState calls.


var PutStateRequest = exports.PutStateRequest = function () {
	function PutStateRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, PutStateRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(PutStateRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "setStateFile",
		value: function setStateFile(request, filename, state_file) {
			this._data.state_file = request.addFile(filename, state_file);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "stateFile",
		get: function get() {
			return this._data.state_file;
		}
	}]);

	return PutStateRequest;
}();

// PutStateResponse is the response object for PutState calls.


var PutStateResponse = exports.PutStateResponse = function () {
	function PutStateResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, PutStateResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(PutStateResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return PutStateResponse;
}();

// Rect is a bounding box describing a rectangle of an image.


var Rect = exports.Rect = function () {
	function Rect() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, Rect);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(Rect, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "top",
		get: function get() {
			return this._data.top;
		},
		set: function set(top) {
			this._data.top = top;
		}
	}, {
		key: "left",
		get: function get() {
			return this._data.left;
		},
		set: function set(left) {
			this._data.left = left;
		}
	}, {
		key: "width",
		get: function get() {
			return this._data.width;
		},
		set: function set(width) {
			this._data.width = width;
		}
	}, {
		key: "height",
		get: function get() {
			return this._data.height;
		},
		set: function set(height) {
			this._data.height = height;
		}
	}]);

	return Rect;
}();

// RemoveIDRequest is the request object for RemoveID calls.


var RemoveIDRequest = exports.RemoveIDRequest = function () {
	function RemoveIDRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RemoveIDRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(RemoveIDRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}]);

	return RemoveIDRequest;
}();

// RemoveIDResponse is the response object for RemoveID calls.


var RemoveIDResponse = exports.RemoveIDResponse = function () {
	function RemoveIDResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RemoveIDResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(RemoveIDResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return RemoveIDResponse;
}();

// RenameIDRequest is the request object for RenameID calls.


var RenameIDRequest = exports.RenameIDRequest = function () {
	function RenameIDRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RenameIDRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(RenameIDRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}]);

	return RenameIDRequest;
}();

// RenameIDResponse is the response object for RenameID calls.


var RenameIDResponse = exports.RenameIDResponse = function () {
	function RenameIDResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RenameIDResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(RenameIDResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return RenameIDResponse;
}();

// RenameRequest is the request object for Rename calls.


var RenameRequest = exports.RenameRequest = function () {
	function RenameRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RenameRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(RenameRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "from",
		get: function get() {
			return this._data.from;
		},
		set: function set(from) {
			this._data.from = from;
		}
	}, {
		key: "to",
		get: function get() {
			return this._data.to;
		},
		set: function set(to) {
			this._data.to = to;
		}
	}]);

	return RenameRequest;
}();

// RenameResponse is the response object for Rename calls.


var RenameResponse = exports.RenameResponse = function () {
	function RenameResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, RenameResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(RenameResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return RenameResponse;
}();

// SimilarFace is a detected face with similar matching faces.


var SimilarFace = exports.SimilarFace = function () {
	function SimilarFace() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarFace);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(SimilarFace, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "rect",
		get: function get() {
			return this._data.rect;
		},
		set: function set(rect) {
			this._data.rect = rect;
		}
	}, {
		key: "similarFaces",
		get: function get() {
			return this._data.similar_faces;
		},
		set: function set(similar_faces) {
			this._data.similar_faces = similar_faces;
		}
	}]);

	return SimilarFace;
}();

// SimilarFileRequest is the request object for SimilarFile calls.


var SimilarFileRequest = exports.SimilarFileRequest = function () {
	function SimilarFileRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarFileRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(SimilarFileRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "setFile",
		value: function setFile(request, filename, file) {
			this._data.file = request.addFile(filename, file);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "file",
		get: function get() {
			return this._data.file;
		}
	}]);

	return SimilarFileRequest;
}();

// SimilarFileResponse is the response object for SimilarFile calls.


var SimilarFileResponse = exports.SimilarFileResponse = function () {
	function SimilarFileResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarFileResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(SimilarFileResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return SimilarFileResponse;
}();

// SimilarIDRequest is the request object for SimilarID calls.


var SimilarIDRequest = exports.SimilarIDRequest = function () {
	function SimilarIDRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarIDRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(SimilarIDRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}]);

	return SimilarIDRequest;
}();

// SimilarIDResponse is the response object for SimilarID calls.


var SimilarIDResponse = exports.SimilarIDResponse = function () {
	function SimilarIDResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarIDResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(SimilarIDResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return SimilarIDResponse;
}();

// SimilarURLRequest is the request object for SimilarURL calls.


var SimilarURLRequest = exports.SimilarURLRequest = function () {
	function SimilarURLRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarURLRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(SimilarURLRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "uRL",
		get: function get() {
			return this._data.url;
		},
		set: function set(url) {
			this._data.url = url;
		}
	}]);

	return SimilarURLRequest;
}();

// SimilarURLResponse is the response object for SimilarURL calls.


var SimilarURLResponse = exports.SimilarURLResponse = function () {
	function SimilarURLResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, SimilarURLResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(SimilarURLResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "faces",
		get: function get() {
			return this._data.faces;
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return SimilarURLResponse;
}();

// TeachFaceprintRequest is the request object for TeachFaceprint calls.


var TeachFaceprintRequest = exports.TeachFaceprintRequest = function () {
	function TeachFaceprintRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachFaceprintRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(TeachFaceprintRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}, {
		key: "faceprint",
		get: function get() {
			return this._data.faceprint;
		},
		set: function set(faceprint) {
			this._data.faceprint = faceprint;
		}
	}]);

	return TeachFaceprintRequest;
}();

// TeachFaceprintResponse is the response object for TeachFaceprint calls.


var TeachFaceprintResponse = exports.TeachFaceprintResponse = function () {
	function TeachFaceprintResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachFaceprintResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(TeachFaceprintResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return TeachFaceprintResponse;
}();

// TeachFileRequest is the request object for TeachFile calls.


var TeachFileRequest = exports.TeachFileRequest = function () {
	function TeachFileRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachFileRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(TeachFileRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "setFile",
		value: function setFile(request, filename, file) {
			this._data.file = request.addFile(filename, file);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}, {
		key: "file",
		get: function get() {
			return this._data.file;
		}
	}]);

	return TeachFileRequest;
}();

// TeachFileResponse is the response object for TeachFile calls.


var TeachFileResponse = exports.TeachFileResponse = function () {
	function TeachFileResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachFileResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(TeachFileResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return TeachFileResponse;
}();

// TeachURLRequest is the request object for TeachURL calls.


var TeachURLRequest = exports.TeachURLRequest = function () {
	function TeachURLRequest() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachURLRequest);

		this._data = data;
		this._files = {};
	}

	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.


	_createClass(TeachURLRequest, [{
		key: "addFile",
		value: function addFile(filename, file) {
			var fieldname = 'files[' + _filesCount++ + ']';
			this._files[fieldname] = file;
			return fieldname;
		}

		// allFiles gets an object of files in this request, keyed with
		// the fieldname.

	}, {
		key: "toJSON",


		// toJSON gets a JSON string describing this object.
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "allFiles",
		get: function get() {
			return this._files;
		}
		// filesCount gets the number of files in this request.

	}, {
		key: "filesCount",
		get: function get() {
			return _filesCount;
		}
	}, {
		key: "iD",
		get: function get() {
			return this._data.id;
		},
		set: function set(id) {
			this._data.id = id;
		}
	}, {
		key: "name",
		get: function get() {
			return this._data.name;
		},
		set: function set(name) {
			this._data.name = name;
		}
	}, {
		key: "uRL",
		get: function get() {
			return this._data.url;
		},
		set: function set(url) {
			this._data.url = url;
		}
	}]);

	return TeachURLRequest;
}();

// TeachURLResponse is the response object for TeachURL calls.


var TeachURLResponse = exports.TeachURLResponse = function () {
	function TeachURLResponse() {
		var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, TeachURLResponse);

		this._data = data;
		this._files = {};
	}

	// toJSON gets a JSON string describing this object.


	_createClass(TeachURLResponse, [{
		key: "toJSON",
		value: function toJSON() {
			return JSON.stringify(this._data);
		}
	}, {
		key: "error",
		get: function get() {
			return this._data.error;
		}
	}]);

	return TeachURLResponse;
}();
