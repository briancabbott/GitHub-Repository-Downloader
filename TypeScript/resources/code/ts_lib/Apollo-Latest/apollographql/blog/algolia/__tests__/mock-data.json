{
    "data": {
        "site": {
            "siteMetadata": {
                "siteUrl": "https://www.apollographql.com/blog"
            }
        },
        "allWpPost": {
            "nodes": [
                {
                    "id": "cG9zdDo3Nzkx",
                    "title": "8 Free to Use GraphQL APIs for Your Projects and Demos",
                    "content": "\n<p>Whether you&#8217;re trying to build a demo, create a workshop, or learn how GraphQL works, it&#8217;s nice to have some examples to reference instead of having to build your own. While <a href=\"https://www.apollographql.com/docs/apollo-server/\">Apollo Server</a> makes building your own API a delight, sometimes you don&#8217;t want to get your hands dirty if you don&#8217;t have to. As luck would have it, some really awesome GraphQL APIs are available that you can use for free!</p>\n\n\n\n<p>Here&#8217;s 8 of them you can use today along with an example query for each one to get you started:</p>\n\n\n\n<h2><a href=\"#space-x-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"space-x-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Space X API</h2>\n\n\n\n<p>Get all sorts of information about previous Space X launches, like information about the rocket, astronauts, and more! <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.spacex.land%2Fgraphql%2F&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4A2AhjElABYIDOACsdSgBSECWcrK6eAjAAwBKPDnwE8HatVYQkAfSTFEuMUVLkKssMRQJZhaMULKxJMpVlSdw4ysu6FiPTIDmNvAF83bJAGtq10RViACcUVihCXW8fNwIAN1YwBAg9Vl83T0C8YOgfBBQAlQIcqDyUeUUEDONM9xAAGhA4kNZiACNI6gwsbGDcOvcgA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  launchesPast(limit: 10) {\n    mission_name\n    launch_date_local\n    launch_site {\n      site_name_long\n    }\n    links {\n      article_link\n      video_link\n    }\n    rocket {\n      rocket_name\n    }\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#swapi-star-wars-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"swapi-star-wars-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SWAPI (Star Wars API)</h2>\n\n\n\n<p>Are you a fan of Star Wars? The SWAPI API provides a wealth of information about some of the older Star Wars movies. It&#8217;s a great API for showing how relationships work in GraphQL. <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fswapi-graphql.netlify.app%2F.netlify%2Ffunctions%2Findex&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4CGANsQGICWxcAznjvgXgGZW325NMoUrEKcmAX0EikQkABoQAN0IAnCoQBG-GhizZ5uCUKA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  allFilms {\n    films {\n      title\n    }\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#rick-and-morty-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"rick-and-morty-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rick and Morty API</h2>\n\n\n\n<p>Get information about episodes, characters, and even their last known location! <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Frickandmortyapi.com%2Fgraphql&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR5QAWAhgE4lQoJkDOAFAA4kDmC6eATADR4BmASwA21Mh2B4kJRB2wgyAqAGs5eAL4BKPDnwE8ApHwjbcevVAgxUpvWpsEyCWjBG0Tus1MT31Nu0jUQbhAAN3IBEgAjIScMLGwyXEC1IA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  characters(page: 2, filter: { name: \"rick\" }) {\n    info {\n      count\n    }\n    results {\n      name\n    }\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#countries-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"countries-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Countries API</h2>\n\n\n\n<p>Get country codes, emoji, and more for every country. <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fcountries.trevorblades.com&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR5QQyoBOAlggM5474GERgK4N5ICGirDCcEAK3I8AvrhEgANCABuHChwBGAG2oYs2UuJAigA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  countries {\n    code\n    name\n    emoji\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#pokeapi\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"pokeapi\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PokeAPI</h2>\n\n\n\n<p>Get all the information you need to build a Pokedex! The Pokemon API is free for non-commercial use and rate-limited. <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fbeta.pokeapi.co%2Fgraphql%2Fv1beta&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4DmyAjAPoDOADglAJYIXp5UQDWCcESZAbgExlWHLkmq0GFABS4CBAO4ALBACcEzYC3adufQcSSqAhijrcNeJEcQWyCAI7NsIA8dPcAtHWd4Avn79ZOQgVMFUyACMATws6MGYjCihA-DwASjwcVIIrRCCCOKDfXF8QABoQXiMVOiMIgBtGDCxsFRKQXyA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  gen1_species: pokemon_v2_pokemonspecies(\n    where: { pokemon_v2_generation: { name: { _eq: \"generation-i\" } } }\n    order_by: { id: asc }\n  ) {\n    name\n    id\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#dexapi\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"dexapi\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DexAPI</h2>\n\n\n\n<p>Another Pokemon API with all the info you need to build a Pokedex! This API is in early development but has a great API for quick Pokemon queries! <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fdex-server.herokuapp.com%2F&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4CGANsQAoQDWCcE%2BO%2BBeShiuBAvrhyADQgA3QgCcAloQBGxBAGcMWbMO4gOQA\" data-type=\"URL\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  allPokemon {\n    name\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#anilist-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"anilist-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Anilist API</h2>\n\n\n\n<p>Anilist is an anime API with information about 1000s of animes. The API is free for non-commercial use and allows 90 requests per minute. <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fgraphql.anilist.co&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4AKAhgOYJ474F6JgCWxluNNAzvSggKoBOANi1Z4UnfhSrCayUv3psAFkKlJiogG4JlNAL7aCYBGyi96AB1EQk2vdVs6QAGhDrip4gCNxbDFmy9cBx0gA\">Try it out here!</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  Page {\n    media {\n      siteUrl\n      title {\n        english\n        native\n      }\n      description\n    }\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#github-api\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"github-api\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API</h2>\n\n\n\n<p>The GitHub API is one of my favorite APIs for creating examples. It supports both queries and mutations (you can create repositories, add comments to PRs, and more) and has a vast amount of data making it possible to build really in-depth examples and demos or see what GraphQL looks like at scale. <a href=\"https://studio.apollographql.com/sandbox/explorer?endpoint=https%3A%2F%2Fapi.github.com%2Fgraphql&amp;explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4TADpIAR4BuAlggO4IBOeO%2BBeANhAObFK716UIAOEAzsRQRKpfgAoGAQ34p0eAIwAGAJQ0OnPEghgE-dXU1apiDZwC%2BZvJbo3zIADQhCU0VIBGDPRizZKue3MgA\">Try it out here!</a></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>While the API is free to use, you will still need to add an Authorization header in Apollo Explorer using a <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\">personal access token</a>. Check out the <a href=\"https://docs.github.com/en/graphql/guides/introduction-to-graphql\">GitHub API docs</a> for more information.</p></blockquote>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">{\n  viewer {\n    login\n    repositories(last: 10) {\n      nodes {\n        name\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Happy Querying!</p>\n",
                    "slug": "8-free-to-use-graphql-apis-for-your-projects-and-demos",
                    "path": "/community/backend/8-free-to-use-graphql-apis-for-your-projects-and-demos/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Community"
                            },
                            {
                                "name": "Frontend"
                            }
                        ]
                    },
                    "excerpt": "<p>Whether you&#8217;re trying to build a demo, create a workshop, or learn how GraphQL works, it&#8217;s nice to have some examples to reference instead of having to build your own. While Apollo Server makes building your own API a delight, sometimes you don&#8217;t want to get your hands dirty if you don&#8217;t have to. As [&hellip;]</p>\n",
                    "date": "2021-06-22T12:04:08",
                    "modified": "2021-06-23 10:29:33",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/06/Frame-64.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Kurt Kemple"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3OTI5",
                    "title": "Federation in Odyssey",
                    "content": "\n<p>One of the very best ways to improve your product is to use it yourself. We&#8217;ve been using Apollo Client and Server libraries internally at Apollo for ages. Still, it wasn&#8217;t until we released <a href=\"https://odyssey.apollographql.com/\">Odyssey</a> (the Apollo learning platform) that we realized we had the perfect opportunity to use Apollo Federation to consolidate our efforts with Apollo Studio.<br><br>In this article, we&#8217;ll learn about what Federation is, walk you through our use case for Odyssey, show you how we set it up, challenges we overcame, and ultimately why Federation was a great solution.</p>\n\n\n\n<h2><a href=\"#first-what-is-apollo-federation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"first-what-is-apollo-federation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First, what is Apollo Federation?</h2>\n\n\n\n<p><a href=\"https://www.apollographql.com/docs/federation/\">Apollo Federation</a> enables you to divide a single GraphQL API’s implementation across multiple back-end services. Each service has a different GraphQL schema that represents a different part of the combined API:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"419\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/07/image-1024x419.png\" alt=\"Screen Shot 2021-04-15 at 11.31.35 AM.png\" class=\"wp-image-7931\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/07/image-1024x419.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/07/image-300x123.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/07/image-768x314.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/07/image.png 1070w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>A <strong>gateway</strong> is responsible for receiving incoming queries and splitting them up across whichever services are required to resolve them. The gateway then takes each service’s response and combines them into a <em>single</em> response that’s returned to the querying client. From the client’s perspective, this works exactly like querying a <em>non</em>-federated API.</p>\n\n\n\n<p>In addition to providing a clean API surface area, federation helps you control back-end data access. Each service only needs access to data stores related to its part of your API, and services don’t even need to be able to communicate with each other!</p>\n\n\n\n<h2><a href=\"#why-adopt-federation-for-odyssey\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"why-adopt-federation-for-odyssey\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why adopt federation for Odyssey?</h2>\n\n\n\n<p>While designing Odyssey, we knew we wanted to persist users’ progress through courses to provide a better learning experience. We wanted to associate this progress with the <code>User</code> type from <a href=\"https://studio.apollographql.com/\">Apollo Studio</a>’s GraphQL API, which we were already using for authentication.</p>\n\n\n\n<p>But it didn’t make sense for a user’s progress to be stored in Apollo Studio’s database—it should be stored in the Odyssey service! That way, our team could maintain and evolve our implementation without impacting or relying on the Studio team. Enter federation.</p>\n\n\n\n<p>In Odyssey, we read user data from Studio’s Explorer API for authentication, and then use that information to fetch the correct data from our separate progression tracking service. Even though both services are federated with the same gateway, restrictions are set up so that Odyssey can’t request anything and everything from Studio or make any modifications to its database.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"419\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/07/image-1024x419.png\" alt=\"Screen Shot 2021-06-16 at 12.38.07 PM.png\" class=\"wp-image-7930\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/07/image-1024x419.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/07/image-300x123.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/07/image-768x314.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/07/image.png 1070w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>This implementation gives us a <strong>separation of concerns</strong> that enables different teams to work on different products and features without interfering with each other. In this way, we can read the user data from the Studio subgraph to help us grab the right data from our Odyssey progression subgraph instead of storing duplicate user info.</p>\n\n\n\n<h2><a href=\"#setting-up-federation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"setting-up-federation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up federation</h2>\n\n\n\n<p>Having never worked with federation before, the engineers on the Education team jumped into the docs. We created a local PostgreSQL database for progress tracking and built out our GraphQL server with Apollo Server.</p>\n\n\n\n<p>Creating a federated service was surprisingly straightforward! To support <a href=\"https://www.apollographql.com/docs/federation/managed-federation/overview/\">managed federation</a>, we saved our schema in a separate <code>.graphql</code> file. We created a federated schema by invoking <code>buildFederatedSchema</code> (imported from <code>@apollo/federation</code>) and passing in an array with an object containing our <code>typeDefs</code> and <code>resolvers</code>. The <code>typeDefs</code> were created by reading in our <code>schema.graphql</code> and wrapping it in a <code>gql</code> tag. Then we passed this federated schema as the value of the <code>schema</code> config option for our instance of <code>ApolloServer</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import {buildFederatedSchema} from '@apollo/federation';\nimport {ApolloServer, gql} from 'apollo-server';\nimport {readFileSync} from 'fs';\nimport {resolvers} from './resolvers';\n\nconst schema = readFileSync('schema.graphql').toString();\n\nconst federatedSchema = buildFederatedSchema([\n  {\n    typeDefs: gql`${schema}`,\n    resolvers\n  }\n]);\n\nconst server = new ApolloServer({\n  schema: federatedSchema\n})\n\nserver.listen({port: process.env.PORT}).then(({url}) => {\n    console.log(`🚀 Server is listening on ${url}`);\n});</code></pre>\n\n\n\n<p>In order for our Odyssey subgraph to extend the User type, we submitted a PR to the Studio subgraph that added a <code>@key</code> directive to the User type definition. This created an <a href=\"https://www.apollographql.com/docs/federation/entities/\">entity</a> that could be shared between subgraphs.</p>\n\n\n\n<blockquote class=\"wp-block-quote has-text-align-left\"><p>In Apollo Federation, an <strong>entity</strong> is an object type that you define canonically in <em>one</em> subgraph and can then reference and extend in <em>other</em> subgraphs. Entities are the core building block of a federated graph.</p></blockquote>\n\n\n\n<p>In this case, we used the <code>id</code> field as the primary key by which the Odyssey subgraph would tell the Studio subgraph which user data we wanted.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">// example User type in Studio subgraph\ntype User @key(fields: \"id\") {\n  id: ID!\n  name: String!\n}</code></pre>\n\n\n\n<p>Within the Odyssey subgraph, we created a <code>Task</code> type and extended the <code>User</code> from the Studio subgraph to add a <code>tasks</code> field that resolves to an array of <code>Task</code>s.</p>\n\n\n\n<p>To extend the <code>User</code> type, we added a <code>@key</code> directive that matches the one on the <code>User</code> type in the Studio subgraph (see above example). The <code>id</code> field must be included since it’s part of the specified <code>@key</code>. It also has to be annotated with the <code>@external</code> directive to indicate that the field originates in the Studio subgraph.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">// example extended User in Odyssey subgraph schema\ntype Task {\n  id: ID!\n  value: String\n  completedAt: Timestamp\n}\n\nextend type User @key(fields: \"id\") {\n  id: ID! @external\n  tasks: [Task!]!\n}</code></pre>\n\n\n\n<p>Then we wrote a resolver for the <code>User.tasks</code> field that finds all tasks that belong to a given user.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// example resolver for an Odyssey user's tasks (in Odyssey subgraph)\n{\n  User: {\n    tasks: user =>\n      Task.findAll({\n        where: {\n          userId: user.id\n        }\n      })\n  }\n}</code></pre>\n\n\n\n<p>And finally, since we were tapping into the existing <a href=\"https://www.apollographql.com/docs/federation/gateway/\">gateway</a> at Apollo, we didn’t need to worry about creating one. To work on our federated service locally, we added our service’s local endpoint to the locally-running gateway’s <code>serviceList</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// example gateway config\nimport { ApolloGateway } from '@apollo/gateway';\n\nconst gateway = new ApolloGateway({\n  serviceList: [\n    { name: 'odyssey', url: 'http://localhost:4001' },\n    // Define additional services here\n  ],\n});</code></pre>\n\n\n\n<h2><a href=\"#challenges\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"challenges\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenges</h2>\n\n\n\n<p>With everything set up, we wanted to test it all locally before deploying anything to make sure everything worked as expected. The biggest challenge we faced while creating our federated service was navigating other subgraph and gateway codebases and figuring out how to run them locally. While not specific to Apollo Federation, stepping into unfamiliar tools and codebases is a challenge that teams can expect to face when implementing federation themselves. Pair programming sessions with engineers from those teams proved invaluable in our development process.</p>\n\n\n\n<p>With our server up and running locally, it was time to test out some queries! But we had a problem. We just wanted to check to see if everything was set up correctly and working as expected without also spinning up another server locally for the Studio Explorer API. How could we run a query that needs to get the <code>User</code> data from a service that we’re not running locally?</p>\n\n\n\n<p>We learned that you can run an <code>_entities</code> query to effectively stub the response for the fields that rely on the service you aren’t running.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">query ($_representations: [_Any!]!) {\n  _entities(representations: $_representations) {\n    ... on User {\n      tasks {\n        id\n        value\n        completedAt\n      }\n    }\n  }\n}\n\n\n// query variables\n{\n  \"_representations\": [\n    {\n      \"__typename\": \"User\",\n      \"id\": \"1\"\n    }\n  ]\n}</code></pre>\n\n\n\n<p>You can read more in-depth about resolving requests for entities in the <a href=\"https://www.apollographql.com/docs/federation/federation-spec/#resolve-requests-for-entities\">federation spec</a>.</p>\n\n\n\n<h2><a href=\"#benefits-of-our-federated-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"benefits-of-our-federated-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benefits of our Federated graph</h2>\n\n\n\n<p>With our service up and running, let’s take a look at some of the benefits we got out of our federated graph:</p>\n\n\n\n<ul><li>Having a separation of concerns with user data in one subgraph and task data in another reduced duplication of information. There’s no need to store the same user information in the Odyssey subgraph when it already exists in the Studio one.</li><li>We can make changes to the Odyssey subgraph without having to worry about impacting the Studio subgraph since they’re independent of one another. If we have some downtime, it won’t cause any downtime for the Studio team. Each team is responsible only for the data that they need to use.</li><li>We still only have one data graph to which we make requests! This helps clean up our frontend code by only needing to send requests to one source (the federated gateway) instead of two (one to the Studio graph and one to Odyssey).</li></ul>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>Coming into this project with no prior experience working with Apollo Federation, we found it surprisingly straightforward to configure our server and connect our service to the gateway. We had the opportunity to dig into another codebase and do some cross-team collaboration to get everything properly set up and deployed with how Apollo does things internally (these aren’t federation-specific steps, but were still part of our journey in creating our backend service). And we found some resources to help us in our local development that we can now use to improve Apollo’s own learning resources.</p>\n\n\n\n<p>Now we’re excited to continue building and expanding our federated graph!</p>\n",
                    "slug": "federation-in-odyssey",
                    "path": "/backend/federation/federation-in-odyssey/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Community"
                            },
                            {
                                "name": "Federation"
                            }
                        ]
                    },
                    "excerpt": "<p>One of the very best ways to improve your product is to use it yourself. We&#8217;ve been using Apollo Client and Server libraries internally at Apollo for ages. Still, it wasn&#8217;t until we released Odyssey (the Apollo learning platform) that we realized we had the perfect opportunity to use Apollo Federation to consolidate our efforts [&hellip;]</p>\n",
                    "date": "2021-07-09T14:05:30",
                    "modified": "2021-07-09 14:22:40",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/07/federation-in-odyssey-1.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Janessa Garrow"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3NzU0",
                    "title": "Apollo Sandbox: an open GraphQL IDE for local development",
                    "content": "\n<p>Today, we’re introducing <a href=\"https://sandbox.apollo.dev\" target=\"_blank\" rel=\"noreferrer noopener\">Apollo Sandbox</a> &#8211; the quickest way to navigate and test your GraphQL endpoints. At the end of 2020, we launched development graphs with the goal of making Apollo tools more accessible and valuable for every GraphQL developer. Sandbox takes us another step closer to that goal by making the Apollo Explorer openly available to any developer, with no login required. We’re excited to give back to the GraphQL community with Sandbox, and we think you’ll love using it. Here are a few reasons why:</p>\n\n\n\n<h2><a href=\"#1-one-click-query-building-in-explorer\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"1-one-click-query-building-in-explorer\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. One-click query building in Explorer</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1278\" height=\"754\" src=\"/static/dec1b24d7e3413bc2211f0152bc6f41c/Screen-Recording-2021-06-11-at-12.39.29-PM-2.gif\" alt=\"\" class=\"wp-image-7755\"/></figure>\n\n\n\n<p>Typing out GraphQL queries by hand is time-consuming at best and a frustrating minefield of confusing paths, missed brackets, and incorrect variables at worst. Explorer offers no-code query-building to eliminate syntax errors and help you be more productive. Of course, if you still need to add hand-written code, you can do just that with Explorer’s editor with query linting and autocomplete.</p>\n\n\n\n<h2><a href=\"#2-%e2%8c%98-k-field-and-path-search\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"2-%e2%8c%98-k-field-and-path-search\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code>⌘ + K</code> field and path search</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1278\" height=\"754\" src=\"/static/291f5b100e9588bd1fe21b04f0d5d3eb/Screen-Recording-2021-06-11-at-01.01.41-PM.gif\" alt=\"\" class=\"wp-image-7757\"/></figure>\n\n\n\n<p>Your graph may be very deep and have thousands of fields and types. You know what data you&#8217;re looking for but the more your graph scales, the more difficult it becomes to navigate the graph to get there. Explorer’s <code>⌘ + K</code> intelligent search shows you all of the possible paths to a field or type. Choose the path you want to use, and our one-click query builder will add your query to the sandbox without writing a single line of code.</p>\n\n\n\n<h2><a href=\"#3-flexible-response-formatting\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"3-flexible-response-formatting\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Flexible response formatting</h2>\n\n\n\n<p>Once you’ve built your query, Explorer shows you the response in an interactive JSON or table format with collapsible sections and data sorting by clicking on table headers. You can also copy the response to your clipboard, download it as a CSV, or download the JSON.</p>\n\n\n\n<h2><a href=\"#4-explore-and-test-your-local-graphql-server\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"4-explore-and-test-your-local-graphql-server\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Explore and test your local GraphQL server</h2>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1246\" height=\"870\" src=\"/static/1e9d660a53876ee7d03cc79df64fd7dd/Screen-Recording-2021-06-11-at-01.24.51-PM.gif\" alt=\"\" class=\"wp-image-7759\"/></figure>\n\n\n\n<p>Just because you’re working on your schema locally doesn’t mean that you shouldn’t have the best tools for the job. You can point Sandbox at any local GraphQL server and use it just as easily as other tools like GraphiQL or GraphQL Playground with zero setup.<br><br>If you want to, you can even use Sandbox with production GraphQL APIs, although introspection needs to be enabled, and APIs that enforce CORS will need to <a href=\"https://apollographql.com/docs/studio/explorer/#cors-policies\" target=\"_blank\" rel=\"noreferrer noopener\">allow our URL</a>. That being said, here are a few public endpoints that you can try with Sandbox:</p>\n\n\n\n<ul><li><a href=\"http://sandbox.apollo.dev/?endpoint=https://rickandmortyapi.com/graphql\" data-type=\"URL\" data-id=\"sandbox.apollo.dev/?endpoint=https://rickandmortyapi.com/graphql\" target=\"_blank\" rel=\"noreferrer noopener\">sandbox.apollo.dev/?endpoint=https://rickandmortyapi.com/graphql</a></li><li><a href=\"http://sandbox.apollo.dev/?endpoint=https://api.spacex.land/graphql/\" data-type=\"URL\" data-id=\"sandbox.apollo.dev/?endpoint=https://api.spacex.land/graphql/\" target=\"_blank\" rel=\"noreferrer noopener\">sandbox.apollo.dev/?endpoint=https://api.spacex.land/graphql/</a></li><li><a href=\"http://sandbox.apollo.dev/?endpoint=https://spotify-graphql-server.herokuapp.com/graphql\" data-type=\"URL\" data-id=\"sandbox.apollo.dev/?endpoint=https://spotify-graphql-server.herokuapp.com/graphql\" target=\"_blank\" rel=\"noreferrer noopener\">sandbox.apollo.dev/?endpoint=https://spotify-graphql-server.herokuapp.com/graphql</a></li></ul>\n\n\n\n<h2><a href=\"#5-no-login-required\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"5-no-login-required\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. No login required</h2>\n\n\n\n<p>You can use the Schema Reference and Explorer in Sandbox with your GraphQL endpoint just by going to <a href=\"http://studio.apollographql.com/sandbox\">sandbox.apollo.dev</a>. You’ll never have to create an account or log in, though if you do we can show you your query history and open up some additional customization settings.</p>\n\n\n\n<h2><a href=\"#let-us-know-what-you-think\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"let-us-know-what-you-think\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let us know what you think!</h2>\n\n\n\n<p>We’re excited for you to get hands-on with Sandbox and start using all of the awesome features we highlighted in this post and others that we didn’t mention yet like like Traces, editor hints with response previews, a <code>graphql-lodash</code> integration, variable auto-creation, data mocking, and more! You can also get even more Sandbox features like query history and advanced Explorer settings by logging into Apollo.<br><br>We deeply value your feedback, so as you try it out, don’t hesitate to let us know what you think. You can leave feedback on Sandbox through <a href=\"https://forms.gle/qnfPc5n2vhm1JsS58\">this form</a>, and if you have any questions or open-ended thoughts, drop them in our community forum.</p>\n",
                    "slug": "apollo-sandbox-an-open-graphql-ide-for-local-development",
                    "path": "/announcement/platform/apollo-sandbox-an-open-graphql-ide-for-local-development/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Announcement"
                            },
                            {
                                "name": "Platform"
                            }
                        ]
                    },
                    "excerpt": "<p>Today, we’re introducing Apollo Sandbox &#8211; the quickest way to navigate and test your GraphQL endpoints. At the end of 2020, we launched development graphs with the goal of making Apollo tools more accessible and valuable for every GraphQL developer. Sandbox takes us another step closer to that goal by making the Apollo Explorer openly [&hellip;]</p>\n",
                    "date": "2021-06-15T09:00:44",
                    "modified": "2021-06-15 16:38:13",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/06/Apollo-Sandbox_Blog-Tile.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Vivek Ravishankar"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3NzEx",
                    "title": "DevOps for GraphQL APIs",
                    "content": "\n<p>How confident are you that changes to your API won&#8217;t break any clients? Not having confidence in knowing what could break when you release changes to your graph can grind teams to a halt and cause all sorts of problems for clients consuming your graph.</p>\n\n\n\n<p>In this article, we&#8217;ll look at how adopting a DevOps culture can help you evolve your graph faster, improve communication around your data graph, as well as the role Apollo plays in achieving a DevOps workflow for your data graph.</p>\n\n\n\n<h2><a href=\"#what-is-devops\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-devops\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is DevOps?</h2>\n\n\n\n<p>DevOps is a set of practices that combines software development and IT operations. It aims to shorten the systems development life cycle and provide continuous delivery with high software quality. DevOps shares a lot of principles with Agile software development.</p>\n\n\n\n<p>Implementing DevOps is not just about tools; it is also about how people work and the processes they use. DevOps is about unifying the engineering teams responsible for running an application or service in production.</p>\n\n\n\n<p>Ideally, one team manages all aspects of the service, including security and testing functions. In larger organizations, there may still be some functional specialization. Still, it remains critical that the process and communication focus on the end-to-end delivery of the entire service.</p>\n\n\n\n<h2><a href=\"#how-does-devops-help-me-ship-more-quickly-and-reliably\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-does-devops-help-me-ship-more-quickly-and-reliably\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does DevOps help me ship more quickly and reliably?</h2>\n\n\n\n<p>One of the major benefits of adopting GraphQL is the ability to gradually evolve your API over time instead of being locked into versioning and large releases. However, as with all things, there&#8217;s an associated cost. Because it&#8217;s not a large coordinated effort to release changes to a graph, it&#8217;s pretty easy to change or remove a type or field that will break one or more clients.</p>\n\n\n\n<p>Communication between everyone who consumes and maintains the graph can break down as your graph grows. To consistently meet clients&#8217; needs, we need to evolve a graph gradually, but we want to be able to do so quickly and reliably.</p>\n\n\n\n<p>By adopting a DevOps culture and blending operations with development, we can greatly improve communication around a data graph. Improved communication leads to shorter feedback loops, fewer errors, and faster deployments.</p>\n\n\n\n<p>Under a DevOps model, development and operations are no longer “siloed.” Instead, graph usage data is used in the build, test, and planning phases of a graph&#8217;s lifecycle.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"317\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-1024x317.png\" alt=\"\" class=\"wp-image-7712\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-1024x317.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-300x93.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-768x238.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-1536x475.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7-1200x371.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-7.png 1564w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2><a href=\"#how-does-apollo-help-me-with-devops\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-does-apollo-help-me-with-devops\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does Apollo help me with DevOps?</h2>\n\n\n\n<p>At Apollo, we believe that data graphs are the epicenter of communication for teams and companies that adopt GraphQL. It&#8217;s why we&#8217;ve invested so heavily in creating the tooling needed to set up DevOps best practices for GraphQL APIs. Apollo provides a platform on top of a schema registry that works together to help you at each stage in the DevOps lifecycle.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"432\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6-1024x432.png\" alt=\"\" class=\"wp-image-7715\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6-1024x432.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6-300x127.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6-768x324.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6-1200x506.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/06/build-test-release-6.png 1432w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3><a href=\"#build\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"build\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build</h3>\n\n\n\n<p>Apollo offers various tools to help you develop your API faster. From Apollo Explorer, a <a href=\"https://github.com/apollographql\">cloud-based GraphQL IDE</a> specifically tailored to GraphQL developers, to <a href=\"https://github.com/apollographql\">numerous open-source libraries</a>, Apollo is deeply invested in helping developers build data graphs faster.</p>\n\n\n\n<p>When developing locally, you can <a href=\"https://www.apollographql.com/blog/announcement/platform/apollo-studio-a-graphql-ide-for-every-environment/\">use development graphs</a>, which enables you to use all of Apollo Explorer’s powerful features (like intelligent search and variable extraction) with your locally running GraphQL server.</p>\n\n\n\n<h3><a href=\"#test\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"test\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h3>\n\n\n\n<p><a href=\"https://www.apollographql.com/docs/studio/schema-checks/\">Schema checks in Apollo Studio</a> help you collaborate on your graph with confidence. Checks validate your schema changes against historical operations to ensure changes will not break existing clients.</p>\n\n\n\n<p>For federated graphs, we also understand how important it is to have visibility of your graph’s composition. That&#8217;s why <a href=\"https://www.apollographql.com/blog/announcement/build-checks-webhooks-apollo-studio/\">we&#8217;ve introduced build checks and webhooks</a> to help you better understand the impact of schema changes, update your data graph faster, and allow more teams to contribute to the graph safely.</p>\n\n\n\n<h3><a href=\"#release\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"release\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Release</h3>\n\n\n\n<p>Our new <a href=\"https://www.apollographql.com/docs/rover/\">Rover CLI</a> helps you safely publish and fetch GraphQL schemas (monolithic and federated) from the Apollo schema registry. It is the successor to the Apollo CLI as the primary command-line tool for working with graphs.</p>\n\n\n\n<p>When it comes to deploying federated graphs, Apollo provides <a href=\"https://www.apollographql.com/docs/federation/managed-federation/overview/\">managed federation</a>. With managed federation, your gateway is no longer responsible for fetching schemas from your subgraphs on startup. Instead, your subgraphs push their schemas to the Apollo schema registry, verifying that they successfully compose into a federated schema. Studio then updates your graph&#8217;s latest configuration on composition success and makes your changes available to your gateway.</p>\n\n\n\n<h3><a href=\"#monitor\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"monitor\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monitor</h3>\n\n\n\n<p><a href=\"https://www.apollographql.com/studio/observe/\">Apollo Studio&#8217;s observability features</a> give you insight into every way your graph is being used and helps you find what’s wrong, what’s new, or what’s recently changed and take action.</p>\n\n\n\n<p><strong>Tracing &#8211;</strong> Automatically trace your operation’s resolvers, even across federated services, with no added configuration in Apollo Server. Visualize how your resolvers execute, identify bottlenecks, track headers and variables associated with your requests, and more.</p>\n\n\n\n<p><strong>Clients &#8211;</strong> <a href=\"https://www.apollographql.com/blog/announcement/platform/how-apollo-studio-client-awareness-improved-our-lives/\">See precisely which clients are querying your graph</a> and what operations they’re sending — track changes to operations, performance degradations, and error spikes across client versions.</p>\n\n\n\n<p><strong>Deprecations &#8211;</strong> Studio’s field-level usage tracking tells you precisely which of your clients last used each of your schemas fields, giving you the confidence to deprecate fields and sunset them without breaking any active usage of your graph.</p>\n\n\n\n<p>Aside from observability around graph performance, Apollo Studio also provides a history of your schema, daily reports, and <a href=\"https://www.apollographql.com/docs/studio/schema-change-integration/\">schema change notifications</a> to help keep you and your team(s) informed.</p>\n\n\n\n<h3><a href=\"#plan\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"plan\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plan</h3>\n\n\n\n<p>With Apollo Studio, you can view everything about your graph in one place – what data types exist, their documentation and interrelationships, the services that implement them, who are using them, when they last changed, when they last changed, and explore your graph with Apollo Explorer.</p>\n\n\n\n<p>When it comes to scaling beyond a single graph, <a href=\"https://marketplace.visualstudio.com/items?itemName=apollographql.apollo-workbench\">Workbench</a> can help you design a federated graph from the comfort of your editor without changing code or running servers.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>Adopting a DevOps culture provides your team(s) with the safety, trust, and agency needed to ship changes to your data graph quickly and reliably. Apollo provides an extensive platform that helps GraphQL API developers put DevOps best practices in place by providing CI/CD and observability for your graphs.</p>\n\n\n\n<p>To get started with Apollo Studio, head to <a href=\"http://studio.apollographql.com/dev\">studio.apollographql.com/dev</a>.</p>\n",
                    "slug": "devops-for-graphql-apis",
                    "path": "/tooling/graphql-ide/devops-for-graphql-apis/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "GraphQL IDE"
                            },
                            {
                                "name": "Platform"
                            }
                        ]
                    },
                    "excerpt": "<p>How confident are you that changes to your API won&#8217;t break any clients? Not having confidence in knowing what could break when you release changes to your graph can grind teams to a halt and cause all sorts of problems for clients consuming your graph. In this article, we&#8217;ll look at how adopting a DevOps [&hellip;]</p>\n",
                    "date": "2021-06-10T12:03:25",
                    "modified": "2021-06-09 18:43:59",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/06/ci-cd-data-graph.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Kurt Kemple"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3NTM4",
                    "title": "Using GraphQL Fragments for safer, cleaner, and faster code",
                    "content": "\n<p>Whether you&#8217;re just getting started with building GraphQL applications or you&#8217;ve done it for years, you probably have a decent understanding of&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/blog/what-is-a-graphql-query-graphql-query-examples-using-apollo-explorer/\" rel=\"noreferrer noopener\">what GraphQL queries are</a>. But what about GraphQL fragments?&nbsp;</p>\n\n\n\n<p>&nbsp;In this article, we&#8217;ll delve into some common use-cases where fragments shine, learn how to get the most out of them, and hopefully, I&#8217;ll inspire you to use more fragments in your GraphQL queries.</p>\n\n\n\n<h2><a href=\"#use-case-modeling-a-list\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"use-case-modeling-a-list\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use case: modeling a list</h2>\n\n\n\n<p>When you build a GraphQL-based application, the typical choice pattern is to start with building components — brilliantly simple UI components — that declare their data needs of which you can fetch using GraphQL queries. After a few data loading wins, you&#8217;re ready for something a little bit more complex — the infamous <em>List</em> component. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">export function SimpleGroceryList() {\n  const { data } = useQuery(gql`\n    query SimpleGroceryListQuery {\n      groceries {\n        id\n        name\n      }\n    }\n  `);\n\n  return (\n    <ul>\n      {data.groceries.map((grocery) => (\n        <li key={grocery.id}>\n          {grocery.name}\n        </li>\n      ))}\n    </ul>\n  );\n}</code></pre>\n\n\n\n<p>As shown above, we can write a single query that fetches the entire list, and for each item, we get back the id and name. Now, sometimes this is about all you need. Other times, though, rendering a list item is not so simple, and before long, we&#8217;re asking ourselves an age-old question:&nbsp;<em>should the list item be a separate componen</em>t?&nbsp;</p>\n\n\n\n<h3><a href=\"#refactoring-to-list-items\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"refactoring-to-list-items\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring to list items</h3>\n\n\n\n<p>We need to be aware of a tipping point here. When the complexity of the markup begins to hurt your head, keeping a stronger separation of concerns can be hugely beneficial (this doesn&#8217;t just apply to lists, but also any parent/child relationship in your render tree). The example we present here as a demonstration is relatively light, but we&#8217;ve seen some pretty gnarly scenarios. Let&#8217;s refactor this into two components. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// item\nexport function GroceryListItem({ grocery }) {\n  return (\n    <li>\n      {grocery.name} x {grocery.quantity}\n    </li>\n  );\n}\n\n// list\nexport function GroceryList() {\n  const { data } = useQuery(gql`\n    query GroceryListQuery {\n      groceries {\n        id\n        name\n        quantity\n      }\n    }\n  `);\n\n  return (\n    <ul>\n      {data.groceries.map((grocery) => (\n        <GroceryListItem key={grocery.id} grocery={grocery} />\n      ))}\n    </ul>\n  );\n}</code></pre>\n\n\n\n<h3><a href=\"#refactoring-to-separate-files\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"refactoring-to-separate-files\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring to separate files</h3>\n\n\n\n<p>We might tolerate these two components sharing the same file at first, but as complexity scales up, it often becomes harder to maintain without refactoring GroceryListItem into its own file.&nbsp;</p>\n\n\n\n<p> We now have GroceryListItem.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// GroceryListItem.jsx\nexport function GroceryListItem({ grocery }) {\n  return (\n    <li>\n      {grocery.name} x {grocery.quantity}\n    </li>\n  );\n}</code></pre>\n\n\n\n<p>And we have the cleaner GroceryList component as well.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// GroceryList.jsx\nexport function GroceryList() {\n  const { data } = useQuery(gql`\n    query GroceryListQuery {\n      groceries {\n        id\n        name\n        quantity\n      }\n    }\n  `);\n\n  return (\n    <ul>\n      {data.groceries.map((grocery) => (\n        <GroceryListItem key={grocery.id} grocery={grocery} />\n      ))}\n    </ul>\n  );\n}</code></pre>\n\n\n\n<p>While this separation of the parent and child component reduces clutter, it comes with two slight disadvantages we need to address.</p>\n\n\n\n<h3><a href=\"#disadvantage-1-undiscoverable-data-dependencies\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"disadvantage-1-undiscoverable-data-dependencies\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disadvantage #1 — Undiscoverable data dependencies</h3>\n\n\n\n<p>Once we split the files apart, we lose the ability to scan the GraphQL query and compare it with the usage of the data in our UI code. So what can we do?&nbsp;</p>\n\n\n\n<p> In the early days of React, to clarify the data dependencies of GroceryListItem, we might try addressing this with “PropTypes”. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// GroceryListItem.jsx\nexport function GroceryListItem({ grocery }) {\n  return (\n    <li>\n      {grocery.name} x {grocery.quantity}\n    </li>\n  );\n}\n\n// re-describe our component's data dependencies\nGroceryItemList.propTypes = {\n  grocery: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    quantity: PropTypes.number.isRequired,\n  }).isRequired,\n};</code></pre>\n\n\n\n<p>PropTypes work, but it also exposes another disadvantage: duplicating data dependencies.</p>\n\n\n\n<h3><a href=\"#disadvantage-2-duplicating-data-dependencies\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"disadvantage-2-duplicating-data-dependencies\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disadvantage #2 — Duplicating data dependencies</h3>\n\n\n\n<p>Regardless of if you&#8217;re using PropTypes or TypeScript to define component props, we still have a lot of typing to do. We&#8217;re duplicating the shape of our component&#8217;s data in two places: first in the GraphQL query and again in the component&#8217;s property list, which indeed makes fingers tired.</p>\n\n\n\n<h2><a href=\"#fragments-to-the-rescue\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"fragments-to-the-rescue\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragments to the rescue</h2>\n\n\n\n<p>At their core,&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/react/data/fragments/\" rel=\"noreferrer noopener\">GraphQL fragments</a>&nbsp;are just small pieces (or &#8220;fragments&#8221;) of a larger GraphQL query. But how can they help us in this situation?</p>\n\n\n\n<h3><a href=\"#express-child-component-data-dependencies\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"express-child-component-data-dependencies\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express child component data dependencies</h3>\n\n\n\n<p>With fragments, we can bring back the benefits of co-locating our data dependencies with our UI code, but in a more distributed way across the application. In the following code, we define a fragment with only the data that we need and export it for inclusion in the parent query. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// GroceryItemList.tsx\n\nexport const groceryListItemFragment = gql`\n  fragment GroceryListItemFragment on Grocery {\n    name\n    quantity\n  }\n`;\n\n/**\n * Automatically generated fragment type (you don't have to type this!)\n *\nexport interface GroceryListItemFragment {\n  name: string;\n  quantity: number;\n}\n*/\n\ninterface Props {\n  grocery: GroceryListItemGroceryFragment;\n}\n\nexport function GroceryListItem({ grocery }: Props) {\n  return (\n    <li>\n      {grocery.name} x {grocery.quantity}\n    </li>\n  );\n}</code></pre>\n\n\n\n<h3><a href=\"#less-typing-no-duplication\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"less-typing-no-duplication\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Less typing, no duplication</h3>\n\n\n\n<p>Not only do fragments act as a way to express data dependencies, but&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/blog/tooling/apollo-codegen/typescript-graphql-code-generator-generate-graphql-types/\" rel=\"noreferrer noopener\">using Apollo codegen</a>, we can type the data dependencies once and auto-generate Typescript types to ensure we pass the exact shape of data we need.&nbsp;</p>\n\n\n\n<h3><a href=\"#detect-breaking-api-changes\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"detect-breaking-api-changes\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detect breaking API changes</h3>\n\n\n\n<p>We automatically generate typings using the schema from our GraphQL API.&nbsp;</p>\n\n\n\n<p>If we take advantage of a schema repository like the one provided through Apollo Studio, we can generate your types for our queries against whichever graph variant you need.&nbsp;</p>\n\n\n\n<p>The auto-generated typings are useful because we can run `apollo codegen:generate` in the CI to ensure that all of the queries and fragments we&#8217;re requesting are available in the API when the code goes live.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"570\" height=\"696\" src=\"/static/4a3280a2235104e91541d119027166fa/graphql-schema-checks.png\" alt=\"\" class=\"wp-image-7539\" srcset=\"/static/4a3280a2235104e91541d119027166fa/graphql-schema-checks.png 570w, https://wp.apollographql.com/wp-content/uploads/2021/05/graphql-schema-checks-246x300.png 246w\" sizes=\"(max-width: 570px) 100vw, 570px\" /></figure>\n\n\n\n<p>To get started with&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/studio/schema-checks/\" rel=\"noreferrer noopener\">schema checks</a>&nbsp;and several other free GraphQL tools to help you build better, safer, and faster, register your graph @&nbsp;<a target=\"_blank\" href=\"https://studio.apollographql.com/dev\" rel=\"noreferrer noopener\">https://studio.apollographql.com/dev</a>.</p>\n\n\n\n<h3><a href=\"#using-fragments-in-parent-components\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"using-fragments-in-parent-components\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using fragments in parent components</h3>\n\n\n\n<p>Going back to our example, in the parent list component, we import the fragment into our query and fetch the data for each grocery item as before.&nbsp;</p>\n\n\n\n<p>Notice that we also request the id field in addition to GroceryListItemFragment , clarifying that GroceryList has a dependency on id but no other fields.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// GroceryList.tsx\n\nimport { groceryListItemFragment, GroceryListItem } from './GroceryListItem';\n\nexport function GroceryList() {\n  const { data } = useQuery(gql`\n    query GroceryListQuery {\n      groceries {\n        id\n        ...GroceryListItemFragment // fragment is \"spread\" here\n      }\n    }\n    ${groceryListItemFragment} // also include the fragment definition in the query\n  `);\n\n  return (\n    <ul>\n      {data.groceries.map((grocery) => (\n        <GroceryListItem key={grocery.id} grocery={grocery} />\n      ))}\n    </ul>\n  );\n}</code></pre>\n\n\n\n<p>Nice! What happens if we decide to add another piece of information to the list item? We modify our fragment definition, re-run code generation, and voila — and we have updated our strong types. We&#8217;ve also maintained the separation of concerns between fetching the list and describing how we render an item.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>When we started building&nbsp;<a target=\"_blank\" href=\"https://studio.apollographql.com/dev\" rel=\"noreferrer noopener\">Apollo Studio&#8217;s</a>&nbsp;frontend application, it was way back in the early days of React 14. We were making heavy use of GraphQL but still figuring out best practices. As our codebase began to expand in scope and complexity, we started to develop more scalable patterns and developed many new strategies for weaving together GraphQL, Typescript, and UI functionality. Some of the big lessons were the many benefits that fragments provide:</p>\n\n\n\n<ul><li>Declaring fragments alongside UI code allows you to separate concerns between parent components and children.</li><li>Defining and exporting fragments makes components more re-usable since data dependencies are expressively declared, and parents can compose as needed.</li><li>Using fragments allows you to make a single query to fetch data for multiple components at once, reducing the need for repeated round-trips to the server.</li><li>Automatic type generation FTW. Strict build-time checking prevents bugs before they happen; codegen eliminates duplication of code to describe data shapes across the component boundary.</li></ul>\n\n\n\n<p>Hopefully, this helps solve some problems that you might have in your codebase. Thanks for reading!</p>\n",
                    "slug": "using-graphql-fragments-for-safer-cleaner-and-faster-code",
                    "path": "/graphql/fragments/using-graphql-fragments-for-safer-cleaner-and-faster-code/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Apollo Client"
                            },
                            {
                                "name": "Fragments"
                            },
                            {
                                "name": "GraphQL"
                            }
                        ]
                    },
                    "excerpt": "<p>Whether you&#8217;re just getting started with building GraphQL applications or you&#8217;ve done it for years, you probably have a decent understanding of&nbsp;what GraphQL queries are. But what about GraphQL fragments?&nbsp; &nbsp;In this article, we&#8217;ll delve into some common use-cases where fragments shine, learn how to get the most out of them, and hopefully, I&#8217;ll inspire [&hellip;]</p>\n",
                    "date": "2021-05-31T10:30:01",
                    "modified": "2021-05-27 10:55:47",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/02/graphql-banner-771d02dce87b6282bbd1eab221fba366-771d02dce87b6282bbd1eab221fba366.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Tim Hingston"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3MDAz",
                    "title": "Introducing Build Checks and Webhooks In Apollo Studio",
                    "content": "\n<blockquote class=\"wp-block-quote\"><p>Federation Support in Apollo Studio Just Got a Whole Lot Better</p></blockquote>\n\n\n\n<p><br>Preventing breaking changes when working on a shared data graph is critical. Last year, we launched <a href=\"https://www.apollographql.com/blog/introducing-the-new-graphql-ci-in-apollo-studio/\" target=\"_blank\" rel=\"noreferrer noopener\">schema checks in Apollo Studio</a> to help you collaborate on your graph with confidence. Checks validate your<em> </em>schema changes against historical operations to ensure your changes<em> will not</em> break your clients. However, for <a href=\"https://www.apollographql.com/docs/federation/\" target=\"_blank\" rel=\"noreferrer noopener\">federated</a> graphs, in addition to checking that your operations won&#8217;t break, we also need to check to see whether the <a href=\"https://www.apollographql.com/docs/rover/supergraphs\" target=\"_blank\" rel=\"noreferrer noopener\">supergraph</a> schema is successfully built, meaning that it successfully composed the supergraph schema from the underlying subgraph schemas. Before today, our platform did build checks but didn&#8217;t expose the results in Studio, which required going into the CLI to see why a supergraph build failed.</p>\n\n\n\n<p>Here at Apollo, we understand how important it is to have visibility of your federated graph’s composition, and<strong> we’re delighted to announce <a href=\"https://www.apollographql.com/docs/studio/schema-checks/#federated-composition-checks\" target=\"_blank\" rel=\"noreferrer noopener\">build checks</a> and <a href=\"https://www.apollographql.com/docs/studio/build-status-notification/\" target=\"_blank\" rel=\"noreferrer noopener\">webhooks</a> to help you better understand the impact of schema changes, update your data graph faster, and allow more teams to contribute to the graph safely. 🎉</strong></p>\n\n\n\n<h2><a href=\"#build-checks-for-federated-graphs\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"build-checks-for-federated-graphs\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build checks for federated graphs</h2>\n\n\n\n<p>With the addition of build checks, you will now have better visibility into why a build failed for your subgraph’s schema changes. With this release comes a few additions and improvements:</p>\n\n\n\n<ul><li><strong><strong>Better visibility</strong>: </strong>If the build fails, the build page will display all errors that occurred when trying to compose your changes. You’ll also be able to download or copy the subgraph schema and the resulting supergraph schema when available. Use the downloaded schema for codegen, linting, or mocking!</li><li><strong><strong>Better UX</strong>: </strong>The recent checks page now introduces filters. Use these filters to quickly find checks based on the check status, author, subgraph, or branch, helping you find what you’re looking for and surface root cause faster.</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-1024x571.png\" alt=\"GraphQL build errors example\" class=\"wp-image-7593\" width=\"610\" height=\"340\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-1024x571.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-300x167.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-768x428.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-1536x857.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-2048x1142.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-1200x669.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/build-errors-1980x1104.png 1980w\" sizes=\"(max-width: 610px) 100vw, 610px\" /><figcaption><strong>Example of failed build check</strong></figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"537\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-1024x537.png\" alt=\"GraphQL successful build \" class=\"wp-image-7595\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-1024x537.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-300x157.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-768x403.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-1536x806.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-2048x1074.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-1200x629.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-12.28.33-PM-1980x1038.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>Example of a <strong>successful</strong> build check</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"494\" height=\"464\" src=\"/static/dc6d5f7b2bc5b1e390d4e87c6828562a/ScreenRecording2021-04-13at01.29.39PM.gif\" alt=\"Apollo Studio GraphQL subgraph filter\" class=\"wp-image-7597\"/><figcaption>New filtering capability with checks</figcaption></figure>\n\n\n\n<h2><a href=\"#build-webhooks\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"build-webhooks\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Webhooks</h2>\n\n\n\n<p>We’ve also made it possible to configure build webhooks for your graph so that you can be notified when a new schema is built and ready to ship to your running gateway. You can also use this to alert on broken builds so that you can more quickly resolve errors when they happen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"773\" height=\"620\" src=\"/static/2f92e85da022e42faf4c2d28a4dbd287/Screen-Shot-2021-05-27-at-3.55.01-PM.png\" alt=\"Apollo Studio GraphQL build webhooks notifications\" class=\"wp-image-7599\" srcset=\"/static/2f92e85da022e42faf4c2d28a4dbd287/Screen-Shot-2021-05-27-at-3.55.01-PM.png 773w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-27-at-3.55.01-PM-300x241.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen-Shot-2021-05-27-at-3.55.01-PM-768x616.png 768w\" sizes=\"(max-width: 773px) 100vw, 773px\" /><figcaption>Set up a webhook to get notified when supergraph schema is built</figcaption></figure>\n\n\n\n<p>Webhooks are part of the Studio Enterprise plan. Please <a href=\"https://www.apollographql.com/contact-sales/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_CompositionChecksWebhooksBlog\" target=\"_blank\" rel=\"noreferrer noopener\">reach out to us</a> if you are interested in this feature.<br></p>\n\n\n\n<h2><a href=\"#get-started\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"get-started\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get started</h2>\n\n\n\n<p>Want to try out the new check experience today? See the <a href=\"https://www.apollographql.com/docs/studio/schema-checks/#federated-composition-checks\" target=\"_blank\" rel=\"noreferrer noopener\">docs</a> to learn more and see how to try it out!</p>\n\n\n\n<p></p>\n",
                    "slug": "build-checks-webhooks-apollo-studio",
                    "path": "/announcement/build-checks-webhooks-apollo-studio/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Announcement"
                            },
                            {
                                "name": "Platform"
                            }
                        ]
                    },
                    "excerpt": "<p>Federation Support in Apollo Studio Just Got a Whole Lot Better Preventing breaking changes when working on a shared data graph is critical. Last year, we launched schema checks in Apollo Studio to help you collaborate on your graph with confidence. Checks validate your schema changes against historical operations to ensure your changes will not [&hellip;]</p>\n",
                    "date": "2021-05-27T17:17:07",
                    "modified": "2021-06-01 12:08:18",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/05/image-7.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Caydie Tran"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3NDI4",
                    "title": "9 Ways To Secure your GraphQL API — GraphQL Security Checklist",
                    "content": "\n<p>So you&#8217;ve built out your GraphQL API, and you&#8217;re nearly ready to deploy it to production. Fantastic. Let&#8217;s talk security: a significant part of every stable application on the internet. It&#8217;s worth taking some time to mitigate the most common issues.</p>\n\n\n\n<p>In this article, we will explore three main areas for how to secure your GraphQL API. We&#8217;ll learn how to set up a reasonable auth strategy and limit the GraphQL attack surface area. Finally, we&#8217;ll cover how to use Apollo Studio to enhance your application performance monitoring and provide more secure internal access to your production data.</p>\n\n\n\n<h2><a href=\"#auth\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"auth\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth</h2>\n\n\n\n<h3><a href=\"#1-authentication\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"1-authentication\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Authentication</h3>\n\n\n\n<p>Authentication is determining whether a given user is logged in and subsequently remembering who they are. Authentication can provide context to a session and personalize the type of data that a user sees.</p>\n\n\n\n<h3><a href=\"#2-authorization\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"2-authorization\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Authorization</h3>\n\n\n\n<p>Authorization is then determining what a given user has&nbsp;<em>permission</em>&nbsp;to do or see. In GraphQL, we&#8217;d use this to manage access to particular queries and mutations based on identity, role, or permissions.</p>\n\n\n\n<h3><a href=\"#getting-started-with-auth\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"getting-started-with-auth\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started with auth</h3>\n\n\n\n<p>We recommend using&nbsp;<a target=\"_blank\" href=\"https://jwt.io/introduction\" rel=\"noreferrer noopener\">JSON Web Tokens (or JWTs)</a>&nbsp;to manage user auth. JWTs provide a mechanism that enables us to determine whether a token is valid, and thus — if a user is authenticated. JWTs also allow us to encode permissions about a user; we use permissions to restrict or permit GraphQL operations.</p>\n\n\n\n<p>To learn how to set up authentication and authorization in an Apollo Server instance, read the official&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/apollo-server/security/authentication/\" rel=\"noreferrer noopener\">authentication &amp; authorization docs</a>.</p>\n\n\n\n<p>Setting up auth in the context of a federated data graph requires some special considerations to receive and verify access tokens at the gateway level of the API and forward them to implementing services to manage access to its queries. Read &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/blog/backend/auth/setting-up-authentication-and-authorization-apollo-federation/\" rel=\"noreferrer noopener\">Setting Up Authentication and Authorization with Apollo Federation</a>&#8221; on the Apollo blog to learn more about this.</p>\n\n\n\n<h2><a href=\"#reducing-your-graphql-api-attack-surface-area\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"reducing-your-graphql-api-attack-surface-area\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducing your GraphQL API attack surface area</h2>\n\n\n\n<p>Even with authentication and authorization, the attack surface area is still sufficiently large. In this section, we&#8217;ll cover techniques to protect both the performance of your graph and the data behind it.</p>\n\n\n\n<h3><a href=\"#3-mitigate-malicious-queries\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"3-mitigate-malicious-queries\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Mitigate malicious queries</h3>\n\n\n\n<p><strong>Limit query depth</strong></p>\n\n\n\n<p>GraphQL gives clients the ability to ask for data in a variety of different ways. Because of the various entry-points available to request data, it&#8217;s possible to write exceptionally large nested queries like the following.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query {\n  author(id: 42) {\n    posts {\n      author {\n        posts {\n          author {\n            posts {\n              author {\n                # and so on...\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>Queries like this are dangerous because they&#8217;re expensive to compute. They could crash our API and take up all available resources.</p>\n\n\n\n<p>We recommend using a library like&nbsp;<a target=\"_blank\" href=\"https://github.com/stems/graphql-depth-limit\" rel=\"noreferrer noopener\">graphql-depth-limit</a>&nbsp;to specify the max depth across your queries to mitigate this problem.</p>\n\n\n\n<p><strong>Paginate list fields where appropriate</strong></p>\n\n\n\n<p>Query&nbsp;<em>depth</em>&nbsp;isn&#8217;t the only thing to worry about. We should also be conscious of how query&nbsp;<em>amount</em>&nbsp;could affect the performance of our API.</p>\n\n\n\n<p>In the following example, if there were 10 authors, each with 100 posts, this query would attempt to return 100,000 nodes.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query {\n  authors(first: 1000) {\n    name\n    posts(last: 100) {\n      title\n      content\n    }\n  }\n}</code></pre>\n\n\n\n<p>Running a query like this would undoubtedly slow down (if it doesn&#8217;t DoS) your server.</p>\n\n\n\n<p>To prevent this from happening, we recommend using pagination when appropriate, capping the input number in your resolver, or using a library like&nbsp;<a target=\"_blank\" href=\"https://github.com/joonhocho/graphql-input-number\" rel=\"noreferrer noopener\">graphql-input-number</a>&nbsp;to limit the possible input size.</p>\n\n\n\n<p><strong>Improve validation and sanitization</strong></p>\n\n\n\n<p>Validation and sanitization are standard web application security practices. When you accept data from a user, one should always expect that user-provided data could be malicious.</p>\n\n\n\n<p>There are two especially malicious techniques in this area:&nbsp;<em>data exfiltration</em>&nbsp;and&nbsp;<em>data destruction</em>.</p>\n\n\n\n<p>Data exfiltration is when a client writes a malicious query containing SQL or NoSQL code that tricks the database into returning more data than originally intended. For example, the following un-sanitized query could trick a SQL-based data source into returning all of the fields for a user, including their email and hashed password.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query User {\n  user (id: \"User*\") {\n    email\n    id \n  }\n}</code></pre>\n\n\n\n<p>The other technique (data destruction) is when a client writes a malicious query — again containing some database-layer code — that can destroy production data when executed.</p>\n\n\n\n<p>There are various ways to prevent this vulnerability. We recommend following the usual rules for web application sanitization in addition to the&nbsp;<a target=\"_blank\" href=\"https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#general-practices\" rel=\"noreferrer noopener\">OSWAP GraphQL-specific recommendations</a>&nbsp;like:</p>\n\n\n\n<ul><li>Reject invalid input without giving away too many details</li><li>Leverage the GraphQL schema to support validation</li><li>Beware of using JSON scalars (they are a lot more prone to malicious queries if not properly sanitized —&nbsp;<a target=\"_blank\" href=\"http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/\" rel=\"noreferrer noopener\">read here</a>)</li></ul>\n\n\n\n<p><strong>Use timeouts</strong></p>\n\n\n\n<p>When we request data from downstream services or data sources, there are various reasons why it may take a long time to respond. The services may be down, queries may be expensive, or something else might be going on. Regardless of the reason, we don&#8217;t want our GraphQL API to hang for too long, waiting for a response.</p>\n\n\n\n<p>To prevent this, we recommend using timeouts to keep from slow or unresponsive services impacting performance for subsequent queries.</p>\n\n\n\n<p>In a federated context, you could use a fetcher pattern as follows:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">const gateway = new ApolloGateway({\n  // ...\n  buildService({ name, url }) {\n    // Sets a 3 second timeout on requests \n    // to subgraph\n    const fetcher = (input, init) => {\n      if (init) {\n        init.timeout = 3000;\n      } else {\n        init = { timeout: 3000 };\n      }\n      return fetch(input, init);\n    };\n    return new RemoteGraphQLDataSource({ url, fetcher });\n  }\n});</code></pre>\n\n\n\n<p>It&#8217;s worthwhile to explore other places to use timeouts as well:</p>\n\n\n\n<ul><li>On requests to the gateway&#8217;s Node HTTP server</li><li>On requests to the subgraphs services</li><li>On resolver functions (and using REST data sources)</li></ul>\n\n\n\n<p><strong>Rate limit APIs</strong></p>\n\n\n\n<p>Rate limiting is when you dictate how many requests a client can make per some time. Often, we use rate-limiting to prevent brute-forcing login details, scraping data, or denial of service attacks.</p>\n\n\n\n<p>To implement this, we recommend two approaches:</p>\n\n\n\n<ul><li>GitHub&#8217;s approach: Maximum node limit and a rate limit score based on the total number of requests in a query (<a target=\"_blank\" href=\"https://docs.github.com/en/graphql/overview/resourcelimitations\" rel=\"noreferrer noopener\">read about it here</a>)</li><li>Shopify&#8217;s approach: Query cost points and the leaky bucket algorithm (<a target=\"_blank\" href=\"https://shopify.dev/concepts/about-apis/rate-limits\" rel=\"noreferrer noopener\">read about it here</a>)</li></ul>\n\n\n\n<p><strong>Query cost analysis</strong></p>\n\n\n\n<p>Despite our best efforts using query depth and amount limiting techniques, it&#8217;s still possible to overload the server with semantically expensive queries. Sometimes we can&#8217;t just look at the depth or potential amount of nodes.</p>\n\n\n\n<p>For example, at Spectrum, the following query would be expensive:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query evilQuery {\n  thread(id: \"54887141-57a9-4386-807c-ed950c4d5132\") {\n    messageConnection(first: 100) { ... }\n    participants(first: 100) {\n      threadConnection(first: 100) { ... }\n      communityConnection { ... }\n      channelConnection { ... }\n      everything(first: 100) { ... }\n    }\n  }\n}</code></pre>\n\n\n\n<p>We recommend the&nbsp;<a target=\"_blank\" href=\"https://github.com/pa-bru/graphql-cost-analysis\" rel=\"noreferrer noopener\">query-cost-analysis GitHub package</a>&nbsp;as a way to analyze queries for complexity and block them if they&#8217;re too expensive.</p>\n\n\n\n<p>To learn more on this topic, read &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/blog/graphql/security/securing-your-graphql-api-from-malicious-queries/\" rel=\"noreferrer noopener\">Securing Your GraphQL API from Malicious Queries</a>&#8221; and &#8220;A Principled Approach to GraphQL Query Cost Analysis (<a target=\"_blank\" href=\"https://arxiv.org/pdf/2009.05632.pdf\" rel=\"noreferrer noopener\">paper/video</a>).&#8221;</p>\n\n\n\n<p><strong>Safelist operations</strong></p>\n\n\n\n<p>A catchall approach for preventing unwanted queries is to maintain a list of approved queries allowed in your application.</p>\n\n\n\n<p>Automatic persisted queries are a feature of Apollo Server 2 that enables query whitelisting and persisted queries.</p>\n\n\n\n<p>To learn more, read the&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/apollo-server/performance/apq/\" rel=\"noreferrer noopener\">automatic persisted queries docs</a>.</p>\n\n\n\n<h3><a href=\"#4-limit-api-discoverability\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"4-limit-api-discoverability\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Limit API discoverability</h3>\n\n\n\n<p>This next section is about security by obscurity — a way to reduce the attack surface by making it harder for malicious parties to discover API capabilities.</p>\n\n\n\n<p><strong>Turn off introspection in production</strong></p>\n\n\n\n<p>Introspection is a technique to provide detailed information about a GraphQL API&#8217;s schema.</p>\n\n\n\n<p>While introspection is primarily helpful for diagnostic and GraphQL tooling in development, we recommend turning it off in production. Doing so prevents accidentally sharing business secrets and vastly reduces the ability of a malicious actor to discover how to abuse a GraphQL API.</p>\n\n\n\n<p>For a more in-depth discussion and to learn how to turn introspection off in production, read &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/blog/graphql/security/why-you-should-disable-graphql-introspection-in-production/\" rel=\"noreferrer noopener\">Why You Should Disable GraphQL Introspection In Production – GraphQL Security</a>&#8220;.</p>\n\n\n\n<p><strong>Mask errors</strong></p>\n\n\n\n<p>When server or downstream service errors occur, it&#8217;s a good idea to withhold the exact specifics of what went wrong from the client.</p>\n\n\n\n<p>Informing the client about error details in the server exposes the current server vulnerabilities and opens the door for more concentrated attacks.</p>\n\n\n\n<p>For example, the following error reveals information about the source code and even, potentially, the type of databases we may be using.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\"data\": {\n\t \"astronaut\": null\n },\n \"errors\": [\n\t {\n\t\t \"message\": \"Database Error: Astronaut does not exist\",\n\t\t \"extensions\": {\n\t\t \"code\": \"INTERNAL_SERVER_ERROR\",\n\t\t // ...\n\t\t \"exception\": {\n\t\t \"stacktrace\": [\n\t\t\t \"Database Error: User does not exist\",\n\t\t\t\t \" at __resolveReference (../services/vehicles/index.js:29:13)”,\n\t\t\t\t // ...\n\t\t\t\t],\n\t\t\t\t// …\n\t\t\t }\n\t\t\t}\n\t\t}\n\t]\n}</code></pre>\n\n\n\n<p>To prevent this issue, swallow errors before they get to the client. You can use the formatError API in Apollo Server to implement this.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">const server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  formatError: (err) => {\n    // Don't give the specific errors to the client\n    if (err.message.startsWith('Database Error: ')) {\n      return new Error('Internal server error');\n     }\n     // Otherwise return the original error\n     return err;\n  },\n});</code></pre>\n\n\n\n<p>Read more about this in &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/apollo-server/data/errors/#masking-and-logging-errors\" rel=\"noreferrer noopener\">Masking and Logging Errors</a>&#8221; from the Apollo docs.</p>\n\n\n\n<p><strong>Avoid schema autogeneration</strong></p>\n\n\n\n<p>Many tools will autogenerate a GraphQL schema based on database tables, etc.</p>\n\n\n\n<p>While these tools tend to speed you up in the short run, they make it very easy to guess fields on the root operation types based on CRUD patterns.</p>\n\n\n\n<p>We recommend following the principle of a&nbsp;<em>demand-oriented schema</em>&nbsp;(see&nbsp;<a target=\"_blank\" href=\"https://principledgraphql.com/agility#4-abstract-demand-oriented-schema\" rel=\"noreferrer noopener\">PrincipledGraphQL</a>) — that is, to build your schema tailored to what the client needs are and to do so by hand. Because a demand-oriented schema is custom-built, it benefits from reducing the predictability of the graph structure, thus reducing the attack surface area.</p>\n\n\n\n<p><strong>Query subgraphs only (in Apollo federation)</strong></p>\n\n\n\n<p>Federated schemas will have _entities and _service queries to assist with composition and query planning• The SDL field on the _service root query field fetches the subgraph schema SDL.</p>\n\n\n\n<p>As a best practice, only allow an Apollo Gateway to query subgraph services directly, not the clients.</p>\n\n\n\n<p>Read more about&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/federation/subgraphs/\" rel=\"noreferrer noopener\">subgraphs</a>&nbsp;and the&nbsp;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/federation/federation-spec/#federation-schema-specification\" rel=\"noreferrer noopener\">federation specification</a>&nbsp;here.</p>\n\n\n\n<h3><a href=\"#5-batch-requests\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"5-batch-requests\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Batch requests</h3>\n\n\n\n<p><strong>Limit query breadth</strong></p>\n\n\n\n<p>Here&#8217;s one more particularly GraphQL-specific vulnerability. Clients can use aliases to write batch queries like the following:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query MaliciousQuery {\n  alias1: fieldName { subField1 subField2 ...}\n  alias2: fieldName { subField1 subField2 ...}\n  ...\n  alias10: fieldName { subField1 subField2 ...}\n  ...\n  alias100: fieldName { subField1 subField2 ...\n  ...\n  alias1000: fieldName { subField1 subField2 ...}\n  ...\n}</code></pre>\n\n\n\n<p>Someone may write a query like this to hurt performance purposefully, scrape as much data as fast as possible, or attempt to mitigate rate-limiting. For example, consider the scenario of brute-forcing login credentials:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query Mutation (\n  $input1: LoginInput, \n  $input2: LoginInput, \n  $input3: LoginInput\n  # ... And more\n) {\n  first: login (input: $input1) {\n    token\n   }\n\n  second: login (input: $input2) {\n    token\n  }\n\n  third: login (input: $input3) {\n    token\n  }\n\n  # .. And so on\n}</code></pre>\n\n\n\n<p>To prevent this, we can use a combination of techniques we&#8217;ve previously discussed. Rate-limiting and query complexity analysis will work.</p>\n\n\n\n<p><strong>Use data loaders to prevent DoS-ing yourself</strong></p>\n\n\n\n<p>If you&#8217;re resolving data from backing data sources (like a REST API or a subgraph), you&#8217;ll want to make efficient use of the network to prevent DoS-ing yourself.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"336\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM-1024x336.png\" alt=\"\" class=\"wp-image-7429\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM-1024x336.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM-300x98.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM-768x252.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM-1200x394.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.09.58_PM.png 1524w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>A great technique is to use data loaders to minimize the number of requests to backing data sources from resolvers:</p>\n\n\n\n<p>Read about&nbsp;<a target=\"_blank\" href=\"https://github.com/graphql/dataloader\" rel=\"noreferrer noopener\">data loaders here</a>. Also, consider caching as an approach to mitigating the number of necessary requests. You can implement caching at various levels like the gateway or the subgraph level in the context of a federated architecture. Read &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/apollo-server/data/data-sources/#using-memcachedredis-as-a-cache-storage-backend\" rel=\"noreferrer noopener\">Using Memcached/Redis as a cache storage backend</a>&#8221; to learn more.</p>\n\n\n\n<h2><a href=\"#observability-monitoring-alerting-access\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"observability-monitoring-alerting-access\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Observability, monitoring, alerting &amp; access</h2>\n\n\n\n<p>Beyond protecting your GraphQL API from bad actors and locking down private data, to improve your GraphQL security posture, you also need a window into how your API is being used and by whom. You&#8217;ll also want to know when there are performance anomalies and how to manage access to your graph safely. That&#8217;s where&nbsp;<a target=\"_blank\" href=\"http://studio.apollographql.com/dev\" rel=\"noreferrer noopener\">Apollo Studio</a>&nbsp;comes into play.</p>\n\n\n\n<h3><a href=\"#6-observability\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"6-observability\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Observability</h3>\n\n\n\n<p>With observability, we can figure out what&#8217;s happening with our data graph in production and get a detailed understanding of who is using our graph, which clients called operations, and how long they take to execute.</p>\n\n\n\n<p>To get this enhanced API understandability, we consistently name operations and force clients to identify themselves using our graph.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"610\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-1024x610.png\" alt=\"\" class=\"wp-image-7431\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-1024x610.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-300x179.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-768x458.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-1536x915.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-2048x1220.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-1200x715.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.16.54_PM-1980x1179.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>We can set this up with&nbsp;<a target=\"_blank\" href=\"https://studio.apollographql.com/dev\" rel=\"noreferrer noopener\">Apollo Studio&#8217;s</a>&nbsp;Client Awareness feature. For more info and to get started, read &#8220;Who&#8217;s<a target=\"_blank\" href=\"https://www.apollographql.com/blog/announcement/platform/how-apollo-studio-client-awareness-improved-our-lives/\" rel=\"noreferrer noopener\">&nbsp;Using My Graph? — Apollo Studio Client Awareness</a>&#8220;.</p>\n\n\n\n<h3><a href=\"#7-monitoring\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"7-monitoring\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Monitoring</h3>\n\n\n\n<p>Apollo Studio also makes it easy to leverage field and operation-level tracing data to monitor API performance and errors.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"649\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-1024x649.png\" alt=\"\" class=\"wp-image-7433\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-1024x649.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-300x190.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-768x487.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-1536x974.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-2048x1298.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-1200x761.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.24_PM-1980x1255.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3><a href=\"#8-performance-alerts\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"8-performance-alerts\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Performance alerts</h3>\n\n\n\n<p>And you can also configure alerts to push notifications to you when something goes wrong, whether it&#8217;s an increase in requests per minute, changes in your p50, 95, or 99 response times, or errors in operations run against your graph.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"606\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-1024x606.png\" alt=\"\" class=\"wp-image-7435\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-1024x606.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-300x177.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-768x454.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-1536x909.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-2048x1212.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-1200x710.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/Screen_Shot_2021-05-20_at_5.17.12_PM-1980x1171.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>Read more about &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/studio/performance-alerts/\" rel=\"noreferrer noopener\">Performance alerts</a>&#8221; in Apollo Studio on the Apollo docs.</p>\n\n\n\n<h3><a href=\"#9-managing-graph-access\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"9-managing-graph-access\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Managing graph access</h3>\n\n\n\n<p>Just as important as it is to set limitations around how the outside world interacts with your data graph, you also want to manage access to different aspects of your graph internally too.</p>\n\n\n\n<p>Apollo Studio provides both graph API keys and personal API keys to restrict access to the data graphs within your organization.</p>\n\n\n\n<p>Apollo Studio also has unlimited, free read-only consumer seats. That means if you have non-developers on your team that want to safely and securely explore production data, you can generate a sharable link to invite them to your graph.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"600\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/pasted_image_0-1024x600.png\" alt=\"\" class=\"wp-image-7437\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/pasted_image_0-1024x600.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/pasted_image_0-300x176.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/pasted_image_0-768x450.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/pasted_image_0.png 1194w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>Studio gives your team members access to specific variants of your graphs.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"892\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-1024x892.png\" alt=\"\" class=\"wp-image-7439\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-1024x892.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-300x261.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-768x669.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-1536x1338.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-1200x1045.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1-1980x1725.png 1980w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784-1.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>Read more about user management in &#8220;<a target=\"_blank\" href=\"https://www.apollographql.com/docs/studio/org/members/\" rel=\"noreferrer noopener\">Managing organization members</a>&#8221; in the Apollo Studio docs.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>In this article, we covered various techniques for securing your GraphQL API in production. Authentication and authorization are the first challenges to address. Beyond that, we learned how to reduce the attack surface area for many common GraphQL-related vulnerabilities and how we can use Apollo Studio to set up observability, monitoring, alerts, and user management for your production graph.</p>\n\n\n\n<p>To get started with Apollo Studio, head to&nbsp;<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://studio.apollographql.com/dev\">studio.apollographql.com/dev</a>.</p>\n\n\n\n<p>Special thanks to the brilliant <a href=\"https://twitter.com/mandiwise\">Mandi Wise</a> for her experience securing GraphQL APIs. </p>\n",
                    "slug": "9-ways-to-secure-your-graphql-api-security-checklist",
                    "path": "/graphql/security/9-ways-to-secure-your-graphql-api-security-checklist/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "GraphQL"
                            },
                            {
                                "name": "Security"
                            }
                        ]
                    },
                    "excerpt": "<p>So you&#8217;ve built out your GraphQL API, and you&#8217;re nearly ready to deploy it to production. Fantastic. Let&#8217;s talk security: a significant part of every stable application on the internet. It&#8217;s worth taking some time to mitigate the most common issues. In this article, we will explore three main areas for how to secure your [&hellip;]</p>\n",
                    "date": "2021-05-26T11:03:58",
                    "modified": "2021-06-01 12:47:47",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/05/graphql-security-1.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3MDc2",
                    "title": "Using GraphQL with Python – A Complete Guide",
                    "content": "\n<p>Known for its ease of use and simplicity, Python is one of the most beloved general-purpose programming languages. And GraphQL, a declarative query language for APIs and server runtimes, pairs quite nicely with Python. Unfortunately, there are very few comprehensive learning materials out there that give you a step-by-step breakdown of how to use GraphQL with Python. This article will go over everything you need to know to get up and running with GraphQL API using Python, Flask, and Ariadne.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>You can find the complete code for this post <a href=\"https://github.com/Shadid12/flask-graphql\" data-type=\"URL\" data-id=\"https://github.com/Shadid12/flask-graphql\">on GitHub</a>.</p></blockquote>\n\n\n\n<h2><a href=\"#learning-objectives\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"learning-objectives\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learning objectives</h2>\n\n\n\n<p>By the end of the article, you should know how to:</p>\n\n\n\n<ul><li>Set up a Python web server with Flask</li><li>Use the Ariadne library to implement GraphQL</li><li>Compose a GraphQL Schema&nbsp;</li><li>Perform queries and mutations against a Python GraphQL API </li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>GraphQL vs REST: What problem does GraphQL solve?&nbsp;</strong><br>If you are completely new to GraphQL and want to know how it differs from a traditional REST API, I recommend reading &#8220;<a href=\"https://www.apollographql.com/blog/what-is-graphql-graphql-introduction/\">What is GraphQL? GraphQL introduction</a>&#8220;.</p></blockquote>\n\n\n\n<h2><a href=\"#setting-up-graphql-with-python-flask\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"setting-up-graphql-with-python-flask\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up GraphQL with Python (Flask)</h2>\n\n\n\n<p>​​Let&#8217;s dive into creating our very own GraphQL API with Python. For this demo, we will be using the Flask​ web server. If you are more accustomed to other frameworks such as Django,​ you can adapt this codebase to your framework. The basic concepts of GraphQL and Python are more or less the same across various frameworks.</p>\n\n\n\n<h3><a href=\"#creating-a-new-python-virtual-environment\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"creating-a-new-python-virtual-environment\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Creating a new python virtual environment</strong></h3>\n\n\n\n<p>​​First of all, let&#8217;s create a new project and change the directory to the project folder.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">mkdir graphql-python-api\ncd graphql-python-api</code></pre>\n\n\n\n<p>In Python, best practices are to use a <em>virtual environment</em>. We can create a new virtual environment by running the following command.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">python3 -m venv myapp</code></pre>\n\n\n\n<p>Next, we have to activate the virtual environment. If you are on a Linux or Mac machine you can run the <code>source</code> command with the path of the activate script like shown below.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">source myapp/bin/activate</code></pre>\n\n\n\n<p>And if you&#8217;re on a windows machine, you can run the following command to activate the virtual environment.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">myapp/bin/activate.bat</code></pre>\n\n\n\n<h3><a href=\"#installing-dependencies\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"installing-dependencies\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing dependencies</h3>\n\n\n\n<p>Our application relies on the following dependencies:</p>\n\n\n\n<ul><li>Flask — this is the web server that we’ll use</li><li>Flask-SQLAlchemy — an ORM that makes it easier for us to communicate with our SQL database</li><li>Ariadne — a library for GraphQL python integration</li><li>Flask-Cors — an extension for Cross Origin Resource Sharing</li></ul>\n\n\n\n<p>You can install them all using a single command:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">pip install flask ariadne flask-sqlalchemy flask-cors</code></pre>\n\n\n\n<h2><a href=\"#up-and-running-with-a-simple-flask-app\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"up-and-running-with-a-simple-flask-app\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Up and running with a simple Flask app</h2>\n\n\n\n<p>We will make the following directory structure. The first file we&#8217;ll start working with is the <code>api/__init__.py</code> file, which will hold all the API-related configuration code.&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620109018224_image.png\" alt=\"\"/></figure>\n\n\n\n<p>For now, let’s populate the <code>api/__init__.py</code> with the following code.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/')\ndef hello():\n    return 'My First API !!'</code></pre>\n\n\n\n<p>Our <code>app.py</code> file is what&#8217;s responsible for actually starting the flask app. Let&#8217;s import the flask API instance using the following code:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from api import app</code></pre>\n\n\n\n<p>Next, we tell Flask to start the application by looking at our <code>app.py</code> file. In the command line, we can accomplish this by setting the <code>FLASK_APP</code> environment variable. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">export FLASK_APP=app.py</code></pre>\n\n\n\n<p>Finally, we run the app by running the <code>flask run</code> command.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620109389909_image.png\" alt=\"\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620109539044_image.png\" alt=\"\"/></figure>\n\n\n\n<p>Great! We can see our Flask app up and running. Before we enable it to use GraphQL, lets hook up a database and define some tables. </p>\n\n\n\n<h3><a href=\"#adding-a-database\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"adding-a-database\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a database</h3>\n\n\n\n<p>For this example, we are going to be using a Postgres DB instance. I like&nbsp;<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.elephantsql.com/\">ElephantSQL</a>, a hosted SQL database, but you can use any SQL database you like.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620516579496_image.png\" alt=\"\"/></figure>\n\n\n\n<p>In ElephantSQL, once the instance is provisioned on the cloud, we can see the database server information. If you&#8217;re using ElephantSQL, copy the DB URL as shown below, otherwise, copy the URL to where your SQL database is &#8211; whether it&#8217;s running locally on your machine or with another hosted SQL database service.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620516927458_image.png\" alt=\"\"/></figure>\n\n\n\n<p>We can now add this database url to the __<strong>init__</strong>.py as shown below.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">\nfrom flask import Flask\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\nCORS(app)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://mycreds.db.elephantsql.com:5432/ngimluxm\"\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\ndb = SQLAlchemy(app)\n\n@app.route('/')\ndef hello():\n    return 'My First API !!'</code></pre>\n\n\n\n<p>Restart the server and make sure everything is working as usual.</p>\n\n\n\n<h3><a href=\"#creating-a-model\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"creating-a-model\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a model</h3>\n\n\n\n<p>Next, let’s create our first model. </p>\n\n\n\n<p>In our database, we are going to have a <code>Post</code> table. A <code>Post</code> will have a unique <code>id</code>, a <code>title</code>, <code>description</code>, and the <code>date</code> it was created. </p>\n\n\n\n<p>Create an <code>api/models.py</code> file and a new class called <code>Post</code> as shown below.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from app import db\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String)\n    description = db.Column(db.String)\n    created_at = db.Column(db.Date)\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"title\": self.title,\n            \"description\": self.description,\n            \"created_at\": str(self.created_at.strftime('%d-%m-%Y'))\n        }</code></pre>\n\n\n\n<p>We can update our <code>app.py</code> file to include the current models and database settings.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from api import app, db\nfrom api import models</code></pre>\n\n\n\n<p>At this point, we can use the Python interactive terminal to create our table and add some records to it. Let’s do that.</p>\n\n\n\n<p>First, let’s open the Python terminal by running the following command.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">python</code></pre>\n\n\n\n<p>Once inside the Python terminal, run the following command to create our table.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">>>> from app import db\n>>> db.create_all()</code></pre>\n\n\n\n<p>On the first line, we import the database instance and on the second, we run the <code>create_all()</code> method to create related tables based on the model we specified earlier.&nbsp;</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Troubleshoot: If you are using Mac for development, you might run into an issue where python can not find <code>psycopg</code>. To resolve this, run <code>pip install psycopg2-binary</code> within your virtual environment.</p></blockquote>\n\n\n\n<p>To verify whether the table got created or not, hop into the <code>psql</code> database console and run the following <code>SQL</code> query to get the name of all available tables.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-sql\">SELECT table_name\n  FROM information_schema.tables\n WHERE table_schema='public'\n   AND table_type='BASE TABLE';</code></pre>\n\n\n\n<p>Let&#8217;s add a few posts to the <code>Post</code> table directly from Python command prompt. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">>>> from datetime import datetime\n>>> from api.models import Post\n>>> current_date = datetime.today().date()\n>>> new_post = Post(title=\"A new morning\", description=\"A new morning details\", created_at=current_date)\n>>> db.session.add(new_post)\n>>> db.session.commit()</code></pre>\n\n\n\n<p>With a working web API connected to the database, we&#8217;re ready to integrate GraphQL into the server.</p>\n\n\n\n<h2><a href=\"#writing-the-graphql-schema\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"writing-the-graphql-schema\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the GraphQL Schema</h2>\n\n\n\n<p>A schema in GraphQL describes the shape of our data graph. It is the core of any GraphQL server implementation. It defines the functionality available to the client applications that consumes the API. GraphQL has its own language (GraphQL Schema Definition Language) that is used to write the schema. The schema determines what resources the clients can query and update.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.apollographql.com/docs/apollo-server/schema/schema/\" data-type=\"URL\" data-id=\"https://www.apollographql.com/docs/apollo-server/schema/schema/\">Learn more about GraphQL schemas in the &#8220;Schema basics&#8221; section from the docs.</a></p></blockquote>\n\n\n\n<p>Let’s go ahead and create a new file called <code>schema.graphql</code> in our root directory. Copy and paste the following code in the file.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">schema {\n    query: Query\n}\n\ntype Post {\n    id: ID!\n    title: String!\n    description: String!\n    created_at: String!\n}\n\ntype PostResult {\n    success: Boolean!\n    errors: [String]\n    post: Post\n}\n\ntype PostsResult {\n    success: Boolean!\n    errors: [String]\n    post: [Post]\n}\n\ntype Query {\n    listPosts: PostsResult!\n    getPost(id: ID!): PostResult!\n}</code></pre>\n\n\n\n<p>First of all, we have a schema type defined in the top. This determines what type of operations clients can perform. For now, clients can only perform <code>Query</code> operations.&nbsp;</p>\n\n\n\n<p>Next, observe the <code>Post</code> type. You will notice that the structure of the <code>Post</code> type is identical to our <code>Post</code> model that we defined earlier.&nbsp;<br>The <code>PostsResult</code> type defines the structure of the response object when we query for all the posts in the database. </p>\n\n\n\n<p>Similarly, <code>PostResult</code> represents the response when we query for one post in the database.</p>\n\n\n\n<p>Finally, we have the type <code>Query.</code> This type defines the query operations that our clients can perform. Currently, we have two queries: a <code>listPosts</code> query to grab all the posts from the database, and a <code>getPost</code> query to get a particular post by its <code>id</code>.&nbsp;</p>\n\n\n\n<h2><a href=\"#wiring-up-flask-server-and-graphql-with-ariadne-library\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"wiring-up-flask-server-and-graphql-with-ariadne-library\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wiring up Flask server and GraphQL with Ariadne library</h2>\n\n\n\n<p>Thus far, we have our Flask server up and running, we connected to a database, and we&#8217;ve created our first GraphQL schema. Next, we need to wire up our server with GraphQL, so that we can start using the queries/mutations defined in the schema. We will be using the <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://ariadnegraphql.org/\">Ariadne</a> library to do this.&nbsp;</p>\n\n\n\n<p>Ariadne is a lightweight Python library that lets you get up and running with GraphQL quickly. Ariadne is framework agnostic (which means you can use it with Flask, Django, or any other framework of your choice) and it uses a <strong><em>schema first </em></strong>approach to GraphQL API development. In this approach, we define our schema first (as we did for this demo app) and write the business logic based on our schema.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Another popular pattern is to use a <strong><em>code first approach </em></strong>while designing GraphQL APIs (<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://graphene-python.org/\">Graphene</a> is a popular library that does this). If you&#8217;re interested in learning more about this approach, I recommend you give <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://blog.logrocket.com/code-first-vs-schema-first-development-graphql/\">this article</a> a read.</p></blockquote>\n\n\n\n<p>Let’s go and make the following changes in our <code>app.py</code> file.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from api import app, db\nfrom ariadne import load_schema_from_path, make_executable_schema, \\\n    graphql_sync, snake_case_fallback_resolvers, ObjectType\nfrom ariadne.constants import PLAYGROUND_HTML\nfrom flask import request, jsonify\n\ntype_defs = load_schema_from_path(\"schema.graphql\")\nschema = make_executable_schema(\n    type_defs, snake_case_fallback_resolvers\n)\n\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    return PLAYGROUND_HTML, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value=request,\n        debug=app.debug\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code</code></pre>\n\n\n\n<p><br>On lines 2 ~ 4, we import a couple functions from the Ariadne library. On line 7, we import the types from our GraphQL schema.&nbsp;Then, we call the <code>make_executable_schema</code> method from Ariadne. We pass the type definitions as the first argument. The second argument <code>snake_case_fallback_resolvers</code> is a <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://ariadnegraphql.org/docs/0.4.0/bindables\">Bindable</a>; these are special types from Ariadne library that is used to bind python methods to GraphQL schema.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://ariadnegraphql.org/docs/0.4.0/bindables\">Learn more about Bindables</a>.</p></blockquote>\n\n\n\n<p>Next, we have two methods. The first method will load up the GraphQL user interface for us. The second method is a <code>POST</code> method. This endpoint is will be used by our clients to run queries and mutations.</p>\n\n\n\n<h2><a href=\"#testing-our-server\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"testing-our-server\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing our server</h2>\n\n\n\n<p>We can run the application by running <code>flask run</code>. </p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">flask run</code></pre>\n\n\n\n<p>Next, we need a GraphQL IDE to build our queries, explore the schema, and test the API functionality. The <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.apollographql.com/docs/studio/explorer/\">Apollo Explorer</a> is a <strong><em>free to use</em></strong> GraphQL IDE built specifically for GraphQL developers working on GraphQL APIs. It comes with a lot of powerful features like one-click query building, intelligent search, and a multitude of other productivity features.</p>\n\n\n\n<p>To get started, head over to <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://studio.apollographql.com/dev?utm_source=blog&amp;utm_cta=inline\">studio.apollographql.com/dev</a> and create an account (using either GitHub or your email). Choose a name for our graph, and select the <code>development</code> option as the graph type. </p>\n\n\n\n<p>We will add our localhost endpoint <code>http://localhost:5000/graphql</code> in the endpoint field and click create graph.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620521378011_image.png\" alt=\"\"/></figure>\n\n\n\n<p>Once the setup is done, we will see that the GraphQL IDE will load up in our browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620521849208_image.png\" alt=\"\"/></figure>\n\n\n\n<h3><a href=\"#query-all-posts\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"query-all-posts\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Query all posts&nbsp;</strong></h3>\n\n\n\n<p>We are still not able to run queries. Let’s change that. We will write our first query resolver that will return all the posts in the database.</p>\n\n\n\n<h3><a href=\"#writing-our-first-resolver\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"writing-our-first-resolver\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing our first Resolver&nbsp;</h3>\n\n\n\n<p>We can create a new file called <code>api/queries.py</code> and write the following resolver method as shown below.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from .models import Post\ndef listPosts_resolver(obj, info):\n    try:\n        posts = [post.to_dict() for post in Post.query.all()]\n        print(posts)\n        payload = {\n            \"success\": True,\n            \"posts\": posts\n        }\n    except Exception as error:\n        payload = {\n            \"success\": False,\n            \"errors\": [str(error)]\n        }\n    return payload</code></pre>\n\n\n\n<p>This resolver method is very self explanatory. We are trying to query all the Posts from the database and return them as a Payload dictionary.&nbsp;<br>We have to reference this resolver in our <code>app.py</code> file. &nbsp;Let’s make the following changes to <code>app.py</code> file.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from api import app, db\nfrom ariadne import load_schema_from_path, make_executable_schema, \\\n    graphql_sync, snake_case_fallback_resolvers, ObjectType\nfrom ariadne.constants import PLAYGROUND_HTML\nfrom flask import request, jsonify\nfrom api.queries import listPosts_resolver\n\nquery = ObjectType(\"Query\")\nquery.set_field(\"listPosts\", listPosts_resolver)\n\ntype_defs = load_schema_from_path(\"schema.graphql\")\nschema = make_executable_schema(\n    type_defs, query, snake_case_fallback_resolvers\n)\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    return PLAYGROUND_HTML, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value=request,\n        debug=app.debug\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code</code></pre>\n\n\n\n<p>On line 6, we are importing the resolver. We are then creating a query instance and specifying the query field and the corresponding resolver (line 9). Finally, we are adding the query instance to the make_executable_schema method call as a parameter.<br>Restart the server, go back to the GraphQL playground and you will be able to run the following query.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query AllPosts {\n  listPosts {\n    success\n    errors\n    posts {\n      id\n      title \n      description\n      created_at\n    }\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620521987652_image.png\" alt=\"\"/></figure>\n\n\n\n<h3><a href=\"#querying-a-single-post-by-id\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"querying-a-single-post-by-id\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Querying a single post by id</h3>\n\n\n\n<p>Next, we will take a look at how we can query a single item by a property. For this example, we will query a <code>Post</code> by its id.&nbsp;</p>\n\n\n\n<p>We will create a new resolver method inside our <code>queries.py</code> file.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">from ariadne import convert_kwargs_to_snake_case\n...\n\n@convert_kwargs_to_snake_case\ndef getPost_resolver(obj, info, id):\n    try:\n        post = Post.query.get(id)\n        payload = {\n            \"success\": True,\n            \"post\": post.to_dict()\n        }\n    except AttributeError:  # todo not found\n        payload = {\n            \"success\": False,\n            \"errors\": [\"Post item matching {id} not found\"]\n        }\n    return payload</code></pre>\n\n\n\n<p>We imported a decorator called <code>convert_kwargs_to_snake_case</code> from Ariadne. This decorator converts the method arguments from camel case to snake case.&nbsp;<br>Let’s update the <code>app.py</code> file to include the latest resolver</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">...\nfrom api.queries import listPosts_resolver, getPost_resolver\nquery = ObjectType(\"Query\")\nquery.set_field(\"listPosts\", listPosts_resolver)\nquery.set_field(\"getPost\", getPost_resolver)\n...</code></pre>\n\n\n\n<p>We can run the query and verify if everything is working as expected.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query GetPost {\n  getPost(id: \"1\") {\n    post {\n      id\n      title\n      description\n    }\n    success\n    errors\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620522136463_image.png\" alt=\"\"/></figure>\n\n\n\n<h2><a href=\"#mutation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"mutation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutation&nbsp;</h2>\n\n\n\n<p>Mutations are used to create, update or delete records from the database. Let’s set up our first mutation.&nbsp;<br></p>\n\n\n\n<h3><a href=\"#creating-a-new-post\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"creating-a-new-post\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a new post&nbsp;</h3>\n\n\n\n<p>First of all, in our schema, we need to define the type of mutation we are trying to add. In our case, we want to create a new post. Therefore, we will make a mutation called createPost.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">// schema.graphql\nschema {\n    query: Query\n    mutation: Mutation\n}\n\ntype Mutation {\n    createPost(title: String!, description: String!, created_at: String): PostResult!\n}\n...</code></pre>\n\n\n\n<p>We updated our schema.graphql file accordingly as shown above. We add a new <strong>Mutation</strong> type.&nbsp;We specify the mutation name, required parameters and finally update schema type to include Mutation type.<br>Updating the schema itself will not do much. We need a resolver to correspond to the <code>createPost</code> mutation in the schema. &nbsp;</p>\n\n\n\n<p>We will create a new file called <code>api/mutations.py</code>. All our mutation resolvers will live in this file.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">\n# mutations.py\nfrom datetime import date\nfrom ariadne import convert_kwargs_to_snake_case\nfrom api import db\nfrom api.models import Post\n\n@convert_kwargs_to_snake_case\ndef create_post_resolver(obj, info, title, description):\n    try:\n        today = date.today()\n        post = Post(\n            title=title, description=description, created_at=today.strftime(\"%b-%d-%Y\")\n        )\n        db.session.add(post)\n        db.session.commit()\n        payload = {\n            \"success\": True,\n            \"post\": post.to_dict()\n        }\n    except ValueError:  # date format errors\n        payload = {\n            \"success\": False,\n            \"errors\": [f\"Incorrect date format provided. Date should be in \"\n                       f\"the format dd-mm-yyyy\"]\n        }\n    return payload</code></pre>\n\n\n\n<p>The resolver method is pretty self-explanatory. We are here trying to create and save a new instance of a <code>Post</code>. On success, we return the post.<br>We also need to bind this new mutation resolver in our app.py.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">...\nfrom api.queries import listPosts_resolver, getPost_resolver\nfrom api.mutations import create_post_resolver\nquery = ObjectType(\"Query\")\nmutation = ObjectType(\"Mutation\")\nquery.set_field(\"listPosts\", listPosts_resolver)\nquery.set_field(\"getPost\", getPost_resolver)\nmutation.set_field(\"createPost\", create_post_resolver)\n\ntype_defs = load_schema_from_path(\"schema.graphql\")\nschema = make_executable_schema(\n    type_defs, query, mutation, snake_case_fallback_resolvers\n)\n..</code></pre>\n\n\n\n<p>As you can see from the code example above, importing and binding the mutation follows the same pattern as importing and binding queries that we have done previously. &nbsp;we can now hop into the GraphQL playground and try to execute this new mutation.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">mutation CreateNewPost {\n  createPost(\n    title: \"New Blog Post\", \n    description:\"Some Description\") {\n    post {\n      id\n      title\n      description\n      created_at\n    }\n    success\n    errors\n  }\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620522668844_image.png\" alt=\"\"/></figure>\n\n\n\n<h3><a href=\"#updating-a-post\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"updating-a-post\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating a post</h3>\n\n\n\n<p>Next, we will be looking at updating a post. To do so we will follow the same pattern. First, we will update the schema and add a new mutation called <code>updatePost</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Mutation {\n    createPost(title: String!, description: String!, created_at: String): PostResult!\n    updatePost(id: ID!, title: String, description: String): PostResult!\n}</code></pre>\n\n\n\n<p><br><code>updatePost</code> takes in a mandatory parameter id and optional parameters title and description. Now we can create a resolver for this mutation.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\"># mutations.py \n...\n@convert_kwargs_to_snake_case\ndef update_post_resolver(obj, info, id, title, description):\n    try:\n        post = Post.query.get(id)\n        if post:\n            post.title = title\n            post.description = description\n        db.session.add(post)\n        db.session.commit()\n        payload = {\n            \"success\": True,\n            \"post\": post.to_dict()\n        }\n    except AttributeError:  # todo not found\n        payload = {\n            \"success\": False,\n            \"errors\": [\"item matching id {id} not found\"]\n        }\n    return payload</code></pre>\n\n\n\n<p><br>In this method, we are querying the post by id and updating the title and description of the post. We can wire this new resolver up in <code>app.py</code> like the previous one.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\">...\nfrom api.mutations import create_post_resolver, update_post_resolver\n\nmutation = ObjectType(\"Mutation\")\n\nmutation.set_field(\"createPost\", create_post_resolver)\nmutation.set_field(\"updatePost\", update_post_resolver)</code></pre>\n\n\n\n<p><br>That’s it. We can restart the server and run the <code>updatePost</code> mutation now.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">mutation UpdatePost {\n  updatePost(id:\"2\", title:\"Hello title\", description:\"updated description\") {\n    post {\n      id\n      title\n      description\n    }\n    success\n    errors\n  }\n}</code></pre>\n\n\n\n<p></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620522491679_image.png\" alt=\"\"/></figure>\n\n\n\n<h3><a href=\"#deleting-a-post\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"deleting-a-post\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deleting a post</h3>\n\n\n\n<p>Finally, let’s take a look how we can delete a post. We are going to exactly the same thing as we did with updatePost mutation. We will first create the deletePost mutation in the schema.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Mutation {\n    createPost(title: String!, description: String!, created_at: String): PostResult!\n    updatePost(id: ID!, title: String, description: String): PostResult!\n    deletePost(id: ID): PostResult!\n}</code></pre>\n\n\n\n<p><br>Once that is done we can create a new resolver for it and reference it in the app.py file.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\"># mutations.py\n...\n@convert_kwargs_to_snake_case\ndef delete_post_resolver(obj, info, id):\n    try:\n        post = Post.query.get(id)\n        db.session.delete(post)\n        db.session.commit()\n        payload = {\"success\": True, \"post\": post.to_dict()}\n    except AttributeError:\n        payload = {\n            \"success\": False,\n            \"errors\": [\"Not found\"]\n        }\n    return payload\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-python\"># app.py\n...\nfrom api.mutations import create_post_resolver, update_post_resolver, delete_post_resolver\n...\nmutation.set_field(\"deletePost\", delete_post_resolver)</code></pre>\n\n\n\n<p>Let’s test the functionality.&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_EA97983148A602EA5834D427CC2608BC8BB2085BFEFE14AF7C04A52A162E68A7_1620522833382_image.png\" alt=\"\"/></figure>\n\n\n\n<p>Awesome, we now have our GraphQL and Python API up and running.</p>\n\n\n\n<h2><a href=\"#final-thoughts\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"final-thoughts\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final thoughts</h2>\n\n\n\n<p>The main intention of this article was to get you up and running with GraphQL and Python, as well as introduce some widely used patterns and best practices. I hope you found this article informative. </p>\n\n\n\n<p>This is just the start. I suggest checking out some of the other posts on the Apollo blog on topics like caching, <a href=\"https://www.apollographql.com/blog/why-you-should-disable-graphql-introspection-in-production-graphql-security/\">GraphQL security</a>, and if you&#8217;re really into Python, checking out the rest of the <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://ariadnegraphql.org/docs/intro\">Ariadne documentation</a>.</p>\n\n\n\n<p>That’s a wrap! Happy hacking and see you next time.</p>\n",
                    "slug": "complete-api-guide",
                    "path": "/graphql/python/complete-api-guide/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "How-to"
                            },
                            {
                                "name": "Python"
                            }
                        ]
                    },
                    "excerpt": "<p>Known for its ease of use and simplicity, Python is one of the most beloved general-purpose programming languages. And GraphQL, a declarative query language for APIs and server runtimes, pairs quite nicely with Python. Unfortunately, there are very few comprehensive learning materials out there that give you a step-by-step breakdown of how to use GraphQL [&hellip;]</p>\n",
                    "date": "2021-05-11T14:10:54",
                    "modified": "2021-05-19 14:16:35",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/05/using-graphql-python-guide-1.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Shadid Haque"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3MTAy",
                    "title": "Using Subscriptions with Your Federated Data Graph",
                    "content": "\n<p><a href=\"https://www.apollographql.com/docs/federation/\">Apollo Federation</a> allows teams to take a declarative approach to build out distributed GraphQL architectures. What&#8217;s more, it allows teams to divide and manage portions of the data graph&#8217;s schema based on <em>separation of concern</em>, so they can work independently on different products and features that are powered by a single data graph.</p>\n\n\n\n<p>This approach to data graph ownership can have a transformational effect on the way engineering teams work together to expose product-driven query and mutation operations in a GraphQL API, but out-of-the-box, Apollo Federation doesn’t support subscription operations.</p>\n\n\n\n<p>But that doesn&#8217;t mean that we can&#8217;t use GraphQL subscriptions with a federated schema necessarily. In this post, I&#8217;ll demonstrate that with a bit of architectural creativity and by leveraging some of Apollo Gateway&#8217;s built-in features, we can design a decoupled, scalable solution that allows us to run subscription operations against a federated data graph.</p>\n\n\n\n<h2><a href=\"#but-first-an-important-question\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"but-first-an-important-question\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But First, an Important Question</h2>\n\n\n\n<p>Before we explore how a federated data graph may be extended to support subscription operations, we have an important question to consider. And I would say it’s important to answer this question for federated and non-federated GraphQL APIs alike. The question is:</p>\n\n\n\n<p><em>Are subscriptions truly the right way to support the real-time feature that you need to implement?</em></p>\n\n\n\n<p>When thinking about querying data in real-time via a GraphQL API, subscription operations may seem like a default option because they are included directly in <a href=\"https://spec.graphql.org/June2018/#sec-Language.Operations\">the GraphQL specification</a>. There are many popular GraphQL servers and other libraries that also support subscriptions (usually via a WebSocket connection), so the barriers to getting up and running with them are relatively low. But alas, there&#8217;s no such thing as full-duplex free lunch!</p>\n\n\n\n<p>For example, maintaining an open socket connection to receive updates from a subscription operation will have battery usage implications for mobile devices. So before adding the <code>Subscription</code> type to any GraphQL schema, it’s always worth asking if polling for less frequent updates or push notifications on mobile would be a more suitable solution.</p>\n\n\n\n<p>However, if GraphQL subscriptions are the appropriate technical answer for the feature you need to implement, then at this point we can turn our attention to using what’s available in Apollo Gateway to support those subscription operations against a federated data graph. What&#8217;s more, we’ll do so in a way that will feel as seamless as it does with monolithic GraphQL API for the clients that consume the graph.</p>\n\n\n\n<h2><a href=\"#treating-subscriptions-as-a-separate-concern\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"treating-subscriptions-as-a-separate-concern\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Treating Subscriptions as a Separate Concern</h2>\n\n\n\n<p>A key feature of Apollo Federation is that it was designed to support decoupled and distributed GraphQL architectures. However, the stateless nature of the HTTP transport layer we typically use to support query and mutation operations may need to scale in a different way than stateful WebSocket connections do.</p>\n\n\n\n<p>In a standard approach to implementing subscriptions for a GraphQL API, we often end up coupling these two transport concerns together. In the spirit of decoupling, our federated data graph would ideally remain the stateless execution engine of the API. Alongside it, we could have a separate and dedicated subscription service that&#8217;s responsible for maintaining stateful connections with clients, as well as processing and responding to their requests.</p>\n\n\n\n<p>When taking this approach, some practical considerations will help us produce a workable outcome for client and server developers. First, if the subscriptions are managed in a separate service, then we need some way to use the same types that are defined in the federated data graph as the output types for subscription fields. By doing so, client developers can write subscription operations in a way that reflects the natural relationships between types in your federated data graph</p>\n\n\n\n<p>Second, if the type definitions from the federated data graph are included in the subscription service’s schema, then we&#8217;ll need a way to keep the schema in sync between them automatically.</p>\n\n\n\n<p>Lastly, we&#8217;ll also need a way to resolve additional data requested by a client when that data isn’t provided in the message payload that was published by a subgraph service to a shared pub/sub implementation. For these requests, the subscription service will need to reach out to the federated data graph to query the missing data so that it may fully resolve all of the fields in the subscription operation&#8217;s selection set.</p>\n\n\n\n<p>With these requirements in mind, we&#8217;re ready to start building a decoupled subscription service in the next section.</p>\n\n\n\n<h2><a href=\"#subscription-service-for-a-live-blog\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"subscription-service-for-a-live-blog\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscription Service for a Live Blog</h2>\n\n\n\n<p>Let&#8217;s imagine a scenario where we need to build a live blog powered by Apollo Federation and this data graph will have an authors subgraph and a posts subgraph. We&#8217;ll need a single subscription operation to push new posts to subscribed clients immediately as those posts become available. In addition to the basic post data, we need to traverse the graph to provide some additional details about the post author in the subscription response.</p>\n\n\n\n<p>These are the key architectural components in our application:</p>\n\n\n\n<ol><li>An Apollo Gateway that composes the authors and posts subgraphs using <a href=\"https://www.apollographql.com/docs/federation/managed-federation/overview/\">managed federation</a></li><li>A decoupled subscription service</li><li>A shared instance of Redis used for pub/sub</li><li>An Apollo Client-powered React app</li></ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"589\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-1024x589.jpg\" alt=\"\" class=\"wp-image-7108\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-1024x589.jpg 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-300x172.jpg 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-768x442.jpg 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-1536x883.jpg 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog-1200x690.jpg 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-arch-live-blog.jpg 1696w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>To keep things concise, the code examples that follow are key highlights from the full solution. You can view <a href=\"https://github.com/apollographql/federation-subscription-tools/\">an example of the working live blog in this repository</a>.</p>\n\n\n\n<p>The posts subgraph will publish <code>POST_ADDED</code> messages to Redis after a new post is created with a mutation in the posts subgraph. The subscription service will subscribe to the same <code>POST_ADDED</code> messages from Redis and it will make requests to the federated data graph to fetch additional data needed to fully resolve a <code>postAdded</code> subscription operation for a client.</p>\n\n\n\n<p>We use Redis pub/sub for subscriptions instead of a basic in-memory pub/sub implementation because any of the subgraph services may need to publish messages and the subscription service will need to be able to receive those messages. These services won&#8217;t be running on the same server, so an in-memory approach won&#8217;t work (plus it&#8217;s a best practice to not rely on in-memory pub/sub when using subscriptions in production).</p>\n\n\n\n<p>For our application, we’ll use the <a href=\"https://github.com/davidyaha/graphql-redis-subscriptions\">GraphQL Redis Subscriptions</a> package to connect to Redis from the posts service:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Post Service\n\nimport { RedisPubSub } from \"graphql-redis-subscriptions\";\nimport Redis from \"ioredis\";\n\nexport const redis = new Redis(6379, \"127.0.0.1\");\n\nexport const pubsub = new RedisPubSub({\n  publisher: redis,\n  subscriber: redis\n});</code></pre>\n\n\n\n<p>In the posts subgraph schema below, note that we reference an <code>Author</code> entity that originates in an authors subgraph. We use the <code>Author</code> type as the return type for the author field on the <code>Post</code> type, and we reference an author based on the <code>id</code> key field. There&#8217;s also an <code>addPost</code> mutation and we&#8217;ll use its resolver to publish a message to Redis about a new post’s availability.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\"># Posts Service\n\ntype Post {\n  id: ID!\n  author: Author!\n  content: String!\n  publishedAt: String!\n  title: String!\n}\n\nextend type Author @key(fields: \"id\") {\n  id: ID! @external\n}\n\nextend type Query {\n  posts: [Post]\n}\n\nextend type Mutation {\n  addPost(authorID: ID!, content: String, title: String): Post\n}</code></pre>\n\n\n\n<p>In the <code>addPost</code> resolver, we publish a <code>POST_ADDED</code> message with a payload containing some of the new post’s data, but we don&#8217;t have any information about the post author in the <code>post</code> object apart from their ID:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Post Service\n\nimport { pubsub } from \"./redis\";\n\nconst resolvers = {\n  Query: {\n    // ...\n  },\n  Mutation: {\n    addPost(root, args, context, info) {\n      const post = newPost(args);\n      pubsub.publish(\"POST_ADDED\", { postAdded: post });\n      return post;\n    }\n  }\n};</code></pre>\n\n\n\n<p>That&#8217;s all we&#8217;ll need to do in the posts service, so we can turn our attention to the subscription service now. The type definitions that we define here manually will only contain the <code>Subscription</code> type and any fields we want to add to that type.</p>\n\n\n\n<p>However, because we&#8217;ll combine the types from the federated data graph into this schema in a moment, we’ll be able to use the types defined in the federated data graph as output types for the <code>Subscription</code> fields even though they not defined here explicitly. So for the <code>postAdded</code> field, we use the <code>Post</code> type that&#8217;s owned by the posts subgraph as its return type:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\"># Subscription Service\n\ntype Subscription {\n  postAdded: Post\n}</code></pre>\n\n\n\n<p>This is where things start to get interesting. To get the schema for the federated data graph, we can instantiate an <code>ApolloGateway</code> object directly in the subscription service. Recall that we’re using managed federation, so there would be an <code>APOLLO_KEY</code> variable set in the environment and we don’t provide a <code>serviceList</code> option in its constructor.</p>\n\n\n\n<p>Also, note that this Apollo Gateway is a little bit different from what we’re used to seeing because we’re not going to pass the instantiated <code>gateway</code> object into an Apollo Server. Instead, we&#8217;ll set an <code>onSchemaChange</code> callback in it that will take the <code>gatewaSchema</code> and combine it with the subscription service’s type definitions and resolvers using the <code>makeSubscriptionSchema</code> function (found in the demonstration repo linked above) to make an executable schema for this service to run its subscription operations against:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Subscription Service\n\nimport { ApolloGateway } from \"@apollo/gateway\";\n\nimport { makeSubscriptionSchema } from \"federation-subscription-tools\";\n\nconst gateway = new ApolloGateway();\nlet schema;\n\n(async () => {\n  gateway.onSchemaChange(gatewaySchema => {\n    schema = makeSubscriptionSchema({\n      gatewaySchema, \n      typeDefs, \n      resolvers \n    });\n  });\n\n  await gateway.load({ \n    apollo: getGatewayApolloConfig(apolloKey, graphVariant)\n  });\n})();</code></pre>\n\n\n\n<p>Over in the resolvers for the subscription fields, we also set up a client to access the shared Redis instance, but here we listen for <code>POST_ADDED</code> messages instead:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Subscription Service\n\nimport { pubsub } from \"./redis\";\n\nconst resolvers = {\n  Subscription: {\n    postAdded: {\n      subscribe(_, args) {\n        return pubsub.asyncIterator([\"POST_ADDED\"]);\n      }\n    }\n  }\n};</code></pre>\n\n\n\n<p>If all we ever needed to do was resolve fields that are available in the message payload provided by the posts service, then our work would be done. However, the payload doesn’t include all of the author details we need, so we need some way to resolve that additional data when requested by clients.</p>\n\n\n\n<p>To illustrate what we have to work with when a new <code>POST_ADDED</code> message is received, we can see below what field values are available in the payload and what we’ll still need to resolve from the federated data graph to fully resolve the operation:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"429\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-1024x429.jpg\" alt=\"\" class=\"wp-image-7110\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-1024x429.jpg 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-300x126.jpg 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-768x322.jpg 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-1536x643.jpg 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff-1200x502.jpg 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/subscription-fields-diff.jpg 1758w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>To resolve the additional fields from the subscription service, we could define resolvers on the <code>Post</code> type on a per-field basis to fetch data from the gateway. However, this may not be very efficient in terms of network requests nor would it be very future-proof either as the graph evolves.</p>\n\n\n\n<p>A more maintainable approach would be to use the generalized <code>resolve</code> method inside of the resolver for the <code>postAdded</code> subscription field to fetch all of the additional required data. The <code>resolve</code> method allows us to intercept the message payload and alter it before resolving the operation.</p>\n\n\n\n<p>To fetch data the required data, we can create an <a href=\"https://www.apollographql.com/docs/apollo-server/data/data-sources/\">Apollo data source</a> that&#8217;s capable of diffing the provided payload fields with the actual field selections in the operation, and then query the federated data graph for just those missing fields in a single request:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Subscription Service\n\nconst resolvers = {\n  Subscription: {\n    postAdded: {\n        resolve(payload, args, { dataSources: { gatewayApi } }, info) {\n        return gatewayApi.fetchAndMergeNonPayloadPostData(\n          payload.postAdded.id, // unique identifier to fetch the post\n          payload, // known field values\n          info // contains the full selection set of fields to diff\n        );\n      },\n      subscribe(_, args) {\n        return pubsub.asyncIterator([\"POST_ADDED\"]);\n      }\n    }\n  }\n};</code></pre>\n\n\n\n<p>Using this approach, the data source provides a method to fetch a single post from the federated data graph and this post can be used as an entry point to all other relationships it has to other nodes in the data graph.</p>\n\n\n\n<p>The last step is to use the <a href=\"https://github.com/enisdenjo/graphql-ws\">graphql-ws</a> library to fire up a WebSocket server to use as an endpoint to send the subscription operations. Using its <code>useServer</code> function, we can set the <code>GatewayDataSource</code> on the context so that it’s available to the resolvers.</p>\n\n\n\n<p>We then use its <code>onSubscribe</code> callback to set the execution arguments for each subscription including the current value of the <code>schema</code> variable we previously set in the gateway <code>onSchemaChange</code> callback. In the <code>onSubscribe</code> callback, we also return a GraphQL error if a client tries to send a query or mutation operation to this WebSocket powered endpoint instead of the usual HTTP endpoint for the federated data graph:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// Subscription Service\n\n(async () => {\n  // ...\n\n  const httpServer = http.createServer(function weServeSocketsOnly(_, res) {\n    res.writeHead(404);\n    res.end();\n  });\n\n  const wsServer = new ws.Server({\n    server: httpServer,\n    path: \"/graphql\"\n  });\n\n  useServer(\n    {\n      execute,\n      subscribe,\n      context: ctx => {\n        // Instantiate and initialize the GatewayDataSource subclass\n        // (data source methods will be accessible on the `gatewayApi` key)\n        const ds = new LiveBlogDataSource(gatewayEndpoint);\n        const context = addGatewayDataSourceToSubscriptionContext(ctx, ds);\n        return context;\n      },\n      onSubscribe: (_ctx, msg) => {\n        // Construct the execution arguments\n        const args = {\n          schema, // <-- Use the previously defined `schema` here\n          operationName: msg.payload.operationName,\n          document: parse(msg.payload.query),\n          variableValues: msg.payload.variables\n        };\n\n        const operationAST = getOperationAST(\n          args.document, \n          args.operationName\n        );\n\n        // Stops the subscription and sends an error message\n        if (!operationAST) {\n          return [new GraphQLError(\"Unable to identify operation\")];\n        }\n\n        // Handle mutation and query requests\n        if (operationAST.operation !== \"subscription\") {\n          return [\n            new GraphQLError(\"Only subscription operations are supported\")\n          ];\n        }\n\n        // Validate the operation document\n        const errors = validate(args.schema, args.document);\n\n        if (errors.length > 0) {\n          return errors;\n        }\n\n        // Ready execution arguments\n        return args;\n      }\n    },\n    wsServer\n  );\n\n  httpServer.listen({ port }, () => {\n    console.log(\n      `🚀 Subscriptions ready at ws://localhost:${port}${wsServer.options.path}`\n    );\n  });\n})();</code></pre>\n\n\n\n<p>Over on the client-side, we can now create a <code>WebSocketLink</code> for Apollo Client that is based on <a href=\"https://github.com/enisdenjo/graphql-ws#apollo-client\">the link example from the graphql-ws</a>. That link will point to the endpoint for the subscription service and the <code>HttpLink</code> will point directly to the gateway endpoint. Using Apollo Client’s <code>split</code> function, requests can then be directed to either endpoint based on the operation type:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">// React App\n\nconst wsLink = new WebSocketLink({ url: ws://localhost:5000/ });\nconst httpLink = new HttpLink({ uri: http://localhost:4000/ });\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === “subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({ cache, link });</code></pre>\n\n\n\n<p>The Apollo Link configuration above works exactly as it would when executing subscriptions against a monolithic GraphQL API, so from the client&#8217;s perspective, everything is business as usual for running subscription operations. That means that a client can send a mutation to create a new post such as this one:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">mutation AddPost {\n  addPost(authorID: 1, content: \"Hello, world!\", title: \"Breaking News\") {\n    id\n    author {\n      name\n    }\n    content\n    publishedAt\n    title\n  }\n}</code></pre>\n\n\n\n<p>In turn, the posts subgraph service will publish a message to Redis containing the <code>authorID</code>, <code>content</code>, <code>id</code>, <code>publishedAt</code> time, and <code>title</code> of the new post and other subscribed clients can use subscription operations to request data about the post and the related author in the same way that they could for query and mutation operations:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">subscription PostAdded {\n  postAdded {\n    author {\n      id\n      name\n    } # <-- Fetched from the federated data graph\n    content\n    id\n    publishedAt\n    title\n  }\n}</code></pre>\n\n\n\n<h2><a href=\"#considerations\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"considerations\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considerations</h2>\n\n\n\n<p>When implementing this solution, there are a few important considerations and cross-cutting concerns to keep in mind. First, this approach requires all <code>Subscription</code> fields to be defined in a single, decoupled subscription service, so the ownership of this service will be shared across teams that manage independent portions of the schema that are applicable to queries and mutations only.</p>\n\n\n\n<p>Second, some level of coordination would be necessary to ensure that event labels (such as the <code>POST_ADDED</code> label) are synchronized between the subgraphs that publish events and the subscription service that subscribes to those events to avoid breaking changes.</p>\n\n\n\n<p>Third, to improve real-time performance and minimize the number of requests from the subscription service back to the gateway to resolve non-payload fields, some form of caching would likely be desirable, and further, you may perhaps also encourage client developers to avoid over-fetching data in subscription operations and leverage the Apollo Client cache wherever possible</p>\n\n\n\n<p>Lastly, removing a type from the federated data graph when the subscription service uses as an output type will be a breaking change unless the type removal happens simultaneously between both services. Good schema governance practices are a must, and it would also be a good idea to leverage your observability tools here to understand what operations are being executed against your federated data graph from the subscription service.</p>\n\n\n\n<h2><a href=\"#summary\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"summary\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n\n\n\n<p>In this tutorial, we saw how we can get the best of both worlds by isolating a subscription service as a decoupled, independently scalable service while still running subscription operations against a federated data graph's full schema.</p>\n\n\n\n<p>You can find <a href=\"https://github.com/apollographql/federation-subscription-tools\">the complete code for this tutorial on GitHub</a> as a demonstration library and you can also watch <a href=\"https://www.apollographql.com/graphql-summit/thank-you/using-subscriptions-with-your-federated-data-graph\">my GraphQL Summit talk about this solution</a> on-demand.</p>\n\n\n\n<p>For more details on what’s possible with Apollo Federation, be sure to <a href=\"https://www.apollographql.com/docs/apollo-server/federation/introduction/\">visit the docs</a>.</p>\n",
                    "slug": "using-subscriptions-with-your-federated-data-graph",
                    "path": "/backend/federation/using-subscriptions-with-your-federated-data-graph/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Federation"
                            },
                            {
                                "name": "Subscriptions"
                            }
                        ]
                    },
                    "excerpt": "<p>Apollo Federation allows teams to take a declarative approach to build out distributed GraphQL architectures. What&#8217;s more, it allows teams to divide and manage portions of the data graph&#8217;s schema based on separation of concern, so they can work independently on different products and features that are powered by a single data graph. This approach [&hellip;]</p>\n",
                    "date": "2021-05-13T11:30:02",
                    "modified": "2021-05-27 10:14:50",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/05/using-subscriptions-federated-data-graph.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Mandi Wise"
                        }
                    }
                },
                {
                    "id": "cG9zdDo3MDQ2",
                    "title": "Why You Should Disable GraphQL Introspection In Production – GraphQL Security",
                    "content": "\n<p>Once your graph is up and running in production, like anything else on the internet, it’s a good idea to implement precautions to prevent it from being compromised by bad actors.<br><br>Disabling introspection in production is a widely debated topic, but we believe it&#8217;s one of the first things you can do to harden your GraphQL API in production.<br><br>In this post, we&#8217;ll discuss why we believe you should disable GraphQL introspection in production, how to do it, and present a way to get the same benefits of introspection in production using a schema registry instead.</p>\n\n\n\n<h2><a href=\"#introspection\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"introspection\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introspection</h2>\n\n\n\n<h3><a href=\"#what-is-it\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-it\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is it?</h3>\n\n\n\n<p>GraphQL introspection enables you to query a GraphQL server for information about the underlying schema. This includes data like types, fields, queries, mutations, and even the field-level descriptions.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"892\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-1024x892.png\" alt=\"\" class=\"wp-image-7059\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-1024x892.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-300x261.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-768x669.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-1536x1338.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-2048x1784.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-1200x1045.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/introspection-1980x1725.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3><a href=\"#what-do-we-need-introspection-for\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-do-we-need-introspection-for\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What do we need introspection for?</h3>\n\n\n\n<p>We believe that <strong>introspection should primarily be used as a discovery and diagnostic tool</strong> when we&#8217;re in the <strong>development phase</strong> of building out GraphQL APIs.<br><br>While we don&#8217;t often use introspection <em>directly</em>, it&#8217;s important for tooling and GraphQL IDEs like Apollo Studio, GraphiQL, and Postman. Behind the scenes, GraphQL IDEs use introspection queries to power the clean user experience helpful for testing and diagnosing your graph during development. </p>\n\n\n\n<h2><a href=\"#introspection-in-production\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"introspection-in-production\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introspection in production</h2>\n\n\n\n<p>Let&#8217;s consider the utility of introspection outside of the context of development, in a production environment.<br><br>First, we need to make a distinction between public and private GraphQL APIs.</p>\n\n\n\n<h3><a href=\"#public-vs-private-apis\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"public-vs-private-apis\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Public vs. private APIs</h3>\n\n\n\n<p>A public GraphQL API is one made primarily for consumption by developers <em>outside </em>of your organization (like the Shopify or GitHub APIs).<br><br>Whereas a private GraphQL API is one built to serve the client-side experiences for products built by developers <em>within </em>your organization.<br><br><strong>The vast majority of us are building private GraphQL APIs</strong>.</p>\n\n\n\n<h3><a href=\"#use-case-learn-all-possible-graphql-operations\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"use-case-learn-all-possible-graphql-operations\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use case: Learn all possible GraphQL operations</h3>\n\n\n\n<p>In the context of a public GraphQL API, to learn all possible GraphQL operations, you certainly could leave introspection on in production, but our principled belief is that clear and expressive documentation (API references) is the better <strong>discoverability</strong> tool for a public GraphQL API.<br><br>On the other hand, to learn all possible operations in the private context, security is the prime concern. At first glance, it may make sense to leave introspection on in production so that developers on your team could merely point their GraphQL IDEs to the URL of the production graph, look at the structure, and see what’s possible. However, we should consider the risks of leaving an API <em>not intended for use by anyone other than the developers in your org (</em>with auto-generated documentation on how to perform every operation<em>) </em>out in the open on the internet.</p>\n\n\n\n<h3><a href=\"#to-utilize-production-data\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"to-utilize-production-data\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To utilize production data</h3>\n\n\n\n<p>Once we know what we can do with the API, we can write queries and mutations.<br><br>For a public GraphQL API, querying and mutating your personally owned data is likely the very reason why the API exists. You’d also likely need to authenticate yourself, then accompany all of your requests with a valid auth token, but again — this is a constraint typically communicated better with <em>words</em> — through API documentation. We can do this without introspection.<br><br>Now, considering the private GraphQL API context again &#8212; most of the time, you don’t want just <em>anybody </em>to learn how to run queries against your private data. It&#8217;s usually a small set of people. The developers within your org.</p>\n\n\n\n<h2><a href=\"#problems-with-introspection-in-production\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"problems-with-introspection-in-production\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problems with introspection in production</h2>\n\n\n\n<h3><a href=\"#revealing-sensitive-information\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"revealing-sensitive-information\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Revealing sensitive information</h3>\n\n\n\n<p>As you invest in building a graph at your company, you&#8217;ll want to ensure that details that should only be known <em>inside</em> your org, stay <em>inside</em>.<br><br>If you use the <strong>description feature</strong> in GraphQL, it should be known that this is a type of detail that can be queried using introspection queries.<br><br>For example, the following field containing helpful (yet sensitive) details can be queried by any party on a GraphQL API in production with introspection enabled.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type CreditProfile {\n\n    \"\"\"\n    This field is computed based on the user's current \n    credit score + their history over the last 30 \n    days using our product\n    \"\"\"\n    ranking: Float\n    \n ...\n}</code></pre>\n\n\n\n<h3><a href=\"#easy-to-discover-potentially-malicious-operations\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"easy-to-discover-potentially-malicious-operations\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easy to discover potentially malicious operations</h3>\n\n\n\n<p>Leaving introspection on in production is like serving a meal with the very recipe used to create it.<br><br>While it’s still possible for bad actors to learn how to write malicious queries by reverse engineering your GraphQL API through a lot of trial and error, disabling introspection is a form of <em>security by obscurity</em>. It&#8217;s not the best form of security, but paired with other techniques like <a href=\"https://www.apollographql.com/blog/securing-your-graphql-api-from-malicious-queries-16130a324a6b/\">size, depth, amount limiting and operation whitelisting</a>, it can make a substantial difference.</p>\n\n\n\n<h2><a href=\"#turning-off-introspection-in-production\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"turning-off-introspection-in-production\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Turning off introspection in production</h2>\n\n\n\n<p>You can turn off introspection in production by setting the value of the <code>introspection</code> config key on your Apollo Server instance.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">const server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  introspection: process.env.NODE_ENV !== 'production'\n});</code></pre>\n\n\n\n<p>We recommend using environment variables so that you can enable introspection for GraphQL tooling in your <code>development</code> and <code>staging</code> environments but not for your <code>production</code> one.<br><br>You can <a href=\"https://www.apollographql.com/docs/apollo-server/api/apollo-server/#introspection\">read the docs</a> about introspection here.</p>\n\n\n\n<h2><a href=\"#use-a-schema-registry-to-update-browse-and-maintain-your-production-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"use-a-schema-registry-to-update-browse-and-maintain-your-production-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use a schema registry to update, browse, and maintain your production Graph</h2>\n\n\n\n<p>Now that we&#8217;ve turned off introspection in production, how do we:</p>\n\n\n\n<ul><li>Enable new developers to explore the current schema and its capabilities</li><li>Query production data</li><li>Let other team members learn our graph</li></ul>\n\n\n\n<h3><a href=\"#register-your-schema\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"register-your-schema\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register your schema</h3>\n\n\n\n<p>First step is to <strong>register your schema</strong> to the Apollo Studio schema registry. You&#8217;ll want to see the docs on &#8220;<a href=\"https://www.apollographql.com/docs/studio/schema/schema-reporting/\">Registering schemas using schema reporting</a>&#8221; to get started.</p>\n\n\n\n<h3><a href=\"#exploring-the-schemas-shape-and-data\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"exploring-the-schemas-shape-and-data\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploring the schema&#8217;s shape and data</h3>\n\n\n\n<p>Once your schema is registered, you can log into <a href=\"http://studio.apollographql.com/dev\">studio.apollographql.com</a> and check out the schema in the SDL tab.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"892\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-1024x892.png\" alt=\"\" class=\"wp-image-7061\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-1024x892.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-300x261.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-768x669.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-1536x1338.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-2048x1784.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-1200x1045.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/sdl-tab-apollo-studio-1980x1725.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>You can also keep track of how your schema changes over time.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"892\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-1024x892.png\" alt=\"\" class=\"wp-image-7063\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-1024x892.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-300x261.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-768x669.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-1536x1338.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-2048x1784.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-1200x1045.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/schema-change-1980x1725.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>And when you want to dive deeper into your production environment, you can head over to the Apollo Explorer to write queries and view data.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"892\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-1024x892.png\" alt=\"\" class=\"wp-image-7065\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-1024x892.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-300x261.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-768x669.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-1536x1338.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-2048x1784.png 2048w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-1200x1045.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-explorer-data-1980x1725.png 1980w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3><a href=\"#invite-team-members-to-explore-your-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"invite-team-members-to-explore-your-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invite team members to explore your graph</h3>\n\n\n\n<p>Apollo Studio also has <strong>unlimited, free read-only consumer seats</strong>. That means if you have non-developers on your team that want to safely and securely explore production data, you can generate a sharable link to invite them to your graph.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"600\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-intive-1024x600.png\" alt=\"\" class=\"wp-image-7067\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-intive-1024x600.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-intive-300x176.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-intive-768x450.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-intive.png 1194w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"157\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-1024x157.png\" alt=\"\" class=\"wp-image-7069\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-1024x157.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-300x46.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-768x118.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-1536x236.png 1536w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2-1200x185.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/05/apollo-studio-invite-2.png 1600w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>We think schema registration is much safer than having your graph sit out on the internet with introspection on.<br><br>Happy querying!</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>In this article, we learned that:</p>\n\n\n\n<ul><li>GraphQL introspection lets you inspect all the types and fields of a schema</li><li>GraphQL introspection is primarily for GraphQL developer tooling</li><li>Leaving introspection on in production exposes potential issues like exposing sensitive information and enables malicious parties to more easily discover graph vulnerabilities</li><li>Registering your graph to a schema registry is a safer, more secure way to enable access to your graph and your data</li></ul>\n\n\n\n<p>To register your schema, head to <a href=\"http://studio.apollographql.com/dev?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_05_graphql-introspection-production\">studio.apollographql.com</a>.</p>\n",
                    "slug": "why-you-should-disable-graphql-introspection-in-production",
                    "path": "/graphql/security/why-you-should-disable-graphql-introspection-in-production/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "GraphQL"
                            },
                            {
                                "name": "Security"
                            }
                        ]
                    },
                    "excerpt": "<p>Once your graph is up and running in production, like anything else on the internet, it’s a good idea to implement precautions to prevent it from being compromised by bad actors. Disabling introspection in production is a widely debated topic, but we believe it&#8217;s one of the first things you can do to harden your [&hellip;]</p>\n",
                    "date": "2021-05-07T11:48:47",
                    "modified": "2021-05-20 09:00:39",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/05/graphql_security.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2OTQ3",
                    "title": "GraphQL Summit Scale 2021 [Recap]",
                    "content": "\n<p>It’s a wrap on the first-ever GraphQL Summit Scale! This year we added a day following <a href=\"https://www.apollographql.com/blog/graphql-summit-worldwide-2021-recap/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">GraphQL Summit Worldwide</a> that brought together engineering leaders and architects focused on solving the challenges of creating an organization-wide data graph. They shared learnings on how to handle both technical scaling as well as organizational scaling.</p>\n\n\n\n<p>If you missed the live event &#8211; you can <a href=\"https://www.apollographql.com/graphql-summit/#day-2/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">watch the talks on-demand.</a> Read on to learn more about the talks.</p>\n\n\n\n<h2><a href=\"#summit-scale-keynote\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"summit-scale-keynote\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Summit Scale Keynote</strong></h2>\n\n\n\n<p>Matt DeBergalis, CTO of Apollo GraphQL, started the day off by talking about how adopting a common graph helps engineering organizations become more agile and better prepared for the future. He emphasized the importance of designing your graph for agility and composability and shared insights gained from working with companies moving to organization-wide data graphs.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/summit-scale-keynote/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#building-an-adaptive-engineering-culture\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"building-an-adaptive-engineering-culture\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Building an Adaptive Engineering Culture</strong></h2>\n\n\n\n<p>This panel of executives included Bhawna Singh, CTO of Glassdoor, Rick Fast, VP Engineering at Expedia, and Apollo’s CTO, Matt DeBergalis. They dove into building an adaptive engineering culture and how a data graph empowers teams to collaborate and learn faster. They also discussed how to build internal communities while tapping into external communities to develop best practices.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>&#8220;The graph has helped us improve developer experience, productivity, and team flexibility&#8221; &#8211; Bhawna Singh, CTO, Glassdoor.</em></p></blockquote>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/building-an-adaptive-engineering-culture/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#scaling-graphql-at-glassdoor\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"scaling-graphql-at-glassdoor\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Scaling GraphQL at Glassdoor</strong></h2>\n\n\n\n<p>Ian Moore and Deepak Gupta joined us to talk about how Glassdoor set up its GraphQL architecture to scale and serve over 70M monthly active users. They explained how they use Apollo Federation and designing a performant and secure federated graph.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>&#8220;Move to managed federation as soon as you can, you really need the persistent schema registry and schema validation&#8221; &#8211; Ian Moore, Glassdoor</em></p></blockquote>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/scaling-graphql-at-glassdoor/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#change-at-scale-how-expedia-built-a-company-wide-data-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"change-at-scale-how-expedia-built-a-company-wide-data-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Change at scale: How Expedia built a company-wide data graph</strong></h2>\n\n\n\n<p>How did Expedia convince their leadership and several hundred engineers to change how they’ve built products and embrace GraphQL? Amy Heinen and Chris Winsor of Expedia joined Apollo’s Dan Boerner to discuss how they balanced trade-offs between autonomy and consistency while still scaling their graph rapidly. They shared their experience and gave tips for navigating obstacles on their way to a company-wide GraphQL platform.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>Driving graph adoption at scale: &#8220;We pushed for a rotation strategy, and the benefit there was two-fold. 1. You could help teams move along with the technology and contribute to your existing core systems. 2. They go back to their team, and they help onboard them.&#8221; &#8211; Chris Winsor, Expedia</em></p></blockquote>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/change-at-scale-how-expedia-built-a-company-wide-data-graph/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#five-lessons-from-a-graphql-early-adopter\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"five-lessons-from-a-graphql-early-adopter\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Five Lessons from a GraphQL Early Adopter</strong></h2>\n\n\n\n<p>One of our attendees wrote, <em>“I recommend Five Lessons from a GraphQL Early Adopter for developers using GraphQL for the first time.“</em> If you’re just getting started, this session from John Masse at Priceline is a great place to start. He outlined the key lessons and recommendations for teams starting on their GraphQL journey.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>&#8220;Find places where GraphQL would create an enabling story. For real adoption, we want the people in their happy hour over Zoom talking about how their use of GraphQL really helped them solve a problem.&#8221; &#8211; John Masse, Priceline</em></p></blockquote>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/five-lessons-from-a-early-graphql-adopter/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#how-to-be-a-graph-champion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-to-be-a-graph-champion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>How to be a Graph Champion</strong></h2>\n\n\n\n<p>If you are working to drive adoption of your data graph within your organization or company, you’ll want to listen as Graph Champions from Zillow, American Airlines and PayPal share hard-fought lessons and deep learnings. For more information on becoming a Graph Champion, <a href=\"https://www.apollographql.com/graph-champions/?utm_source=Marketo&amp;utm_medium=Email&amp;utm_campaign-2021-04-27_GraphChampionGuide/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">download our new guide here.</a></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><em>&#8220;One of the great things about Federation is it really distributes ownership. And it reduces a lot of friction for people to participate in the graph.&#8221; &#8211; Robbie Sawers, Zillow</em></p></blockquote>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/how-to-be-a-graph-champion/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">Watch now</a></p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Conclusion</strong></h2>\n\n\n\n<p>Thank you to our speakers and attendees. GraphQL Summit Scale would not have been possible without the many speakers who volunteered to share their GraphQL stories and those of you that tuned in to listen and ask great questions.</p>\n\n\n\n<p>If you missed any of the talks, be sure to <a href=\"https://www.apollographql.com/graphql-summit/#day-2/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">watch them on-demand</a> and <a href=\"https://www.apollographql.com/contact-sales/?utm_source=Blog&amp;utm_medium=Website&amp;utm_campaign=2021-04_ScaleBlogRecap\">reach out to us</a> if you’re ready to scale your graph.</p>\n",
                    "slug": "graphql-summit-scale-2021-recap",
                    "path": "/community/graphql-summit-scale-2021-recap/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Community"
                            }
                        ]
                    },
                    "excerpt": "<p>It’s a wrap on the first-ever GraphQL Summit Scale! This year we added a day following GraphQL Summit Worldwide that brought together engineering leaders and architects focused on solving the challenges of creating an organization-wide data graph. They shared learnings on how to handle both technical scaling as well as organizational scaling. If you missed [&hellip;]</p>\n",
                    "date": "2021-04-20T13:12:58",
                    "modified": "2021-04-27 19:56:15",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/graphql-summit.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Lyndsie Berens"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2OTQw",
                    "title": "GraphQL Summit Worldwide 2021 [Recap]",
                    "content": "\n<p>Well folks, that&#8217;s another GraphQL Summit Worldwide in the books 👋. We heard some talks on client-side GraphQL, federation, subscriptions, and testing.</p>\n\n\n\n<p>In this post, I&#8217;d like to sum up the biggest takeaways from day one of the conference. If you missed any of the talks, fret not my friend — you can&nbsp;<a href=\"https://www.apollographql.com/graphql-summit\">watch them on-demand</a>.</p>\n\n\n\n<h2><a href=\"#apollos-new-graphql-tools-for-better-collaboration-testing-and-security\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"apollos-new-graphql-tools-for-better-collaboration-testing-and-security\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo&#8217;s new GraphQL tools for better collaboration, testing, and security</h2>\n\n\n\n<p>Since the last summit, we&#8217;ve released a number of new tools to help you build better with GraphQL. Here&#8217;s a highlight of some of the latest and greatest from Apollo.</p>\n\n\n\n<ul><li><strong>Getting started</strong>: Build out your first dev graph using <a href=\"https://www.apollographql.com/blog/apollo-studio-a-graphql-ide-for-every-environment/\">Apollo Studio&#8217;s GraphQL IDE (Explorer)</a> and save time with powerful features (like intelligent search and variable extraction), running locally on your machine.</li><li><strong>Register, test, deploy</strong>: Use <a href=\"https://www.apollographql.com/docs/rover/getting-started/\">Rover (Apollo&#8217;s new CLI tool)</a> to register your graph to Apollo&#8217;s Schema Registry.</li><li><strong>Collaborate &amp; manage</strong>: With your graph variants (testing, staging, production) published to the registry, you have access to all of Apollo Studio&#8217;s collaboration, productivity, and reporting tools like <a href=\"https://www.apollographql.com/docs/studio/explorer/\">Apollo Explorer</a>, <a href=\"https://www.apollographql.com/blog/how-apollo-studio-client-awareness-improved-our-lives/\">client awareness</a>, <a href=\"https://www.apollographql.com/docs/studio/setup-analytics/\">metrics reporting</a>, <a href=\"https://www.apollographql.com/docs/studio/performance-alerts/\">performance alerts</a>, <a href=\"https://www.apollographql.com/docs/studio/schema-change-integration/\">schema change notifications</a>, and more! Log in and see what&#8217;s going on with your graph.</li><li><strong>Design your federated graph</strong>: Ready to grow? <a href=\"https://apollographql.github.io/apollo-workbench-vscode/\">Apollo Workbench</a>, a new schema design tool built by the Solutions team at Apollo, helps you migrate from monolith or schema-stitching to Federation.</li></ul>\n\n\n\n<p>You can <a href=\"https://www.apollographql.com/graphql-summit/thank-you/graphql-summit-worldwide-keynote\">watch the Apollo keynote here</a>.</p>\n\n\n\n<h2><a href=\"#client-side-graphql\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"client-side-graphql\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client-side GraphQL</h2>\n\n\n\n<h3><a href=\"#oh-hello-apollo-client-farewell-redux\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"oh-hello-apollo-client-farewell-redux\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Oh Hello Apollo Client, Farewell Redux</strong></h3>\n\n\n\n<p>In this talk, Ankita Kulkarni (<a href=\"https://twitter.com/kulkarniankita9\">@kulkarniankita9</a>) discusses the needs of a good state management approach and takes us through how to migrate from Redux to Apollo Client 3.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/oh-hello-apollo-client-farewell-redux\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#testing-react-apollo-client\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"testing-react-apollo-client\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing React Apollo Client</h3>\n\n\n\n<p>Adhithi Ravichandran (<a href=\"https://twitter.com/adhithiravi\">@AdhithiRavi</a>) shows us how to test React components, queries, mutations, error states and loading states.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/testing-react-apollo-client\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#graphql-and-mobile-panel\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"graphql-and-mobile-panel\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL and Mobile Panel</h3>\n\n\n\n<p>Check out this panel featuring engineers from Apollo (Ellen Shapiro — <a href=\"https://twitter.com/designatednerd\">@designatednerd</a>, Martin Bonnin — <a href=\"https://twitter.com/martinbonnin\">@martinbonnin</a>), GitHub (Hesham Salman — <a href=\"https://twitter.com/_ironham\">@_IronHam</a>), and Shopify (Ivan Savytskyi — <a href=\"https://github.com/sav007\">@sav007</a>) as they discuss major themes in mobile app development like dealing with types, caching, nullability, and error handling.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/graphql-and-mobile-panel\">Watch here</a>.</p>\n\n\n\n<h2><a href=\"#architecture\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"architecture\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h2>\n\n\n\n<h3><a href=\"#using-subscriptions-with-your-federated-data-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"using-subscriptions-with-your-federated-data-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Subscriptions with Your Federated Data Graph</h3>\n\n\n\n<p>Instead of building subscriptions directly into your graph, Mandi Wise (<a href=\"https://twitter.com/mandiwise\">@mandiwise</a>) demonstrates a decoupled approach to provide subscription support in the context of a federated architecture, but in a scalable, maintainable, and performant way.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/using-subscriptions-with-your-federated-data-graph\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#server-driven-uis-on-the-web-with-graphql\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"server-driven-uis-on-the-web-with-graphql\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server Driven UIs on the Web with GraphQL</h3>\n\n\n\n<p>Faraz Ahmad (<a href=\"https://twitter.com/farazamiruddin\">@farazamiruddin</a>) teaches us an architectural pattern useful for teams that want to deliver a consistent experience across a number of devices. In the server-driven UI architecture, the server is responsible for the layout and props of the components, leaving the clients to merely fulfill the contract.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/server-driven-uis-on-the-web-with-graphql\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#the-power-of-schema-how-to-work-in-the-future\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"the-power-of-schema-how-to-work-in-the-future\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Power of Schema: How to work in the Future</h3>\n\n\n\n<p>Kyle Schrade (<a href=\"https://twitter.com/NotKyleSchrade\">@NotKyleSchrade</a>) walks us through an approach to using nullability and feature flags to keep your schema maintainable over time.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/the-power-of-schema-how-to-work-in-the-future\">Watch here</a>.</p>\n\n\n\n<h2><a href=\"#federation-maintenance-culture\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"federation-maintenance-culture\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Federation, Maintenance &amp; Culture</h2>\n\n\n\n<h3><a href=\"#how-your-infrastructure-choices-make-or-break-your-team-culture\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-your-infrastructure-choices-make-or-break-your-team-culture\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How Your Infrastructure Choices Make (or Break) Your Team Culture</h3>\n\n\n\n<p>In this talk by Jason Lengstorf (<a href=\"https://twitter.com/jlengstorf\">@jlengstorf</a>), we learn how about what makes systems complex and hard for developers to ship code then present a remedy: a checklist of cultural and architectural changes you can make to keep your teams productive.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/how-your-infrastructure-choices-make-or-break-your-team-culture\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#acquiring-a-data-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"acquiring-a-data-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Acquiring a Data Graph</h3>\n\n\n\n<p>Taz Singh (<a href=\"https://twitter.com/tazsingh\">@tazsingh</a>) explains how GraphQL and Apollo Federation helped his team unify their data while going through mergers and acquisitions.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/acquiring-a-data-graph\">Watch here</a>.</p>\n\n\n\n<h3><a href=\"#graphql-observability\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"graphql-observability\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Observability</h3>\n\n\n\n<p>Once we deploy our GraphQL server to production, how do we ensure that everything is working as intended? In this talk, Ash Narcisse (<a href=\"https://twitter.com/_darkfadr\">@_darkfadr</a>) teaches us how to keep tabs on your production graph with observability though OpenTelemetry and Apollo Studio.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/graphql-summit/thank-you/graphql-observability\">Watch here</a>.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>A major thank you to all of the speakers for sharing your experiences with the community.</p>\n\n\n\n<p>Reminder, if you missed any of the talks, you can <a href=\"https://www.apollographql.com/graphql-summit\">watch them here on-demand</a>.</p>\n\n\n\n<p>See you next year!</p>\n",
                    "slug": "graphql-summit-worldwide-2021-recap",
                    "path": "/community/graphql-summit-worldwide-2021-recap/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Community"
                            }
                        ]
                    },
                    "excerpt": "<p>Well folks, that&#8217;s another GraphQL Summit Worldwide in the books 👋. We heard some talks on client-side GraphQL, federation, subscriptions, and testing. In this post, I&#8217;d like to sum up the biggest takeaways from day one of the conference. If you missed any of the talks, fret not my friend — you can&nbsp;watch them on-demand. [&hellip;]</p>\n",
                    "date": "2021-04-15T12:12:44",
                    "modified": "2021-04-27 08:54:11",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/graphql-summit.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2OTIw",
                    "title": "Sharing your graph just got a whole lot easier – Announcing unlimited Consumer seats",
                    "content": "\n<p>Last year, when we launched <a href=\"https://www.apollographql.com/blog/introducing-the-apollo-explorer/\">Apollo Explorer </a>and our schema reference and changelog, we wanted to help you put the power of your graph into the hands of as many people as possible. Starting today, we&#8217;re making it even easier. You can invite everyone in your organization to explore your graph in Apollo Studio using the new Consumer user role. Consumers will have access only to your graph’s Explorer, the schema changelog, and schema reference documentation. Graph champions now have a way to safely bring the graph to every single person in your company, putting the power of your graph in the hands of everyone who would benefit from it.</p>\n\n\n\n<p>Even better, you can invite an unlimited number of your team members with a Consumer role in all plan tiers, including our Free and Team plans. Previously, Free and Teams plans only offered admin-level access to your graph, which limited the number of people who could have visibility and access to your graph.</p>\n\n\n\n<h3><a href=\"#what-does-the-consumer-role-have-access-to\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-does-the-consumer-role-have-access-to\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>What does the Consumer role have access to?</strong></h3>\n\n\n\n<p>With the Consumer role, you can provide visibility and discoverability while preventing people from making unwanted changes. Consumers won’t be able to change any settings, see any operational data or metrics, or make any changes to your schema. These restrictions make it suitable to give out safely to anyone casually using your graph or getting started building applications against your graph. All Consumer users will have instant access to:</p>\n\n\n\n<ul><li><a href=\"https://www.apollographql.com/docs/studio/explorer/\">Apollo Studio Explorer</a>, a feature-packed IDE for formulating and executing sample queries. Users can search for fields and find direct paths that can be run as queries, as well as output data in tables along with lots of other conveniences.</li></ul>\n\n\n\n<ul><li><a href=\"https://www.apollographql.com/docs/studio/explorer/#the-documentation-tab\">Schema reference</a> for automated documentation of your graph’s types and operations. By registering your schema in Apollo Studio you get instant reference material for all of your users.</li><li><a href=\"https://www.apollographql.com/docs/studio/org/graphs/#tracking-schema-changes\">Changelog</a> for an automated view of changes between each new schema published in the registry. Make it easy to see the evolution of your graph over time.</li></ul>\n\n\n\n<h3><a href=\"#inviting-the-consumers-to-studio\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"inviting-the-consumers-to-studio\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Inviting the Consumers to Studio</strong></h3>\n\n\n\n<p>There are two ways you can <a href=\"https://www.apollographql.com/docs/studio/org/members/#inviting-members\">invite</a> people to be Consumers:</p>\n\n\n\n<ol><li>Directly invite members, pre-assigning them the Consumer Role. This can be done from the “Members” tab of your organization’s settings page inside Apollo Studio.<br><img loading=\"lazy\" src=\"https://lh5.googleusercontent.com/I20p3C0AWQUDNNSjvGi3iqfPCP_H2J_Dh9sBb-yXDdnk5nXAbPSHbjJXzAT7hWV7I3K__ZTq_T4yUYu5Kx0BygMKGEzzqfgJM5GdBL9PH-R1IOcm_JC6LNRVhaXRmkBbpNS9-1TK\" width=\"442\" height=\"259\"></li></ol>\n\n\n\n<ol start=\"2\"><li>Create a shareable invite link, assigning the default role as Consumer. This can be done from the “Settings” tab of your organization’s settings page inside Apollo Studio.<br><img loading=\"lazy\" src=\"https://lh3.googleusercontent.com/wiG_NNRB-N8nnMpyLo_21s4ib0HlVRixiYY3SvdWQyGeXVkAUXJ-FR2iYPyAqf1OcBWuW1B95xklXOKlYTkP4mJN6yb90djSyyyo9EdkmjL9D9Gg5a3Nri1UfeZHPWNUW2QupdWO\" width=\"624\" height=\"96\"></li></ol>\n\n\n\n<h3><a href=\"#what-if-i-need-more-granular-permissions\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-if-i-need-more-granular-permissions\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>What if I need more granular permissions?</strong></h3>\n\n\n\n<p><a href=\"http://apollographql.com/pricing\">Apollo Studio Enterprise</a> has unlimited access to the Consumer role as well as Enterprise-only roles of Observer, Contributor, and Graph Admin, along with graph-level roles and protected variants that restrict who can make changes to production or other sensitive environments. To learn more about the Enterprise-only user permissions features visit our <a href=\"https://www.apollographql.com/docs/studio/org/members/\">docs</a>.</p>\n\n\n\n<h3><a href=\"#we-would-love-to-hear-from-you\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"we-would-love-to-hear-from-you\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>We would love to hear from you!</strong></h3>\n\n\n\n<p>Come visit our discussion <a href=\"https://github.com/apollographql/apollo-studio-community/discussions/68\">thread</a> about the new Consumer role to let us know what you think.</p>\n\n\n\n<h3><a href=\"#get-started-today\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"get-started-today\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Get started today</strong></h3>\n\n\n\n<p>If you aren’t yet using Apollo Studio, you can sign up today for <a href=\"https://studio.apollographql.com/signup?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_04_free_consumer_seats\">free</a>.</p>\n",
                    "slug": "sharing-your-graph-just-got-a-whole-lot-easier-announcing-unlimited-consumer-seats",
                    "path": "/announcement/platform/sharing-your-graph-just-got-a-whole-lot-easier-announcing-unlimited-consumer-seats/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Announcement"
                            },
                            {
                                "name": "Platform"
                            },
                            {
                                "name": "Platform"
                            },
                            {
                                "name": "Tooling"
                            }
                        ]
                    },
                    "excerpt": "<p>Last year, when we launched Apollo Explorer and our schema reference and changelog, we wanted to help you put the power of your graph into the hands of as many people as possible. Starting today, we&#8217;re making it even easier. You can invite everyone in your organization to explore your graph in Apollo Studio using [&hellip;]</p>\n",
                    "date": "2021-04-07T11:01:04",
                    "modified": "2021-05-20 09:02:27",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/Blog-Images-2.jpg"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Jeffrey Burt"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2ODk5",
                    "title": "Powerful new GraphQL tools for Apollo Federation",
                    "content": "\n<p>It’s been two years since we launched Apollo Federation. What started as a spec has blossomed into a community of developers who share a desire to bring the joy of GraphQL to more teams at their company. Over 12 community projects in 9 languages—along with multiple database vendors—have implemented federation as the industry standard for composing graphs together.</p>\n\n\n\n<p>Today, we’re excited to announce some exciting new (free!) Apollo tools to help you and your teammates use federation to its fullest:</p>\n\n\n\n<ul><li><strong>Improvements in </strong><a href=\"https://studio.apollographql.com/signup?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_04_federation\"><strong>Apollo Studio</strong></a> around navigation and management of federated graphs</li><li><a href=\"https://www.apollographql.com/docs/rover/\"><strong>Rover</strong></a>, our new open-source Rust CLI for interacting with graphs and schemas</li><li><strong><a href=\"https://github.com/apollographql/apollo-workbench-vscode\">Workbench</a></strong>, an open-source VS Code extension for designing and growing your federated schemas</li></ul>\n\n\n\n<p>Tune in to the <a href=\"https://summit.graphql.com/\">GraphQL Summit</a> keynote tomorrow, <strong>7 April at 9:00 AM PT</strong>, to see demos of these tools, plus plenty more exciting news from Apollo!</p>\n\n\n\n<h2><a href=\"#first-what-is-federation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"first-what-is-federation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>First, what </strong><strong><em>is</em></strong><strong> federation?</strong></h2>\n\n\n\n<p>Federation is an architecture for <strong>composing</strong> two or more graphs (called <strong>subgraphs</strong>) into a single data graph (called a <strong>supergraph</strong>). A supergraph’s schema is made up of all the composed subgraph schemas, plus some metadata. Subgraph and supergraph schemas all adhere to the GraphQL spec, so they’re all valid GraphQL documents.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/docs/federation/quickstart\">Getting started with federation</a> doesn’t require any changes to your subgraphs. Once you’ve composed two subgraphs together, you can even extend your types across subgraphs.</p>\n\n\n\n<p>Unlike schema stitching, which relies on imperative, manual code to connect graphs, federation is declarative. Federation’s declarative composition model produces a single, static artifact representing your supergraph. This artifact can power helpful workflows like validating breaking changes while you develop your subgraph.</p>\n\n\n\n<h2><a href=\"#developing-a-federated-graph\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"developing-a-federated-graph\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Developing a federated graph</strong></h2>\n\n\n\n<p>Whether you’re working with 2 subgraphs or 50 subgraphs, you need a source of truth to coordinate changes to the supergraph. That’s where the Apollo registry comes in! By pushing each subgraph schema to the registry during CI/CD, you can ensure that your editor, graph browser, and terminal are always synced to the most up-to-date supergraph.</p>\n\n\n\n<p>There are three stages in the federation development lifecycle: design, implementation, and consumption. We want each of these stages to be as delightful and fast as possible, so we’ve invested in tooling to help you every step of the way.</p>\n\n\n\n<h3><a href=\"#implementing-a-federated-graph-with-rover\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"implementing-a-federated-graph-with-rover\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Implementing a federated graph with Rover</strong></h3>\n\n\n\n<p><a href=\"https://www.apollographql.com/docs/rover/\">Rover</a> is our new CLI for interacting with graphs and the Apollo Studio registry. It’s also our <a href=\"https://github.com/apollographql/rover\">first open-source project written in Rust</a> 🦀, which we’re excited to build more with in the future.</p>\n\n\n\n<p>What’s the difference between Rover and its predecessor, the Apollo CLI? For starters, Rover is built as a single static binary. Unlike the current Apollo CLI written in TypeScript, this means you can run Rover in any language server, CI/CD pipeline, or DevOps environment.</p>\n\n\n\n<p>With Rover, you can <a href=\"https://www.apollographql.com/docs/rover/supergraphs/\">build your first federated graph</a> by running <code>rover supergraph compose</code> in your terminal, passing in a config file listing where to find your running subgraphs. Then, you can pipe the resulting schema into another command, print it to a local <code>.graphql</code> file, or <a href=\"https://www.apollographql.com/docs/federation/quickstart\">pass it to <code>@apollo/gateway</code></a> (this feature is experimental). Running composition locally shortens the feedback loop between making subgraph changes and seeing how they impact the supergraph, which speeds up implementation considerably.</p>\n\n\n\n<p>You can <a href=\"https://www.apollographql.com/docs/rover/subgraphs/#publishing-a-subgraph-schema-to-apollo-studio\">publish your subgraph to the Apollo registry</a> by running <code>rover subgraph publish</code> in your CI/CD pipeline. Before you <a href=\"https://www.apollographql.com/docs/rover/subgraphs/#publishing-a-subgraph-schema-to-apollo-studio\">publish subgraph schema changes</a>, you can even validate<a href=\"https://www.apollographql.com/docs/studio/schema-checks/\"> </a>them with <code>rover subgraph check</code> to confirm that you aren&#8217;t introducing breaking changes to your application clients (this requires an Apollo Studio Team plan).</p>\n\n\n\n<p>Rover is still in public preview, so these features are constantly evolving. We appreciate any help testing it out, as well as your <a href=\"https://github.com/apollographql/rover\">feedback in GitHub issues</a>!</p>\n\n\n\n<h3><a href=\"#free-apollo-studio-features-for-browsing-and-testing-federated-graphs\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"free-apollo-studio-features-for-browsing-and-testing-federated-graphs\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Free Apollo Studio features for browsing and testing federated graphs</strong></h3>\n\n\n\n<p>Once your federated graph grows beyond 2 subgraphs, it’s difficult to know which subgraph is responsible for each type or field. Figuring out who to contact if there’s an issue with a subgraph is also challenging, especially when we’re all working remotely.</p>\n\n\n\n<p>Knowing what’s in your graph and who built it makes your graph more discoverable and prevents duplication of work. We’re all about saving you time and reducing code, so we built federation awareness into <a href=\"https://studio.apollographql.com/signup?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_04_federation\">Apollo Studio</a>.</p>\n\n\n\n<p>To take advantage of these new features, push your federated graph to the registry with Rover or the Apollo CLI. Then, you can <a href=\"https://www.apollographql.com/docs/studio/federated-graphs/#adding-the-contact-directive-to-your-subgraph\">optionally integrate the <code>@contact</code> directive</a> to assign an owner for each subgraph.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/-bjRPqePfLYE5xbM9lHTPKq4MhqnSQZLti4MPMXFdSd5Qsjy_jvq4BhF7O8qh5ntCA3XriTClvlORqURTtLbmUCFjoMNaR_bNKmgDtgKLNeHADBct61wpkhlYw76xy7JAJl3zh1m\" alt=\"image.png\"/></figure>\n\n\n\n<p>We’ve also improved the <a href=\"https://www.apollographql.com/docs/studio/explorer/\">Apollo Studio Explorer</a>, which is the only federation-aware GraphQL IDE for development and production graphs. In the Explorer, you can inspect query plans to learn how your supergraph fetches data. Turn on hints to see which subgraph each field comes from as you’re building your query.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/wlTS3dWBlWGBZ5vV64xQVqx-ZmPrLVI8AVaWbhdnNmtlOF2wyT-wBO14q06on9DdQnYPFLvmCVIHZoOK-ukzkbKJpkgQKQi3co1efWwWIKFl7GUaI7O2ewki9vcNESFn5C37WbRn\" alt=\"image.png\"/></figure>\n\n\n\n<h3><a href=\"#designing-a-federated-graph-with-workbench\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"designing-a-federated-graph-with-workbench\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Designing a federated graph with Workbench</strong></h3>\n\n\n\n<p>Once you’ve successfully composed two subgraphs, you can start thinking about extending their types and linking fields between them. <a href=\"https://github.com/apollographql/apollo-workbench-vscode\">Our new VS Code extension Workbench</a> can help you design a federated graph from the comfort of your editor without changing code or running servers.</p>\n\n\n\n<p>Our Solutions team built Workbench after learning from our enterprise customers that they started designing their schemas on whiteboards, in shared documents, or even on blank sheets of paper. Those representations can quickly get out of date when a subgraph changes, so we decided to build an experience around the Apollo registry that syncs your editor to your graph. Workbench runs composition in your editor, so you can preview how subgraph changes will affect your supergraph without running any servers.</p>\n\n\n\n<p>Workbench is still experimental, but <a href=\"https://github.com/apollographql/apollo-workbench-vscode\">we’d love to hear your feedback</a>. Let us know how we can improve how you design your schema.</p>\n\n\n\n<h2><a href=\"#get-started-with-federation-%f0%9f%9a%80\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"get-started-with-federation-%f0%9f%9a%80\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Get started with federation! 🚀</strong></h2>\n\n\n\n<p>From design to implementation to consumption, we hope that Apollo Studio, Rover, and Workbench will make your entire GraphQL federation experience delightful. For demos of these tools, <a href=\"https://summit.graphql.com/\">tune into the GraphQL Summit keynote</a> tomorrow, 7 April at 9:00 AM PT. If you’d like to dive in yourself, we’ve put together a <a href=\"https://www.apollographql.com/docs/federation/quickstart/\">new federation tutorial</a> to help you along your journey.</p>\n\n\n\n<p>Even if you’re not ready to start federating, we encourage you to <a href=\"https://www.apollographql.com/docs/rover/graphs/#publishing-a-schema-to-apollo-studio\">push your graph to the Apollo registry</a> (it’s free!) so you can take advantage of the Apollo Studio Explorer and Rover. Using the registry as your source of truth will allow you to turn off introspection in production, which is important for maintaining the security and privacy of your graph.</p>\n\n\n\n<p>Happy federating!</p>\n",
                    "slug": "powerful-new-graphql-tools-for-apollo-federation",
                    "path": "/announcement/tooling/powerful-new-graphql-tools-for-apollo-federation/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Announcement"
                            },
                            {
                                "name": "Tooling"
                            }
                        ]
                    },
                    "excerpt": "<p>It’s been two years since we launched Apollo Federation. What started as a spec has blossomed into a community of developers who share a desire to bring the joy of GraphQL to more teams at their company. Over 12 community projects in 9 languages—along with multiple database vendors—have implemented federation as the industry standard for [&hellip;]</p>\n",
                    "date": "2021-04-06T08:00:00",
                    "modified": "2021-05-27 10:19:02",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/image-4.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Peggy Rayzis"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2OTAz",
                    "title": "Unblocking teams to go faster with Apollo Federation",
                    "content": "\n<p>Building software for the internet in 2021 is hard. It’s no longer just HTML, CSS, and JavaScript. We now have to deliver our products beyond just websites to mobile, voice, in-store, chat, TV, and more—while integrating data from many services and delivering on time. One of the biggest things that slow down developers is waiting to align work with other teams. It is common to get blocked while waiting to coordinate or waiting for their backlog to free up.<br><br></p>\n\n\n\n<p>We launched Apollo because we believe GraphQL transforms how product engineering teams build new experiences by unblocking teams and allowing them to work in parallel. Front-end teams can build new experiences faster by directly querying the graph and not waiting for new REST endpoints to be built. As each new capability is added to the graph, it&#8217;s available for all other teams to take advantage of it.</p>\n\n\n\n<p>As we worked with early GraphQL adopters, we realized they needed a solution that could serve the needs of engineering organizations that were running at scale. They wanted the power of a single endpoint coupled with the flexibility of distributed ownership. So in 2019, we launched <a href=\"https://www.apollographql.com/blog/apollo-federation-f260cf525d21/\">Apollo Federation</a> and Apollo Gateway, a Federation-compatible graph router, to help teams use GraphQL in distributed architectures. With Federation, each service or domain team can own their part of the graph schema, known as the subgraph, while building a unified common graph for their developers.</p>\n\n\n\n<p><br><br>Next, we launched Apollo’s <a href=\"https://www.apollographql.com/blog/announcing-managed-federation-265c9f0bc88e/)\">Managed Federation,</a> a hosted solution for scaling changes to your federated graph pipelines across many teams. Managed federation helps you reliably deploy schema changes to your Apollo Gateway, including checks for composition integrity. It prevents shipping breaking change by using your live traffic as an automated test suite. We’re thrilled by the growth and acceptance of Managed Federation by hundreds of the world’s most innovative companies. Apollo customers now run more than 2 billion queries a day through Apollo federated data graphs, representing a 400% annual growth.</p>\n\n\n\n<p><br><br>Equally validating is the industry adoption of the Federation Specification. In addition to Apollo’s Server, there are now more than a dozen <a rel=\"noreferrer noopener\" href=\"https://www.apollographql.com/docs/federation/other-servers/\" target=\"_blank\">GraphQL servers</a> that support federation. Netflix open-sourced their <a rel=\"noreferrer noopener\" href=\"https://netflix.github.io/dgs/\" target=\"_blank\">DGS</a> GraphQL Server that was built for SpringBoot and they are<a rel=\"noreferrer noopener\" href=\"https://www.infoq.com/presentations/netflix-api-graphql-federation/\" target=\"_blank\"> betting their entire graph strategy</a> on Federation. Companies including <a rel=\"noreferrer noopener\" href=\"https://medium.com/adobetech/graphql-making-sense-of-enterprise-microservices-for-the-ui-46fc8f5a5301\" target=\"_blank\">Adobe</a>, <a rel=\"noreferrer noopener\" href=\"https://medium.com/walmartglobaltech/federated-graphql-walmart-bfc85c2553de\" target=\"_blank\">Walmart</a>, and <a rel=\"noreferrer noopener\" href=\"https://www.apollographql.com/blog/9-lessons-from-a-year-of-apollo-federation/\" target=\"_blank\">StockX</a> are all choosing Federation. Database vendors are also adopting Apollo Federation as a graph integration strategy. The latest to join is DataStax whose engineers are adding Apollo Federation to the open-source data gateway <a rel=\"noreferrer noopener\" href=\"https://stargate.io/\" target=\"_blank\">Stargate</a>, delivering Federation-ready GraphQL APIs to access Apache Cassandra™ stored data.</p>\n\n\n\n<p><br><br>The most important signal that Federation is solving real-world problems are the stories we’re hearing from our customers:</p>\n\n\n\n<h2><a href=\"#fast-moving-startups-powering-their-product-development-with-federation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"fast-moving-startups-powering-their-product-development-with-federation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Fast-moving startups powering their product development with Federation</strong></h2>\n\n\n\n<p><a href=\"http://modernhealth.com\">Modern Health</a>, a startup founded in 2017, chose Apollo Federation to help power their service-oriented architecture strategy and fulfill their mission of democratizing access to mental health.</p>\n\n\n\n<p><br><br><em>&#8220;We chose Apollo so we can continue to focus on our company mission &#8211; destigmatizing and making mental health more accessible for employees across the world. Apollo’s Federation empowers our engineering teams to work independently while collaborating on a rapidly growing graph that is becoming central to how we deliver industry-leading products and features to our growing global customer base.&#8221;</em>&#8211; Nick DiRienzo, Software Engineer, Modern Health</p>\n\n\n\n<h2><a href=\"#looking-to-the-future\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"looking-to-the-future\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><br><strong>Looking to the future</strong></h2>\n\n\n\n<p>We’re excited that Federation has become the industry-standard choice for distributed GraphQL and today our teams are announcing several new integrated Federation tools including composition validation and webhooks in Apollo Studio as well as:</p>\n\n\n\n<ul><li><strong><a href=\"https://github.com/apollographql/apollo-workbench-vscode\">Workbench</a></strong> is a VS Code plugin that helps developers collaborate on schema design in a federated graph</li><li><strong><a href=\"https://www.apollographql.com/docs/rover/\">Rover CLI</a></strong> is a new tool to access all the power of Federation from the command-line and integrates well in all languages and CI environments.</li></ul>\n\n\n\n<p>You can learn more about these tools <a href=\"https://www.apollographql.com/blog/powerful-new-graphql-tools-for-apollo-federation\">here</a> and at <a href=\"https://summit.graphql.com/\">GraphQL Summit Worldwide</a> on April 7th where we will be talking about some of the new enhancements to our platform, and <a href=\"https://summit.graphql.com/webinars/graphql-summit-scale-presented-by-apollo/\">GraphQL Summit Scale </a>on April 8th where we will talk about the technical, cultural and organizational best practices for scaling GraphQL.<br></p>\n",
                    "slug": "unblocking-teams-to-go-faster-with-apollo-federation",
                    "path": "/announcement/backend/unblocking-teams-to-go-faster-with-apollo-federation/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Announcement"
                            },
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Platform"
                            },
                            {
                                "name": "Tooling"
                            }
                        ]
                    },
                    "excerpt": "<p>Building software for the internet in 2021 is hard. It’s no longer just HTML, CSS, and JavaScript. We now have to deliver our products beyond just websites to mobile, voice, in-store, chat, TV, and more—while integrating data from many services and delivering on time. One of the biggest things that slow down developers is waiting [&hellip;]</p>\n",
                    "date": "2021-04-06T07:28:53",
                    "modified": "2021-05-20 09:04:31",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/unblock_teams_blog_image.jpg"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Matt DeBergalis"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2OTgy",
                    "title": "Testing Apollo Client Applications",
                    "content": "\n<p>Testing is likely one of the most important (yet challenging) aspects of developing high-quality software that can safely withstand change. Tests give you confidence that your code works and will continue to work — even as you add new features over time.</p>\n\n\n\n<p>This article will discuss three different approaches to testing Apollo Client applications: unit, integration, and end-to-end tests. We&#8217;ll discuss what they test, their tradeoffs, and where they belong within a comprehensive testing strategy.</p>\n\n\n\n<h2><a href=\"#prerequisites\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"prerequisites\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n\n\n\n<ul><li>You know the basics of Apollo Client (<a href=\"http://odyssey.apollographql.com/?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_05_graphql-testing-best-practices\">see the lift-off course to get started</a>)</li><li>(optional) You&#8217;ve read&nbsp;<a href=\"https://www.apollographql.com/blog/apollo-client-client-side-architecture-basics\">Apollo Client &amp; Client-Side Architecture Basics</a>&nbsp;to learn about the different concerns involved in a client-side web application</li></ul>\n\n\n\n<h2><a href=\"#unit-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"unit-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit testing</h2>\n\n\n\n<p>The first type of test that most developers learn about when they get into testing is <em>unit testing</em>.</p>\n\n\n\n<h3><a href=\"#what-is-a-unit-test\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-a-unit-test\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a unit test?</h3>\n\n\n\n<p>A unit test is the type of test most concerned with testing an <strong>individual unit of code</strong>.</p>\n\n\n\n<p>That&#8217;s admittedly abstract, but within the context of an Apollo Client application, an individual unit of code is most likely to be either a function, a React hook, or a <strong>React component</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1008\" height=\"416\" src=\"/static/f1b19394fd8aa10630433a9df759a220/unit_testing_graphql_components_1.png\" alt=\"\" class=\"wp-image-6986\" srcset=\"/static/f1b19394fd8aa10630433a9df759a220/unit_testing_graphql_components_1.png 1008w, https://wp.apollographql.com/wp-content/uploads/2021/04/unit_testing_graphql_components_1-300x124.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/unit_testing_graphql_components_1-768x317.png 768w\" sizes=\"(max-width: 1008px) 100vw, 1008px\" /></figure>\n\n\n\n<p>Out of all the different tests that we can write, unit tests are the <em>cheapest</em>. Because of their small surface area, their simplicity, and the little to no dependencies they have, these tests are the fastest to <em>write</em> and <em>run</em>. We write unit tests so that they don&#8217;t rely on expensive operations like <em>real</em> network requests.</p>\n\n\n\n<h3><a href=\"#what-are-we-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-are-we-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are we testing?</h3>\n\n\n\n<p>There are two things we could test for in React components: <em>presentation</em> and (optionally) <em>behavior</em>.</p>\n\n\n\n<p><strong>Presentation</strong>: When fetching data using Apollo Client, components can be in either <code>loading</code>, <code>success</code>, or <code>error</code> states. For each of these states, it&#8217;s a good idea to test that the presentation is what we intend it to be.</p>\n\n\n\n<p>For example, consider we have a component that presents details about a specific dog (performs a <code>GetDogByName</code> query).</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\n// The query for the `Dog` component is close to the component\nexport const GET_DOG_QUERY = gql`\n  query GetDogByName($name: String) {\n    dog(name: $name) {\n      id\n      name\n      breed\n    }\n  }\n`;\n\nexport function Dog({ name }) {\n  const { loading, error, data } = useQuery(\n    GET_DOG_QUERY,\n    { variables: { name } }\n  );\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  return (\n    <p>\n      {data.dog.name} is a {data.dog.breed}\n    </p>\n  );\n}</code></pre>\n\n\n\n<p>In this scenario, we&#8217;d likely want to test:</p>\n\n\n\n<ul><li><code>loading</code> — How the component renders when it&#8217;s fetching the dog.</li><li><code>success</code> — How the component renders after it&#8217;s successfully fetched the dog.</li><li><code>error</code> — How the component renders if it was unable to fetch the dog. Due to the nature of errors, there could be any number of domain or infrastructure-specific reasons why the GraphQL query failed (like <code>DogNotFound</code>, <code>NetworkError</code>, <code>PermissionDenied</code>, or <code>UnexpectedError</code> for example).</li></ul>\n\n\n\n<p>To test this, we can use Apollo&#8217;s <code>MockedProvider</code> component to wrap our component under test with one that lets us pass in mock GraphQL query responses. This enables us to force the code paths necessary to test our components.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import TestRenderer from 'react-test-renderer';\nimport { MockedProvider } from '@apollo/client/testing';\nimport { GET_DOG_QUERY, Dog } from './dog';\n\nit('displays a loading message when fetching', () => {\n  const component = TestRenderer.create(\n    <MockedProvider mocks={mocks} addTypename={false}>\n      <Dog name=\"Buck\" />\n    </MockedProvider>,\n  );\n\n  const tree = component.toJSON();\n  expect(tree.children).toContain('Loading...');\n});\n\nit('displays the dog details on success', () => {\n  ...\n});\n\nit('displays a \"not found\" message when the dog doesnt exist', () => {\n  ...\n});\n\nit('displays a generic error message when anything else goes wrong', () => {\n  ...\n});\n﻿</code></pre>\n\n\n\n<p><strong>Behaviour (optional)</strong>: We may also choose to place <em>behavior</em> in our React components. In Client-Side Architecture Basics, we call this <em>interaction logic</em> — a form of decision-making logic executed after the user interacts with the page somehow — like a keypress or a button click.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport React from 'react';\n\nconst DARK_MODE_QUERY = gql`{\n  query DarkModeQuery {\n    app {\n      darkMode @client\n    }\n  }\n}`\n\nconst DarkMode = (props) => {\n  const { data, loading, error } = useQuery(DARK_MODE_QUERY);\n  return (\n   <button onClick={(e) => data.app.darkMode \n    ? props.turnOffDarkMode(e) \n    : props.turnOnDarkMode(e)}>\n     {/** Notice the decision-making logic above? **/}\n    </button>\n  )\n}\n\nexport default DarkMode;\n﻿</code></pre>\n\n\n\n<p>To test this, we&#8217;d have to mock out and spy on the state-changing functions in order to test them.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import DarkMode from \"./DarkMode\"\nimport { MockedProvider } from '@apollo/client/testing';\nimport { render } from \"@testing-library/react\";\nimport { InMemoryCache } from \"@apollo/client\";\n\ndescribe('darkMode', () => {\n  it('toggles between dark and light mode', async () => {\n\n    const turnOffMock = jest.fn();\n    const turnOnMock = jest.fn();\n\n    const mocks: any [] = [\n      // ... queries\n    ]\n\n    const cache = new InMemoryCache({\n      // ...configuration options...\n    })\n\n    const component = render(\n      <MockedProvider cache={cache} mocks={mocks} \n        addTypename={false}>\n        <DarkMode\n          turnOffDarkMode={turnOffMock}\n          turnOnDarkMode={turnOnMock}\n        />\n      </MockedProvider>,\n    );\n\n    // find the button and simulate clicks\n    const button = await component.findByRole('button');\n    button.click();\n    button.click();\n  \n    expect(turnOffMock).toHaveBeenCalledTimes(1);\n    expect(turnOnMock).toHaveBeenCalledTimes(1);\n  })\n})\n﻿</code></pre>\n\n\n\n<p>Not only does this increase the surface area of what we need to test in our presentational components, but it makes the setup a little messier and tends to lead to <em>prop drilling</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const Layout = ({ children }: { children: any }) => (\n  <div className=\"layout\">\n    <DarkMode \n      turnOffDarkMode={(e: any) => { // Not the cleanest }}\n      turnOnDarkMode={(e: any) => {  // Not the cleanest }}\n    />\n    {children}\n  </div>\n)</code></pre>\n\n\n\n<p>While we can certainly write our components this way, we simplify our testing strategy by extracting state and decision-making logic into React Hooks (an <em>interaction layer</em> concern) instead.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">export function useDarkMode () {\n  // Using a reactive variable to toggle\n  const toggleDarkMode = () => {\n    if (darkModeVar()) {\n      darkModeVar(false);\n    } else {\n      darkModeVar(true);\n    }\n  }\n  \n  return {\n    operations: { toggleDarkMode }\n  }\n}</code></pre>\n\n\n\n<p>This allows us to focus on the <em>presentation</em> aspect of our React components. And if we wish to test component state and how it changes, we can write unit tests for our custom React Hooks instead.</p>\n\n\n\n<h3><a href=\"#how-to-start-unit-testing-react-components\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-to-start-unit-testing-react-components\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to start unit testing React components</h3>\n\n\n\n<p>Stay tuned for an in-depth blog post on testing React components, hooks, and <a href=\"https://www.apollographql.com/blog/local-state-management-with-reactive-variables/\">reactive variables</a> in an Apollo Client app.</p>\n\n\n\n<p>Until then, I recommend reading the Apollo client docs on <a href=\"https://www.apollographql.com/docs/react/development-testing/testing/\">Testing React Components</a> to learn how to test error, success, and loading states.</p>\n\n\n\n<p>To make arranging, acting, asserting, and running your tests more enjoyable, I recommend the following tools:</p>\n\n\n\n<ul><li><a href=\"https://jestjs.io/\">Jest</a> — A popular and minimal test runner.</li><li><a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React-Testing Library</a> — A library of declarative DOM APIs that helps you write more behaviour-driven tests.</li></ul>\n\n\n\n<h3><a href=\"#tradeoffs\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"tradeoffs\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tradeoffs?</h3>\n\n\n\n<p>Benefits</p>\n\n\n\n<ul><li>Simplest of all tests</li><li>Fast</li></ul>\n\n\n\n<p>Disadvantages</p>\n\n\n\n<ul><li>Component-level unit tests don&#8217;t cover a massive amount of surface area — they can only bring so much confidence that your application is working properly.</li></ul>\n\n\n\n<h2><a href=\"#integration-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"integration-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration testing</h2>\n\n\n\n<p>This next type of test is in my opinion, the best type of test you can write (<a href=\"https://kentcdodds.com/blog/write-tests\">and a few others tend to agree</a>).</p>\n\n\n\n<h3><a href=\"#what-is-an-integration-test\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-an-integration-test\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an integration test?</h3>\n\n\n\n<p>It&#8217;s hard to really pin down what an integration test is. But if you ask me, I&#8217;d call it the type of test that <em>verifies that a group of (cohesive) components work together to realize a feature.</em></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"802\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing-1024x802.png\" alt=\"\" class=\"wp-image-6988\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing-1024x802.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing-300x235.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing-768x601.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing-1200x939.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/04/integration_testing.png 1216w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>These are also the types of tests that:</p>\n\n\n\n<ul><li>Should be relatively fast</li><li>Mock out expensive stuff like network requests or animation libraries</li><li>Try to cover as much surface area as possible</li><li>Start at the very outer boundary of the application — and in the context of a client-side web application, that usually means starting at the <em>page</em> level.</li></ul>\n\n\n\n<h3><a href=\"#what-are-we-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-are-we-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are we testing?</h3>\n\n\n\n<p><strong>Integration tests</strong> test <strong>features</strong>.</p>\n\n\n\n<p>What&#8217;s a feature exactly? You can think of a <em>feature</em> as a use case, user story, functional requirement, or as a <em>vertical slice</em> that makes up one entire <em>request</em>, whether it be a query or a mutation.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"728\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/04/Untitled-1024x728.png\" alt=\"\" class=\"wp-image-6990\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/04/Untitled-1024x728.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/04/Untitled-300x213.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/Untitled-768x546.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/04/Untitled.png 1176w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>For example, in a job board application, we may have the following features: <code>login</code>, <code>signup</code>, <code>createJob</code>, <code>editJob</code>, <code>makePayment</code>, <code>applyToJob</code>.</p>\n\n\n\n<p>Once all the features work, we&#8217;re done, right? This is a great way to divide up the cohesive modules that we&#8217;re going to test.</p>\n\n\n\n<p><strong>How are features organized?</strong></p>\n\n\n\n<p>One way to think about features is to consider that they live within <em>pages</em>. And pages have a 1-to-many relationship with features.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"844\" height=\"272\" src=\"/static/a9aeca7443f8f803bc8d90af538c3253/pages_in_testing_components_2.png\" alt=\"\" class=\"wp-image-6992\" srcset=\"/static/a9aeca7443f8f803bc8d90af538c3253/pages_in_testing_components_2.png 844w, https://wp.apollographql.com/wp-content/uploads/2021/04/pages_in_testing_components_2-300x97.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/pages_in_testing_components_2-768x248.png 768w\" sizes=\"(max-width: 844px) 100vw, 844px\" /></figure>\n\n\n\n<p>Therefore, if we have an architecture that makes it easy to spin up a page and all of the components contained within it, then setting up tests that verify the features within it work could be easier as well.</p>\n\n\n\n<p><strong>How do we test features?</strong></p>\n\n\n\n<p>We want to test that our application behaves the way we think it should for each feature. Each feature has at least one happy path and often — multiple sad paths.</p>\n\n\n\n<p>For example, if we were testing the <code>login</code> feature&#8217;s <strong>happy path</strong>, we may want to assert that:</p>\n\n\n\n<ul><li>We see a success modal</li><li>That local storage has an <code>auth-token</code> saved in it</li><li>And finally, that <a href=\"https://reactrouter.com/\">React-Router</a> gets called with a push to the &#8220;/dashboard&#8221; route</li></ul>\n\n\n\n<p>Alternatively, we may want to test the <strong>sad path of &#8220;trying to login with an account that doesn&#8217;t yet exist&#8221;</strong>. In that case, we assert what the application should do by saying that we should:</p>\n\n\n\n<ul><li>See an error modal</li><li>The text says we haven&#8217;t created an account yet</li><li>The page <em>doesn&#8217;t</em> get redirected anywhere</li></ul>\n\n\n\n<p>To do integration testing well means that we need to <em>thoroughly</em> understand the features, their happy paths, and the many sad paths.</p>\n\n\n\n<h3><a href=\"#how-to-start-integration-testing-your-features\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-to-start-integration-testing-your-features\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to start integration testing your features</h3>\n\n\n\n<p><strong>1 — Document the high-level features in your app</strong>. If your team uses user stories, <a href=\"https://martinfowler.com/bliki/GivenWhenThen.html\">Given-When-Then style tests</a> are the most succinct and one-liner Jest spec tests are a bit looser. Either works, but you&#8217;ll want to ensure you express the pre and post-conditions in your tests.</p>\n\n\n\n<p>Here&#8217;s an example of a loosely written test case (because it doesn&#8217;t express the preconditions <em>— ie: what if I haven&#8217;t created my account yet?</em>).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"414\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2-1024x414.jpg\" alt=\"\" class=\"wp-image-6994\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2-1024x414.jpg 1024w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2-300x121.jpg 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2-768x311.jpg 768w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2-1200x486.jpg 1200w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_2.jpg 1364w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>And here&#8217;s an example of how we could be more explicit.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"414\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3-1024x414.jpg\" alt=\"\" class=\"wp-image-6996\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3-1024x414.jpg 1024w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3-300x121.jpg 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3-768x311.jpg 768w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3-1200x486.jpg 1200w, https://wp.apollographql.com/wp-content/uploads/2021/04/testing_fundamentals_3.jpg 1364w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<ul><li><strong>2 — Ensure you have a testable architecture</strong>. A <em>feature-driven</em> architecture helps us think about how to implement features so that they can be tested with integration tests.</li><li><strong>3 — Learn how to mock out expensive things</strong>. Just like we mock out Apollo Client&#8217;s GraphQL requests with the <code>MockedProvider</code>, if we&#8217;re using other things that make network requests or do things that would slow our tests down, we need to learn how to mock them out.</li><li><strong>4 — Learn how to assert correct behavior with the various tools within our stack</strong>. Was an auth token added to local storage? Was the <code>BrowserRouter</code> called? We need to learn how to mock out certain objects so that we keep our tests independent and so that we can spy on when they&#8217;re called, and with what arguments.</li></ul>\n\n\n\n<p>Here&#8217;s an example of what an integration test might look like:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">import { RouterTestUtils } from \"../../shared/testing/RouterTestUtils\"\nimport LoginPage from \"./LoginPage\"\nimport { MockedProvider } from '@apollo/client/testing'\nimport { fireEvent } from \"@testing-library/dom\"\nimport { LOGIN } from './useLogin'\nimport { act } from \"@testing-library/react\"\nimport { Login, LoginVariables } from \"./__generated__/Login\"\nimport { waitForResponse } from \"../../shared/testing/WaitForResponse\"\n\ndescribe('Feature: Login', () => {\n  describe('Scenario: Successful login', () => {\n    describe('Given I have an account', () => {\n      describe('When I try to login', () => {\n        test('Then I should be redirected to the dashboard', async () => {\n\n          // Arrange\n          const mocks = [\n            {\n              request: {\n                query: LOGIN,\n                variables: {\n                  input: {\n                    email: 'khalil@apollographql.com', \n\t\t\t\t\t\t\t\t\t\tpassword: \"tacos\"\n                  }\n                } as LoginVariables,\n              },\n              result: {\n                data: {\n                  login: {\n                    __typename: 'LoginSuccess',\n                    token: \"test-auth-token\",\n                  },\n                } as Login,\n              },\n            }\n          ];\n\n          const { component, router } = RouterTestUtils.renderWithRouter(\n            <MockedProvider mocks={mocks} addTypename={true}>\n              <LoginPage/>\n            </MockedProvider>\n          );\n\n          const routerSpy = jest.spyOn(router, 'pushState');\n\n          // Act\n          const emailInput = await component.getByPlaceholderText(/email/);\n          fireEvent.change(emailInput, { target: { value: 'khalil@apollographql.com'}});\n          \n          const passwordInput = await component.getByPlaceholderText(/password/);\n          fireEvent.change(passwordInput, { target: { value: 'tacos'}})\n\n          const button = await component.findByRole('button');\n\n          button.click();\n\n          await act(async() => {\n            await waitForResponse()  \n          })   \n\n          // Assert\n          expect(RouterTestUtils\n\t   .wasRouteCalled(routerSpy, '/dashboard'))\n            .toEqual(true);\n\n        })\n      })\n    })\n  })\n})\n﻿</code></pre>\n\n\n\n<p>I recommend using either Jest + React-Testing Library or Cypress to write and run your integration tests.</p>\n\n\n\n<h3><a href=\"#tradeoffs\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"tradeoffs\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tradeoffs</h3>\n\n\n\n<p>Benefits</p>\n\n\n\n<ul><li>Tests cover a large surface area</li><li>They can run just as fast as unit tests</li></ul>\n\n\n\n<p>Disadvantages</p>\n\n\n\n<ul><li>Requires more knowledge of how each tool in the stack works under the hood (React rendering, React-Router, Apollo Client, etc) so as to mock them out and spy on functions to assert correctness.</li></ul>\n\n\n\n<h2><a href=\"#end-to-end-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"end-to-end-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>End-to-end testing</h2>\n\n\n\n<p>The last type of test is an easier way to test features: end-to-end tests.</p>\n\n\n\n<h3><a href=\"#what-is-an-end-to-end-test\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-an-end-to-end-test\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an end-to-end test?</h3>\n\n\n\n<p>An <strong>end-to-end test</strong> is a test that acts like a <em>real user</em> using your app and engages in an operation that cuts across the entire stack including the backend application and the database.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"861\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test-1024x861.png\" alt=\"\" class=\"wp-image-6998\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test-1024x861.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test-300x252.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test-768x646.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test-1200x1009.png 1200w, https://wp.apollographql.com/wp-content/uploads/2021/04/end-to-end_test.png 1332w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>This type of test:</p>\n\n\n\n<ul><li>Covers the entire surface area of code involved in implementing a feature</li><li>Runs slower because it relies on rendering, network requests, and real-life infrastructure</li></ul>\n\n\n\n<h3><a href=\"#what-are-we-testing\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-are-we-testing\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are we testing?</h3>\n\n\n\n<p>Again, we&#8217;re testing <strong>features</strong> with end-to-end tests. We can use the same methodology for thinking about end-to-end tests as we do when we think about integration tests.</p>\n\n\n\n<p>The major difference is in the way that we realize the features. We apply a sort of <em>white-box</em> testing in integration tests, meaning that we&#8217;re testing the code from the inside out. With E2E testing, we&#8217;re applying a form of <em>black-box</em> testing, which means that we&#8217;re testing the observable output of our code — that is, to act as a user using the app and assert correct behavior <em>from the outside</em>.</p>\n\n\n\n<h3><a href=\"#how-to-start-end-to-end-testing-your-features\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"how-to-start-end-to-end-testing-your-features\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to start end-to-end testing your features</h3>\n\n\n\n<p>We&#8217;ll set up our E2E tests similarly to how we set up the integration tests. Only now, in order to make our tests run independently from each other, we&#8217;ll have to perform some additional setup logic to clean and re-seed the database.</p>\n\n\n\n<p>Tools like Cypress give us <a href=\"https://docs.cypress.io/guides/getting-started/testing-your-app#Seeding-data\">a powerful set of APIs to run system commands and Node.js code at the start of each test</a>.</p>\n\n\n\n<p>We&#8217;ll dive into the specifics with a hands-on blog post, but today — if you want to get started with E2E testing, I highly recommend taking a look at Cypress&#8217; docs on &#8220;<a href=\"https://docs.cypress.io/guides/getting-started/testing-your-app\">Testing Your First App</a>&#8220;.</p>\n\n\n\n<h3><a href=\"#tradeoffs\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"tradeoffs\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tradeoffs</h3>\n\n\n\n<p>Benefits</p>\n\n\n\n<ul><li>Tests the features of your application</li><li>Gives us confidence that features work from top-to-bottom</li><li>Easier to write than integration tests</li></ul>\n\n\n\n<p>Disadvantages</p>\n\n\n\n<ul><li>Slower</li></ul>\n\n\n\n<h2><a href=\"#testing-strategies\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"testing-strategies\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing strategies</h2>\n\n\n\n<p>Overall, the testing strategy that you choose depends on time, your team&#8217;s skill level, if you practice TDD, and the general testability of your application.</p>\n\n\n\n<p>Integration tests are the clear winner in ROI, but they are certainly the most challenging to write. They strike an outstanding balance between the amount of surface area they cover, speed, and the confidence they can bring you in terms of knowing that your application is running correctly. That comes at the cost of having a better understanding of <em>white-box</em> testing strategies.</p>\n\n\n\n<p>It&#8217;s a great idea to write <strong>unit tests</strong> to test your React components regardless of writing integration or E2E tests. Still, they will likely not give you the amount of confidence you need to know if your application (overall) is working correctly. Consider writing unit tests every time you create a new React component that relies on some data from a GraphQL query.</p>\n\n\n\n<p><strong>End-to-end tests</strong> tend to be the most approachable way to test the features of your application. Your team&#8217;s skill level can vary, and because the Cypress folks have abstracted a lot of the white-box complexity away for us, we can focus on writing higher-level tests that give us the most confidence in the <em>most critical features.</em></p>\n\n\n\n<p>Suppose you were interested in TDD-ing your application. In that case, I&#8217;d recommend using an approach called <a href=\"https://khalilstemmler.com/articles/test-driven-development/introduction-to-tdd/#Double-Loop-TDD\">Double-Loop TDD</a>. This approach means you start with a high-level feature/acceptance test (can be written as either integration or E2E) and then create unit tests on the fly for all the React components needed to realize the feature.</p>\n\n\n\n<p>Finally, if writing tests <em>afterward</em> to give you some confidence is more your style, then E2E tests are the way to go.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>In this post, we discussed three different ways to test your Apollo Client applications: unit tests, integration tests, and end-to-end testing. We looked at how they work, what they test against, and we discussed their tradeoffs.</p>\n\n\n\n<p>In future blog posts, we&#8217;ll demonstrate how to implement each of these types of testing strategies in a real-world Apollo Client application.</p>\n",
                    "slug": "introduction-to-testing",
                    "path": "/frontend/introduction-to-testing/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Frontend"
                            },
                            {
                                "name": "How-to"
                            }
                        ]
                    },
                    "excerpt": "<p>Testing is likely one of the most important (yet challenging) aspects of developing high-quality software that can safely withstand change. Tests give you confidence that your code works and will continue to work — even as you add new features over time. This article will discuss three different approaches to testing Apollo Client applications: unit, [&hellip;]</p>\n",
                    "date": "2021-04-22T17:54:59",
                    "modified": "2021-05-19 15:31:42",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/04/testing-apollo-client-applications.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2ODc2",
                    "title": "TypeScript GraphQL Code Generator – Generate GraphQL Types with Apollo Codegen Tutorial",
                    "content": "\n<p>Don Norman, the author of &#8220;The Design of Everyday Things&#8221; has a philosophy for what he believes constitutes good design. Don says that good design is primarily <em>discoverability</em> and <em>feedback</em>.</p>\n\n\n\n<p>For example, when you encounter something new (like, a new codebase), how quickly can you discover what you can do (discoverability)? And then after you&#8217;ve taken some action, how immediately do you get to know if what you did was correct (feedback)?</p>\n\n\n\n<p>Typed languages like TypeScript give us compile-time types, and <strong>types act as an excellent form of feedback</strong>. They let us know if what we&#8217;re attempting to do is going to work — and they let us know <em>immediately</em>.</p>\n\n\n\n<p>For developers building client-side GraphQL applications using Apollo Client and React, compiling it with TypeScript is a good idea. But without compile-time types on our GraphQL operations, we have to wait until we execute our queries and mutations to tell if we&#8217;re doing something wrong.</p>\n\n\n\n<p>In this post, you&#8217;ll learn how to use Apollo&#8217;s GraphQL codegen to generate TypeScript types for GraphQL operations in your Apollo Client project.</p>\n\n\n\n<h2><a href=\"#apollos-graphql-codegen\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"apollos-graphql-codegen\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo&#8217;s GraphQL Codegen</h2>\n\n\n\n<p>The Apollo CLI (which lives on GitHub at <a href=\"https://github.com/apollographql/apollo-tooling\">apollographql/apollo-tooling</a>) contains a collection of helpful utilities to assist us with maintaining GraphQL applications in production.</p>\n\n\n\n<p>One of the tools from the CLI is the <strong>GraphQL codegen feature</strong>. It lets us:</p>\n\n\n\n<ol><li>Download any GraphQL schema using a GraphQL endpoint</li><li>Generate TypeScript types for queries written in an Apollo Client project (given a valid GraphQL schema)</li></ol>\n\n\n\n<p>And that&#8217;s exactly what we&#8217;ll do. Let&#8217;s get started.</p>\n\n\n\n<h2><a href=\"#prerequisites\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"prerequisites\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n\n\n\n<ul><li>You’re familiar with the command line</li><li>You have Node.js (8+) installed</li><li>You know how to build a full-stack GraphQL application. If not, <a href=\"https://www.apollographql.com/blog/learn-graphql-tutorial-for-full-stack-graphql\">check out this blog post for our recommended tutorials</a>.</li></ul>\n\n\n\n<h2><a href=\"#getting-started\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"getting-started\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started</h2>\n\n\n\n<p>The project I&#8217;ll use to demonstrate how to generate TypeScript types for GraphQL operations is <a href=\"https://github.com/apollographql/ac3-state-management-examples/tree/master/apollo-remote-state\">apollographql/ac3-state-management-examples</a> (the <em>apollo-remote-state</em> example, to be specific).</p>\n\n\n\n<p>You can fork, download, or browse the code online to see the full setup.</p>\n\n\n\n<h3><a href=\"#installation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"installation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h3>\n\n\n\n<p>Assuming we&#8217;re in the root directory of an Apollo Client project, we need to install two development dependencies: <code>apollo</code> and <code>@types/graphql</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">npm install --save-dev apollo @types/graphql</code></pre>\n\n\n\n<p>The <code>apollo</code> dependency is the Apollo CLI while the <code>@types/graphql</code> dependency gives us better type completion for GraphQL operations.</p>\n\n\n\n<h3><a href=\"#downloading-the-schema\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"downloading-the-schema\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Downloading the schema</h3>\n\n\n\n<p>Next, we&#8217;d like to download the GraphQL schema that we&#8217;re working with. In the ac3-state-management-examples repo, the <strong>apollo-remote-state</strong> server lives in <code>/server</code> and runs at <code>http://localhost:4000/</code>.</p>\n\n\n\n<p>With the server started, we&#8217;d like to download the server to a JSON file called <code>graphql-schema.json</code>. </p>\n\n\n\n<p>From the root of your Apollo Client project, paste the following command:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">npx apollo service:download --endpoint=http://localhost:4000/ graphql-schema.json</code></pre>\n\n\n\n<p>Note: <em>npx apollo <strong>schema:download</strong> is an alias for this command and should also work if you swap it out for npx apollo <strong>service:download</strong>.</em></p>\n\n\n\n<p>You should now see a <code>graphql-schema.json</code> file in the root of your Apollo Client project directory. That&#8217;s good.</p>\n\n\n\n<p>Next, we&#8217;ll use this schema + the GraphQL operations in our app to generate TypeScript types for them.</p>\n\n\n\n<h2><a href=\"#generating-types-for-remote-graphql-operations\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"generating-types-for-remote-graphql-operations\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating types for remote GraphQL operations</h2>\n\n\n\n<h3><a href=\"#a-sample-query\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"a-sample-query\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A sample query</h3>\n\n\n\n<p>The ac3-state-management project has several queries in it already (see <a href=\"https://github.com/apollographql/ac3-state-management-examples/tree/master/apollo-remote-state/client/src/operations\">here</a>). One of the queries is to <em>get all todos</em> from the backend GraphQL API. It looks like this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">// apollo-remote-state/client/src/operations/queries/getAllTodos.tsx\nimport { gql } from \"@apollo/client\";\n\nexport const GET_ALL_TODOS = gql`\n  query GetAllTodos {\n    todos {\n      edges {\n        node {\n          id\n          text\n          completed\n        }\n      }\n    }\n  }\n`</code></pre>\n\n\n\n<p>Let&#8217;s see if we can generate the appropriate TypeScript types for this query so that we can get type completion when we use it in our components.</p>\n\n\n\n<h3><a href=\"#generating-types-for-all-operations\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"generating-types-for-all-operations\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating types for all operations</h3>\n\n\n\n<p>The command to generate TypeScript types for all GraphQL operations written in our Apollo Client project is as follows:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">npx apollo codegen:generate --localSchemaFile=graphql-schema.json --target=typescript --tagName=gql</code></pre>\n\n\n\n<p>What we&#8217;re doing here is telling the Apollo CLI that we&#8217;d like to execute the GraphQL codegen feature (denoted by the <code>codegen:generate</code> option). To do this, we use the <code>localSchemaFile</code>, that is — our <code>graphql-schema.json</code> . The GraphQL codegen feature uses this schema file to verify that the queries we&#8217;re writing will compile against our graph, which we&#8217;ve pulled locally. The <code>target</code> flag indicates the output type (TypeScript), and the <code>tagName</code> is the <em>template</em> that the CLI looks for in our code in order to distinguish what <em>is</em> and what <em>isn&#8217;t</em> a GraphQL query.</p>\n\n\n\n<p>If all goes well, you should see a message in your console like the following:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"841\" height=\"462\" src=\"/static/9f340112a101ac3e1aa9e44ff8b0acdf/graphql-codegen-works.png\" alt=\"\" class=\"wp-image-6879\" srcset=\"/static/9f340112a101ac3e1aa9e44ff8b0acdf/graphql-codegen-works.png 841w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-works-300x165.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-works-768x422.png 768w\" sizes=\"(max-width: 841px) 100vw, 841px\" /></figure>\n\n\n\n<p>And if it doesn&#8217;t work — don&#8217;t panic; there&#8217;s likely a great reason why. We&#8217;ll discuss below. Keep reading!</p>\n\n\n\n<p>You should now find <code>__generated__</code> folders within your project containing the generated type definitions for your GraphQL operations. Here&#8217;s an example of what the type defs for <code>GetAllTodos</code> looks like:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">/* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: GetAllTodos\n// ====================================================\n\nexport interface GetAllTodos_todos_edges_node {\n  __typename: \"Todo\";\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nexport interface GetAllTodos_todos_edges {\n  __typename: \"TodosEdge\";\n  node: GetAllTodos_todos_edges_node;\n}\n\nexport interface GetAllTodos_todos {\n  __typename: \"TodosConnection\";\n  edges: (GetAllTodos_todos_edges | null)[];\n}\n\nexport interface GetAllTodos {\n  todos: GetAllTodos_todos;\n}</code></pre>\n\n\n\n<p>Fantastic!</p>\n\n\n\n<h3><a href=\"#using-the-generated-graphql-operation-types\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"using-the-generated-graphql-operation-types\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the generated GraphQL operation types</h3>\n\n\n\n<p>Now, we can utilize our types for the GraphQL operations in our code. Here&#8217;s a stripped down example of what a <code>TodoList</code> component might look like utilizing our new types.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">import React from 'react'\nimport TodoList from '../components/TodoList';\nimport { Todos } from '../models/Todos';\nimport { useQuery } from '@apollo/client';\nimport { GetAllTodos } from '../operations/__generated__/GetAllTodos'; // Import\nimport { GET_ALL_TODOS } from '../operations/queries/getAllTodos';\n...\n\nexport default function VisibleTodoList () {\n\t...\n  const { \n   loading: isTodosLoading, \n   data: todosConnection, \n   error: todosError \n  } = useQuery<GetAllTodos>( // Use the type here for type safety\n    GET_ALL_TODOS\n  );\n\n  if (isTodosLoading) return <div>Loading...</div>\n  if (todosError) return <div>An error occurred {JSON.stringify(todosError)}</div>\n  if (!todosConnection) return <div>None</div>;\n\n  const todos: Todos = todosConnection.todos.edges.map((t) => t?.node) as Todos;\n\n  return <TodoList \n    todos={todos}\n  />;\n}</code></pre>\n\n\n\n<h2><a href=\"#generating-types-for-client-only-types\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"generating-types-for-client-only-types\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating types for client-only types</h2>\n\n\n\n<p>If the <code>codegen:generate</code> script <em>did not work for you</em>, a common reason is that we&#8217;re working with <a href=\"https://www.apollographql.com/blog/local-state-management-with-reactive-variables/\">client-only types</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"977\" height=\"481\" src=\"/static/c2f18b1ee3cfe114c6094ac7385131e6/graphql-codegen-doesnt-work.png\" alt=\"\" class=\"wp-image-6881\" srcset=\"/static/c2f18b1ee3cfe114c6094ac7385131e6/graphql-codegen-doesnt-work.png 977w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-doesnt-work-300x148.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-doesnt-work-768x378.png 768w\" sizes=\"(max-width: 977px) 100vw, 977px\" /></figure>\n\n\n\n<p>Client-only types are types that exist <em>only</em> on the client, but not in the remote GraphQL API. We can use them, along with <a href=\"https://www.apollographql.com/blog/local-state-management-with-reactive-variables/\">Apollo Client 3&#8217;s Reactive Variables API</a> to represent local state. Here&#8217;s an example of a query that uses the <code>@client</code> directive for a client-only type.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">import { gql } from \"@apollo/client\";\n\nexport const GET_VISIBILITY_FILTER = gql`\n  query GetVisibilityFilter {\n    visibilityFilter @client {\n      id \n      displayName\n    }\n  }\n`</code></pre>\n\n\n\n<p>How do we remedy this? We extend the SDL of our graph with a local schema.</p>\n\n\n\n<h3><a href=\"#extending-your-graph-with-a-local-schema\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"extending-your-graph-with-a-local-schema\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending your graph with a local schema</h3>\n\n\n\n<p>Since the Apollo CLI relies on a GraphQL schema to determine what <em>is</em> and <em>what isn&#8217;t</em> in your graph, and which operations can be typed, and which ones can&#8217;t, we can <em>extend</em> the graph with our client-only types by creating a local schema file.</p>\n\n\n\n<p>Create a new file in the root of your project called <code>local-schema.graphql</code>. Here&#8217;s where we&#8217;ll put the types that exist <em>locally</em> but not remotely. In this case, since <code>visibilityFilter</code> sits right on the root <code>Query</code> type, we&#8217;ll need to use the <code>extends</code> keyword to add our new type to <code>Query</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">// local-schema.graphql\ntype VisibilityFilter {\n  id: String!\n  displayName: String!\n}\n\nextend type Query {\n  visibilityFilter: VisibilityFilter!\n}</code></pre>\n\n\n\n<p>Perfect. Now, we need to use <em>this</em> new file <strong>in addition</strong> to the original <code>graphql-schema.json</code> file that we generated from backend GraphQL API. Paste the following script into your command line:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">apollo codegen:generate --localSchemaFile=graphql-schema.json,local-schema.graphql --target=typescript --tagName=gql</code></pre>\n\n\n\n<p>And now, we&#8217;ve got our TypeScript type definitions for both our remote GraphQL API <em>and</em> our local state <em>client-only</em> types as well!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"841\" height=\"462\" src=\"/static/1754df62e1356ef85937e2c60338bc38/graphql-codegen-local-works-1.png\" alt=\"\" class=\"wp-image-6885\" srcset=\"/static/1754df62e1356ef85937e2c60338bc38/graphql-codegen-local-works-1.png 841w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-local-works-1-300x165.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-codegen-local-works-1-768x422.png 768w\" sizes=\"(max-width: 841px) 100vw, 841px\" /></figure>\n\n\n\n<h2><a href=\"#npm-graphql-codegen-scripts\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"npm-graphql-codegen-scripts\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm GraphQL codegen scripts</h2>\n\n\n\n<p>You may want to run these scripts periodically throughout the lifetime of your project. I recommend saving your codegen command as an NPM script. Here&#8217;s an example of what it might look like for you.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-json\">\"scripts\": {\n  ...\n  \"download-schema\": \"apollo service:download --endpoint=http://localhost:4000/ graphql-schema.json\",\n  \"codegen\": \"npm run download-schema && apollo codegen:generate --localSchemaFile=graphql-schema.json,client-schema.graphql --target=typescript --tagName=gql\"\n},</code></pre>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>We just learned how to use the graphQL codegen feature from Apollo&#8217;s CLI tool to generate TypeScript types for GraphQL operations in an Apollo Client project! That should help you move a little faster and write less bugs.</p>\n",
                    "slug": "typescript-graphql-code-generator-generate-graphql-types",
                    "path": "/tooling/apollo-codegen/typescript-graphql-code-generator-generate-graphql-types/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Apollo Codegen"
                            },
                            {
                                "name": "Frontend"
                            },
                            {
                                "name": "How-to"
                            }
                        ]
                    },
                    "excerpt": "<p>Don Norman, the author of &#8220;The Design of Everyday Things&#8221; has a philosophy for what he believes constitutes good design. Don says that good design is primarily discoverability and feedback. For example, when you encounter something new (like, a new codebase), how quickly can you discover what you can do (discoverability)? And then after you&#8217;ve [&hellip;]</p>\n",
                    "date": "2021-04-01T11:00:04",
                    "modified": "2021-05-19 14:11:19",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/03/apollo-client-codegen-tooling.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2ODU3",
                    "title": "How to use GraphQL with Javascript – GraphQL.js tutorial",
                    "content": "\n<p>GraphQL is first and foremost: a query language. It&#8217;s a more flexible and robust way to ask for data. You can use JavaScript to execute GraphQL anywhere. In this short post, we&#8217;ll take a look at the underlying JavaScript GraphQL implementation used by many popular GraphQL libraries and frameworks: <code>graphql-js</code>.</p>\n\n\n\n<h2><a href=\"#prerequisites\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"prerequisites\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n\n\n\n<ul><li>You <a href=\"https://www.apollographql.com/blog/what-is-graphql-graphql-introduction/\">understand what GraphQL is</a></li><li>You&#8217;re familiar with the command line</li><li>You have Node.js (8+) installed</li></ul>\n\n\n\n<h2><a href=\"#what-is-graphql-js\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-is-graphql-js\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is GraphQL.js</h2>\n\n\n\n<p><a href=\"https://github.com/graphql/graphql-js\">GraphQL.js</a> is the <em>reference implementation</em> of GraphQL for JavaScript. By <em>reference implementation</em>, we mean that it adheres to the rules declared in the official <a href=\"https://spec.graphql.org/June2018/\">GraphQL specification</a>.</p>\n\n\n\n<p>Other languages have also implemented the GraphQL specification, like <a href=\"https://github.com/graphql-java/graphql-java\">Java</a>, .<a href=\"https://github.com/graphql-dotnet/graphql-dotnet\">NET</a>, and <a href=\"https://github.com/graphql-go/graphql\">Go</a>.</p>\n\n\n\n<h2><a href=\"#getting-started-with-graphql-js\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"getting-started-with-graphql-js\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started with GraphQL.js</h2>\n\n\n\n<p>Let&#8217;s install GraphQL.js and execute a query with it.</p>\n\n\n\n<h3><a href=\"#create-a-new-project\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"create-a-new-project\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a new project</h3>\n\n\n\n<p>We&#8217;ll start by creating a new folder for our project. Run the following command to create a directory and then <code>cd</code> into it.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">mkdir graphql-js\ncd graphql-js</code></pre>\n\n\n\n<p>Use <code>npm</code> (or Yarn) to initialize a new Node.js project.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">npm init --yes</code></pre>\n\n\n\n<h3><a href=\"#installation\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"installation\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h3>\n\n\n\n<p>To install <code>graphql-js</code>, run the following command:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">npm install --save graphql</code></pre>\n\n\n\n<p>This should create a <code>package.json</code> file and a <code>node_modules</code> folder. Next, we&#8217;ll create the file that we&#8217;re going to work within.</p>\n\n\n\n<h3><a href=\"#create-an-index-js-file\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"create-an-index-js-file\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create an index.js file</h3>\n\n\n\n<p>We&#8217;ll write our code in a single file. Create a new <code>index.js</code> file in the current directory.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">touch index.js</code></pre>\n\n\n\n<h2><a href=\"#writing-a-query-in-graphql-js\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"writing-a-query-in-graphql-js\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a query in GraphQL.js</h2>\n\n\n\n<p>The following code constructs a schema with the root <code>Query</code> type containing a <code>hello</code> field. Then, we create a resolver to resolve the value for the <code>hello</code> field and run a query by passing in the schema, the query <em>itself</em>, and graph resolvers.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const { graphql, buildSchema } = require('graphql');\n\n// Builds a schema using the GraphQL schema language\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\n// The root of our graph gives us access to resolvers for each type and field\nconst resolversRoot = {\n  hello: () => {\n    return 'Hello world!';\n  },\n};\n\n// Run a simple graphql query '{ hello }' and then print the response\ngraphql(schema, '{ hello }', resolversRoot).then((response) => {\n  console.log(JSON.stringify(response.data));\n});</code></pre>\n\n\n\n<h3><a href=\"#running-the-query\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"running-the-query\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running the query</h3>\n\n\n\n<p>To run this code, in your console — type the following command:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">node index.js</code></pre>\n\n\n\n<p>If all goes well, you should see this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-json\">{ \"hello\": \"Hello world!\" }</code></pre>\n\n\n\n<p>This is how we can use plain JavaScript to write GraphQL queries with GraphQL.js.</p>\n\n\n\n<h2><a href=\"#next-steps\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"next-steps\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h2>\n\n\n\n<h3><a href=\"#serve-graphql-over-http-with-a-server-library\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"serve-graphql-over-http-with-a-server-library\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serve GraphQL over HTTP with a Server Library</h3>\n\n\n\n<p>GraphQL.js is the definitive JavaScript GraphQL implementation, but most of us are using GraphQL to build backend APIs. For that to work, we need to serve GraphQL over HTTP.</p>\n\n\n\n<p>We covered how GraphQL.js works (under the hood of other GraphQL JavaScript libraries like Apollo Server), but I recommend reading &#8220;<a href=\"https://www.apollographql.com/blog/using-express-with-graphql-server-node-js/\">Using Express with GraphQL – How to create a GraphQL server with Node.js/Express</a>&#8221; to learn how to connect GraphQL to a web server.</p>\n",
                    "slug": "how-to-use-graphql-with-javascript-graphql-js-tutorial",
                    "path": "/graphql/how-to-use-graphql-with-javascript-graphql-js-tutorial/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "GraphQL"
                            }
                        ]
                    },
                    "excerpt": "<p>GraphQL is first and foremost: a query language. It&#8217;s a more flexible and robust way to ask for data. You can use JavaScript to execute GraphQL anywhere. In this short post, we&#8217;ll take a look at the underlying JavaScript GraphQL implementation used by many popular GraphQL libraries and frameworks: graphql-js. Prerequisites You understand what GraphQL [&hellip;]</p>\n",
                    "date": "2021-03-25T12:01:03",
                    "modified": "2021-05-19 14:22:39",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/02/graphql-banner-771d02dce87b6282bbd1eab221fba366-771d02dce87b6282bbd1eab221fba366.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2ODY5",
                    "title": "Learn GraphQL – Tutorials for Fullstack GraphQL",
                    "content": "\n<p>GraphQL lets front-end developers simplify their data-fetching and state management approaches. For backend developers, GraphQL acts as a structured, maintainable API. To learn how GraphQL works across the stack, I recommend completing a fullstack GraphQL tutorial.</p>\n\n\n\n<p>In this short post, I&#8217;d like to share two resources that we created @ Apollo to help you ramp up and get comfortable building GraphQL applications from back to front.</p>\n\n\n\n<h2><a href=\"#%f0%9f%93%bd%ef%b8%8f-watch-the-lift-off-series-on-odyssey-the-apollo-course-platform\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"%f0%9f%93%bd%ef%b8%8f-watch-the-lift-off-series-on-odyssey-the-apollo-course-platform\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📽️ [Watch] The lift-off series on Odyssey: the Apollo Course Platform</h2>\n\n\n\n<p>Earlier this year, we released <a href=\"http://odyssey.apollographql.com/?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_03_graphql-tutorial\">Odyssey: the Apollo course platform</a>. We wanted to create a more directed, interactive, and fun learning experience for developers in search of practical training using GraphQL and Apollo.</p>\n\n\n\n<p>The first series of courses on Odyssey is called <strong>Lift-off</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"645\" src=\"/static/bc9a520150358122e18f715a0caa4906/Untitled-1.png\" alt=\"\" class=\"wp-image-6871\" srcset=\"/static/bc9a520150358122e18f715a0caa4906/Untitled-1.png 960w, https://wp.apollographql.com/wp-content/uploads/2021/03/Untitled-1-300x202.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/03/Untitled-1-768x516.png 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /></figure>\n\n\n\n<h3><a href=\"#what-youll-build\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-youll-build\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What you&#8217;ll build</h3>\n\n\n\n<p>In <em>Lift-off,</em> you&#8217;ll build a full-stack GraphQL example application called Catstronauts, a learning platform for adventurous cats who want to explore the universe!</p>\n\n\n\n<p>It contains list-view and detail-view pages of all the different courses.</p>\n\n\n\n<h3><a href=\"#features\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"features\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h3>\n\n\n\n<p>In <em>Lift-off part I</em>, you&#8217;ll learn the core components of a full-stack GraphQL app, specifically:</p>\n\n\n\n<ul><li>a schema first-approach to building web applications with GraphQL</li><li>GraphQL&#8217;s Schema Definition Language (SDL)</li><li>how to set up Apollo Server, test, and develop it using <a href=\"https://studio.apollographql.com/dev?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_03_graphql-tutorial\">Apollo Explorer</a></li><li>how to connect to your GraphQL API from the front-end using Apollo Client and React</li></ul>\n\n\n\n<p>And in the second part of the series, you&#8217;ll learn:</p>\n\n\n\n<ul><li>how to write more advanced queries and display data in the UI</li><li>how to use variables</li><li>how to mutate data and update the UI</li></ul>\n\n\n\n<h3><a href=\"#get-started\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"get-started\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get started</h3>\n\n\n\n<p>Ready to start? Head on over to <a href=\"https://odyssey.apollographql.com/?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_03_graphql-tutorial\">odyssey.apollographql.com</a>.</p>\n\n\n\n<h2><a href=\"#%f0%9f%93%96-read-the-official-apollo-full-stack-graphql-tutorial\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"%f0%9f%93%96-read-the-official-apollo-full-stack-graphql-tutorial\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📖 [Read] The Official Apollo Full-stack GraphQL Tutorial</h2>\n\n\n\n<p>For those that prefer the written approach to learning, I recommend checking out the <a href=\"https://www.apollographql.com/docs/tutorial/introduction/\">Official Apollo Full-stack GraphQL Tutorial</a> via the Apollo docs.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"738\" height=\"1024\" src=\"https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-tutorial-space-explorer-738x1024.png\" alt=\"\" class=\"wp-image-6873\" srcset=\"https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-tutorial-space-explorer-738x1024.png 738w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-tutorial-space-explorer-216x300.png 216w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-tutorial-space-explorer-768x1066.png 768w, https://wp.apollographql.com/wp-content/uploads/2021/03/graphql-tutorial-space-explorer.png 912w\" sizes=\"(max-width: 738px) 100vw, 738px\" /></figure>\n\n\n\n<h3><a href=\"#what-youll-build\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"what-youll-build\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What you&#8217;ll build</h3>\n\n\n\n<p>In the written tutorial, we build Space Explorer: an interactive app for reserving a seat on an upcoming SpaceX launch 🚀.</p>\n\n\n\n<p>It contains a login page, list and detail-view pages, user profiles, and a cart for setting up launches.</p>\n\n\n\n<h3><a href=\"#features\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"features\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h3>\n\n\n\n<p>You&#8217;ll learn how to build a full-stack GraphQL application with <em>authentication, pagination, state management,</em> and more. Specifically, you&#8217;ll learn:</p>\n\n\n\n<ul><li>How to build a GraphQL schema using Apollo Server, hook it to data, and then connect to it from a client-side React applications using Apollo Client</li><li>How to use Apollo Client and React to fetch and display GraphQL data</li><li>How to use Apollo Server to build a GraphQL API</li><li>How to source data from a REST API</li><li>How to source data from a database</li></ul>\n\n\n\n<h3><a href=\"#get-started\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"get-started\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get started</h3>\n\n\n\n<p>If you&#8217;re ready to walk through and build Space Explorer, <a href=\"https://www.apollographql.com/docs/tutorial/introduction/\">check out the tutorial via the Apollo docs here</a>.</p>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>There you have it — two great GraphQL tutorials to learn how to build fullstack apps. </p>\n",
                    "slug": "learn-graphql-tutorial-for-full-stack-graphql",
                    "path": "/graphql/examples/learn-graphql-tutorial-for-full-stack-graphql/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Examples"
                            },
                            {
                                "name": "Frontend"
                            },
                            {
                                "name": "How-to"
                            }
                        ]
                    },
                    "excerpt": "<p>GraphQL lets front-end developers simplify their data-fetching and state management approaches. For backend developers, GraphQL acts as a structured, maintainable API. To learn how GraphQL works across the stack, I recommend completing a fullstack GraphQL tutorial. In this short post, I&#8217;d like to share two resources that we created @ Apollo to help you ramp [&hellip;]</p>\n",
                    "date": "2021-03-30T11:45:04",
                    "modified": "2021-05-19 14:27:47",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/02/graphql-banner-771d02dce87b6282bbd1eab221fba366-771d02dce87b6282bbd1eab221fba366.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                },
                {
                    "id": "cG9zdDo2ODQ4",
                    "title": "GraphQL Search and Filter – How to search and filter results with GraphQL",
                    "content": "\n<p>Searching and filtering is a standard part of any GraphQL API. In this article, we&#8217;ll learn how to add filtering capabilities to your API by walking through a few real-world examples.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Searching <em>is</em> filtering</strong>: Searching and filtering are two different ways to say the same thing. The goal is to find an item (or a list of items) that matches some sort of criteria. For the rest of this post, we&#8217;ll use the word <em>filter</em> instead of search.</p></blockquote>\n\n\n\n<h2><a href=\"#examples\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"examples\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n\n\n\n<p>For each filtering example, we&#8217;ll take a look at the originating schema, how to write a query within it, and a resolver implementation.</p>\n\n\n\n<p>As a reminder, GraphQL is data source-agnostic. This means that you can use whatever database technology you like to fetch and save data; for instance — SQL, ORMs, NoSQL, JSON, or in-memory data all work just fine.</p>\n\n\n\n<p>For these examples, we&#8217;ll assume we&#8217;ve stored the data <em>in-memory</em>.</p>\n\n\n\n<h3><a href=\"#filtering-for-a-specific-item\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"filtering-for-a-specific-item\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering for a specific item</h3>\n\n\n\n<p>Consider the following GraphQL schema:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Query {\n  album(id: ID!): Album\n}</code></pre>\n\n\n\n<p>The <code>album</code> field expects an <code>ID</code> to be provided as an argument, and if found — it&#8217;ll return the <code>Album</code> type.</p>\n\n\n\n<p>To fetch this, we could write a query that passes in an <code>id</code> and asks for the <code>album</code> with the <code>title</code>, <code>artist</code> and <code>genre</code> fields. The query could look like this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query GetAlbumById {\n  album (id: \"1\") {\n    title\n    genre\n    artist {\n      name\n    }\n  }\n}</code></pre>\n\n\n\n<p>And in the <a href=\"https://www.apollographql.com/docs/apollo-server/data/resolvers/\">resolver</a> on the server, we&#8217;d pull the <code>id</code> value out from <code>args</code> and use it to filter our data.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-typescript\">const resolvers = {\n  Query: {\n    album (parent, args, context, info) {\n      const { id } = args;\n      return context.db.Albums.find((a) => a.id == id)\n    }\n  }\n} </code></pre>\n\n\n\n<h3><a href=\"#filtering-down-a-list\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"filtering-down-a-list\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering down a list</h3>\n\n\n\n<p>Now consider our GraphQL schema had an additional field on the root <code>Query</code> type to query for a <em>list</em> of albums:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Query {\n  album(id: ID!): Album\n  albums(genre: Genre): [Album]! # New\n}</code></pre>\n\n\n\n<p>With this new field, we can query for the list — optionally filtering it down using the <code>Genre</code> argument.</p>\n\n\n\n<p>Here&#8217;s what a query might look like:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query GetRockAlbums {\n  albums (genre: \"Rock\") {\n    title\n    genre\n    artist {\n      name\n    }\n  }\n}</code></pre>\n\n\n\n<p>And the resolver:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const resolvers = {\n  Query: {\n    albums (parent, args, context, info) {\n      const { genre } = args;\n      return context.db.Albums\n\t.filter((a) => a.genre == genre)\n    }\n  }\n} </code></pre>\n\n\n\n<h3><a href=\"#filtering-for-items-matching-a-list\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"filtering-for-items-matching-a-list\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering for items matching a list</h3>\n\n\n\n<p>Let&#8217;s say you wanted to get a very specific set of items and you already knew their <code>ids</code>.</p>\n\n\n\n<p>We could adjust our GraphQL schema to look more like this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Query {\n  album(id: ID!): Album\n  albums(genre: Genre, ids: [ID!]): [Album]! \n}</code></pre>\n\n\n\n<p>By the way, do you notice that the parameter list is starting to get a little bit lengthy? There&#8217;s a way to clean that up, and we&#8217;ll do that soon — but first, let&#8217;s see what a query for this might look like.</p>\n\n\n\n<p>The following query asks for albums with the ids <code>1</code>, <code>4</code>, <code>5</code>, <code>6</code>, and <code>8</code>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">query GetAlbumsByIds {\n  albums (ids: [\"1\", \"4\", \"5\", \"6\", \"8\"]) {\n    title\n    genre\n    artist {\n      name\n    }\n  }\n}</code></pre>\n\n\n\n<p>To handle this sort of query in the resolver, we could write it this way:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const resolvers = {\n  Query: {\n    album (parent, args, context, info) {\n      const { ids } = args;\n      return context.db.Albums.filter((a) => ids.includes(a.id))\n    }\n  }\n} </code></pre>\n\n\n\n<h3><a href=\"#complex-filtering-using-an-input-type\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"complex-filtering-using-an-input-type\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complex filtering using an Input Type</h3>\n\n\n\n<p>In the last example, we started to see that the parameter list was getting long. A better approach is to design an <em>Input Type</em> containing all the possible filtering (or sorting) options necessary, and use that as a single parameter, encapsulating all of the arguments for the field.</p>\n\n\n\n<p>Instead of this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type Query {\n  album(id: ID!): Album\n  albums(genre: Genre, ids: [ID!]): [Album]! \n}</code></pre>\n\n\n\n<p>Let&#8217;s try this:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-graphql\">type AlbumsFilters = {\n  genre: Genre\n  ids: [ID!]\n}\n\ntype AlbumsInput = {\n  filter: AlbumsFilters\n}\n\ntype Query {\n  album(id: ID!): Album\n  albums(input: AlbumsInput): [Album]! \n}</code></pre>\n\n\n\n<p>To handle queries for <code>albums</code> in the resolver, we&#8217;d want to take care to handle both the cases of the <code>genre</code> filter being applied, the <code>ids</code> filter being applied, and both of them being applied.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const resolvers = {\n  Query: {\n    album (parent, args, context, info) {\n      const { filter } = args;\n      const shouldApplyFilters = filter !== null;\n\n      let albums = context.db.Albums;\n\n      if (!shouldApplyFilters) {\n\treturn albums;\n      }\n\n      const shouldApplyGenreFilter = filter.genre !== null;\n      const shouldApplyIdsFilter = filter.ids;\n\n      if (shouldApplyGenreFilter) {\n\talbums = albums\n          .filter((a) => a.genre === filter.genre)\n      }\n\n      if (shouldApplyIdsFilter) {\n\talbums = albums.filter((a) => ids.includes(a.id))\n      }\n\t\t\n      return albums;\n    }\n  }\n} </code></pre>\n\n\n\n<p>While this <em>does</em> add complexity to the resolver, it makes the querying experience much more robust.</p>\n\n\n\n<p>Using the <em>Input Type</em> pattern, you can incrementally add more filtering (or sorting) options to your API like:</p>\n\n\n\n<ul><li><strong>Filtering between ranges (greater than, less than, equal)</strong></li><li><strong>Conditional filtering (and, or, not, exists, etc)</strong></li><li><strong>Any other filtering criteria you can think of</strong></li></ul>\n\n\n\n<h2><a href=\"#conclusion\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"conclusion\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n\n\n\n<p>We just walked through a few examples of how to add filter functionality to your GraphQL API. You should be all set to implement filtering in your own GraphQL API.</p>\n\n\n\n<h3><a href=\"#develop-your-graphql-api-with-apollo-explorer\" aria-hidden=\"true\" class=\"aal_anchor\" id=\"develop-your-graphql-api-with-apollo-explorer\"><svg aria-hidden=\"true\" class=\"aal_svg\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Develop Your GraphQL API with Apollo Explorer</h3>\n\n\n\n<p>Apollo Explorer is a free cloud GraphQL IDE that we built from the ground up, <strong>specifically for GraphQL developers</strong>.</p>\n\n\n\n<p>The Explorer comes with productivity-boosting features like one-click query building, intelligent search, and the ability to extract variables and fragments.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"954\" height=\"544\" src=\"/static/104fb3566be59062a83b6f088ee703c3/point-and-click-1.gif\" alt=\"\" class=\"wp-image-6849\"/></figure>\n\n\n\n<p>Apollo Explorer also comes with <a href=\"https://www.apollographql.com/docs/studio/dev-graphs/\">development graphs</a>, which enables you to build, test, and document your schema changes locally, as well as preview graph changes in local branches and PRs.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"354\" src=\"/static/aeb3ed1a252aedfe2968b856b33f0e07/Untitled.png\" alt=\"\" class=\"wp-image-6851\" srcset=\"/static/aeb3ed1a252aedfe2968b856b33f0e07/Untitled.png 1024w, https://wp.apollographql.com/wp-content/uploads/2021/03/Untitled-300x104.png 300w, https://wp.apollographql.com/wp-content/uploads/2021/03/Untitled-768x266.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>To use Apollo Explorer, head over to <a href=\"https://studio.apollographql.com/dev?utm_source=blog&amp;utm_medium=website&amp;utm_campaign=2021_03_search-and-filter\">studio.apollographql.com/dev</a> and get started with your first development graph.</p>\n\n\n\n<p>Happy querying!</p>\n",
                    "slug": "how-to-search-and-filter-results-with-graphql",
                    "path": "/graphql/filtering/how-to-search-and-filter-results-with-graphql/",
                    "categories": {
                        "nodes": [
                            {
                                "name": "Backend"
                            },
                            {
                                "name": "Filtering"
                            },
                            {
                                "name": "Frontend"
                            },
                            {
                                "name": "How-to"
                            }
                        ]
                    },
                    "excerpt": "<p>Searching and filtering is a standard part of any GraphQL API. In this article, we&#8217;ll learn how to add filtering capabilities to your API by walking through a few real-world examples. Searching is filtering: Searching and filtering are two different ways to say the same thing. The goal is to find an item (or a [&hellip;]</p>\n",
                    "date": "2021-03-23T11:30:04",
                    "modified": "2021-05-19 14:23:19",
                    "featuredImage": {
                        "node": {
                            "sourceUrl": "https://wp.apollographql.com/wp-content/uploads/2021/02/graphql-banner-771d02dce87b6282bbd1eab221fba366-771d02dce87b6282bbd1eab221fba366.png"
                        }
                    },
                    "author": {
                        "node": {
                            "name": "Khalil Stemmler"
                        }
                    }
                }
            ]
        }
    },
    "extensions": {}
}
