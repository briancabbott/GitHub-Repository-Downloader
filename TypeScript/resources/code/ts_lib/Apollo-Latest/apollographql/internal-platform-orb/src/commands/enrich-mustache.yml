description: >-
  When dealing with large dynamic pipelines we found Circle's built in functionality (when statements etc) somewhat limiting.
  What if we wanted to run the same workflow multiple times, with different values, without repeating ourselves
  (especially useful in a monorepo with multiple microservices!)?

  We realized the easiest way forward was to preprocess our Circle config files with a pre-processing language, one we could
  feed a JSON values file into (like Circle's own continuation plugin!) where the keys in the JSON file are treated as variables
  to render the output with.

  To accomplish this task we landed on the mustache template language, given its longevity in the community.
  Mustache templates can be rendered and used by other parts of the CircleCI infrastructure, see enrich-mustache-folder
  for an example which was made to support folders of mustache templates (ie in fyaml format) that need to be rendered
  then packed.
parameters:
  json-data-file-path:
    description: all the keys in this JSON file are made availible as variables in your mustache code. Yes, even arrays
    type: string
  template-file-path:
    description: The file to run through mustache
    type: string
  output-file-path:
    description: Where the rendered file should go
    type: string
steps:
  - run:
      name: enrich-mustache
      command: |
        python3 -m pip install --user chevron
        SCRATCH=$(mktemp -t tmp.enrich-mustache.XXXX)

        chevron -d << parameters.json-data-file-path >> << parameters.template-file-path >> > $SCRATCH

        mkdir -p $(dirname << parameters.output-file-path >>)
        mv $SCRATCH << parameters.output-file-path >>
