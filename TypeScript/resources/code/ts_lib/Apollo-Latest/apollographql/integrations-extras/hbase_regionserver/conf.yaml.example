instances:
  - host: localhost
    port: 10102 # This is the JMX port on which HBase RegionServer exposes its metrics (usually 10102)
    tags:
      hbase: regionserver
      # env: stage
      # newTag: test
    # user: username
    # password: password
    # process_name_regex: .*process_name.* # Instead of specifying a host and port or jmx_url, the agent can connect using the attach api.
    #                                      # This requires the JDK to be installed and the path to tools.jar to be set below.
    # tools_jar_path: /usr/lib/jvm/java-7-openjdk-amd64/lib/tools.jar # To be set when process_name_regex is set
    # name: hbase_master
    # # java_bin_path: /path/to/java # Optional, should be set if the agent cannot find your java executable
    # # java_options: "-Xmx200m -Xms50m" # Optional, Java JVM options
    # # trust_store_path: /path/to/trustStore.jks # Optional, should be set if ssl is enabled
    # # trust_store_password: password

init_config:
  is_jmx: true

  # Metrics collected by this check. You should not have to modify this.
  conf:
    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=RegionServer,sub=IPC
        attribute:
          # Number of bytes in the call queues.
          queueSize:
            metric_type: gauge
            alias: hbase.regionserver.ipc.queue_size
          # Number of open connections.
          numOpenConnections:
            metric_type: gauge
            alias: hbase.regionserver.ipc.num_open_connections
          # Number of active rpc handlers.
          numActiveHandler:
            metric_type: gauge
            alias: hbase.regionserver.ipc.num_active_handler
          # total call time, including both queued and processing time.
          TotalCallTime_max:
            metric_type: gauge
            alias: hbase.regionserver.ipc.total_call_time.max
          # total call time, including both queued and processing time.
          TotalCallTime_mean:
            metric_type: gauge
            alias: hbase.regionserver.ipc.total_call_time.mean
          # total call time, including both queued and processing time.
          TotalCallTime_median:
            metric_type: gauge
            alias: hbase.regionserver.ipc.total_call_time.median
          # total call time, including both queued and processing time.
          TotalCallTime_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.ipc.total_call_time.percentile.99

    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=RegionServer,sub=Regions
        attribute:
          # Number of regions in the metrics system
          numRegions:
            metric_type: gauge
            alias: hbase.regionserver.regions.num_regions

    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=RegionServer,sub=Replication
        attribute:
          # Number of WAL entries applied on replication sink.
          sink.appliedOps:
            metric_type: gauge
            alias: hbase.regionserver.replication.sink.applied_ops
          # Replication time lag of last applied WAL entry between source and sink.
          sink.ageOfLastAppliedOp:
            metric_type: gauge
            alias: hbase.regionserver.replication.sink.age_of_last_applied_op
          # Number of WAL applying operations processd on replication sink.
          sink.appliedBatches:
            metric_type: gauge
            alias: hbase.regionserver.replication.sink.applied_batches

    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=RegionServer,sub=Server
        attribute:
          # Number of regions
          regionCount:
            metric_type: gauge
            alias: hbase.regionserver.server.region_count
          # Number of Stores
          storeCount:
            metric_type: gauge
            alias: hbase.regionserver.server.store_count
          # Number of WAL Files
          hlogFileCount:
            metric_type: gauge
            alias: hbase.regionserver.server.hlog_file_count
          # Size of all WAL Files
          hlogFileSize:
            metric_type: gauge
            alias: hbase.regionserver.server.hlog_file_size
          # Number of Store Files
          storeFileCount:
            metric_type: gauge
            alias: hbase.regionserver.server.store_file_count
          # Size of the memstore
          memStoreSize:
            metric_type: gauge
            alias: hbase.regionserver.server.mem_store_size
          # Size of storefiles being served.
          storeFileSize:
            metric_type: gauge
            alias: hbase.regionserver.server.store_file_size
          # Total number of requests this RegionServer has answered.
          totalRequestCount:
            metric_type: gauge
            alias: hbase.regionserver.server.total_request_count
          # Number of read requests this region server has answered.
          readRequestCount:
            metric_type: gauge
            alias: hbase.regionserver.server.read_request_count
          # Number of mutation requests this region server has answered.
          writeRequestCount:
            metric_type: gauge
            alias: hbase.regionserver.server.write_request_count
          # Number of Check and Mutate calls that failed the checks.
          checkMutateFailedCount:
            metric_type: gauge
            alias: hbase.regionserver.server.check_mutate_failed_count
          # Number of Check and Mutate calls that passed the checks.
          checkMutatePassedCount:
            metric_type: gauge
            alias: hbase.regionserver.server.check_mutate_passed_count
          # Size of indexes in storefiles on disk.
          storeFileIndexSize:
            metric_type: gauge
            alias: hbase.regionserver.server.store_file_index_size
          # Uncompressed size of the static indexes.
          staticIndexSize:
            metric_type: gauge
            alias: hbase.regionserver.server.static_index_size
          # Uncompressed size of the static bloom filters.
          staticBloomSize:
            metric_type: gauge
            alias: hbase.regionserver.server.static_bloom_size
          # Number of mutations that have been sent by clients with the write ahead logging turned off.
          mutationsWithoutWALCount:
            metric_type: count
            alias: hbase.regionserver.server.mutations_without_wal_count
          # Size of data that has been sent by clients with the write ahead logging turned off.
          mutationsWithoutWALSize:
            metric_type: gauge
            alias: hbase.regionserver.server.mutations_without_wal_size
          # The percent of HFiles that are stored on the local hdfs data node.
          percentFilesLocal:
            metric_type: gauge
            alias: hbase.regionserver.server.percent_files_local
          # The percent of HFiles used by secondary regions that are stored on the local hdfs data node.
          percentFilesLocalSecondaryRegions:
            metric_type: gauge
            alias: hbase.regionserver.server.percent_files_local_secondary_regions
          # Length of the queue for splits.
          splitQueueLength:
            metric_type: gauge
            alias: hbase.regionserver.server.split_queue_length
          # Length of the queue for compactions.
          compactionQueueLength:
            metric_type: gauge
            alias: hbase.regionserver.server.compaction_queue_length
          # Length of the queue for region flushes
          flushQueueLength:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_queue_length
          # Size of the block cache that is not occupied.
          blockCacheFreeSize:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_free_size
          # Number of block in the block cache.
          blockCacheCount:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_count
          # Size of the block cache.
          blockCacheSize:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_size
          # Count of the hit on the block cache.
          blockCacheHitCount:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_hit_count
          # Count of hit on primary replica in the block cache.
          blockCacheHitCountPrimary:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_hit_count_primary
          # Number of requests for a block that missed the block cache.
          blockCacheMissCount:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_miss_count
          # Number of requests for a block of primary replica that missed the block cache.
          blockCacheMissCountPrimary:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_miss_count_primary
          # Count of the number of blocks evicted from the block cache.
          blockCacheEvictionCount:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_eviction_count
          # Count of the number of blocks evicted from primary replica in the block cache.
          blockCacheEvictionCountPrimary:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_eviction_count_primary
          # Percent of block cache requests that are hits
          blockCacheCountHitPercent:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_hit_percent
          # The percent of the time that requests with the cache turned on hit the cache.
          blockCacheExpressHitPercent:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_express_hit_percent
          # Number of times that a block cache insertion failed. Usually due to size restrictions.
          blockCacheFailedInsertionCount:
            metric_type: gauge
            alias: hbase.regionserver.server.block_cache_failed_insertion_count
          # Number of MS updates have been blocked so that the memstore can be flushed.
          updatesBlockedTime:
            metric_type: gauge
            alias: hbase.regionserver.server.updates_blocked_time
          # The number of cells flushed to disk
          flushedCellsCount:
            metric_type: gauge
            alias: hbase.regionserver.server.flushed_cells_count
          # The number of cells processed during minor compactions
          compactedCellsCount:
            metric_type: gauge
            alias: hbase.regionserver.server.compacted_cells_count
          # The number of cells processed during major compactions
          majorCompactedCellsCount:
            metric_type: gauge
            alias: hbase.regionserver.server.major_compacted_cells_count
          # The total amount of data flushed to disk, in bytes
          flushedCellsSize:
            metric_type: gauge
            alias: hbase.regionserver.server.flushed_cells_size
          # The total amount of data processed during minor compactions, in bytes
          compactedCellsSize:
            metric_type: gauge
            alias: hbase.regionserver.server.compacted_cells_size
          # The total amount of data processed during major compactions, in bytes
          majorCompactedCellsSize:
            metric_type: gauge
            alias: hbase.regionserver.server.major_compacted_cells_size
          # The number of blocked requests because of memstore size is larger than blockingMemStoreSize
          blockedRequestCount:
            metric_type: gauge
            alias: hbase.regionserver.server.blocked_request_count
          hedgedReads:
            metric_type: gauge
            alias: hbase.regionserver.server.hedged_read
          hedgedReadWins:
            metric_type: gauge
            alias: hbase.regionserver.server.hedged_read_wins
          PauseTimeWithGc_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc_num_ops
          PauseTimeWithGc_min:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc.min
          PauseTimeWithGc_max:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc.max
          PauseTimeWithGc_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc.mean
          PauseTimeWithGc_median:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc.median
          PauseTimeWithGc_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_with_gc.percentile.99
          Mutate_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.num_ops
          Mutate_min:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.min
          Mutate_max:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.max
          Mutate_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.mean
          Mutate_median:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.median
          Mutate_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.mutate.percentile.99
          # The number of Appends that took over 1000ms to complete
          slowAppendCount:
            metric_type: gauge
            alias: hbase.regionserver.server.slow_append_count
          pauseWarnThresholdExceeded:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_warn_threshold_exceeded
          # The number of Deletes that took over 1000ms to complete
          slowDeleteCount:
            metric_type: gauge
            alias: hbase.regionserver.server.slow_delete_count
          Increment_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.num_ops
          Increment_min:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.min
          Increment_max:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.max
          Increment_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.mean
          Increment_median:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.median
          Increment_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.increment.percentile.99
          Replay_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.num_ops
          Replay_min:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.min
          Replay_max:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.max
          Replay_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.mean
          Replay_median:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.median
          Replay_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.replay.percentile.99
          FlushTime_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.num_ops
          FlushTime_min:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.min
          FlushTime_max:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.max
          FlushTime_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.mean
          FlushTime_median:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.median
          FlushTime_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.flush_time.percentile.99
          pauseInfoThresholdExceeded:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_info_threshold_exceeded
          Delete_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.num_ops
          Delete_min:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.min
          Delete_max:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.max
          Delete_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.mean
          Delete_median:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.median
          Delete_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.delete.percentile.99
          # Number of splits requested
          splitRequestCount:
            metric_type: gauge
            alias: hbase.regionserver.server.split_request_count
          # Number of successfully executed splits
          splitSuccessCount:
            metric_type: gauge
            alias: hbase.regionserver.server.split_success_count
          # The number of Gets that took over 1000ms to complete
          slowGetCount:
            metric_type: gauge
            alias: hbase.regionserver.server.slow_get_count
          Get_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.get.num_ops
          Get_min:
            metric_type: gauge
            alias: hbase.regionserver.server.get.min
          Get_max:
            metric_type: gauge
            alias: hbase.regionserver.server.get.max
          Get_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.get.mean
          Get_median:
            metric_type: gauge
            alias: hbase.regionserver.server.get.median
          Get_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.get.percentile.99
          ScanNext_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.num_ops
          ScanNext_min:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.min
          ScanNext_max:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.max
          ScanNext_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.mean
          ScanNext_median:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.median
          ScanNext_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.scan_next.percentile.99
          PauseTimeWithoutGc_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.num_ops
          PauseTimeWithoutGc_min:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.min
          PauseTimeWithoutGc_max:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.max
          PauseTimeWithoutGc_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.mean
          PauseTimeWithoutGc_median:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.median
          PauseTimeWithoutGc_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.pause_time_without_gc.percentile.99
          # The number of Multis that took over 1000ms to complete
          slowPutCount:
            metric_type: gauge
            alias: hbase.regionserver.server.slow_put_count
          # The number of Increments that took over 1000ms to complete
          slowIncrementCount:
            metric_type: gauge
            alias: hbase.regionserver.server.slow_increment_count
          SplitTime_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.num_ops
          SplitTime_min:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.min
          SplitTime_max:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.max
          SplitTime_mean:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.mean
          SplitTime_median:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.median
          SplitTime_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.server.split_time.percentile.99

    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=RegionServer,sub=WAL
        attribute:
          # size (in bytes) of the data appended to the WAL.
          AppendSize_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.num_ops
          # size (in bytes) of the data appended to the WAL.
          AppendSize_min:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.min
          # size (in bytes) of the data appended to the WAL.
          AppendSize_max:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.max
          # size (in bytes) of the data appended to the WAL.
          AppendSize_mean:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.mean
          # size (in bytes) of the data appended to the WAL.
          AppendSize_median:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.median
          # size (in bytes) of the data appended to the WAL.
          AppendSize_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_size.percentile.99
          # the time it took to sync the WAL to HDFS.
          SyncTime_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.num_ops
          # the time it took to sync the WAL to HDFS.
          SyncTime_min:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.min
          # the time it took to sync the WAL to HDFS.
          SyncTime_max:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.max
          # the time it took to sync the WAL to HDFS.
          SyncTime_mean:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.mean
          # the time it took to sync the WAL to HDFS.
          SyncTime_median:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.median
          # the time it took to sync the WAL to HDFS.
          SyncTime_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.wal.sync_time.percentile.99
          # Number of appends that were slow.
          slowAppendCount:
            metric_type: gauge
            alias: hbase.regionserver.wal.slow_append_count
          # How many times a log roll has been requested total
          rollRequest:
            metric_type: gauge
            alias: hbase.regionserver.wal.roll_request
          # Number of appends to the write ahead log.
          appendCount:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_count
          # How many times a log roll was requested due to too few DN's in the write pipeline.
          lowReplicaRollRequest:
            metric_type: gauge
            alias: hbase.regionserver.wal.low_replica_roll_request
          # time an append to the log took.
          AppendTime_num_ops:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.num_ops
          # time an append to the log took.
          AppendTime_min:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.min
          # time an append to the log took.
          AppendTime_max:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.max
          # time an append to the log took.
          AppendTime_mean:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.mean
          # time an append to the log took.
          AppendTime_median:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.median
          # time an append to the log took.
          AppendTime_99th_percentile:
            metric_type: gauge
            alias: hbase.regionserver.wal.append_time.percentile.99

    - include:
        domain: Hadoop
        bean:
         - Hadoop:service=HBase,name=JvmMetrics
        attribute:
          # Non-heap memory used in MB
          MemNonHeapUsedM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_non_heap_used_in_mb
          # Non-heap memory committed in MB
          MemNonHeapCommittedM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_non_heap_committed_in_mb
          # Non-heap memory max in MB
          MemNonHeapMaxM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_non_heap_max_in_mb
          # Heap memory used in MB
          MemHeapUsedM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_heap_used_in_mb
          # Heap memory committed in MB
          MemHeapCommittedM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_heap_committed_in_mb
          # Heap memory max in MB
          MemHeapMaxM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_heap_max_in_mb
          # Max memory size in MB
          MemMaxM:
            metric_type: gauge
            alias: hbase.jvm_metrics.mem_max_in_mb
          # GC Count for ParNew
          GcCountParNew:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_count_par_new
          # GC Time for ParNew
          GcTimeMillisParNew:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_time_millis_par_new
          # GC Count for ConcurrentMarkSweep
          GcCountConcurrentMarkSweep:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_count_concurrent_mark_sweep
          # GC Time for ConcurrentMarkSweep
          GcTimeMillisConcurrentMarkSweep:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_time_millis_concurrent_mark_sweep
          # Total GC count
          GcCount:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_count
          # Total GC time in milliseconds
          GcTimeMillis:
            metric_type: gauge
            alias: hbase.jvm_metrics.gc_time_millis

