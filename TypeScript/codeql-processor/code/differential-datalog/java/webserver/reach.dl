typedef Node = bit<16>

input relation Edge(source: Node, dest: Node)

relation SimEdge(source: Node, dest: Node)
SimEdge(n, m) :- Edge(n, m).
SimEdge(n, m) :- Edge(m, n).

relation Reach(from: Node, to: Node)
Reach(n, m) :- SimEdge(n, _), var m = n.
// Treat graph as undirected
Reach(n, m) :- SimEdge(n, m).
Reach(n, m) :- SimEdge(n, x), Reach(x, m).

// Canonical representative of a connected component: node with smallest value
output relation Canonical(node: Node, repr: Node)
Canonical(n, r) :- Reach(n, m), var r = (m).group_by(n).min().
