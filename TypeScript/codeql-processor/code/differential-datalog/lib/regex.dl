/*
Copyright (c) 2021 VMware, Inc.
SPDX-License-Identifier: MIT

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* Bindings for the Rust regular expressions library.
 *
 * See regex crate documentation for description of the regex syntax supported
 * by this library.
 */

/*
 * Compiled regular expression.
 */
extern type Regex

/*
 * Compile pattern into a regex.  If the pattern is invalid, returns a regex
 * that does not match any input strings.
 */
extern function regex(pattern: string): Regex

/*
 * Compile pattern into a regex.  Returns an error if the pattern is invalid.
 */
extern function try_regex(pattern: string): Result<Regex, string>

/*
 * Check if string matches regular expression.
 *
 * Returns true if the regex matches the string given.
 * Returns false if `regex` is not a valid regular expression or if no match was
 * found.
 *
 * Example: `regex_match(regex([|\d+|]), "a111b222c")`
 */
extern function regex_match(regex: Regex, text: string): bool

/*
 * Returns the leftmost-first match in `text`. If `regex` is not a valid regular
 * expression or no match exists, then `None` is returned.
 */
extern function regex_first_match(regex: Regex, text: string): Option<string>

/*
 * Returns all successive non-overlapping matches in `text`.
 * If `regex` is not a valid regular expression or no match exists,
 * an empty vector is returned.
 */
extern function regex_all_matches(regex: Regex, text: string): Vec<string>

/*
 * Compiled set of regular expressions.
 */
extern type RegexSet

/*
 * Compile patterns into a regex set.  If any of the patterns are invalid, it
 * returns an empty regex set.
 */
extern function regex_set(pattern: Vec<string>): RegexSet

/*
 * Compile patterns into a regex set.  Returns an error if any of the patterns are invalid
 */
extern function try_regex_set(patterns: Vec<string>): Result<RegexSet, string>

/*
 * Check if string matches any of the regular expressions within the set.
 *
 * Returns true if the regex matches the string given.
 * Returns false if `regex` is not a valid regular expression or if no match was
 * found.
 *
 * Example: `regex_set_match(regex_set([[|\d+|]]), "a111b222c")`
 */
extern function regex_set_match(regex: RegexSet, text: string): bool
