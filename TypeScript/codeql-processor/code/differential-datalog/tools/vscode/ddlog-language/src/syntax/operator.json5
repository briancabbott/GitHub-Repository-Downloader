{
  "repository": {
        "assignment-operator": {
            "patterns": [
                   {
                    "name": "keyword.operator.assignment.ddlog",
                    "match": "(\\=)"
                   }
               ]
            },      
        "operator": {
            "patterns": [
                {
                    "name": "keyword.operator.group.parameters.ddlog",
                    "begin": "\\(",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.grouping.ddlog"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.grouping.ddlog"
                        }
                    },
                    "patterns": [
                       {
                            "include": "$self"
                       }
                    ]
                },
                {
                    "name": "keyword.operator.group.block.ddlog",
                    "begin": "\\{",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.alternate-grouping.ddlog"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.alternate-grouping.ddlog"
                        }
                    },
                    "patterns": [
                       {
                            "include": "$self"
                       }
                    ]
                }, 
                {
                    "match": "(\\s*)(?<=(\\.))(\\s*)([A-Za-z_][a-zA-Z0-9_]*)",
                    "name": "keyword.operator.struct-field.ddlog"
                },
                {
                    "match": "(\\s*)([A-Za-z_][a-zA-Z0-9_]*)(\\s*)(?=(\\.)?!($))",
                    "name": "keyword.operator.struct-field.ddlog"
                }, 
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=(mut)?\\s*(bigint|bit|bool|signed|double|float|string|Vec|Ref|Set|Map)(\\b))",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.mutable.ddlog"
                        },
                        "2": {
                            "name": "storage.type.ddlog"
                        }                        
                    }
                }, 
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=(function\\s*)(\\(\\s*))",
                },                
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=(\\(\\s*)\\s*(bigint|bit|bool|signed|double|float|string|Vec|Ref|Set|Map)(\\b))",
                },
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=([|]\\s*)\\s*(bigint|bit|bool|signed|double|float|string|Vec|Ref|Set|Map)(\\b))",
                },
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=(\\b)(usize|u8|u16|u32|u64|u128|s8|s16|s32|s64|s128|Option|Result)(\\b))",
                    "captures": {
                        "1": {
                            "name": "storage.type.core.ddlog"
                        }
                    }
                },
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=(\\s*)([A-Z][a-zA-Z0-9_]*(\\s*)\\{))",
                    "captures": {
                        "1": {
                            "name": "entity.name.constructor.ddlog"
                        }
                    }
                },
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=([a-zA-Z_][a-zA-Z0-9_]*)(?!(function)))",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.ddlog"
                        }
                    }
                },                
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*(?=('[A-Z][a-zA-Z0-9_]*))",
                    "captures": {
                        "1": {
                            "name": "entity.name.type-variable.ddlog"
                        }
                    }
                },
                {
                    "name": "keyword.operator.type-annotation.ddlog",
                    "match": ":\\s*",
                },                                 
                {
                    "name": "keyword.operator.match.ddlog",
                    "match": "\\s*(->)\\s*"
                },
                {
                    "name": "keyword.operator.bitwise-negation.ddlog",
                    "match": "\\s*(\\~)\\s*"
                },
                {
                    "name": "keyword.operator.bitwise-and.ddlog",
                    "match": "\\s*(\\&)\\s*"
                },
                {
                    "name": "keyword.operator.boolean-negation.ddlog",
                    "match": "\\b(not)\\b"
                },
                {
                    "name": "keyword.operator.concatenation.ddlog",
                    "match": "(\\+\\+)"
                },
                {
                    "name": "keyword.operator.logical-and.ddlog",
                    "match": "\\b(and)\\b"
                },
                {
                    "name": "keyword.operator.logical-or.ddlog",
                    "match": "\\b(or)\\b"
                },
                {
                    "name": "keyword.operator.sequentialcomposition.ddlog",
                    "match": "(\\;)"
                },
                {
                    "name": "keyword.operator.try.ddlog",
                    "match": "(\\?)"
                },
                {
                    "name": "keyword.operator.grouping.ddlog",
                    "match": "[\\(\\)]"
                },
                {
                    "name": "keyword.operator.alternate-grouping.ddlog",
                    "match": "[\\{\\}]"
                },
                {
                    "name": "keyword.operator.cast.ddlog",
                    "match": "(as)\\s+(?=(bigint|bit|signed))"
                },
                {
                    "name": "keyword.operator.bit-slicing.ddlog",
                    "match": "(\\[(\\d+:\\d+)\\])",                    
                }, 
                {
                    "name": "keyword.operator.brackets.ddlog",
                    "match": "\\s*[\\[\\]]\\s*"
                },                                           
                {
                    "name": "keyword.operator.implication.ddlog",
                    "match": "(=>)"
                },
                {
                    "name": "keyword.operator.comparison.ddlog",
                    "match": "(\\==|!=)"
                },
                {
                    "include": "#assignment-operator"
                },
                {
                    "name": "keyword.operator.arithmetic.ddlog",
                    "match": "(\\+|-|/|\\*|%|\\||<<|>>)"
                },
                {
                    "name": "keyword.operator.comparison.ddlog",
                    "match": "(<|>)"
                },
                {
                    "name": "keyword.operator.comparison.ddlog",
                    "match": "\\s*(<=|>=)\\s*"
                }
            ]
        }
    }
}
