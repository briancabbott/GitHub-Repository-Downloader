[
 {
  "idx": "maxmin-1",
  "nl_tokens": [
   "string",
   ".",
   "max",
   "Maximum",
   "length",
   "of",
   "the",
   "string"
  ],
  "pl_tokens": [
   "function",
   "(",
   "string",
   ")",
   "{",
   "// string.check check sting type and size",
   "return",
   "(",
   "(",
   "typeof",
   "string",
   "===",
   "'string'",
   "||",
   "string",
   "instanceof",
   "String",
   ")",
   "&&",
   "string",
   ".",
   "length",
   ">=",
   "this",
   ".",
   "<mask>",
   "&&",
   "string",
   ".",
   "length",
   "<=",
   "this",
   ".",
   "max",
   "&&",
   "(",
   "!",
   "this",
   ".",
   "match",
   "||",
   "string",
   ".",
   "match",
   "(",
   "this",
   ".",
   "match",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-2",
  "nl_tokens": [
   "/",
   "*",
   "istanbul",
   "ignore",
   "next",
   "Copied",
   "from",
   "https",
   ":",
   "//",
   "github",
   ".",
   "com",
   "/",
   "eslint",
   "/",
   "eslint",
   "/",
   "blob",
   "/",
   "16fad5880bb70e9dddbeab8ed0f425ae51f5841f",
   "/",
   "lib",
   "/",
   "code",
   "-",
   "path",
   "-",
   "analysis",
   "/",
   "code",
   "-",
   "path",
   "-",
   "analyzer",
   ".",
   "js#L137"
  ],
  "pl_tokens": [
   "function",
   "forwardCurrentToHead",
   "(",
   "analyzer",
   ",",
   "node",
   ")",
   "{",
   "const",
   "codePath",
   "=",
   "analyzer",
   ".",
   "codePath",
   "const",
   "state",
   "=",
   "CodePath",
   ".",
   "getState",
   "(",
   "codePath",
   ")",
   "const",
   "currentSegments",
   "=",
   "state",
   ".",
   "currentSegments",
   "const",
   "headSegments",
   "=",
   "state",
   ".",
   "headSegments",
   "const",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "currentSegments",
   ".",
   "length",
   ",",
   "headSegments",
   ".",
   "length",
   ")",
   "let",
   "i",
   "=",
   "0",
   "let",
   "currentSegment",
   "=",
   "null",
   "let",
   "headSegment",
   "=",
   "null",
   "// Fires leaving events.",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "end",
   ";",
   "++",
   "i",
   ")",
   "{",
   "currentSegment",
   "=",
   "currentSegments",
   "[",
   "i",
   "]",
   "headSegment",
   "=",
   "headSegments",
   "[",
   "i",
   "]",
   "if",
   "(",
   "currentSegment",
   "!==",
   "headSegment",
   "&&",
   "currentSegment",
   ")",
   "{",
   "if",
   "(",
   "currentSegment",
   ".",
   "reachable",
   ")",
   "{",
   "analyzer",
   ".",
   "emitter",
   ".",
   "emit",
   "(",
   "\"onCodePathSegmentEnd\"",
   ",",
   "currentSegment",
   ",",
   "node",
   ")",
   "}",
   "}",
   "}",
   "// Update state.",
   "state",
   ".",
   "currentSegments",
   "=",
   "headSegments",
   "// Fires entering events.",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "end",
   ";",
   "++",
   "i",
   ")",
   "{",
   "currentSegment",
   "=",
   "currentSegments",
   "[",
   "i",
   "]",
   "headSegment",
   "=",
   "headSegments",
   "[",
   "i",
   "]",
   "if",
   "(",
   "currentSegment",
   "!==",
   "headSegment",
   "&&",
   "headSegment",
   ")",
   "{",
   "CodePathSegment",
   ".",
   "markUsed",
   "(",
   "headSegment",
   ")",
   "if",
   "(",
   "headSegment",
   ".",
   "reachable",
   ")",
   "{",
   "analyzer",
   ".",
   "emitter",
   ".",
   "emit",
   "(",
   "\"onCodePathSegmentStart\"",
   ",",
   "headSegment",
   ",",
   "node",
   ")",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-3",
  "nl_tokens": [
   "*",
   "@method",
   "format",
   "(",
   "[",
   "place",
   "]",
   "=",
   "0",
   "[",
   "thousands",
   "]",
   "=",
   "[",
   "decimal",
   "]",
   "=",
   ".",
   ")",
   "@returns",
   "String",
   "@short",
   "Formats",
   "the",
   "number",
   "to",
   "a",
   "readable",
   "string",
   ".",
   "@extra",
   "If",
   "[",
   "place",
   "]",
   "is",
   "%undefined%",
   "will",
   "automatically",
   "determine",
   "the",
   "place",
   ".",
   "[",
   "thousands",
   "]",
   "is",
   "the",
   "character",
   "used",
   "for",
   "the",
   "thousands",
   "separator",
   ".",
   "[",
   "decimal",
   "]",
   "is",
   "the",
   "character",
   "used",
   "for",
   "the",
   "decimal",
   "point",
   ".",
   "@example"
  ],
  "pl_tokens": [
   "function",
   "(",
   "place",
   ",",
   "thousands",
   ",",
   "decimal",
   ")",
   "{",
   "var",
   "i",
   ",",
   "str",
   ",",
   "split",
   ",",
   "integer",
   ",",
   "fraction",
   ",",
   "result",
   "=",
   "''",
   ";",
   "if",
   "(",
   "isUndefined",
   "(",
   "thousands",
   ")",
   ")",
   "{",
   "thousands",
   "=",
   "','",
   ";",
   "}",
   "if",
   "(",
   "isUndefined",
   "(",
   "decimal",
   ")",
   ")",
   "{",
   "decimal",
   "=",
   "'.'",
   ";",
   "}",
   "str",
   "=",
   "(",
   "isNumber",
   "(",
   "place",
   ")",
   "?",
   "round",
   "(",
   "this",
   ",",
   "place",
   "||",
   "0",
   ")",
   ".",
   "toFixed",
   "(",
   "math",
   ".",
   "<mask>",
   "(",
   "place",
   ",",
   "0",
   ")",
   ")",
   ":",
   "this",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ".",
   "replace",
   "(",
   "/",
   "^-",
   "/",
   ",",
   "''",
   ")",
   ";",
   "split",
   "=",
   "str",
   ".",
   "split",
   "(",
   "'.'",
   ")",
   ";",
   "integer",
   "=",
   "split",
   "[",
   "0",
   "]",
   ";",
   "fraction",
   "=",
   "split",
   "[",
   "1",
   "]",
   ";",
   "for",
   "(",
   "i",
   "=",
   "integer",
   ".",
   "length",
   ";",
   "i",
   ">",
   "0",
   ";",
   "i",
   "-=",
   "3",
   ")",
   "{",
   "if",
   "(",
   "i",
   "<",
   "integer",
   ".",
   "length",
   ")",
   "{",
   "result",
   "=",
   "thousands",
   "+",
   "result",
   ";",
   "}",
   "result",
   "=",
   "integer",
   ".",
   "slice",
   "(",
   "math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "i",
   "-",
   "3",
   ")",
   ",",
   "i",
   ")",
   "+",
   "result",
   ";",
   "}",
   "if",
   "(",
   "fraction",
   ")",
   "{",
   "result",
   "+=",
   "decimal",
   "+",
   "repeatString",
   "(",
   "(",
   "place",
   "||",
   "0",
   ")",
   "-",
   "fraction",
   ".",
   "length",
   ",",
   "'0'",
   ")",
   "+",
   "fraction",
   ";",
   "}",
   "return",
   "(",
   "this",
   "<",
   "0",
   "?",
   "'-'",
   ":",
   "''",
   ")",
   "+",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-4",
  "nl_tokens": [
   "Returns",
   "list",
   "of",
   "paddings",
   "that",
   "should",
   "be",
   "used",
   "to",
   "align",
   "passed",
   "string"
  ],
  "pl_tokens": [
   "function",
   "(",
   "strings",
   ")",
   "{",
   "var",
   "lengths",
   "=",
   "_",
   ".",
   "map",
   "(",
   "strings",
   ",",
   "function",
   "(",
   "s",
   ")",
   "{",
   "return",
   "_",
   ".",
   "isString",
   "(",
   "s",
   ")",
   "?",
   "s",
   ".",
   "length",
   ":",
   "+",
   "s",
   ";",
   "}",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "_",
   ".",
   "max",
   "(",
   "lengths",
   ")",
   ";",
   "return",
   "_",
   ".",
   "map",
   "(",
   "lengths",
   ",",
   "function",
   "(",
   "l",
   ")",
   "{",
   "var",
   "pad",
   "=",
   "max",
   "-",
   "l",
   ";",
   "return",
   "pad",
   "?",
   "this",
   ".",
   "repeatString",
   "(",
   "' '",
   ",",
   "pad",
   ")",
   ":",
   "''",
   ";",
   "}",
   ",",
   "this",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-5",
  "nl_tokens": [
   "Calculates",
   "the",
   "dropdown",
   "s",
   "position",
   "and",
   "applies",
   "the",
   "new",
   "styles",
   "to",
   "the",
   "menu",
   "element"
  ],
  "pl_tokens": [
   "function",
   "positionDropdown",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "elements",
   ")",
   "{",
   "return",
   "$mdUtil",
   ".",
   "nextTick",
   "(",
   "positionDropdown",
   ",",
   "false",
   ",",
   "$scope",
   ")",
   ";",
   "}",
   "var",
   "dropdownHeight",
   "=",
   "(",
   "$scope",
   ".",
   "dropdownItems",
   "||",
   "MAX_ITEMS",
   ")",
   "*",
   "ITEM_HEIGHT",
   ";",
   "var",
   "hrect",
   "=",
   "elements",
   ".",
   "wrap",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ",",
   "vrect",
   "=",
   "elements",
   ".",
   "snap",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ",",
   "root",
   "=",
   "elements",
   ".",
   "root",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ",",
   "top",
   "=",
   "vrect",
   ".",
   "bottom",
   "-",
   "root",
   ".",
   "top",
   ",",
   "bot",
   "=",
   "root",
   ".",
   "bottom",
   "-",
   "vrect",
   ".",
   "top",
   ",",
   "left",
   "=",
   "hrect",
   ".",
   "left",
   "-",
   "root",
   ".",
   "left",
   ",",
   "width",
   "=",
   "hrect",
   ".",
   "width",
   ",",
   "offset",
   "=",
   "getVerticalOffset",
   "(",
   ")",
   ",",
   "position",
   "=",
   "$scope",
   ".",
   "dropdownPosition",
   ",",
   "styles",
   ";",
   "// Automatically determine dropdown placement based on available space in viewport.",
   "if",
   "(",
   "!",
   "position",
   ")",
   "{",
   "position",
   "=",
   "(",
   "top",
   ">",
   "bot",
   "&&",
   "root",
   ".",
   "height",
   "-",
   "top",
   "-",
   "MENU_PADDING",
   "<",
   "dropdownHeight",
   ")",
   "?",
   "'top'",
   ":",
   "'bottom'",
   ";",
   "}",
   "// Adjust the width to account for the padding provided by `md-input-container`",
   "if",
   "(",
   "$attrs",
   ".",
   "mdFloatingLabel",
   ")",
   "{",
   "left",
   "+=",
   "INPUT_PADDING",
   ";",
   "width",
   "-=",
   "INPUT_PADDING",
   "*",
   "2",
   ";",
   "}",
   "styles",
   "=",
   "{",
   "left",
   ":",
   "left",
   "+",
   "'px'",
   ",",
   "minWidth",
   ":",
   "width",
   "+",
   "'px'",
   ",",
   "maxWidth",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "hrect",
   ".",
   "right",
   "-",
   "root",
   ".",
   "left",
   ",",
   "root",
   ".",
   "right",
   "-",
   "hrect",
   ".",
   "left",
   ")",
   "-",
   "MENU_PADDING",
   "+",
   "'px'",
   "}",
   ";",
   "if",
   "(",
   "position",
   "===",
   "'top'",
   ")",
   "{",
   "styles",
   ".",
   "top",
   "=",
   "'auto'",
   ";",
   "styles",
   ".",
   "bottom",
   "=",
   "bot",
   "+",
   "'px'",
   ";",
   "styles",
   ".",
   "maxHeight",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "dropdownHeight",
   ",",
   "hrect",
   ".",
   "top",
   "-",
   "root",
   ".",
   "top",
   "-",
   "MENU_PADDING",
   ")",
   "+",
   "'px'",
   ";",
   "}",
   "else",
   "{",
   "var",
   "bottomSpace",
   "=",
   "root",
   ".",
   "bottom",
   "-",
   "hrect",
   ".",
   "bottom",
   "-",
   "MENU_PADDING",
   "+",
   "$mdUtil",
   ".",
   "getViewportTop",
   "(",
   ")",
   ";",
   "styles",
   ".",
   "top",
   "=",
   "(",
   "top",
   "-",
   "offset",
   ")",
   "+",
   "'px'",
   ";",
   "styles",
   ".",
   "bottom",
   "=",
   "'auto'",
   ";",
   "styles",
   ".",
   "maxHeight",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "dropdownHeight",
   ",",
   "bottomSpace",
   ")",
   "+",
   "'px'",
   ";",
   "}",
   "elements",
   ".",
   "$",
   ".",
   "scrollContainer",
   ".",
   "css",
   "(",
   "styles",
   ")",
   ";",
   "$mdUtil",
   ".",
   "nextTick",
   "(",
   "correctHorizontalAlignment",
   ",",
   "false",
   ")",
   ";",
   "/**\n     * Calculates the vertical offset for floating label examples to account for ngMessages\n     * @returns {number}\n     */",
   "function",
   "getVerticalOffset",
   "(",
   ")",
   "{",
   "var",
   "offset",
   "=",
   "0",
   ";",
   "var",
   "inputContainer",
   "=",
   "$element",
   ".",
   "find",
   "(",
   "'md-input-container'",
   ")",
   ";",
   "if",
   "(",
   "inputContainer",
   ".",
   "length",
   ")",
   "{",
   "var",
   "input",
   "=",
   "inputContainer",
   ".",
   "find",
   "(",
   "'input'",
   ")",
   ";",
   "offset",
   "=",
   "inputContainer",
   ".",
   "prop",
   "(",
   "'offsetHeight'",
   ")",
   ";",
   "offset",
   "-=",
   "input",
   ".",
   "prop",
   "(",
   "'offsetTop'",
   ")",
   ";",
   "offset",
   "-=",
   "input",
   ".",
   "prop",
   "(",
   "'offsetHeight'",
   ")",
   ";",
   "// add in the height left up top for the floating label text",
   "offset",
   "+=",
   "inputContainer",
   ".",
   "prop",
   "(",
   "'offsetTop'",
   ")",
   ";",
   "}",
   "return",
   "offset",
   ";",
   "}",
   "/**\n     * Makes sure that the menu doesn't go off of the screen on either side.\n     */",
   "function",
   "correctHorizontalAlignment",
   "(",
   ")",
   "{",
   "var",
   "dropdown",
   "=",
   "elements",
   ".",
   "scrollContainer",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ",",
   "styles",
   "=",
   "{",
   "}",
   ";",
   "if",
   "(",
   "dropdown",
   ".",
   "right",
   ">",
   "root",
   ".",
   "right",
   "-",
   "MENU_PADDING",
   ")",
   "{",
   "styles",
   ".",
   "left",
   "=",
   "(",
   "hrect",
   ".",
   "right",
   "-",
   "dropdown",
   ".",
   "width",
   ")",
   "+",
   "'px'",
   ";",
   "}",
   "elements",
   ".",
   "$",
   ".",
   "scrollContainer",
   ".",
   "css",
   "(",
   "styles",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-6",
  "nl_tokens": [
   "/",
   "*",
   "450"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "/**\n\t * Creates a new list out of the two supplied by pairing up equally-positioned\n\t * items from both lists. The returned list is truncated to the length of the\n\t * shorter of the two input lists.\n\t * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.1.0\n\t * @category List\n\t * @sig [a] -> [b] -> [[a,b]]\n\t * @param {Array} list1 The first array to consider.\n\t * @param {Array} list2 The second array to consider.\n\t * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n\t * @example\n\t *\n\t *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n\t * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n\t */",
   "var",
   "zip",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "function",
   "zip",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "var",
   "rv",
   "=",
   "[",
   "]",
   ";",
   "var",
   "idx",
   "=",
   "0",
   ";",
   "var",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "length",
   ",",
   "b",
   ".",
   "length",
   ")",
   ";",
   "while",
   "(",
   "idx",
   "<",
   "len",
   ")",
   "{",
   "rv",
   "[",
   "idx",
   "]",
   "=",
   "[",
   "a",
   "[",
   "idx",
   "]",
   ",",
   "b",
   "[",
   "idx",
   "]",
   "]",
   ";",
   "idx",
   "+=",
   "1",
   ";",
   "}",
   "return",
   "rv",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "zip",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-7",
  "nl_tokens": [
   "Compare",
   "2",
   "specified",
   "versions",
   "starting",
   "from",
   "left",
   "to",
   "right",
   ".",
   "If",
   "a",
   "part",
   "contains",
   "special",
   "version",
   "strings",
   "they",
   "are",
   "handled",
   "in",
   "the",
   "following",
   "order",
   ":",
   "dev",
   "<",
   "alpha",
   "=",
   "a",
   "<",
   "beta",
   "=",
   "b",
   "<",
   "RC",
   "=",
   "rc",
   "<",
   "#",
   "<",
   "pl",
   "=",
   "p",
   "<",
   "anything",
   "else"
  ],
  "pl_tokens": [
   "function",
   "(",
   "current",
   ",",
   "target",
   ")",
   "{",
   "var",
   "currentValue",
   ",",
   "targetValue",
   ",",
   "i",
   ";",
   "current",
   "=",
   "new",
   "Version",
   "(",
   "current",
   ")",
   ".",
   "toArray",
   "(",
   ")",
   ";",
   "target",
   "=",
   "new",
   "Version",
   "(",
   "target",
   ")",
   ".",
   "toArray",
   "(",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "current",
   ".",
   "length",
   ",",
   "target",
   ".",
   "length",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "currentValue",
   "=",
   "this",
   ".",
   "getComponentValue",
   "(",
   "current",
   "[",
   "i",
   "]",
   ")",
   ";",
   "targetValue",
   "=",
   "this",
   ".",
   "getComponentValue",
   "(",
   "target",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "currentValue",
   "<",
   "targetValue",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "else",
   "if",
   "(",
   "currentValue",
   ">",
   "targetValue",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-8",
  "nl_tokens": [
   "Get",
   "the",
   "name",
   "of",
   "the",
   "most",
   "recent",
   "log",
   "file"
  ],
  "pl_tokens": [
   "function",
   "getOldestFilename",
   "(",
   "callback",
   ")",
   "{",
   "getLogFiles",
   "(",
   "function",
   "(",
   "err",
   ",",
   "files",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "callback",
   "(",
   "err",
   ",",
   "null",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "!",
   "files",
   "||",
   "files",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ".",
   "concat",
   "(",
   "FILE_EXT",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "file",
   "=",
   "_",
   ".",
   "<mask>",
   "(",
   "files",
   ",",
   "function",
   "(",
   "f",
   ")",
   "{",
   "// Remove extension to get just the timestamp",
   "var",
   "ts",
   "=",
   "f",
   ".",
   "name",
   ".",
   "replace",
   "(",
   "FILE_EXT",
   ",",
   "''",
   ")",
   ";",
   "return",
   "parseInt",
   "(",
   "ts",
   ",",
   "10",
   ")",
   ";",
   "}",
   ")",
   ";",
   "callback",
   "(",
   "null",
   ",",
   "file",
   ".",
   "name",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-9",
  "nl_tokens": [
   "Create",
   "between",
   "{"
  ],
  "pl_tokens": [
   "function",
   "(",
   "game",
   ",",
   "config",
   ")",
   "{",
   "var",
   "particleCount",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "random",
   ".",
   "inRange",
   "(",
   "config",
   ".",
   "qtyMin",
   ",",
   "config",
   ".",
   "qtyMax",
   ")",
   ")",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "particleCount",
   ";",
   "i",
   "++",
   ")",
   "{",
   "var",
   "particle",
   "=",
   "game",
   ".",
   "prefabs",
   ".",
   "instantiate",
   "(",
   "game",
   ".",
   "entities",
   ",",
   "config",
   ".",
   "prefab",
   ")",
   ";",
   "// check if origin is an entity",
   "var",
   "origin",
   "=",
   "config",
   ".",
   "origin",
   ";",
   "if",
   "(",
   "typeof",
   "config",
   ".",
   "origin",
   "===",
   "\"number\"",
   ")",
   "{",
   "origin",
   "=",
   "choosePointInEntity",
   "(",
   "game",
   ",",
   "origin",
   ")",
   ";",
   "}",
   "var",
   "randomSize",
   "=",
   "random",
   ".",
   "inRange",
   "(",
   "config",
   ".",
   "sizeMin",
   ",",
   "config",
   ".",
   "sizeMax",
   ")",
   ";",
   "scaleEntityRect",
   "(",
   "game",
   ",",
   "particle",
   ",",
   "randomSize",
   ")",
   ";",
   "centerEntityOnPoint",
   "(",
   "game",
   ",",
   "particle",
   ",",
   "origin",
   ")",
   ";",
   "var",
   "velocity",
   "=",
   "random",
   ".",
   "inRange",
   "(",
   "config",
   ".",
   "velocityMin",
   ",",
   "config",
   ".",
   "velocityMax",
   ")",
   ";",
   "var",
   "angle",
   "=",
   "pickAngle",
   "(",
   "config",
   ",",
   "i",
   ",",
   "particleCount",
   ")",
   ";",
   "var",
   "velocityComponent",
   "=",
   "game",
   ".",
   "entities",
   ".",
   "addComponent",
   "(",
   "particle",
   ",",
   "\"velocity\"",
   ")",
   ";",
   "var",
   "direction",
   "=",
   "pointOnCircle",
   "(",
   "angle",
   ",",
   "velocity",
   ")",
   ";",
   "velocityComponent",
   ".",
   "x",
   "=",
   "direction",
   ".",
   "x",
   ";",
   "velocityComponent",
   ".",
   "y",
   "=",
   "direction",
   ".",
   "y",
   ";",
   "if",
   "(",
   "config",
   ".",
   "accelerationX",
   "||",
   "config",
   ".",
   "accelerationY",
   ")",
   "{",
   "var",
   "accel",
   "=",
   "game",
   ".",
   "entities",
   ".",
   "addComponent",
   "(",
   "particle",
   ",",
   "\"acceleration\"",
   ")",
   ";",
   "accel",
   ".",
   "x",
   "=",
   "config",
   ".",
   "accelerationX",
   ";",
   "accel",
   ".",
   "y",
   "=",
   "config",
   ".",
   "accelerationY",
   ";",
   "}",
   "var",
   "lifeSpan",
   "=",
   "game",
   ".",
   "entities",
   ".",
   "addComponent",
   "(",
   "particle",
   ",",
   "\"lifeSpan\"",
   ")",
   ";",
   "lifeSpan",
   ".",
   "<mask>",
   "=",
   "random",
   ".",
   "inRange",
   "(",
   "config",
   ".",
   "lifeSpanMin",
   ",",
   "config",
   ".",
   "lifeSpanMax",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-10",
  "nl_tokens": [
   "Gets",
   "the",
   "array",
   "item",
   "at",
   "a",
   "certain",
   "index",
   "including",
   "multiple",
   "dimensions"
  ],
  "pl_tokens": [
   "function",
   "getArrayIndexAt",
   "(",
   "arr",
   ",",
   "dimensions",
   ",",
   "data",
   ")",
   "{",
   "var",
   "currentDimension",
   "=",
   "dimensions",
   "[",
   "0",
   "]",
   ";",
   "data",
   ".",
   "validate",
   "(",
   "currentDimension",
   ",",
   "'number'",
   ")",
   ";",
   "currentDimension",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "floor",
   "(",
   "currentDimension",
   "-",
   "1",
   ")",
   ")",
   ";",
   "if",
   "(",
   "arr",
   ".",
   "length",
   "<=",
   "currentDimension",
   ")",
   "throw",
   "new",
   "Error",
   "(",
   "'Invalid array bounds'",
   ")",
   ";",
   "var",
   "item",
   "=",
   "arr",
   "[",
   "currentDimension",
   "]",
   ";",
   "if",
   "(",
   "dimensions",
   ".",
   "length",
   ">",
   "1",
   ")",
   "{",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "item",
   ")",
   ")",
   "throw",
   "new",
   "Error",
   "(",
   "'Invalid array dimensions'",
   ")",
   ";",
   "return",
   "getArrayIndexAt",
   "(",
   "arr",
   "[",
   "currentDimension",
   "]",
   ",",
   "dimensions",
   ".",
   "slice",
   "(",
   "1",
   ")",
   ",",
   "data",
   ")",
   ";",
   "}",
   "else",
   "return",
   "item",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-11",
  "nl_tokens": [
   "Prepare",
   "stats",
   ".",
   "Currently",
   "only",
   "maxIdLength",
   "supported",
   "in",
   "core",
   "can",
   "be",
   "extended",
   "in",
   "custom",
   "plugin",
   "."
  ],
  "pl_tokens": [
   "function",
   "calcStats",
   "(",
   ")",
   "{",
   "return",
   "{",
   "maxIdLength",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "...",
   "Object",
   ".",
   "keys",
   "(",
   "loggers",
   ")",
   ".",
   "map",
   "(",
   "(",
   "l",
   ")",
   "=>",
   "l",
   ".",
   "length",
   ")",
   ")",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-12",
  "nl_tokens": [
   "Hilbert",
   "conversions",
   "Returns",
   "Hilbert",
   "index",
   "of",
   "given",
   "cardinal",
   "point"
  ],
  "pl_tokens": [
   "function",
   "hilbertIndex",
   "(",
   "point",
   ",",
   "options",
   ")",
   "{",
   "// :: [Int, Int, ..] -> {} -> Int",
   "options",
   "=",
   "options",
   "||",
   "{",
   "}",
   "var",
   "index",
   "=",
   "0",
   ",",
   "code",
   ",",
   "entry",
   "=",
   "options",
   ".",
   "entry",
   "||",
   "0",
   ",",
   "direction",
   "=",
   "options",
   ".",
   "direction",
   "||",
   "0",
   ",",
   "i",
   "=",
   "options",
   ".",
   "precision",
   "||",
   "bitwise",
   ".",
   "bitPrecision",
   "(",
   "Math",
   ".",
   "<mask>",
   ".",
   "apply",
   "(",
   "null",
   ",",
   "point",
   ")",
   ")",
   "-",
   "1",
   ",",
   "dim",
   "=",
   "point",
   ".",
   "length",
   "console",
   ".",
   "log",
   "(",
   "i",
   ")",
   "while",
   "(",
   "i",
   ">=",
   "0",
   ")",
   "{",
   "var",
   "bits",
   "=",
   "0",
   "var",
   "mask",
   "=",
   "1",
   "<<",
   "dim",
   "-",
   "1",
   "for",
   "(",
   "var",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "point",
   ".",
   "length",
   ";",
   "k",
   "++",
   ")",
   "{",
   "if",
   "(",
   "point",
   "[",
   "dim",
   "-",
   "(",
   "k",
   "+",
   "1",
   ")",
   "]",
   "&",
   "(",
   "1",
   "<<",
   "i",
   ")",
   ")",
   "{",
   "bits",
   "|=",
   "mask",
   "}",
   "mask",
   ">>>=",
   "1",
   "}",
   "bits",
   "=",
   "grayTransform",
   "(",
   "entry",
   ",",
   "direction",
   ",",
   "bits",
   ",",
   "dim",
   ")",
   "code",
   "=",
   "grayInverse",
   "(",
   "bits",
   ")",
   "entry",
   "=",
   "entry",
   "^",
   "bitwise",
   ".",
   "rotateLeft",
   "(",
   "entrySequence",
   "(",
   "code",
   ")",
   ",",
   "dim",
   ",",
   "0",
   ",",
   "direction",
   "+",
   "1",
   ")",
   "direction",
   "=",
   "(",
   "direction",
   "+",
   "directionSequence",
   "(",
   "code",
   ",",
   "dim",
   ")",
   "+",
   "1",
   ")",
   "%",
   "dim",
   "index",
   "=",
   "(",
   "index",
   "<<",
   "dim",
   ")",
   "|",
   "code",
   "i",
   "--",
   "}",
   "return",
   "index",
   "}"
  ]
 },
 {
  "idx": "maxmin-13",
  "nl_tokens": [
   "Assert",
   "a",
   "configurable",
   "value",
   "."
  ],
  "pl_tokens": [
   "function",
   "assertRange",
   "(",
   "name",
   ",",
   "val",
   ",",
   "<mask>",
   ")",
   "{",
   "assert",
   ".",
   "equal",
   "(",
   "typeof",
   "val",
   ",",
   "'number'",
   ",",
   "name",
   "+",
   "' must be a number'",
   ")",
   "assert",
   "(",
   "!",
   "isNaN",
   "(",
   "val",
   ")",
   ",",
   "'number'",
   ",",
   "name",
   "+",
   "' must be a number'",
   ")",
   "if",
   "(",
   "val",
   ">",
   "max",
   ")",
   "throw",
   "new",
   "RangeError",
   "(",
   "name",
   "+",
   "' must be lower than '",
   "+",
   "max",
   "+",
   "', but is '",
   "+",
   "val",
   ")",
   "else",
   "if",
   "(",
   "val",
   "<",
   "0",
   ")",
   "throw",
   "new",
   "RangeError",
   "(",
   "name",
   "+",
   "' must be greater than or equal to zero, but is '",
   "+",
   "val",
   ")",
   "else",
   "if",
   "(",
   "val",
   "%",
   "1",
   ")",
   "throw",
   "new",
   "RangeError",
   "(",
   "name",
   "+",
   "' must be an integer'",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-14",
  "nl_tokens": [
   "Called",
   "when",
   "visible",
   "range",
   "or",
   "data",
   "changes",
   ".",
   "Renders",
   "data",
   "in",
   "packs",
   ".",
   "A",
   "pack",
   "is",
   ":",
   "{",
   "from",
   ":",
   "100",
   "to",
   ":",
   "200",
   "fromPX",
   ":",
   "1000",
   "toPX",
   ":",
   "2100",
   "dom",
   ":",
   "[",
   "Element",
   "]",
   "}",
   "Creates",
   "new",
   "packs",
   "for",
   "not",
   "yet",
   "rendered",
   "ranges",
   "and",
   "removes",
   "obsolete",
   "packs",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "range",
   "=",
   "this",
   ".",
   "_renderingRange",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "range",
   ")",
   "{",
   "return",
   ";",
   "}",
   "var",
   "packs",
   "=",
   "this",
   ".",
   "childViews",
   "(",
   ")",
   ",",
   "fromPX",
   "=",
   "packs",
   "[",
   "0",
   "]",
   "&&",
   "packs",
   "[",
   "0",
   "]",
   ".",
   "fromPX",
   ",",
   "toPX",
   "=",
   "packs",
   "[",
   "0",
   "]",
   "&&",
   "packs",
   "[",
   "packs",
   ".",
   "length",
   "-",
   "1",
   "]",
   ".",
   "toPX",
   ",",
   "i",
   ",",
   "h",
   "=",
   "range",
   ".",
   "to",
   "-",
   "range",
   ".",
   "from",
   ";",
   "if",
   "(",
   "packs",
   ".",
   "length",
   "&&",
   "fromPX",
   "<=",
   "range",
   ".",
   "from",
   "&&",
   "toPX",
   ">=",
   "range",
   ".",
   "to",
   ")",
   "{",
   "// do nothing, everything is rendered as it should",
   "return",
   ";",
   "}",
   "else",
   "if",
   "(",
   "packs",
   ".",
   "length",
   "&&",
   "fromPX",
   "<=",
   "range",
   ".",
   "from",
   ")",
   "{",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "packs",
   "[",
   "i",
   "]",
   "&&",
   "packs",
   "[",
   "i",
   "]",
   ".",
   "toPX",
   "<",
   "range",
   ".",
   "from",
   ")",
   "{",
   "this",
   ".",
   "removeChild",
   "(",
   "packs",
   "[",
   "i",
   "++",
   "]",
   ")",
   ";",
   "}",
   "packs",
   "=",
   "packs",
   ".",
   "slice",
   "(",
   "i",
   ")",
   ";",
   "range",
   ".",
   "from",
   "=",
   "packs",
   ".",
   "length",
   "?",
   "packs",
   "[",
   "packs",
   ".",
   "length",
   "-",
   "1",
   "]",
   ".",
   "toPX",
   ":",
   "range",
   ".",
   "from",
   ";",
   "range",
   ".",
   "to",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "range",
   ".",
   "from",
   "+",
   "h",
   ",",
   "this",
   ".",
   "metrics",
   "(",
   ")",
   ".",
   "totalHeight",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "packs",
   ".",
   "length",
   "&&",
   "toPX",
   ">=",
   "range",
   ".",
   "to",
   ")",
   "{",
   "i",
   "=",
   "packs",
   ".",
   "length",
   "-",
   "1",
   ";",
   "while",
   "(",
   "packs",
   "[",
   "i",
   "]",
   "&&",
   "packs",
   "[",
   "i",
   "]",
   ".",
   "fromPX",
   ">",
   "range",
   ".",
   "to",
   ")",
   "{",
   "this",
   ".",
   "removeChild",
   "(",
   "packs",
   "[",
   "i",
   "--",
   "]",
   ")",
   ";",
   "}",
   "packs",
   "=",
   "packs",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "i",
   "+",
   "1",
   ")",
   ";",
   "range",
   ".",
   "to",
   "=",
   "packs",
   ".",
   "length",
   "?",
   "packs",
   "[",
   "0",
   "]",
   ".",
   "fromPX",
   ":",
   "range",
   ".",
   "to",
   ";",
   "range",
   ".",
   "from",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "range",
   ".",
   "to",
   "-",
   "h",
   ",",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "packs",
   "[",
   "i",
   "]",
   ")",
   "{",
   "this",
   ".",
   "removeChild",
   "(",
   "packs",
   "[",
   "i",
   "++",
   "]",
   ")",
   ";",
   "}",
   "packs",
   "=",
   "[",
   "]",
   ";",
   "}",
   "if",
   "(",
   "range",
   ".",
   "to",
   ">",
   "range",
   ".",
   "from",
   ")",
   "{",
   "var",
   "rowsRange",
   "=",
   "this",
   ".",
   "metrics",
   "(",
   ")",
   ".",
   "rowsForRange",
   "(",
   "range",
   ")",
   ",",
   "pack",
   "=",
   "this",
   ".",
   "_scheduleRenderPack",
   "(",
   "rowsRange",
   ")",
   ",",
   "d",
   "=",
   "this",
   ".",
   "metrics",
   "(",
   ")",
   ".",
   "rowDimensions",
   "(",
   "rowsRange",
   ".",
   "to",
   "-",
   "1",
   ")",
   ";",
   "pack",
   ".",
   "fromPX",
   "=",
   "this",
   ".",
   "metrics",
   "(",
   ")",
   ".",
   "rowDimensions",
   "(",
   "rowsRange",
   ".",
   "from",
   ")",
   ".",
   "top",
   ";",
   "pack",
   ".",
   "toPX",
   "=",
   "d",
   ".",
   "top",
   "+",
   "d",
   ".",
   "height",
   ";",
   "packs",
   ".",
   "push",
   "(",
   "pack",
   ")",
   ";",
   "this",
   ".",
   "_childViews",
   "=",
   "packs",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "a",
   ".",
   "from",
   "-",
   "b",
   ".",
   "from",
   ";",
   "}",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-15",
  "nl_tokens": [
   "*",
   "@method",
   "lazy",
   "(",
   "[",
   "ms",
   "]",
   "=",
   "1",
   "[",
   "limit",
   "]",
   "=",
   "Infinity",
   ")",
   "@returns",
   "Function",
   "@short",
   "Creates",
   "a",
   "lazy",
   "function",
   "that",
   "when",
   "called",
   "repeatedly",
   "will",
   "queue",
   "execution",
   "and",
   "wait",
   "[",
   "ms",
   "]",
   "milliseconds",
   "to",
   "execute",
   "again",
   ".",
   "@extra",
   "Lazy",
   "functions",
   "will",
   "always",
   "execute",
   "as",
   "many",
   "times",
   "as",
   "they",
   "are",
   "called",
   "up",
   "to",
   "[",
   "limit",
   "]",
   "after",
   "which",
   "point",
   "subsequent",
   "calls",
   "will",
   "be",
   "ignored",
   "(",
   "if",
   "it",
   "is",
   "set",
   "to",
   "a",
   "finite",
   "number",
   ")",
   ".",
   "Compare",
   "this",
   "to",
   "%throttle%",
   "which",
   "will",
   "execute",
   "only",
   "once",
   "per",
   "[",
   "ms",
   "]",
   "milliseconds",
   ".",
   "%lazy%",
   "is",
   "useful",
   "when",
   "you",
   "need",
   "to",
   "be",
   "sure",
   "that",
   "every",
   "call",
   "to",
   "a",
   "function",
   "is",
   "executed",
   "but",
   "in",
   "a",
   "non",
   "-",
   "blocking",
   "manner",
   ".",
   "Calling",
   "%cancel%",
   "on",
   "a",
   "lazy",
   "function",
   "will",
   "clear",
   "the",
   "entire",
   "queue",
   ".",
   "Note",
   "that",
   "[",
   "ms",
   "]",
   "can",
   "also",
   "be",
   "a",
   "fraction",
   ".",
   "@example"
  ],
  "pl_tokens": [
   "function",
   "(",
   "ms",
   ",",
   "limit",
   ")",
   "{",
   "var",
   "fn",
   "=",
   "this",
   ",",
   "queue",
   "=",
   "[",
   "]",
   ",",
   "lock",
   "=",
   "false",
   ",",
   "execute",
   ",",
   "rounded",
   ",",
   "perExecution",
   ",",
   "result",
   ";",
   "ms",
   "=",
   "ms",
   "||",
   "1",
   ";",
   "limit",
   "=",
   "limit",
   "||",
   "Infinity",
   ";",
   "rounded",
   "=",
   "ceil",
   "(",
   "ms",
   ")",
   ";",
   "perExecution",
   "=",
   "round",
   "(",
   "rounded",
   "/",
   "ms",
   ")",
   "||",
   "1",
   ";",
   "execute",
   "=",
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "lock",
   "||",
   "queue",
   ".",
   "length",
   "==",
   "0",
   ")",
   "return",
   ";",
   "// Allow fractions of a millisecond by calling",
   "// multiple times per actual timeout execution",
   "var",
   "<mask>",
   "=",
   "math",
   ".",
   "max",
   "(",
   "queue",
   ".",
   "length",
   "-",
   "perExecution",
   ",",
   "0",
   ")",
   ";",
   "while",
   "(",
   "queue",
   ".",
   "length",
   ">",
   "max",
   ")",
   "{",
   "// Getting uber-meta here...",
   "result",
   "=",
   "Function",
   ".",
   "prototype",
   ".",
   "apply",
   ".",
   "apply",
   "(",
   "fn",
   ",",
   "queue",
   ".",
   "shift",
   "(",
   ")",
   ")",
   ";",
   "}",
   "setDelay",
   "(",
   "lazy",
   ",",
   "rounded",
   ",",
   "function",
   "(",
   ")",
   "{",
   "lock",
   "=",
   "false",
   ";",
   "execute",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "lock",
   "=",
   "true",
   ";",
   "}",
   "function",
   "lazy",
   "(",
   ")",
   "{",
   "// The first call is immediate, so having 1 in the queue",
   "// implies two calls have already taken place.",
   "if",
   "(",
   "!",
   "lock",
   "||",
   "queue",
   ".",
   "length",
   "<",
   "limit",
   "-",
   "1",
   ")",
   "{",
   "queue",
   ".",
   "push",
   "(",
   "[",
   "this",
   ",",
   "arguments",
   "]",
   ")",
   ";",
   "execute",
   "(",
   ")",
   ";",
   "}",
   "// Return the memoized result",
   "return",
   "result",
   ";",
   "}",
   "return",
   "lazy",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-16",
  "nl_tokens": [
   "Lays",
   "out",
   "the",
   "renderables",
   "in",
   "a",
   "single",
   "line",
   ".",
   "Taking",
   "into",
   "account",
   "the",
   "following",
   "variables",
   ":",
   "-",
   "true",
   "-",
   "size",
   "-",
   "margins",
   "-",
   "spacing",
   "-",
   "justify",
   "-",
   "center",
   "align"
  ],
  "pl_tokens": [
   "function",
   "_layoutLine",
   "(",
   "next",
   ",",
   "endReached",
   ")",
   "{",
   "if",
   "(",
   "!",
   "lineNodes",
   ".",
   "length",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "// Determine size of the line",
   "var",
   "i",
   ";",
   "var",
   "lineSize",
   "=",
   "[",
   "0",
   ",",
   "0",
   "]",
   ";",
   "var",
   "lineNode",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "lineNodes",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "lineSize",
   "[",
   "direction",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "lineSize",
   "[",
   "direction",
   "]",
   ",",
   "lineNodes",
   "[",
   "i",
   "]",
   ".",
   "size",
   "[",
   "direction",
   "]",
   ")",
   ";",
   "lineSize",
   "[",
   "lineDirection",
   "]",
   "+=",
   "(",
   "(",
   "i",
   ">",
   "0",
   ")",
   "?",
   "spacing",
   "[",
   "lineDirection",
   "]",
   ":",
   "0",
   ")",
   "+",
   "lineNodes",
   "[",
   "i",
   "]",
   ".",
   "size",
   "[",
   "lineDirection",
   "]",
   ";",
   "}",
   "// Layout nodes from left to right or top to bottom",
   "var",
   "justifyOffset",
   "=",
   "justify",
   "[",
   "lineDirection",
   "]",
   "?",
   "(",
   "(",
   "lineLength",
   "-",
   "lineSize",
   "[",
   "lineDirection",
   "]",
   ")",
   "/",
   "(",
   "lineNodes",
   ".",
   "length",
   "*",
   "2",
   ")",
   ")",
   ":",
   "0",
   ";",
   "var",
   "lineOffset",
   "=",
   "(",
   "direction",
   "?",
   "margins",
   "[",
   "3",
   "]",
   ":",
   "margins",
   "[",
   "0",
   "]",
   ")",
   "+",
   "justifyOffset",
   ";",
   "var",
   "scrollLength",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "lineNodes",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "lineNode",
   "=",
   "lineNodes",
   "[",
   "i",
   "]",
   ";",
   "var",
   "translate",
   "=",
   "[",
   "0",
   ",",
   "0",
   ",",
   "0",
   "]",
   ";",
   "translate",
   "[",
   "lineDirection",
   "]",
   "=",
   "lineOffset",
   ";",
   "translate",
   "[",
   "direction",
   "]",
   "=",
   "next",
   "?",
   "offset",
   ":",
   "(",
   "offset",
   "-",
   "(",
   "lineSize",
   "[",
   "direction",
   "]",
   ")",
   ")",
   ";",
   "scrollLength",
   "=",
   "0",
   ";",
   "if",
   "(",
   "i",
   "===",
   "0",
   ")",
   "{",
   "scrollLength",
   "=",
   "lineSize",
   "[",
   "direction",
   "]",
   ";",
   "if",
   "(",
   "endReached",
   "&&",
   "(",
   "(",
   "next",
   "&&",
   "!",
   "alignment",
   ")",
   "||",
   "(",
   "!",
   "next",
   "&&",
   "alignment",
   ")",
   ")",
   ")",
   "{",
   "scrollLength",
   "+=",
   "direction",
   "?",
   "(",
   "margins",
   "[",
   "0",
   "]",
   "+",
   "margins",
   "[",
   "2",
   "]",
   ")",
   ":",
   "(",
   "margins",
   "[",
   "3",
   "]",
   "+",
   "margins",
   "[",
   "1",
   "]",
   ")",
   ";",
   "}",
   "else",
   "{",
   "scrollLength",
   "+=",
   "spacing",
   "[",
   "direction",
   "]",
   ";",
   "}",
   "}",
   "lineNode",
   ".",
   "set",
   "=",
   "{",
   "size",
   ":",
   "lineNode",
   ".",
   "size",
   ",",
   "translate",
   ":",
   "translate",
   ",",
   "scrollLength",
   ":",
   "scrollLength",
   "}",
   ";",
   "lineOffset",
   "+=",
   "lineNode",
   ".",
   "size",
   "[",
   "lineDirection",
   "]",
   "+",
   "spacing",
   "[",
   "lineDirection",
   "]",
   "+",
   "(",
   "justifyOffset",
   "*",
   "2",
   ")",
   ";",
   "}",
   "// Set nodes",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "lineNodes",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "lineNode",
   "=",
   "next",
   "?",
   "lineNodes",
   "[",
   "i",
   "]",
   ":",
   "lineNodes",
   "[",
   "(",
   "lineNodes",
   ".",
   "length",
   "-",
   "1",
   ")",
   "-",
   "i",
   "]",
   ";",
   "context",
   ".",
   "set",
   "(",
   "lineNode",
   ".",
   "node",
   ",",
   "lineNode",
   ".",
   "set",
   ")",
   ";",
   "}",
   "// Prepare for next line",
   "lineNodes",
   "=",
   "[",
   "]",
   ";",
   "return",
   "lineSize",
   "[",
   "direction",
   "]",
   "+",
   "spacing",
   "[",
   "direction",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-17",
  "nl_tokens": [
   "Compute",
   "the",
   "max",
   "min",
   "current",
   "average",
   "values",
   "from",
   "the",
   "records"
  ],
  "pl_tokens": [
   "function",
   "(",
   "metric",
   ",",
   "records",
   ")",
   "{",
   "var",
   "returnValue",
   "=",
   "{",
   "message",
   ":",
   "'no stats available'",
   ",",
   "name",
   ":",
   "metric",
   ".",
   "displayName",
   "}",
   ";",
   "if",
   "(",
   "records",
   "&&",
   "records",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "returnValue",
   "=",
   "_",
   ".",
   "chain",
   "(",
   "records",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "recordStr",
   ")",
   "{",
   "return",
   "JSON",
   ".",
   "parse",
   "(",
   "recordStr",
   ")",
   ";",
   "}",
   ")",
   ".",
   "groupBy",
   "(",
   "function",
   "(",
   "record",
   ")",
   "{",
   "return",
   "record",
   ".",
   "tags",
   "[",
   "metric",
   ".",
   "groupByTag",
   "]",
   ";",
   "}",
   ")",
   ".",
   "reduce",
   "(",
   "function",
   "(",
   "reduced",
   ",",
   "groupRecords",
   ",",
   "groupKey",
   ")",
   "{",
   "groupRecords",
   "=",
   "_",
   ".",
   "sortBy",
   "(",
   "groupRecords",
   ",",
   "'ts'",
   ")",
   ";",
   "var",
   "processedData",
   "=",
   "_",
   ".",
   "reduce",
   "(",
   "groupRecords",
   ",",
   "function",
   "(",
   "memo",
   ",",
   "groupRecord",
   ")",
   "{",
   "var",
   "value",
   "=",
   "groupRecord",
   ".",
   "fields",
   "[",
   "metric",
   ".",
   "valueField",
   "]",
   ";",
   "memo",
   ".",
   "current",
   "=",
   "value",
   ";",
   "memo",
   ".",
   "numberOfRecords",
   "++",
   ";",
   "memo",
   ".",
   "total",
   "+=",
   "value",
   ";",
   "memo",
   ".",
   "<mask>",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "value",
   ",",
   "memo",
   ".",
   "max",
   ")",
   ";",
   "memo",
   ".",
   "min",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "value",
   ",",
   "memo",
   ".",
   "min",
   ")",
   ";",
   "memo",
   ".",
   "from",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "groupRecord",
   ".",
   "ts",
   ",",
   "memo",
   ".",
   "from",
   ")",
   ";",
   "memo",
   ".",
   "end",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "groupRecord",
   ".",
   "ts",
   ",",
   "memo",
   ".",
   "end",
   ")",
   ";",
   "return",
   "memo",
   ";",
   "}",
   ",",
   "{",
   "max",
   ":",
   "0",
   ",",
   "min",
   ":",
   "MAX_NUMBER",
   ",",
   "current",
   ":",
   "0",
   ",",
   "numberOfRecords",
   ":",
   "0",
   ",",
   "total",
   ":",
   "0",
   ",",
   "from",
   ":",
   "MAX_NUMBER",
   ",",
   "end",
   ":",
   "0",
   "}",
   ")",
   ";",
   "reduced",
   "[",
   "groupKey",
   "]",
   "=",
   "{",
   "current",
   ":",
   "metric",
   ".",
   "dataFormatter",
   "(",
   "processedData",
   ".",
   "current",
   ")",
   ",",
   "max",
   ":",
   "metric",
   ".",
   "dataFormatter",
   "(",
   "processedData",
   ".",
   "max",
   ")",
   ",",
   "min",
   ":",
   "metric",
   ".",
   "dataFormatter",
   "(",
   "processedData",
   ".",
   "min",
   ")",
   ",",
   "average",
   ":",
   "metric",
   ".",
   "dataFormatter",
   "(",
   "processedData",
   ".",
   "total",
   "/",
   "processedData",
   ".",
   "numberOfRecords",
   ")",
   ",",
   "numberOfRecords",
   ":",
   "processedData",
   ".",
   "numberOfRecords",
   ",",
   "from",
   ":",
   "new",
   "Date",
   "(",
   "processedData",
   ".",
   "from",
   ")",
   ".",
   "toISOString",
   "(",
   ")",
   ",",
   "end",
   ":",
   "new",
   "Date",
   "(",
   "processedData",
   ".",
   "end",
   ")",
   ".",
   "toISOString",
   "(",
   ")",
   "}",
   ";",
   "return",
   "reduced",
   ";",
   "}",
   ",",
   "{",
   "}",
   ")",
   ".",
   "value",
   "(",
   ")",
   ";",
   "}",
   "return",
   "returnValue",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-18",
  "nl_tokens": [
   "Returns",
   "the",
   "key",
   "of",
   "the",
   "item",
   "with",
   "the",
   "lowest",
   "value",
   "in",
   "the",
   "object",
   "."
  ],
  "pl_tokens": [
   "function",
   "keyOfMin",
   "(",
   "o",
   ",",
   "func",
   ")",
   "{",
   "if",
   "(",
   "!",
   "o",
   "||",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "if",
   "(",
   "libs",
   ".",
   "object",
   ".",
   "size",
   "(",
   "o",
   ")",
   "===",
   "0",
   ")",
   "return",
   ";",
   "if",
   "(",
   "!",
   "(",
   "func",
   "instanceof",
   "Function",
   ")",
   ")",
   "func",
   "=",
   "undefined",
   ";",
   "if",
   "(",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "var",
   "<mask>",
   ",",
   "minValue",
   ",",
   "minKey",
   ";",
   "if",
   "(",
   "!",
   "func",
   ")",
   "{",
   "min",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "minKey",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "keys",
   "(",
   "o",
   ")",
   "[",
   "0",
   "]",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ",",
   "key",
   ")",
   "{",
   "if",
   "(",
   "item",
   "<=",
   "min",
   ")",
   "{",
   "min",
   "=",
   "item",
   ";",
   "minKey",
   "=",
   "key",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "min",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "minValue",
   "=",
   "func",
   ".",
   "call",
   "(",
   "min",
   ",",
   "min",
   ")",
   ";",
   "minKey",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "keys",
   "(",
   "o",
   ")",
   "[",
   "0",
   "]",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ",",
   "key",
   ")",
   "{",
   "var",
   "value",
   "=",
   "func",
   ".",
   "call",
   "(",
   "item",
   ",",
   "item",
   ")",
   ";",
   "if",
   "(",
   "value",
   "<=",
   "minValue",
   ")",
   "{",
   "min",
   "=",
   "item",
   ";",
   "minValue",
   "=",
   "value",
   ";",
   "minKey",
   "=",
   "key",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "return",
   "minKey",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-19",
  "nl_tokens": [
   "Given",
   "float",
   "ratio",
   "in",
   "[",
   "0",
   "1",
   "]",
   "return",
   "integer",
   "value",
   "in",
   "[",
   "min",
   "max",
   "]",
   ".",
   "interpolate",
   "(",
   "min",
   "max",
   "0",
   ".",
   "0",
   ")",
   "===",
   "min",
   "interpolate",
   "(",
   "min",
   "max",
   "1",
   ".",
   "0",
   ")",
   "===",
   "max"
  ],
  "pl_tokens": [
   "function",
   "interpolate",
   "(",
   "<mask>",
   ",",
   "max",
   ",",
   "ratio",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "ratio",
   "*",
   "(",
   "(",
   "max",
   "+",
   "0.5",
   ")",
   "-",
   "min",
   ")",
   "+",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-20",
  "nl_tokens": [
   "@function",
   "@private"
  ],
  "pl_tokens": [
   "function",
   "validate",
   "(",
   "host",
   ")",
   "{",
   "const",
   "hostScheme",
   "=",
   "joi",
   ".",
   "array",
   "(",
   ")",
   ".",
   "items",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ".",
   "<mask>",
   "(",
   "1",
   ")",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "single",
   "(",
   ")",
   "joi",
   ".",
   "assert",
   "(",
   "host",
   ",",
   "hostScheme",
   ",",
   "'The parameter `host` is invalid. Its'",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-21",
  "nl_tokens": [
   "/",
   "*",
   "206"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_arity",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "14",
   ")",
   ";",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "function",
   "_createPartialApplicator",
   "(",
   "concat",
   ")",
   "{",
   "return",
   "_curry2",
   "(",
   "function",
   "(",
   "fn",
   ",",
   "args",
   ")",
   "{",
   "return",
   "_arity",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "fn",
   ".",
   "length",
   "-",
   "args",
   ".",
   "length",
   ")",
   ",",
   "function",
   "(",
   ")",
   "{",
   "return",
   "fn",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "concat",
   "(",
   "args",
   ",",
   "arguments",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "module",
   ".",
   "exports",
   "=",
   "_createPartialApplicator",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-22",
  "nl_tokens": [
   "De",
   "Casteljau",
   "algorithm"
  ],
  "pl_tokens": [
   "function",
   "(",
   "ax",
   ",",
   "ay",
   ",",
   "bx",
   ",",
   "by",
   ",",
   "cx",
   ",",
   "cy",
   ",",
   "dx",
   ",",
   "dy",
   ")",
   "{",
   "var",
   "tobx",
   "=",
   "bx",
   "-",
   "ax",
   ";",
   "var",
   "toby",
   "=",
   "by",
   "-",
   "ay",
   ";",
   "var",
   "tocx",
   "=",
   "cx",
   "-",
   "bx",
   ";",
   "var",
   "tocy",
   "=",
   "cy",
   "-",
   "by",
   ";",
   "var",
   "todx",
   "=",
   "dx",
   "-",
   "cx",
   ";",
   "var",
   "tody",
   "=",
   "dy",
   "-",
   "cy",
   ";",
   "var",
   "precision",
   "=",
   "40",
   ";",
   "var",
   "d",
   ",",
   "i",
   ",",
   "px",
   ",",
   "py",
   ",",
   "qx",
   ",",
   "qy",
   ",",
   "rx",
   ",",
   "ry",
   ",",
   "tx",
   ",",
   "ty",
   ",",
   "sx",
   ",",
   "sy",
   ",",
   "x",
   ",",
   "y",
   ",",
   "minx",
   ",",
   "miny",
   ",",
   "maxx",
   ",",
   "maxy",
   ",",
   "toqx",
   ",",
   "toqy",
   ",",
   "torx",
   ",",
   "tory",
   ",",
   "totx",
   ",",
   "toty",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "(",
   "precision",
   "+",
   "1",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "d",
   "=",
   "i",
   "/",
   "precision",
   ";",
   "px",
   "=",
   "ax",
   "+",
   "d",
   "*",
   "tobx",
   ";",
   "py",
   "=",
   "ay",
   "+",
   "d",
   "*",
   "toby",
   ";",
   "qx",
   "=",
   "bx",
   "+",
   "d",
   "*",
   "tocx",
   ";",
   "qy",
   "=",
   "by",
   "+",
   "d",
   "*",
   "tocy",
   ";",
   "rx",
   "=",
   "cx",
   "+",
   "d",
   "*",
   "todx",
   ";",
   "ry",
   "=",
   "cy",
   "+",
   "d",
   "*",
   "tody",
   ";",
   "toqx",
   "=",
   "qx",
   "-",
   "px",
   ";",
   "toqy",
   "=",
   "qy",
   "-",
   "py",
   ";",
   "torx",
   "=",
   "rx",
   "-",
   "qx",
   ";",
   "tory",
   "=",
   "ry",
   "-",
   "qy",
   ";",
   "sx",
   "=",
   "px",
   "+",
   "d",
   "*",
   "toqx",
   ";",
   "sy",
   "=",
   "py",
   "+",
   "d",
   "*",
   "toqy",
   ";",
   "tx",
   "=",
   "qx",
   "+",
   "d",
   "*",
   "torx",
   ";",
   "ty",
   "=",
   "qy",
   "+",
   "d",
   "*",
   "tory",
   ";",
   "totx",
   "=",
   "tx",
   "-",
   "sx",
   ";",
   "toty",
   "=",
   "ty",
   "-",
   "sy",
   ";",
   "x",
   "=",
   "sx",
   "+",
   "d",
   "*",
   "totx",
   ";",
   "y",
   "=",
   "sy",
   "+",
   "d",
   "*",
   "toty",
   ";",
   "if",
   "(",
   "i",
   "==",
   "0",
   ")",
   "{",
   "minx",
   "=",
   "x",
   ";",
   "miny",
   "=",
   "y",
   ";",
   "maxx",
   "=",
   "x",
   ";",
   "maxy",
   "=",
   "y",
   ";",
   "}",
   "else",
   "{",
   "minx",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minx",
   ",",
   "x",
   ")",
   ";",
   "miny",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "miny",
   ",",
   "y",
   ")",
   ";",
   "maxx",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxx",
   ",",
   "x",
   ")",
   ";",
   "maxy",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxy",
   ",",
   "y",
   ")",
   ";",
   "}",
   "}",
   "return",
   "new",
   "Rectangle",
   "(",
   "Math",
   ".",
   "round",
   "(",
   "minx",
   ")",
   ",",
   "Math",
   ".",
   "round",
   "(",
   "miny",
   ")",
   ",",
   "Math",
   ".",
   "round",
   "(",
   "maxx",
   "-",
   "minx",
   ")",
   ",",
   "Math",
   ".",
   "round",
   "(",
   "maxy",
   "-",
   "miny",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-23",
  "nl_tokens": [
   "function",
   "frameInfo",
   "(",
   "frame",
   ")",
   "{",
   "return",
   "{",
   "getThis",
   ":",
   "frame",
   ".",
   "getThis",
   "()",
   "getTypeName",
   ":",
   "frame",
   ".",
   "getTypeName",
   "()",
   "getFunction",
   ":",
   "frame",
   ".",
   "getFunction",
   "()",
   "getFunctionName",
   ":",
   "frame",
   ".",
   "getFunctionName",
   "()",
   "getMethodName",
   ":",
   "frame",
   ".",
   "getMethodName",
   "()",
   "getFileName",
   ":",
   "frame",
   ".",
   "getFileName",
   "()",
   "getLineNumber",
   ":",
   "frame",
   ".",
   "getLineNumber",
   "()",
   "getColumnNumber",
   ":",
   "frame",
   ".",
   "getColumnNumber",
   "()",
   "getEvalOrigin",
   ":",
   "frame",
   ".",
   "getEvalOrigin",
   "()",
   "isToplevel",
   ":",
   "frame",
   ".",
   "isToplevel",
   "()",
   "isEval",
   ":",
   "frame",
   ".",
   "isEval",
   "()",
   "isNative",
   ":",
   "frame",
   ".",
   "isNative",
   "()",
   "isConstructor",
   ":",
   "frame",
   ".",
   "isConstructor",
   "()",
   "}",
   ";",
   "}"
  ],
  "pl_tokens": [
   "function",
   "getSrcInfo",
   "(",
   "stack",
   ")",
   "{",
   "const",
   "fileLineNoArr",
   "=",
   "[",
   "]",
   ";",
   "const",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "callsiteStackDepth",
   ",",
   "stack",
   ".",
   "length",
   "-",
   "1",
   ")",
   ";",
   "for",
   "(",
   "let",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<=",
   "end",
   ";",
   "++",
   "i",
   ")",
   "{",
   "const",
   "call",
   "=",
   "stack",
   "[",
   "i",
   "]",
   ";",
   "// console.log(frameInfo(call));",
   "const",
   "file",
   "=",
   "call",
   ".",
   "getFileName",
   "(",
   ")",
   ";",
   "const",
   "lineno",
   "=",
   "call",
   ".",
   "getLineNumber",
   "(",
   ")",
   ";",
   "const",
   "fileLineNoStr",
   "=",
   "`",
   "${",
   "EOL",
   "}",
   "${",
   "file",
   "}",
   "${",
   "lineno",
   "}",
   "`",
   ";",
   "fileLineNoArr",
   ".",
   "push",
   "(",
   "fileLineNoStr",
   ")",
   ";",
   "}",
   "return",
   "fileLineNoArr",
   ".",
   "join",
   "(",
   "''",
   ")",
   "+",
   "EOL",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-24",
  "nl_tokens": [
   "Returns",
   "true",
   "if",
   "the",
   "given",
   "value",
   "is",
   "between",
   "the",
   "configured",
   "min",
   "and",
   "max",
   "values",
   ".",
   "For",
   "example",
   ":"
  ],
  "pl_tokens": [
   "function",
   "(",
   "config",
   ",",
   "value",
   ")",
   "{",
   "if",
   "(",
   "value",
   "===",
   "undefined",
   "||",
   "value",
   "===",
   "null",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "var",
   "length",
   "=",
   "value",
   ".",
   "length",
   ",",
   "<mask>",
   "=",
   "config",
   ".",
   "min",
   ",",
   "max",
   "=",
   "config",
   ".",
   "max",
   ";",
   "if",
   "(",
   "(",
   "min",
   "&&",
   "length",
   "<",
   "min",
   ")",
   "||",
   "(",
   "max",
   "&&",
   "length",
   ">",
   "max",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "else",
   "{",
   "return",
   "true",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-25",
  "nl_tokens": [
   "/",
   "*",
   "Perform",
   "a",
   "DFS",
   "postorder",
   "traversal",
   "labeling",
   "each",
   "node",
   "v",
   "with",
   "its",
   "traversal",
   "order",
   "lim",
   "(",
   "v",
   ")",
   "and",
   "the",
   "minimum",
   "traversal",
   "number",
   "of",
   "any",
   "of",
   "its",
   "descendants",
   "low",
   "(",
   "v",
   ")",
   ".",
   "This",
   "provides",
   "an",
   "efficient",
   "way",
   "to",
   "test",
   "whether",
   "u",
   "is",
   "an",
   "ancestor",
   "of",
   "v",
   "since",
   "low",
   "(",
   "u",
   ")",
   "<",
   "=",
   "lim",
   "(",
   "v",
   ")",
   "<",
   "=",
   "lim",
   "(",
   "u",
   ")",
   "if",
   "and",
   "only",
   "if",
   "u",
   "is",
   "an",
   "ancestor",
   "."
  ],
  "pl_tokens": [
   "function",
   "computeLowLim",
   "(",
   "tree",
   ")",
   "{",
   "var",
   "postOrderNum",
   "=",
   "0",
   ";",
   "function",
   "dfs",
   "(",
   "n",
   ")",
   "{",
   "var",
   "children",
   "=",
   "tree",
   ".",
   "successors",
   "(",
   "n",
   ")",
   ";",
   "var",
   "low",
   "=",
   "postOrderNum",
   ";",
   "for",
   "(",
   "var",
   "c",
   "in",
   "children",
   ")",
   "{",
   "var",
   "child",
   "=",
   "children",
   "[",
   "c",
   "]",
   ";",
   "dfs",
   "(",
   "child",
   ")",
   ";",
   "low",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "low",
   ",",
   "tree",
   ".",
   "node",
   "(",
   "child",
   ")",
   ".",
   "low",
   ")",
   ";",
   "}",
   "tree",
   ".",
   "node",
   "(",
   "n",
   ")",
   ".",
   "low",
   "=",
   "low",
   ";",
   "tree",
   ".",
   "node",
   "(",
   "n",
   ")",
   ".",
   "lim",
   "=",
   "postOrderNum",
   "++",
   ";",
   "}",
   "dfs",
   "(",
   "tree",
   ".",
   "graph",
   "(",
   ")",
   ".",
   "root",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-26",
  "nl_tokens": [
   "Returns",
   "the",
   "valid",
   "digit",
   "count",
   "for",
   "a",
   "property",
   "or",
   "throws",
   "RangeError",
   "on",
   "a",
   "value",
   "out",
   "of",
   "the",
   "range",
   "."
  ],
  "pl_tokens": [
   "function",
   "getNumberOption",
   "(",
   "options",
   ",",
   "property",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "fallback",
   ")",
   "{",
   "var",
   "value",
   "=",
   "options",
   "[",
   "property",
   "]",
   ";",
   "if",
   "(",
   "!",
   "IS_UNDEFINED",
   "(",
   "value",
   ")",
   ")",
   "{",
   "value",
   "=",
   "TO_NUMBER",
   "(",
   "value",
   ")",
   ";",
   "if",
   "(",
   "NUMBER_IS_NAN",
   "(",
   "value",
   ")",
   "||",
   "value",
   "<",
   "min",
   "||",
   "value",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "MakeRangeError",
   "(",
   "kPropertyValueOutOfRange",
   ",",
   "property",
   ")",
   ";",
   "}",
   "return",
   "%",
   "math_floor",
   "(",
   "value",
   ")",
   ";",
   "}",
   "return",
   "fallback",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-27",
  "nl_tokens": [
   "Executes",
   "the",
   "layout",
   "and",
   "updates",
   "the",
   "state",
   "of",
   "the",
   "scrollview",
   "."
  ],
  "pl_tokens": [
   "function",
   "_layout",
   "(",
   "size",
   ",",
   "scrollOffset",
   ",",
   "nested",
   ")",
   "{",
   "// Track the number of times the layout-function was executed",
   "this",
   ".",
   "_debug",
   ".",
   "layoutCount",
   "++",
   ";",
   "//_log.call(this, 'Layout, scrollOffset: ', scrollOffset, ', particle: ', this._scroll.particle.getPosition1D());",
   "// Determine start & end",
   "var",
   "scrollStart",
   "=",
   "0",
   "-",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "options",
   ".",
   "extraBoundsSpace",
   "[",
   "0",
   "]",
   ",",
   "1",
   ")",
   ";",
   "var",
   "scrollEnd",
   "=",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   "+",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "options",
   ".",
   "extraBoundsSpace",
   "[",
   "1",
   "]",
   ",",
   "1",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "paginated",
   "&&",
   "(",
   "this",
   ".",
   "options",
   ".",
   "paginationMode",
   "===",
   "PaginationMode",
   ".",
   "PAGE",
   ")",
   ")",
   "{",
   "scrollStart",
   "=",
   "scrollOffset",
   "-",
   "this",
   ".",
   "options",
   ".",
   "extraBoundsSpace",
   "[",
   "0",
   "]",
   ";",
   "scrollEnd",
   "=",
   "scrollOffset",
   "+",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   "+",
   "this",
   ".",
   "options",
   ".",
   "extraBoundsSpace",
   "[",
   "1",
   "]",
   ";",
   "if",
   "(",
   "(",
   "scrollOffset",
   "+",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ")",
   "<",
   "0",
   ")",
   "{",
   "scrollStart",
   "+=",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ";",
   "scrollEnd",
   "+=",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "scrollOffset",
   "-",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ")",
   ">",
   "0",
   ")",
   "{",
   "scrollStart",
   "-=",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ";",
   "scrollEnd",
   "-=",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ";",
   "}",
   "}",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "layoutAll",
   ")",
   "{",
   "scrollStart",
   "=",
   "-",
   "1000000",
   ";",
   "scrollEnd",
   "=",
   "1000000",
   ";",
   "}",
   "// Prepare for layout",
   "var",
   "layoutContext",
   "=",
   "this",
   ".",
   "_nodes",
   ".",
   "prepareForLayout",
   "(",
   "this",
   ".",
   "_viewSequence",
   ",",
   "// first node to layout",
   "this",
   ".",
   "_nodesById",
   ",",
   "{",
   "// so we can do fast id lookups",
   "size",
   ":",
   "size",
   ",",
   "direction",
   ":",
   "this",
   ".",
   "_direction",
   ",",
   "reverse",
   ":",
   "this",
   ".",
   "options",
   ".",
   "alignment",
   "?",
   "true",
   ":",
   "false",
   ",",
   "scrollOffset",
   ":",
   "this",
   ".",
   "options",
   ".",
   "alignment",
   "?",
   "(",
   "scrollOffset",
   "+",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ")",
   ":",
   "scrollOffset",
   ",",
   "scrollStart",
   ":",
   "scrollStart",
   ",",
   "scrollEnd",
   ":",
   "scrollEnd",
   "}",
   ")",
   ";",
   "// Layout objects",
   "if",
   "(",
   "this",
   ".",
   "_layout",
   ".",
   "_function",
   ")",
   "{",
   "this",
   ".",
   "_layout",
   ".",
   "_function",
   "(",
   "layoutContext",
   ",",
   "// context which the layout-function can use",
   "this",
   ".",
   "_layout",
   ".",
   "options",
   "// additional layout-options",
   ")",
   ";",
   "}",
   "this",
   ".",
   "_scroll",
   ".",
   "unnormalizedScrollOffset",
   "=",
   "scrollOffset",
   ";",
   "// Call post-layout function",
   "if",
   "(",
   "this",
   ".",
   "_postLayout",
   ")",
   "{",
   "this",
   ".",
   "_postLayout",
   "(",
   "size",
   ",",
   "scrollOffset",
   ")",
   ";",
   "}",
   "// Mark non-invalidated nodes for removal",
   "this",
   ".",
   "_nodes",
   ".",
   "removeNonInvalidatedNodes",
   "(",
   "this",
   ".",
   "options",
   ".",
   "flowOptions",
   ".",
   "removeSpec",
   ")",
   ";",
   "// Check whether the bounds have been reached",
   "//var oldBoundsReached = this._scroll.boundsReached;",
   "_calcBounds",
   ".",
   "call",
   "(",
   "this",
   ",",
   "size",
   ",",
   "scrollOffset",
   ")",
   ";",
   "//if (oldBoundsReached !== this._scroll.boundsReached) {",
   "//    _log.call(this, 'bounds reached changed (', oldBoundsReached, ' != ', this._scroll.boundsReached, ')');",
   "//}",
   "// Update scroll-to spring",
   "_calcScrollToOffset",
   ".",
   "call",
   "(",
   "this",
   ",",
   "size",
   ",",
   "scrollOffset",
   ")",
   ";",
   "// When pagination is enabled, snap to page",
   "_snapToPage",
   ".",
   "call",
   "(",
   "this",
   ")",
   ";",
   "// If the bounds have changed, and the scroll-offset would be different",
   "// than before, then re-layout entirely using the new offset.",
   "var",
   "newScrollOffset",
   "=",
   "_calcScrollOffset",
   ".",
   "call",
   "(",
   "this",
   ",",
   "true",
   ")",
   ";",
   "if",
   "(",
   "!",
   "nested",
   "&&",
   "(",
   "newScrollOffset",
   "!==",
   "scrollOffset",
   ")",
   ")",
   "{",
   "//_log.call(this, 'offset changed, re-layouting... (', scrollOffset, ' != ', newScrollOffset, ')');",
   "return",
   "_layout",
   ".",
   "call",
   "(",
   "this",
   ",",
   "size",
   ",",
   "newScrollOffset",
   ",",
   "true",
   ")",
   ";",
   "}",
   "// Normalize scroll offset so that the current viewsequence node is as close to the",
   "// top as possible and the layout function will need to process the least amount",
   "// of renderables.",
   "scrollOffset",
   "=",
   "_normalizeViewSequence",
   ".",
   "call",
   "(",
   "this",
   ",",
   "size",
   ",",
   "scrollOffset",
   ")",
   ";",
   "// Update spring",
   "_updateSpring",
   ".",
   "call",
   "(",
   "this",
   ")",
   ";",
   "// Cleanup any nodes in case of a VirtualViewSequence",
   "this",
   ".",
   "_nodes",
   ".",
   "removeVirtualViewSequenceNodes",
   "(",
   ")",
   ";",
   "// Calculate scroll-length and use that as the true-size (height)",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "size",
   "&&",
   "(",
   "this",
   ".",
   "options",
   ".",
   "size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   "===",
   "true",
   ")",
   ")",
   "{",
   "var",
   "scrollLength",
   "=",
   "0",
   ";",
   "var",
   "node",
   "=",
   "this",
   ".",
   "_nodes",
   ".",
   "getStartEnumNode",
   "(",
   ")",
   ";",
   "while",
   "(",
   "node",
   ")",
   "{",
   "if",
   "(",
   "node",
   ".",
   "_invalidated",
   "&&",
   "node",
   ".",
   "scrollLength",
   ")",
   "{",
   "scrollLength",
   "+=",
   "node",
   ".",
   "scrollLength",
   ";",
   "}",
   "node",
   "=",
   "node",
   ".",
   "_next",
   ";",
   "}",
   "this",
   ".",
   "_size",
   "=",
   "this",
   ".",
   "_size",
   "||",
   "[",
   "0",
   ",",
   "0",
   "]",
   ";",
   "this",
   ".",
   "_size",
   "[",
   "0",
   "]",
   "=",
   "this",
   ".",
   "options",
   ".",
   "size",
   "[",
   "0",
   "]",
   ";",
   "this",
   ".",
   "_size",
   "[",
   "1",
   "]",
   "=",
   "this",
   ".",
   "options",
   ".",
   "size",
   "[",
   "1",
   "]",
   ";",
   "this",
   ".",
   "_size",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   "=",
   "scrollLength",
   ";",
   "}",
   "return",
   "scrollOffset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-28",
  "nl_tokens": [
   "@ngdoc",
   "filter",
   "@name",
   "limitTo",
   "@kind",
   "function"
  ],
  "pl_tokens": [
   "function",
   "limitToFilter",
   "(",
   ")",
   "{",
   "return",
   "function",
   "(",
   "input",
   ",",
   "limit",
   ",",
   "begin",
   ")",
   "{",
   "if",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "Number",
   "(",
   "limit",
   ")",
   ")",
   "===",
   "Infinity",
   ")",
   "{",
   "limit",
   "=",
   "Number",
   "(",
   "limit",
   ")",
   ";",
   "}",
   "else",
   "{",
   "limit",
   "=",
   "toInt",
   "(",
   "limit",
   ")",
   ";",
   "}",
   "if",
   "(",
   "isNumberNaN",
   "(",
   "limit",
   ")",
   ")",
   "return",
   "input",
   ";",
   "if",
   "(",
   "isNumber",
   "(",
   "input",
   ")",
   ")",
   "input",
   "=",
   "input",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isArrayLike",
   "(",
   "input",
   ")",
   ")",
   "return",
   "input",
   ";",
   "begin",
   "=",
   "(",
   "!",
   "begin",
   "||",
   "isNaN",
   "(",
   "begin",
   ")",
   ")",
   "?",
   "0",
   ":",
   "toInt",
   "(",
   "begin",
   ")",
   ";",
   "begin",
   "=",
   "(",
   "begin",
   "<",
   "0",
   ")",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "input",
   ".",
   "length",
   "+",
   "begin",
   ")",
   ":",
   "begin",
   ";",
   "if",
   "(",
   "limit",
   ">=",
   "0",
   ")",
   "{",
   "return",
   "sliceFn",
   "(",
   "input",
   ",",
   "begin",
   ",",
   "begin",
   "+",
   "limit",
   ")",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "begin",
   "===",
   "0",
   ")",
   "{",
   "return",
   "sliceFn",
   "(",
   "input",
   ",",
   "limit",
   ",",
   "input",
   ".",
   "length",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "sliceFn",
   "(",
   "input",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "begin",
   "+",
   "limit",
   ")",
   ",",
   "begin",
   ")",
   ";",
   "}",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-29",
  "nl_tokens": [
   "updates",
   "the",
   "internal",
   "vW",
   "property",
   "with",
   "the",
   "current",
   "viewport",
   "width",
   "in",
   "px"
  ],
  "pl_tokens": [
   "function",
   "updateMetrics",
   "(",
   ")",
   "{",
   "isVwDirty",
   "=",
   "false",
   ";",
   "DPR",
   "=",
   "window",
   ".",
   "devicePixelRatio",
   ";",
   "cssCache",
   "=",
   "{",
   "}",
   ";",
   "sizeLengthCache",
   "=",
   "{",
   "}",
   ";",
   "pf",
   ".",
   "DPR",
   "=",
   "DPR",
   "||",
   "1",
   ";",
   "units",
   ".",
   "width",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "window",
   ".",
   "innerWidth",
   "||",
   "0",
   ",",
   "docElem",
   ".",
   "clientWidth",
   ")",
   ";",
   "units",
   ".",
   "height",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "window",
   ".",
   "innerHeight",
   "||",
   "0",
   ",",
   "docElem",
   ".",
   "clientHeight",
   ")",
   ";",
   "units",
   ".",
   "vw",
   "=",
   "units",
   ".",
   "width",
   "/",
   "100",
   ";",
   "units",
   ".",
   "vh",
   "=",
   "units",
   ".",
   "height",
   "/",
   "100",
   ";",
   "evalId",
   "=",
   "[",
   "units",
   ".",
   "height",
   ",",
   "units",
   ".",
   "width",
   ",",
   "DPR",
   "]",
   ".",
   "join",
   "(",
   "\"-\"",
   ")",
   ";",
   "units",
   ".",
   "em",
   "=",
   "pf",
   ".",
   "getEmValue",
   "(",
   ")",
   ";",
   "units",
   ".",
   "rem",
   "=",
   "units",
   ".",
   "em",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-30",
  "nl_tokens": [
   "Set",
   "the",
   "zoom",
   "level",
   "of",
   "the",
   "map",
   ".",
   "@param",
   "{",
   "Object",
   "}",
   "state",
   "Current",
   "state",
   ".",
   "@param",
   "{",
   "Object",
   "}",
   "action",
   "Action",
   "to",
   "handle",
   "."
  ],
  "pl_tokens": [
   "function",
   "setZoom",
   "(",
   "state",
   ",",
   "action",
   ")",
   "{",
   "let",
   "zoom",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "DEFAULT_ZOOM",
   ".",
   "MAX",
   ",",
   "action",
   ".",
   "zoom",
   ")",
   ";",
   "zoom",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "DEFAULT_ZOOM",
   ".",
   "MIN",
   ",",
   "zoom",
   ")",
   ";",
   "return",
   "Object",
   ".",
   "assign",
   "(",
   "{",
   "}",
   ",",
   "state",
   ",",
   "{",
   "zoom",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-31",
  "nl_tokens": [
   "Returns",
   "the",
   "maximum",
   "item",
   "in",
   "the",
   "object",
   "."
  ],
  "pl_tokens": [
   "function",
   "<mask>",
   "(",
   "o",
   ",",
   "func",
   ")",
   "{",
   "if",
   "(",
   "!",
   "o",
   "||",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "if",
   "(",
   "libs",
   ".",
   "object",
   ".",
   "size",
   "(",
   "o",
   ")",
   "===",
   "0",
   ")",
   "return",
   ";",
   "if",
   "(",
   "!",
   "(",
   "func",
   "instanceof",
   "Function",
   ")",
   ")",
   "func",
   "=",
   "undefined",
   ";",
   "var",
   "max",
   ",",
   "maxValue",
   ";",
   "if",
   "(",
   "!",
   "func",
   ")",
   "{",
   "max",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "if",
   "(",
   "item",
   ">=",
   "max",
   ")",
   "max",
   "=",
   "item",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "max",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "maxValue",
   "=",
   "func",
   ".",
   "call",
   "(",
   "max",
   ",",
   "max",
   ")",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "var",
   "value",
   "=",
   "func",
   ".",
   "call",
   "(",
   "item",
   ",",
   "item",
   ")",
   ";",
   "if",
   "(",
   "value",
   ">=",
   "maxValue",
   ")",
   "{",
   "max",
   "=",
   "item",
   ";",
   "maxValue",
   "=",
   "value",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-32",
  "nl_tokens": [
   "Set",
   "row",
   "height",
   "and",
   "compute",
   "item",
   "geometry",
   "from",
   "that",
   "height",
   ".",
   "Will",
   "justify",
   "items",
   "within",
   "the",
   "row",
   "unless",
   "instructed",
   "not",
   "to",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "newHeight",
   ",",
   "widowLayoutStyle",
   ")",
   "{",
   "var",
   "itemWidthSum",
   "=",
   "this",
   ".",
   "left",
   ",",
   "rowWidthWithoutSpacing",
   "=",
   "this",
   ".",
   "width",
   "-",
   "(",
   "this",
   ".",
   "items",
   ".",
   "length",
   "-",
   "1",
   ")",
   "*",
   "this",
   ".",
   "spacing",
   ",",
   "clampedToNativeRatio",
   ",",
   "clampedHeight",
   ",",
   "errorWidthPerItem",
   ",",
   "roundedCumulativeErrors",
   ",",
   "singleItemGeometry",
   ",",
   "centerOffset",
   ";",
   "// Justify unless explicitly specified otherwise.",
   "if",
   "(",
   "typeof",
   "widowLayoutStyle",
   "===",
   "'undefined'",
   "||",
   "[",
   "'justify'",
   ",",
   "'center'",
   ",",
   "'left'",
   "]",
   ".",
   "indexOf",
   "(",
   "widowLayoutStyle",
   ")",
   "<",
   "0",
   ")",
   "{",
   "widowLayoutStyle",
   "=",
   "'left'",
   ";",
   "}",
   "// Clamp row height to edge case minimum/maximum.",
   "clampedHeight",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "edgeCaseMinRowHeight",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "newHeight",
   ",",
   "this",
   ".",
   "edgeCaseMaxRowHeight",
   ")",
   ")",
   ";",
   "if",
   "(",
   "newHeight",
   "!==",
   "clampedHeight",
   ")",
   "{",
   "// If row height was clamped, the resulting row/item aspect ratio will be off,",
   "// so force it to fit the width (recalculate aspectRatio to match clamped height).",
   "// NOTE: this will result in cropping/padding commensurate to the amount of clamping.",
   "this",
   ".",
   "height",
   "=",
   "clampedHeight",
   ";",
   "clampedToNativeRatio",
   "=",
   "(",
   "rowWidthWithoutSpacing",
   "/",
   "clampedHeight",
   ")",
   "/",
   "(",
   "rowWidthWithoutSpacing",
   "/",
   "newHeight",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// If not clamped, leave ratio at 1.0.",
   "this",
   ".",
   "height",
   "=",
   "newHeight",
   ";",
   "clampedToNativeRatio",
   "=",
   "1.0",
   ";",
   "}",
   "// Compute item geometry based on newHeight.",
   "this",
   ".",
   "items",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "item",
   ")",
   "{",
   "item",
   ".",
   "top",
   "=",
   "this",
   ".",
   "top",
   ";",
   "item",
   ".",
   "width",
   "=",
   "item",
   ".",
   "aspectRatio",
   "*",
   "this",
   ".",
   "height",
   "*",
   "clampedToNativeRatio",
   ";",
   "item",
   ".",
   "height",
   "=",
   "this",
   ".",
   "height",
   ";",
   "// Left-to-right.",
   "// TODO right to left",
   "// item.left = this.width - itemWidthSum - item.width;",
   "item",
   ".",
   "left",
   "=",
   "itemWidthSum",
   ";",
   "// Increment width.",
   "itemWidthSum",
   "+=",
   "item",
   ".",
   "width",
   "+",
   "this",
   ".",
   "spacing",
   ";",
   "}",
   ",",
   "this",
   ")",
   ";",
   "// If specified, ensure items fill row and distribute error",
   "// caused by rounding width and height across all items.",
   "if",
   "(",
   "widowLayoutStyle",
   "===",
   "'justify'",
   ")",
   "{",
   "itemWidthSum",
   "-=",
   "(",
   "this",
   ".",
   "spacing",
   "+",
   "this",
   ".",
   "left",
   ")",
   ";",
   "errorWidthPerItem",
   "=",
   "(",
   "itemWidthSum",
   "-",
   "this",
   ".",
   "width",
   ")",
   "/",
   "this",
   ".",
   "items",
   ".",
   "length",
   ";",
   "roundedCumulativeErrors",
   "=",
   "this",
   ".",
   "items",
   ".",
   "map",
   "(",
   "function",
   "(",
   "item",
   ",",
   "i",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "round",
   "(",
   "(",
   "i",
   "+",
   "1",
   ")",
   "*",
   "errorWidthPerItem",
   ")",
   ";",
   "}",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "items",
   ".",
   "length",
   "===",
   "1",
   ")",
   "{",
   "// For rows with only one item, adjust item width to fill row.",
   "singleItemGeometry",
   "=",
   "this",
   ".",
   "items",
   "[",
   "0",
   "]",
   ";",
   "singleItemGeometry",
   ".",
   "width",
   "-=",
   "Math",
   ".",
   "round",
   "(",
   "errorWidthPerItem",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// For rows with multiple items, adjust item width and shift items to fill the row,",
   "// while maintaining equal spacing between items in the row.",
   "this",
   ".",
   "items",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "item",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "i",
   ">",
   "0",
   ")",
   "{",
   "item",
   ".",
   "left",
   "-=",
   "roundedCumulativeErrors",
   "[",
   "i",
   "-",
   "1",
   "]",
   ";",
   "item",
   ".",
   "width",
   "-=",
   "(",
   "roundedCumulativeErrors",
   "[",
   "i",
   "]",
   "-",
   "roundedCumulativeErrors",
   "[",
   "i",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "else",
   "{",
   "item",
   ".",
   "width",
   "-=",
   "roundedCumulativeErrors",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "widowLayoutStyle",
   "===",
   "'center'",
   ")",
   "{",
   "// Center widows",
   "centerOffset",
   "=",
   "(",
   "this",
   ".",
   "width",
   "-",
   "itemWidthSum",
   ")",
   "/",
   "2",
   ";",
   "this",
   ".",
   "items",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "item",
   ")",
   "{",
   "item",
   ".",
   "left",
   "+=",
   "centerOffset",
   "+",
   "this",
   ".",
   "spacing",
   ";",
   "}",
   ",",
   "this",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-33",
  "nl_tokens": [
   "Returns",
   "either",
   "the",
   "offsetHeight",
   "or",
   "the",
   "height",
   "of",
   "this",
   "element",
   "based",
   "on",
   "CSS",
   "height",
   "adjusted",
   "by",
   "padding",
   "or",
   "borders",
   "when",
   "needed",
   "to",
   "simulate",
   "offsetHeight",
   "when",
   "offsets",
   "aren",
   "t",
   "available",
   ".",
   "This",
   "may",
   "not",
   "work",
   "on",
   "display",
   ":",
   "none",
   "elements",
   "if",
   "a",
   "height",
   "has",
   "not",
   "been",
   "set",
   "using",
   "CSS",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "h",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "me",
   ".",
   "dom",
   ".",
   "offsetHeight",
   ",",
   "me",
   ".",
   "dom",
   ".",
   "clientHeight",
   ")",
   ";",
   "if",
   "(",
   "!",
   "h",
   ")",
   "{",
   "h",
   "=",
   "parseFloat",
   "(",
   "me",
   ".",
   "getStyle",
   "(",
   "HEIGHT",
   ")",
   ")",
   "||",
   "0",
   ";",
   "if",
   "(",
   "!",
   "me",
   ".",
   "isBorderBox",
   "(",
   ")",
   ")",
   "{",
   "h",
   "+=",
   "me",
   ".",
   "getFrameWidth",
   "(",
   "'tb'",
   ")",
   ";",
   "}",
   "}",
   "return",
   "h",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-34",
  "nl_tokens": [
   "We",
   "need",
   "to",
   "see",
   "the",
   "output",
   "of",
   "the",
   "latest",
   "command",
   "entered"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "// Certain browsers have a bug such that scrollHeight is too small",
   "// when content does not fill the client area of the element",
   "var",
   "scrollHeight",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "output",
   ".",
   "scrollHeight",
   ",",
   "this",
   ".",
   "output",
   ".",
   "clientHeight",
   ")",
   ";",
   "this",
   ".",
   "output",
   ".",
   "scrollTop",
   "=",
   "scrollHeight",
   "-",
   "this",
   ".",
   "output",
   ".",
   "clientHeight",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-35",
  "nl_tokens": [
   "Update",
   "the",
   "x0",
   "y0",
   "x1",
   "and",
   "y1",
   "for",
   "the",
   "sankeyCircular",
   "to",
   "allow",
   "space",
   "for",
   "any",
   "circular",
   "links"
  ],
  "pl_tokens": [
   "function",
   "scaleSankeySize",
   "(",
   "graph",
   ",",
   "margin",
   ")",
   "{",
   "var",
   "maxColumn",
   "=",
   "<mask>",
   "(",
   "graph",
   ".",
   "nodes",
   ",",
   "function",
   "(",
   "node",
   ")",
   "{",
   "return",
   "node",
   ".",
   "column",
   ";",
   "}",
   ")",
   ";",
   "var",
   "currentWidth",
   "=",
   "x1",
   "-",
   "x0",
   ";",
   "var",
   "currentHeight",
   "=",
   "y1",
   "-",
   "y0",
   ";",
   "var",
   "newWidth",
   "=",
   "currentWidth",
   "+",
   "margin",
   ".",
   "right",
   "+",
   "margin",
   ".",
   "left",
   ";",
   "var",
   "newHeight",
   "=",
   "currentHeight",
   "+",
   "margin",
   ".",
   "top",
   "+",
   "margin",
   ".",
   "bottom",
   ";",
   "var",
   "scaleX",
   "=",
   "currentWidth",
   "/",
   "newWidth",
   ";",
   "var",
   "scaleY",
   "=",
   "currentHeight",
   "/",
   "newHeight",
   ";",
   "x0",
   "=",
   "x0",
   "*",
   "scaleX",
   "+",
   "margin",
   ".",
   "left",
   ";",
   "x1",
   "=",
   "margin",
   ".",
   "right",
   "==",
   "0",
   "?",
   "x1",
   ":",
   "x1",
   "*",
   "scaleX",
   ";",
   "y0",
   "=",
   "y0",
   "*",
   "scaleY",
   "+",
   "margin",
   ".",
   "top",
   ";",
   "y1",
   "=",
   "y1",
   "*",
   "scaleY",
   ";",
   "graph",
   ".",
   "nodes",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "node",
   ")",
   "{",
   "node",
   ".",
   "x0",
   "=",
   "x0",
   "+",
   "node",
   ".",
   "column",
   "*",
   "(",
   "(",
   "x1",
   "-",
   "x0",
   "-",
   "dx",
   ")",
   "/",
   "maxColumn",
   ")",
   ";",
   "node",
   ".",
   "x1",
   "=",
   "node",
   ".",
   "x0",
   "+",
   "dx",
   ";",
   "}",
   ")",
   ";",
   "return",
   "scaleY",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-36",
  "nl_tokens": [
   "helper",
   "function",
   "for",
   "setting",
   "of",
   "the",
   "distance",
   "based",
   "on",
   "camera",
   "field",
   "of",
   "view",
   "and",
   "size",
   "of",
   "the",
   "product",
   "s",
   "bounding",
   "box"
  ],
  "pl_tokens": [
   "function",
   "(",
   "bBox",
   ")",
   "{",
   "var",
   "size",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "bBox",
   "[",
   "3",
   "]",
   ",",
   "bBox",
   "[",
   "4",
   "]",
   ",",
   "bBox",
   "[",
   "5",
   "]",
   ")",
   ";",
   "var",
   "ratio",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "viewer",
   ".",
   "_width",
   ",",
   "viewer",
   ".",
   "_height",
   ")",
   "/",
   "Math",
   ".",
   "min",
   "(",
   "viewer",
   ".",
   "_width",
   ",",
   "viewer",
   ".",
   "_height",
   ")",
   ";",
   "viewer",
   ".",
   "_distance",
   "=",
   "size",
   "/",
   "Math",
   ".",
   "tan",
   "(",
   "viewer",
   ".",
   "perspectiveCamera",
   ".",
   "fov",
   "*",
   "Math",
   ".",
   "PI",
   "/",
   "180.0",
   ")",
   "*",
   "ratio",
   "*",
   "1.0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-37",
  "nl_tokens": [
   "http",
   ":",
   "//",
   "jsperf",
   ".",
   "com",
   "/",
   "copy",
   "-",
   "array",
   "-",
   "inline"
  ],
  "pl_tokens": [
   "function",
   "arrCopy",
   "(",
   "arr",
   ",",
   "offset",
   ")",
   "{",
   "offset",
   "=",
   "offset",
   "||",
   "0",
   ";",
   "var",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "arr",
   ".",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "var",
   "newArr",
   "=",
   "new",
   "Array",
   "(",
   "len",
   ")",
   ";",
   "for",
   "(",
   "var",
   "ii",
   "=",
   "0",
   ";",
   "ii",
   "<",
   "len",
   ";",
   "ii",
   "++",
   ")",
   "{",
   "newArr",
   "[",
   "ii",
   "]",
   "=",
   "arr",
   "[",
   "ii",
   "+",
   "offset",
   "]",
   ";",
   "}",
   "return",
   "newArr",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-38",
  "nl_tokens": [
   "volume",
   "up"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "volume",
   "||",
   "volume",
   ".",
   "level",
   ">=",
   "1",
   ")",
   "{",
   "return",
   ";",
   "}",
   "var",
   "newVolume",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "volume",
   ".",
   "level",
   "+",
   "volumeStep",
   ",",
   "1",
   ")",
   ";",
   "p",
   ".",
   "setVolume",
   "(",
   "newVolume",
   ",",
   "function",
   "(",
   "err",
   ",",
   "status",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   ";",
   "}",
   "debug",
   "(",
   "\"volume up: %s\"",
   ",",
   "status",
   ".",
   "level",
   ")",
   ";",
   "volume",
   "=",
   "status",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-39",
  "nl_tokens": [
   "/",
   "*",
   "199"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "var",
   "_dispatchable",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "5",
   ")",
   ";",
   "var",
   "_xdrop",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "335",
   ")",
   ";",
   "var",
   "slice",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "13",
   ")",
   ";",
   "/**\n\t * Returns all but the first `n` elements of the given list, string, or\n\t * transducer/transformer (or object with a `drop` method).\n\t *\n\t * Dispatches to the `drop` method of the second argument, if present.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.1.0\n\t * @category List\n\t * @sig Number -> [a] -> [a]\n\t * @sig Number -> String -> String\n\t * @param {Number} n\n\t * @param {*} list\n\t * @return {*} A copy of list without the first `n` elements\n\t * @see R.take, R.transduce, R.dropLast, R.dropWhile\n\t * @example\n\t *\n\t *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n\t *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n\t *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n\t *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n\t *      R.drop(3, 'ramda');               //=> 'da'\n\t */",
   "var",
   "drop",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "/*#__PURE__*/",
   "_dispatchable",
   "(",
   "[",
   "'drop'",
   "]",
   ",",
   "_xdrop",
   ",",
   "function",
   "drop",
   "(",
   "n",
   ",",
   "xs",
   ")",
   "{",
   "return",
   "slice",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "n",
   ")",
   ",",
   "Infinity",
   ",",
   "xs",
   ")",
   ";",
   "}",
   ")",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "drop",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-40",
  "nl_tokens": [
   "Creates",
   "an",
   "opacity",
   "keyframe",
   "animation",
   "rule",
   "and",
   "returns",
   "its",
   "name",
   ".",
   "Since",
   "most",
   "mobile",
   "Webkits",
   "have",
   "timing",
   "issues",
   "with",
   "animation",
   "-",
   "delay",
   "we",
   "create",
   "separate",
   "rules",
   "for",
   "each",
   "line",
   "/",
   "segment",
   "."
  ],
  "pl_tokens": [
   "function",
   "addAnimation",
   "(",
   "alpha",
   ",",
   "trail",
   ",",
   "i",
   ",",
   "lines",
   ")",
   "{",
   "var",
   "name",
   "=",
   "[",
   "'opacity'",
   ",",
   "trail",
   ",",
   "~",
   "~",
   "(",
   "alpha",
   "*",
   "100",
   ")",
   ",",
   "i",
   ",",
   "lines",
   "]",
   ".",
   "join",
   "(",
   "'-'",
   ")",
   ",",
   "start",
   "=",
   "0.01",
   "+",
   "i",
   "/",
   "lines",
   "*",
   "100",
   ",",
   "z",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   "-",
   "(",
   "1",
   "-",
   "alpha",
   ")",
   "/",
   "trail",
   "*",
   "(",
   "100",
   "-",
   "start",
   ")",
   ",",
   "alpha",
   ")",
   ",",
   "prefix",
   "=",
   "useCssAnimations",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "useCssAnimations",
   ".",
   "indexOf",
   "(",
   "'Animation'",
   ")",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ",",
   "pre",
   "=",
   "prefix",
   "&&",
   "'-'",
   "+",
   "prefix",
   "+",
   "'-'",
   "||",
   "''",
   "if",
   "(",
   "!",
   "animations",
   "[",
   "name",
   "]",
   ")",
   "{",
   "sheet",
   ".",
   "insertRule",
   "(",
   "'@'",
   "+",
   "pre",
   "+",
   "'keyframes '",
   "+",
   "name",
   "+",
   "'{'",
   "+",
   "'0%{opacity:'",
   "+",
   "z",
   "+",
   "'}'",
   "+",
   "start",
   "+",
   "'%{opacity:'",
   "+",
   "alpha",
   "+",
   "'}'",
   "+",
   "(",
   "start",
   "+",
   "0.01",
   ")",
   "+",
   "'%{opacity:1}'",
   "+",
   "(",
   "start",
   "+",
   "trail",
   ")",
   "%",
   "100",
   "+",
   "'%{opacity:'",
   "+",
   "alpha",
   "+",
   "'}'",
   "+",
   "'100%{opacity:'",
   "+",
   "z",
   "+",
   "'}'",
   "+",
   "'}'",
   ",",
   "sheet",
   ".",
   "cssRules",
   ".",
   "length",
   ")",
   "animations",
   "[",
   "name",
   "]",
   "=",
   "1",
   "}",
   "return",
   "name",
   "}"
  ]
 },
 {
  "idx": "maxmin-41",
  "nl_tokens": [
   "\u81ea\u5b9a\u4e49\u6269\u5c55\u51fd\u6570\uff1a",
   "\u83b7\u5f97\u89c6\u7a97\u5927\u5c0f"
  ],
  "pl_tokens": [
   "function",
   "addExtendSize",
   "(",
   "Nightmare",
   ",",
   "opts",
   ")",
   "{",
   "Nightmare",
   ".",
   "action",
   "(",
   "'size'",
   ",",
   "function",
   "(",
   "done",
   ")",
   "{",
   "console",
   ".",
   "log",
   "(",
   "'size opts'",
   ",",
   "opts",
   ")",
   ";",
   "this",
   ".",
   "evaluate_now",
   "(",
   "(",
   ")",
   "=>",
   "{",
   "const",
   "w",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "document",
   ".",
   "documentElement",
   ".",
   "clientWidth",
   ",",
   "window",
   ".",
   "innerWidth",
   "||",
   "0",
   ")",
   ";",
   "const",
   "h",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "document",
   ".",
   "documentElement",
   ".",
   "clientHeight",
   ",",
   "window",
   ".",
   "innerHeight",
   "||",
   "0",
   ")",
   ";",
   "return",
   "{",
   "height",
   ":",
   "h",
   ",",
   "width",
   ":",
   "w",
   "}",
   ";",
   "}",
   ",",
   "done",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-42",
  "nl_tokens": [
   "Handles",
   "keyboard",
   "input",
   "."
  ],
  "pl_tokens": [
   "function",
   "keydown",
   "(",
   "event",
   ")",
   "{",
   "switch",
   "(",
   "event",
   ".",
   "keyCode",
   ")",
   "{",
   "case",
   "$mdConstant",
   ".",
   "KEY_CODE",
   ".",
   "DOWN_ARROW",
   ":",
   "if",
   "(",
   "ctrl",
   ".",
   "loading",
   ")",
   "return",
   ";",
   "event",
   ".",
   "stopPropagation",
   "(",
   ")",
   ";",
   "event",
   ".",
   "preventDefault",
   "(",
   ")",
   ";",
   "ctrl",
   ".",
   "index",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "ctrl",
   ".",
   "index",
   "+",
   "1",
   ",",
   "ctrl",
   ".",
   "matches",
   ".",
   "length",
   "-",
   "1",
   ")",
   ";",
   "updateScroll",
   "(",
   ")",
   ";",
   "reportMessages",
   "(",
   "false",
   ",",
   "ReportType",
   ".",
   "Selected",
   ")",
   ";",
   "break",
   ";",
   "case",
   "$mdConstant",
   ".",
   "KEY_CODE",
   ".",
   "UP_ARROW",
   ":",
   "if",
   "(",
   "ctrl",
   ".",
   "loading",
   ")",
   "return",
   ";",
   "event",
   ".",
   "stopPropagation",
   "(",
   ")",
   ";",
   "event",
   ".",
   "preventDefault",
   "(",
   ")",
   ";",
   "ctrl",
   ".",
   "index",
   "=",
   "ctrl",
   ".",
   "index",
   "<",
   "0",
   "?",
   "ctrl",
   ".",
   "matches",
   ".",
   "length",
   "-",
   "1",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "ctrl",
   ".",
   "index",
   "-",
   "1",
   ")",
   ";",
   "updateScroll",
   "(",
   ")",
   ";",
   "reportMessages",
   "(",
   "false",
   ",",
   "ReportType",
   ".",
   "Selected",
   ")",
   ";",
   "break",
   ";",
   "case",
   "$mdConstant",
   ".",
   "KEY_CODE",
   ".",
   "TAB",
   ":",
   "// If we hit tab, assume that we've left the list so it will close",
   "onListLeave",
   "(",
   ")",
   ";",
   "if",
   "(",
   "ctrl",
   ".",
   "hidden",
   "||",
   "ctrl",
   ".",
   "loading",
   "||",
   "ctrl",
   ".",
   "index",
   "<",
   "0",
   "||",
   "ctrl",
   ".",
   "matches",
   ".",
   "length",
   "<",
   "1",
   ")",
   "return",
   ";",
   "select",
   "(",
   "ctrl",
   ".",
   "index",
   ")",
   ";",
   "break",
   ";",
   "case",
   "$mdConstant",
   ".",
   "KEY_CODE",
   ".",
   "ENTER",
   ":",
   "if",
   "(",
   "ctrl",
   ".",
   "hidden",
   "||",
   "ctrl",
   ".",
   "loading",
   "||",
   "ctrl",
   ".",
   "index",
   "<",
   "0",
   "||",
   "ctrl",
   ".",
   "matches",
   ".",
   "length",
   "<",
   "1",
   ")",
   "return",
   ";",
   "if",
   "(",
   "hasSelection",
   "(",
   ")",
   ")",
   "return",
   ";",
   "event",
   ".",
   "stopPropagation",
   "(",
   ")",
   ";",
   "event",
   ".",
   "preventDefault",
   "(",
   ")",
   ";",
   "select",
   "(",
   "ctrl",
   ".",
   "index",
   ")",
   ";",
   "break",
   ";",
   "case",
   "$mdConstant",
   ".",
   "KEY_CODE",
   ".",
   "ESCAPE",
   ":",
   "event",
   ".",
   "preventDefault",
   "(",
   ")",
   ";",
   "// Prevent browser from always clearing input",
   "if",
   "(",
   "!",
   "shouldProcessEscape",
   "(",
   ")",
   ")",
   "return",
   ";",
   "event",
   ".",
   "stopPropagation",
   "(",
   ")",
   ";",
   "clearSelectedItem",
   "(",
   ")",
   ";",
   "if",
   "(",
   "$scope",
   ".",
   "searchText",
   "&&",
   "hasEscapeOption",
   "(",
   "'clear'",
   ")",
   ")",
   "{",
   "clearSearchText",
   "(",
   ")",
   ";",
   "}",
   "// Manually hide (needed for mdNotFound support)",
   "ctrl",
   ".",
   "hidden",
   "=",
   "true",
   ";",
   "if",
   "(",
   "hasEscapeOption",
   "(",
   "'blur'",
   ")",
   ")",
   "{",
   "// Force the component to blur if they hit escape",
   "doBlur",
   "(",
   "true",
   ")",
   ";",
   "}",
   "break",
   ";",
   "default",
   ":",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-43",
  "nl_tokens": [
   "/",
   "*",
   "268"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry3",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "4",
   ")",
   ";",
   "/**\n\t * Restricts a number to be within a range.\n\t *\n\t * Also works for other ordered types such as Strings and Dates.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.20.0\n\t * @category Relation\n\t * @sig Ord a => a -> a -> a -> a\n\t * @param {Number} minimum The lower limit of the clamp (inclusive)\n\t * @param {Number} maximum The upper limit of the clamp (inclusive)\n\t * @param {Number} value Value to be clamped\n\t * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n\t * @example\n\t *\n\t *      R.clamp(1, 10, -5) // => 1\n\t *      R.clamp(1, 10, 15) // => 10\n\t *      R.clamp(1, 10, 4)  // => 4\n\t */",
   "var",
   "clamp",
   "=",
   "/*#__PURE__*/",
   "_curry3",
   "(",
   "function",
   "clamp",
   "(",
   "<mask>",
   ",",
   "max",
   ",",
   "value",
   ")",
   "{",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'min must not be greater than max in clamp(min, max, value)'",
   ")",
   ";",
   "}",
   "return",
   "value",
   "<",
   "min",
   "?",
   "min",
   ":",
   "value",
   ">",
   "max",
   "?",
   "max",
   ":",
   "value",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "clamp",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-44",
  "nl_tokens": [
   "Change",
   "the",
   "aspect",
   "ratio",
   "of",
   "the",
   "crop",
   "box",
   "."
  ],
  "pl_tokens": [
   "function",
   "setAspectRatio",
   "(",
   "aspectRatio",
   ")",
   "{",
   "var",
   "options",
   "=",
   "this",
   ".",
   "options",
   ";",
   "if",
   "(",
   "!",
   "this",
   ".",
   "disabled",
   "&&",
   "!",
   "isUndefined",
   "(",
   "aspectRatio",
   ")",
   ")",
   "{",
   "// 0 -> NaN",
   "options",
   ".",
   "aspectRatio",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "aspectRatio",
   ")",
   "||",
   "NaN",
   ";",
   "if",
   "(",
   "this",
   ".",
   "ready",
   ")",
   "{",
   "this",
   ".",
   "initCropBox",
   "(",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "cropped",
   ")",
   "{",
   "this",
   ".",
   "renderCropBox",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-45",
  "nl_tokens": [
   "Retrieves",
   "the",
   "document",
   "height"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "!",
   "Ext",
   ".",
   "isStrict",
   "?",
   "document",
   ".",
   "body",
   ".",
   "scrollHeight",
   ":",
   "document",
   ".",
   "documentElement",
   ".",
   "scrollHeight",
   ",",
   "this",
   ".",
   "getViewportHeight",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-46",
  "nl_tokens": [
   "Returns",
   "generated",
   "data",
   "for",
   "a",
   "given",
   "axis",
   "based",
   "on",
   "domain",
   "and",
   "sample",
   "from",
   "props"
  ],
  "pl_tokens": [
   "function",
   "generateDataArray",
   "(",
   "props",
   ",",
   "axis",
   ")",
   "{",
   "const",
   "propsDomain",
   "=",
   "isPlainObject",
   "(",
   "props",
   ".",
   "domain",
   ")",
   "?",
   "props",
   ".",
   "domain",
   "[",
   "axis",
   "]",
   ":",
   "props",
   ".",
   "domain",
   ";",
   "const",
   "domain",
   "=",
   "propsDomain",
   "||",
   "Scale",
   ".",
   "getBaseScale",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ".",
   "domain",
   "(",
   ")",
   ";",
   "const",
   "samples",
   "=",
   "props",
   ".",
   "samples",
   "||",
   "1",
   ";",
   "const",
   "domainMax",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "...",
   "domain",
   ")",
   ";",
   "const",
   "domainMin",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "...",
   "domain",
   ")",
   ";",
   "const",
   "step",
   "=",
   "(",
   "domainMax",
   "-",
   "domainMin",
   ")",
   "/",
   "samples",
   ";",
   "const",
   "values",
   "=",
   "range",
   "(",
   "domainMin",
   ",",
   "domainMax",
   ",",
   "step",
   ")",
   ";",
   "return",
   "last",
   "(",
   "values",
   ")",
   "===",
   "domainMax",
   "?",
   "values",
   ":",
   "values",
   ".",
   "concat",
   "(",
   "domainMax",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-47",
  "nl_tokens": [
   "Check",
   "new",
   "model",
   "before",
   "registration"
  ],
  "pl_tokens": [
   "function",
   "deepLook",
   "(",
   "obj",
   ",",
   "types",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "(",
   "obj",
   ")",
   "!==",
   "'object'",
   ")",
   "return",
   "obj",
   ";",
   "for",
   "(",
   "var",
   "key",
   "in",
   "obj",
   ")",
   "{",
   "if",
   "(",
   "!",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   ")",
   "{",
   "obj",
   "[",
   "key",
   "]",
   "=",
   "deepLook",
   "(",
   "obj",
   "[",
   "key",
   "]",
   ",",
   "types",
   ")",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "!",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'No type '",
   "+",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "+",
   "' in Types: key '",
   "+",
   "key",
   ")",
   ";",
   "}",
   "// check for range in new object",
   "if",
   "(",
   "typeof",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "<mask>",
   "!==",
   "'undefined'",
   "&&",
   "typeof",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "min",
   "!==",
   "'undefined'",
   "&&",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "min",
   ">",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "min",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Key '",
   "+",
   "key",
   "+",
   "' minimal value ('",
   "+",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "min",
   "+",
   "') is less than acceptable minimal in Types ('",
   "+",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "min",
   "+",
   "')'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "max",
   "!==",
   "'undefined'",
   "&&",
   "typeof",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "max",
   "!==",
   "'undefined'",
   "&&",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "max",
   "<",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Key '",
   "+",
   "key",
   "+",
   "' maximal value ('",
   "+",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "max",
   "+",
   "') is in excess of maximal acceptable value in Types ('",
   "+",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ".",
   "max",
   "+",
   "')'",
   ")",
   ";",
   "}",
   "}",
   "// get properties and methods from Types",
   "for",
   "(",
   "var",
   "keyParent",
   "in",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   ")",
   "{",
   "if",
   "(",
   "!",
   "obj",
   "[",
   "key",
   "]",
   "[",
   "keyParent",
   "]",
   ")",
   "{",
   "obj",
   "[",
   "key",
   "]",
   "[",
   "keyParent",
   "]",
   "=",
   "types",
   "[",
   "obj",
   "[",
   "key",
   "]",
   ".",
   "type",
   "]",
   "[",
   "keyParent",
   "]",
   ";",
   "}",
   "}",
   "}",
   "return",
   "obj",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-48",
  "nl_tokens": [
   "Disables",
   "scroll",
   "around",
   "the",
   "passed",
   "parent",
   "element",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "element",
   ",",
   "parent",
   ",",
   "options",
   ")",
   "{",
   "options",
   "=",
   "options",
   "||",
   "{",
   "}",
   ";",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_count",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_count",
   "||",
   "0",
   ")",
   ";",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_count",
   "++",
   ";",
   "if",
   "(",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_restoreScroll",
   ")",
   "{",
   "return",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_restoreScroll",
   ";",
   "}",
   "var",
   "body",
   "=",
   "$document",
   "[",
   "0",
   "]",
   ".",
   "body",
   ";",
   "var",
   "restoreBody",
   "=",
   "disableBodyScroll",
   "(",
   ")",
   ";",
   "var",
   "restoreElement",
   "=",
   "disableElementScroll",
   "(",
   "parent",
   ")",
   ";",
   "return",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_restoreScroll",
   "=",
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "--",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_count",
   "<=",
   "0",
   ")",
   "{",
   "restoreBody",
   "(",
   ")",
   ";",
   "restoreElement",
   "(",
   ")",
   ";",
   "delete",
   "$mdUtil",
   ".",
   "disableScrollAround",
   ".",
   "_restoreScroll",
   ";",
   "}",
   "}",
   ";",
   "/**\n       * Creates a virtual scrolling mask to prevent touchmove, keyboard, scrollbar clicking,\n       * and wheel events\n       */",
   "function",
   "disableElementScroll",
   "(",
   "element",
   ")",
   "{",
   "element",
   "=",
   "angular",
   ".",
   "element",
   "(",
   "element",
   "||",
   "body",
   ")",
   ";",
   "var",
   "scrollMask",
   ";",
   "if",
   "(",
   "options",
   ".",
   "disableScrollMask",
   ")",
   "{",
   "scrollMask",
   "=",
   "element",
   ";",
   "}",
   "else",
   "{",
   "scrollMask",
   "=",
   "angular",
   ".",
   "element",
   "(",
   "'<div class=\"md-scroll-mask\">'",
   "+",
   "'  <div class=\"md-scroll-mask-bar\"></div>'",
   "+",
   "'</div>'",
   ")",
   ";",
   "element",
   ".",
   "append",
   "(",
   "scrollMask",
   ")",
   ";",
   "}",
   "scrollMask",
   ".",
   "on",
   "(",
   "'wheel'",
   ",",
   "preventDefault",
   ")",
   ";",
   "scrollMask",
   ".",
   "on",
   "(",
   "'touchmove'",
   ",",
   "preventDefault",
   ")",
   ";",
   "return",
   "function",
   "restoreElementScroll",
   "(",
   ")",
   "{",
   "scrollMask",
   ".",
   "off",
   "(",
   "'wheel'",
   ")",
   ";",
   "scrollMask",
   ".",
   "off",
   "(",
   "'touchmove'",
   ")",
   ";",
   "if",
   "(",
   "!",
   "options",
   ".",
   "disableScrollMask",
   "&&",
   "scrollMask",
   "[",
   "0",
   "]",
   ".",
   "parentNode",
   ")",
   "{",
   "scrollMask",
   "[",
   "0",
   "]",
   ".",
   "parentNode",
   ".",
   "removeChild",
   "(",
   "scrollMask",
   "[",
   "0",
   "]",
   ")",
   ";",
   "}",
   "}",
   ";",
   "function",
   "preventDefault",
   "(",
   "e",
   ")",
   "{",
   "e",
   ".",
   "preventDefault",
   "(",
   ")",
   ";",
   "}",
   "}",
   "// Converts the body to a position fixed block and translate it to the proper scroll position",
   "function",
   "disableBodyScroll",
   "(",
   ")",
   "{",
   "var",
   "documentElement",
   "=",
   "$document",
   "[",
   "0",
   "]",
   ".",
   "documentElement",
   ";",
   "var",
   "prevDocumentStyle",
   "=",
   "documentElement",
   ".",
   "style",
   ".",
   "cssText",
   "||",
   "''",
   ";",
   "var",
   "prevBodyStyle",
   "=",
   "body",
   ".",
   "style",
   ".",
   "cssText",
   "||",
   "''",
   ";",
   "var",
   "viewportTop",
   "=",
   "$mdUtil",
   ".",
   "getViewportTop",
   "(",
   ")",
   ";",
   "var",
   "clientWidth",
   "=",
   "body",
   ".",
   "clientWidth",
   ";",
   "var",
   "hasVerticalScrollbar",
   "=",
   "body",
   ".",
   "scrollHeight",
   ">",
   "body",
   ".",
   "clientHeight",
   "+",
   "1",
   ";",
   "// Scroll may be set on <html> element (for example by overflow-y: scroll)",
   "// but Chrome is reporting the scrollTop position always on <body>.",
   "// scrollElement will allow to restore the scrollTop position to proper target.",
   "var",
   "scrollElement",
   "=",
   "documentElement",
   ".",
   "scrollTop",
   ">",
   "0",
   "?",
   "documentElement",
   ":",
   "body",
   ";",
   "if",
   "(",
   "hasVerticalScrollbar",
   ")",
   "{",
   "angular",
   ".",
   "element",
   "(",
   "body",
   ")",
   ".",
   "css",
   "(",
   "{",
   "position",
   ":",
   "'fixed'",
   ",",
   "width",
   ":",
   "'100%'",
   ",",
   "top",
   ":",
   "-",
   "viewportTop",
   "+",
   "'px'",
   "}",
   ")",
   ";",
   "}",
   "if",
   "(",
   "body",
   ".",
   "clientWidth",
   "<",
   "clientWidth",
   ")",
   "{",
   "body",
   ".",
   "style",
   ".",
   "overflow",
   "=",
   "'hidden'",
   ";",
   "}",
   "// This should be applied after the manipulation to the body, because",
   "// adding a scrollbar can potentially resize it, causing the measurement",
   "// to change.",
   "if",
   "(",
   "hasVerticalScrollbar",
   ")",
   "{",
   "documentElement",
   ".",
   "style",
   ".",
   "overflowY",
   "=",
   "'scroll'",
   ";",
   "}",
   "return",
   "function",
   "restoreScroll",
   "(",
   ")",
   "{",
   "// Reset the inline style CSS to the previous.",
   "body",
   ".",
   "style",
   ".",
   "cssText",
   "=",
   "prevBodyStyle",
   ";",
   "documentElement",
   ".",
   "style",
   ".",
   "cssText",
   "=",
   "prevDocumentStyle",
   ";",
   "// The scroll position while being fixed",
   "scrollElement",
   ".",
   "scrollTop",
   "=",
   "viewportTop",
   ";",
   "}",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-49",
  "nl_tokens": [
   "The",
   "depth",
   "of",
   "a",
   "node",
   "when",
   "the",
   "nodeAlign",
   "(",
   "align",
   ")",
   "is",
   "set",
   "to",
   "center"
  ],
  "pl_tokens": [
   "function",
   "center",
   "(",
   "node",
   ")",
   "{",
   "return",
   "node",
   ".",
   "targetLinks",
   ".",
   "length",
   "?",
   "node",
   ".",
   "depth",
   ":",
   "node",
   ".",
   "sourceLinks",
   ".",
   "length",
   "?",
   "<mask>",
   "(",
   "node",
   ".",
   "sourceLinks",
   ",",
   "targetDepth",
   ")",
   "-",
   "1",
   ":",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-50",
  "nl_tokens": [
   "(",
   "protected",
   ")",
   "r",
   "=",
   "this",
   "-",
   "a"
  ],
  "pl_tokens": [
   "function",
   "bnpSubTo",
   "(",
   "a",
   ",",
   "r",
   ")",
   "{",
   "var",
   "this_array",
   "=",
   "this",
   ".",
   "array",
   ";",
   "var",
   "r_array",
   "=",
   "r",
   ".",
   "array",
   ";",
   "var",
   "a_array",
   "=",
   "a",
   ".",
   "array",
   ";",
   "var",
   "i",
   "=",
   "0",
   ",",
   "c",
   "=",
   "0",
   ",",
   "m",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "t",
   ",",
   "this",
   ".",
   "t",
   ")",
   ";",
   "while",
   "(",
   "i",
   "<",
   "m",
   ")",
   "{",
   "c",
   "+=",
   "this_array",
   "[",
   "i",
   "]",
   "-",
   "a_array",
   "[",
   "i",
   "]",
   ";",
   "r_array",
   "[",
   "i",
   "++",
   "]",
   "=",
   "c",
   "&",
   "BI_DM",
   ";",
   "c",
   ">>=",
   "BI_DB",
   ";",
   "}",
   "if",
   "(",
   "a",
   ".",
   "t",
   "<",
   "this",
   ".",
   "t",
   ")",
   "{",
   "c",
   "-=",
   "a",
   ".",
   "s",
   ";",
   "while",
   "(",
   "i",
   "<",
   "this",
   ".",
   "t",
   ")",
   "{",
   "c",
   "+=",
   "this_array",
   "[",
   "i",
   "]",
   ";",
   "r_array",
   "[",
   "i",
   "++",
   "]",
   "=",
   "c",
   "&",
   "BI_DM",
   ";",
   "c",
   ">>=",
   "BI_DB",
   ";",
   "}",
   "c",
   "+=",
   "this",
   ".",
   "s",
   ";",
   "}",
   "else",
   "{",
   "c",
   "+=",
   "this",
   ".",
   "s",
   ";",
   "while",
   "(",
   "i",
   "<",
   "a",
   ".",
   "t",
   ")",
   "{",
   "c",
   "-=",
   "a_array",
   "[",
   "i",
   "]",
   ";",
   "r_array",
   "[",
   "i",
   "++",
   "]",
   "=",
   "c",
   "&",
   "BI_DM",
   ";",
   "c",
   ">>=",
   "BI_DB",
   ";",
   "}",
   "c",
   "-=",
   "a",
   ".",
   "s",
   ";",
   "}",
   "r",
   ".",
   "s",
   "=",
   "(",
   "c",
   "<",
   "0",
   ")",
   "?",
   "-",
   "1",
   ":",
   "0",
   ";",
   "if",
   "(",
   "c",
   "<",
   "-",
   "1",
   ")",
   "r_array",
   "[",
   "i",
   "++",
   "]",
   "=",
   "BI_DV",
   "+",
   "c",
   ";",
   "else",
   "if",
   "(",
   "c",
   ">",
   "0",
   ")",
   "r_array",
   "[",
   "i",
   "++",
   "]",
   "=",
   "c",
   ";",
   "r",
   ".",
   "t",
   "=",
   "i",
   ";",
   "r",
   ".",
   "clamp",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-51",
  "nl_tokens": [
   "Assign",
   "nodes",
   "breadths",
   "and",
   "then",
   "shift",
   "nodes",
   "that",
   "overlap",
   "(",
   "resolveCollisions",
   ")"
  ],
  "pl_tokens": [
   "function",
   "computeNodeBreadths",
   "(",
   "graph",
   ",",
   "iterations",
   ",",
   "id",
   ")",
   "{",
   "var",
   "columns",
   "=",
   "nest",
   "(",
   ")",
   ".",
   "key",
   "(",
   "function",
   "(",
   "d",
   ")",
   "{",
   "return",
   "d",
   ".",
   "column",
   ";",
   "}",
   ")",
   ".",
   "sortKeys",
   "(",
   "ascending",
   ")",
   ".",
   "entries",
   "(",
   "graph",
   ".",
   "nodes",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "d",
   ")",
   "{",
   "return",
   "d",
   ".",
   "values",
   ";",
   "}",
   ")",
   ";",
   "initializeNodeBreadth",
   "(",
   "id",
   ")",
   ";",
   "resolveCollisions",
   "(",
   ")",
   ";",
   "for",
   "(",
   "var",
   "alpha",
   "=",
   "1",
   ",",
   "n",
   "=",
   "iterations",
   ";",
   "n",
   ">",
   "0",
   ";",
   "--",
   "n",
   ")",
   "{",
   "relaxLeftAndRight",
   "(",
   "alpha",
   "*=",
   "0.99",
   ",",
   "id",
   ")",
   ";",
   "resolveCollisions",
   "(",
   ")",
   ";",
   "}",
   "function",
   "initializeNodeBreadth",
   "(",
   "id",
   ")",
   "{",
   "//override py if nodePadding has been set",
   "if",
   "(",
   "paddingRatio",
   ")",
   "{",
   "var",
   "padding",
   "=",
   "Infinity",
   ";",
   "columns",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "nodes",
   ")",
   "{",
   "var",
   "thisPadding",
   "=",
   "y1",
   "*",
   "paddingRatio",
   "/",
   "(",
   "nodes",
   ".",
   "length",
   "+",
   "1",
   ")",
   ";",
   "padding",
   "=",
   "thisPadding",
   "<",
   "padding",
   "?",
   "thisPadding",
   ":",
   "padding",
   ";",
   "}",
   ")",
   ";",
   "py",
   "=",
   "padding",
   ";",
   "}",
   "var",
   "ky",
   "=",
   "<mask>",
   "(",
   "columns",
   ",",
   "function",
   "(",
   "nodes",
   ")",
   "{",
   "return",
   "(",
   "y1",
   "-",
   "y0",
   "-",
   "(",
   "nodes",
   ".",
   "length",
   "-",
   "1",
   ")",
   "*",
   "py",
   ")",
   "/",
   "sum",
   "(",
   "nodes",
   ",",
   "value",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//calculate the widths of the links",
   "ky",
   "=",
   "ky",
   "*",
   "scale",
   ";",
   "graph",
   ".",
   "links",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "link",
   ")",
   "{",
   "link",
   ".",
   "width",
   "=",
   "link",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   ")",
   ";",
   "//determine how much to scale down the chart, based on circular links",
   "var",
   "margin",
   "=",
   "getCircleMargins",
   "(",
   "graph",
   ")",
   ";",
   "var",
   "ratio",
   "=",
   "scaleSankeySize",
   "(",
   "graph",
   ",",
   "margin",
   ")",
   ";",
   "//re-calculate widths",
   "ky",
   "=",
   "ky",
   "*",
   "ratio",
   ";",
   "graph",
   ".",
   "links",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "link",
   ")",
   "{",
   "link",
   ".",
   "width",
   "=",
   "link",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   ")",
   ";",
   "columns",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "nodes",
   ")",
   "{",
   "var",
   "nodesLength",
   "=",
   "nodes",
   ".",
   "length",
   ";",
   "nodes",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "node",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "node",
   ".",
   "depth",
   "==",
   "columns",
   ".",
   "length",
   "-",
   "1",
   "&&",
   "nodesLength",
   "==",
   "1",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "/",
   "2",
   "-",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "else",
   "if",
   "(",
   "node",
   ".",
   "depth",
   "==",
   "0",
   "&&",
   "nodesLength",
   "==",
   "1",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "/",
   "2",
   "-",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "else",
   "if",
   "(",
   "node",
   ".",
   "partOfCycle",
   ")",
   "{",
   "if",
   "(",
   "numberOfNonSelfLinkingCycles",
   "(",
   "node",
   ",",
   "id",
   ")",
   "==",
   "0",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "/",
   "2",
   "+",
   "i",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "else",
   "if",
   "(",
   "node",
   ".",
   "circularLinkType",
   "==",
   "'top'",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "y0",
   "+",
   "i",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "else",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "-",
   "node",
   ".",
   "value",
   "*",
   "ky",
   "-",
   "i",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "}",
   "else",
   "{",
   "if",
   "(",
   "margin",
   ".",
   "top",
   "==",
   "0",
   "||",
   "margin",
   ".",
   "bottom",
   "==",
   "0",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "(",
   "y1",
   "-",
   "y0",
   ")",
   "/",
   "nodesLength",
   "*",
   "i",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "else",
   "{",
   "node",
   ".",
   "y0",
   "=",
   "(",
   "y1",
   "-",
   "y0",
   ")",
   "/",
   "2",
   "-",
   "nodesLength",
   "/",
   "2",
   "+",
   "i",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "node",
   ".",
   "y0",
   "+",
   "node",
   ".",
   "value",
   "*",
   "ky",
   ";",
   "}",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "// For each node in each column, check the node's vertical position in relation to its targets and sources vertical position",
   "// and shift up/down to be closer to the vertical middle of those targets and sources",
   "function",
   "relaxLeftAndRight",
   "(",
   "alpha",
   ",",
   "id",
   ")",
   "{",
   "var",
   "columnsLength",
   "=",
   "columns",
   ".",
   "length",
   ";",
   "columns",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "nodes",
   ")",
   "{",
   "var",
   "n",
   "=",
   "nodes",
   ".",
   "length",
   ";",
   "var",
   "depth",
   "=",
   "nodes",
   "[",
   "0",
   "]",
   ".",
   "depth",
   ";",
   "nodes",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "node",
   ")",
   "{",
   "// check the node is not an orphan",
   "var",
   "nodeHeight",
   ";",
   "if",
   "(",
   "node",
   ".",
   "sourceLinks",
   ".",
   "length",
   "||",
   "node",
   ".",
   "targetLinks",
   ".",
   "length",
   ")",
   "{",
   "if",
   "(",
   "node",
   ".",
   "partOfCycle",
   "&&",
   "numberOfNonSelfLinkingCycles",
   "(",
   "node",
   ",",
   "id",
   ")",
   ">",
   "0",
   ")",
   ";",
   "else",
   "if",
   "(",
   "depth",
   "==",
   "0",
   "&&",
   "n",
   "==",
   "1",
   ")",
   "{",
   "nodeHeight",
   "=",
   "node",
   ".",
   "y1",
   "-",
   "node",
   ".",
   "y0",
   ";",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "/",
   "2",
   "-",
   "nodeHeight",
   "/",
   "2",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "y1",
   "/",
   "2",
   "+",
   "nodeHeight",
   "/",
   "2",
   ";",
   "}",
   "else",
   "if",
   "(",
   "depth",
   "==",
   "columnsLength",
   "-",
   "1",
   "&&",
   "n",
   "==",
   "1",
   ")",
   "{",
   "nodeHeight",
   "=",
   "node",
   ".",
   "y1",
   "-",
   "node",
   ".",
   "y0",
   ";",
   "node",
   ".",
   "y0",
   "=",
   "y1",
   "/",
   "2",
   "-",
   "nodeHeight",
   "/",
   "2",
   ";",
   "node",
   ".",
   "y1",
   "=",
   "y1",
   "/",
   "2",
   "+",
   "nodeHeight",
   "/",
   "2",
   ";",
   "}",
   "else",
   "{",
   "var",
   "avg",
   "=",
   "0",
   ";",
   "var",
   "avgTargetY",
   "=",
   "mean",
   "(",
   "node",
   ".",
   "sourceLinks",
   ",",
   "linkTargetCenter",
   ")",
   ";",
   "var",
   "avgSourceY",
   "=",
   "mean",
   "(",
   "node",
   ".",
   "targetLinks",
   ",",
   "linkSourceCenter",
   ")",
   ";",
   "if",
   "(",
   "avgTargetY",
   "&&",
   "avgSourceY",
   ")",
   "{",
   "avg",
   "=",
   "(",
   "avgTargetY",
   "+",
   "avgSourceY",
   ")",
   "/",
   "2",
   ";",
   "}",
   "else",
   "{",
   "avg",
   "=",
   "avgTargetY",
   "||",
   "avgSourceY",
   ";",
   "}",
   "var",
   "dy",
   "=",
   "(",
   "avg",
   "-",
   "nodeCenter",
   "(",
   "node",
   ")",
   ")",
   "*",
   "alpha",
   ";",
   "// positive if it node needs to move down",
   "node",
   ".",
   "y0",
   "+=",
   "dy",
   ";",
   "node",
   ".",
   "y1",
   "+=",
   "dy",
   ";",
   "}",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "// For each column, check if nodes are overlapping, and if so, shift up/down",
   "function",
   "resolveCollisions",
   "(",
   ")",
   "{",
   "columns",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "nodes",
   ")",
   "{",
   "var",
   "node",
   ",",
   "dy",
   ",",
   "y",
   "=",
   "y0",
   ",",
   "n",
   "=",
   "nodes",
   ".",
   "length",
   ",",
   "i",
   ";",
   "// Push any overlapping nodes down.",
   "nodes",
   ".",
   "sort",
   "(",
   "ascendingBreadth",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "++",
   "i",
   ")",
   "{",
   "node",
   "=",
   "nodes",
   "[",
   "i",
   "]",
   ";",
   "dy",
   "=",
   "y",
   "-",
   "node",
   ".",
   "y0",
   ";",
   "if",
   "(",
   "dy",
   ">",
   "0",
   ")",
   "{",
   "node",
   ".",
   "y0",
   "+=",
   "dy",
   ";",
   "node",
   ".",
   "y1",
   "+=",
   "dy",
   ";",
   "}",
   "y",
   "=",
   "node",
   ".",
   "y1",
   "+",
   "py",
   ";",
   "}",
   "// If the bottommost node goes outside the bounds, push it back up.",
   "dy",
   "=",
   "y",
   "-",
   "py",
   "-",
   "y1",
   ";",
   "if",
   "(",
   "dy",
   ">",
   "0",
   ")",
   "{",
   "y",
   "=",
   "node",
   ".",
   "y0",
   "-=",
   "dy",
   ",",
   "node",
   ".",
   "y1",
   "-=",
   "dy",
   ";",
   "// Push any overlapping nodes back up.",
   "for",
   "(",
   "i",
   "=",
   "n",
   "-",
   "2",
   ";",
   "i",
   ">=",
   "0",
   ";",
   "--",
   "i",
   ")",
   "{",
   "node",
   "=",
   "nodes",
   "[",
   "i",
   "]",
   ";",
   "dy",
   "=",
   "node",
   ".",
   "y1",
   "+",
   "py",
   "-",
   "y",
   ";",
   "if",
   "(",
   "dy",
   ">",
   "0",
   ")",
   "node",
   ".",
   "y0",
   "-=",
   "dy",
   ",",
   "node",
   ".",
   "y1",
   "-=",
   "dy",
   ";",
   "y",
   "=",
   "node",
   ".",
   "y0",
   ";",
   "}",
   "}",
   "}",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-52",
  "nl_tokens": [
   "Update",
   "the",
   "list",
   "of",
   "available",
   "times",
   "in",
   "the",
   "list",
   "to",
   "be",
   "constrained",
   "within",
   "the",
   "{"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "<mask>",
   "=",
   "me",
   ".",
   "normalizeDate",
   "(",
   "me",
   ".",
   "minValue",
   "||",
   "me",
   ".",
   "absMin",
   ")",
   ",",
   "max",
   "=",
   "me",
   ".",
   "normalizeDate",
   "(",
   "me",
   ".",
   "maxValue",
   "||",
   "me",
   ".",
   "absMax",
   ")",
   ";",
   "me",
   ".",
   "rangeFilter",
   ".",
   "setFilterFn",
   "(",
   "function",
   "(",
   "record",
   ")",
   "{",
   "var",
   "date",
   "=",
   "record",
   ".",
   "get",
   "(",
   "'date'",
   ")",
   ";",
   "return",
   "date",
   ">=",
   "min",
   "&&",
   "date",
   "<=",
   "max",
   ";",
   "}",
   ")",
   ";",
   "me",
   ".",
   "store",
   ".",
   "filter",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-53",
  "nl_tokens": [
   "Get",
   "the",
   "name",
   "of",
   "the",
   "most",
   "recent",
   "log",
   "file"
  ],
  "pl_tokens": [
   "function",
   "getMostRecentFilename",
   "(",
   "callback",
   ")",
   "{",
   "getLogFiles",
   "(",
   "function",
   "(",
   "err",
   ",",
   "files",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "callback",
   "(",
   "err",
   ",",
   "null",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "!",
   "files",
   "||",
   "files",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ".",
   "concat",
   "(",
   "FILE_EXT",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "file",
   "=",
   "_",
   ".",
   "<mask>",
   "(",
   "files",
   ",",
   "function",
   "(",
   "f",
   ")",
   "{",
   "var",
   "n",
   "=",
   "(",
   "f",
   "&&",
   "typeof",
   "f",
   ".",
   "name",
   "===",
   "'string'",
   ")",
   "?",
   "f",
   ".",
   "name",
   ":",
   "f",
   ";",
   "// Remove extension to get just the timestamp",
   "var",
   "ts",
   "=",
   "n",
   ".",
   "replace",
   "(",
   "FILE_EXT",
   ",",
   "''",
   ")",
   ";",
   "return",
   "parseInt",
   "(",
   "ts",
   ",",
   "10",
   ")",
   ";",
   "}",
   ")",
   ";",
   "var",
   "n",
   "=",
   "(",
   "file",
   "&&",
   "typeof",
   "file",
   ".",
   "name",
   "===",
   "'string'",
   ")",
   "?",
   "file",
   ".",
   "name",
   ":",
   "file",
   ";",
   "callback",
   "(",
   "null",
   ",",
   "n",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-54",
  "nl_tokens": [
   "Like",
   "formatSize",
   "but",
   "more",
   "generic",
   ".",
   "Returns",
   "a",
   "human",
   "-",
   "readable",
   "format",
   "of",
   "an",
   "integer",
   "using",
   "metric",
   "prefixes",
   ".",
   "The",
   "caller",
   "is",
   "expected",
   "to",
   "append",
   "any",
   "unit",
   "string",
   "if",
   "necessary",
   "."
  ],
  "pl_tokens": [
   "function",
   "formatCount",
   "(",
   "n",
   ",",
   "opts",
   ")",
   "{",
   "n",
   "=",
   "n",
   "||",
   "0",
   ";",
   "opts",
   "=",
   "opts",
   "||",
   "{",
   "}",
   ";",
   "var",
   "i",
   "=",
   "0",
   ",",
   "base",
   "=",
   "opts",
   ".",
   "base",
   "||",
   "1000",
   ",",
   "sep",
   "=",
   "opts",
   ".",
   "sep",
   "||",
   "''",
   ",",
   "maxLen",
   "=",
   "opts",
   ".",
   "maxLen",
   "||",
   "3",
   ",",
   "precision",
   "=",
   "maxLen",
   "-",
   "1",
   ";",
   "for",
   "(",
   ";",
   "n",
   ">",
   "base",
   ";",
   "i",
   "+=",
   "1",
   ")",
   "{",
   "n",
   "/=",
   "base",
   ";",
   "}",
   "if",
   "(",
   "!",
   "i",
   ")",
   "{",
   "precision",
   "=",
   "0",
   ";",
   "}",
   "else",
   "if",
   "(",
   "n",
   ">",
   "100",
   ")",
   "{",
   "precision",
   "-=",
   "2",
   ";",
   "}",
   "else",
   "if",
   "(",
   "n",
   ">",
   "10",
   ")",
   "{",
   "precision",
   "-=",
   "1",
   ";",
   "}",
   "return",
   "n",
   ".",
   "toFixed",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "precision",
   ")",
   ")",
   "+",
   "sep",
   "+",
   "[",
   "''",
   ",",
   "'k'",
   ",",
   "'M'",
   ",",
   "'G'",
   ",",
   "'T'",
   "]",
   "[",
   "Math",
   ".",
   "min",
   "(",
   "i",
   ",",
   "4",
   ")",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-55",
  "nl_tokens": [
   "/",
   "*",
   "This",
   "will",
   "parse",
   "the",
   "incoming",
   "data",
   "to",
   "the",
   "intent",
   "input",
   "."
  ],
  "pl_tokens": [
   "function",
   "parseRequestInput",
   "(",
   "source",
   ",",
   "target",
   ")",
   "{",
   "let",
   "keys",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "source",
   ")",
   ";",
   "if",
   "(",
   "keys",
   ".",
   "length",
   "===",
   "1",
   ")",
   "{",
   "// Check if we have our main key as the full JSON",
   "let",
   "tmp",
   "=",
   "keys",
   "[",
   "0",
   "]",
   ",",
   "shouldParse",
   "=",
   "false",
   ";",
   "tmp",
   "=",
   "tmp",
   ".",
   "trim",
   "(",
   ")",
   ";",
   "if",
   "(",
   "tmp",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   "===",
   "'{'",
   ")",
   "{",
   "for",
   "(",
   "let",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "tmp",
   ".",
   "length",
   ",",
   "100",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "tmp",
   "[",
   "i",
   "]",
   "===",
   "'\"'",
   ")",
   "{",
   "shouldParse",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "}",
   "if",
   "(",
   "shouldParse",
   ")",
   "{",
   "try",
   "{",
   "source",
   "=",
   "JSON",
   ".",
   "parse",
   "(",
   "tmp",
   ")",
   ";",
   "keys",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "source",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "return",
   ";",
   "}",
   "}",
   "}",
   "}",
   "keys",
   ".",
   "forEach",
   "(",
   "(",
   "name",
   ")",
   "=>",
   "{",
   "if",
   "(",
   "name",
   "==",
   "null",
   "||",
   "typeof",
   "name",
   "===",
   "'undefined'",
   ")",
   "return",
   ";",
   "target",
   "[",
   "name",
   "]",
   "=",
   "source",
   "[",
   "name",
   "]",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-56",
  "nl_tokens": [
   "Generate",
   "random",
   "between",
   "min",
   "and",
   "max"
  ],
  "pl_tokens": [
   "function",
   "randomBetween",
   "(",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "0",
   "&&",
   "arguments",
   "[",
   "0",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "0",
   "]",
   ":",
   "0",
   ";",
   "var",
   "max",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "1",
   "&&",
   "arguments",
   "[",
   "1",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "1",
   "]",
   ":",
   "10",
   ";",
   "if",
   "(",
   "!",
   "isNumber",
   "(",
   "min",
   ")",
   "||",
   "isNumericalNaN",
   "(",
   "min",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Min should be numeric'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isNumber",
   "(",
   "max",
   ")",
   "||",
   "isNumericalNaN",
   "(",
   "max",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Max should be numeric'",
   ")",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "random",
   "(",
   ")",
   "*",
   "max",
   "+",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-57",
  "nl_tokens": [
   "Copy",
   "elements",
   "in",
   "the",
   "range",
   "0",
   "..",
   "length",
   "from",
   "obj",
   "s",
   "prototype",
   "chain",
   "to",
   "obj",
   "itself",
   "if",
   "obj",
   "has",
   "holes",
   ".",
   "Return",
   "one",
   "more",
   "than",
   "the",
   "maximal",
   "index",
   "of",
   "a",
   "prototype",
   "property",
   "."
  ],
  "pl_tokens": [
   "function",
   "CopyFromPrototype",
   "(",
   "obj",
   ",",
   "length",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "0",
   ";",
   "for",
   "(",
   "var",
   "proto",
   "=",
   "%",
   "object_get_prototype_of",
   "(",
   "obj",
   ")",
   ";",
   "proto",
   ";",
   "proto",
   "=",
   "%",
   "object_get_prototype_of",
   "(",
   "proto",
   ")",
   ")",
   "{",
   "var",
   "indices",
   "=",
   "IS_PROXY",
   "(",
   "proto",
   ")",
   "?",
   "length",
   ":",
   "%",
   "GetArrayKeys",
   "(",
   "proto",
   ",",
   "length",
   ")",
   ";",
   "if",
   "(",
   "IS_NUMBER",
   "(",
   "indices",
   ")",
   ")",
   "{",
   "// It's an interval.",
   "var",
   "proto_length",
   "=",
   "indices",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "proto_length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "HAS_OWN_PROPERTY",
   "(",
   "obj",
   ",",
   "i",
   ")",
   "&&",
   "HAS_OWN_PROPERTY",
   "(",
   "proto",
   ",",
   "i",
   ")",
   ")",
   "{",
   "obj",
   "[",
   "i",
   "]",
   "=",
   "proto",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "i",
   ">=",
   "max",
   ")",
   "{",
   "max",
   "=",
   "i",
   "+",
   "1",
   ";",
   "}",
   "}",
   "}",
   "}",
   "else",
   "{",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "indices",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "var",
   "index",
   "=",
   "indices",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "!",
   "HAS_OWN_PROPERTY",
   "(",
   "obj",
   ",",
   "index",
   ")",
   "&&",
   "HAS_OWN_PROPERTY",
   "(",
   "proto",
   ",",
   "index",
   ")",
   ")",
   "{",
   "obj",
   "[",
   "index",
   "]",
   "=",
   "proto",
   "[",
   "index",
   "]",
   ";",
   "if",
   "(",
   "index",
   ">=",
   "max",
   ")",
   "{",
   "max",
   "=",
   "index",
   "+",
   "1",
   ";",
   "}",
   "}",
   "}",
   "}",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-58",
  "nl_tokens": [
   "Given",
   "three",
   "sequential",
   "points",
   "p0",
   "p1",
   "and",
   "p2",
   "find",
   "the",
   "left",
   "and",
   "right",
   "control",
   "points",
   "for",
   "p1",
   "."
  ],
  "pl_tokens": [
   "function",
   "getControlPoints",
   "(",
   "p0",
   ",",
   "p1",
   ",",
   "p2",
   ",",
   "opt_alpha",
   ",",
   "opt_allowFalseExtrema",
   ")",
   "{",
   "var",
   "alpha",
   "=",
   "(",
   "opt_alpha",
   "!==",
   "undefined",
   ")",
   "?",
   "opt_alpha",
   ":",
   "1",
   "/",
   "3",
   ";",
   "// 0=no smoothing, 1=crazy smoothing",
   "var",
   "allowFalseExtrema",
   "=",
   "opt_allowFalseExtrema",
   "||",
   "false",
   ";",
   "if",
   "(",
   "!",
   "p2",
   ")",
   "{",
   "return",
   "[",
   "p1",
   ".",
   "x",
   ",",
   "p1",
   ".",
   "y",
   ",",
   "null",
   ",",
   "null",
   "]",
   ";",
   "}",
   "// Step 1: Position the control points along each line segment.",
   "var",
   "l1x",
   "=",
   "(",
   "1",
   "-",
   "alpha",
   ")",
   "*",
   "p1",
   ".",
   "x",
   "+",
   "alpha",
   "*",
   "p0",
   ".",
   "x",
   ",",
   "l1y",
   "=",
   "(",
   "1",
   "-",
   "alpha",
   ")",
   "*",
   "p1",
   ".",
   "y",
   "+",
   "alpha",
   "*",
   "p0",
   ".",
   "y",
   ",",
   "r1x",
   "=",
   "(",
   "1",
   "-",
   "alpha",
   ")",
   "*",
   "p1",
   ".",
   "x",
   "+",
   "alpha",
   "*",
   "p2",
   ".",
   "x",
   ",",
   "r1y",
   "=",
   "(",
   "1",
   "-",
   "alpha",
   ")",
   "*",
   "p1",
   ".",
   "y",
   "+",
   "alpha",
   "*",
   "p2",
   ".",
   "y",
   ";",
   "// Step 2: shift the points up so that p1 is on the l1\u2013r1 line.",
   "if",
   "(",
   "l1x",
   "!=",
   "r1x",
   ")",
   "{",
   "// This can be derived w/ some basic algebra.",
   "var",
   "deltaY",
   "=",
   "p1",
   ".",
   "y",
   "-",
   "r1y",
   "-",
   "(",
   "p1",
   ".",
   "x",
   "-",
   "r1x",
   ")",
   "*",
   "(",
   "l1y",
   "-",
   "r1y",
   ")",
   "/",
   "(",
   "l1x",
   "-",
   "r1x",
   ")",
   ";",
   "l1y",
   "+=",
   "deltaY",
   ";",
   "r1y",
   "+=",
   "deltaY",
   ";",
   "}",
   "// Step 3: correct to avoid false extrema.",
   "if",
   "(",
   "!",
   "allowFalseExtrema",
   ")",
   "{",
   "if",
   "(",
   "l1y",
   ">",
   "p0",
   ".",
   "y",
   "&&",
   "l1y",
   ">",
   "p1",
   ".",
   "y",
   ")",
   "{",
   "l1y",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "p0",
   ".",
   "y",
   ",",
   "p1",
   ".",
   "y",
   ")",
   ";",
   "r1y",
   "=",
   "2",
   "*",
   "p1",
   ".",
   "y",
   "-",
   "l1y",
   ";",
   "}",
   "else",
   "if",
   "(",
   "l1y",
   "<",
   "p0",
   ".",
   "y",
   "&&",
   "l1y",
   "<",
   "p1",
   ".",
   "y",
   ")",
   "{",
   "l1y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "p0",
   ".",
   "y",
   ",",
   "p1",
   ".",
   "y",
   ")",
   ";",
   "r1y",
   "=",
   "2",
   "*",
   "p1",
   ".",
   "y",
   "-",
   "l1y",
   ";",
   "}",
   "if",
   "(",
   "r1y",
   ">",
   "p1",
   ".",
   "y",
   "&&",
   "r1y",
   ">",
   "p2",
   ".",
   "y",
   ")",
   "{",
   "r1y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "p1",
   ".",
   "y",
   ",",
   "p2",
   ".",
   "y",
   ")",
   ";",
   "l1y",
   "=",
   "2",
   "*",
   "p1",
   ".",
   "y",
   "-",
   "r1y",
   ";",
   "}",
   "else",
   "if",
   "(",
   "r1y",
   "<",
   "p1",
   ".",
   "y",
   "&&",
   "r1y",
   "<",
   "p2",
   ".",
   "y",
   ")",
   "{",
   "r1y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "p1",
   ".",
   "y",
   ",",
   "p2",
   ".",
   "y",
   ")",
   ";",
   "l1y",
   "=",
   "2",
   "*",
   "p1",
   ".",
   "y",
   "-",
   "r1y",
   ";",
   "}",
   "}",
   "return",
   "[",
   "l1x",
   ",",
   "l1y",
   ",",
   "r1x",
   ",",
   "r1y",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-59",
  "nl_tokens": [
   "/",
   "*",
   "262"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry1",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "3",
   ")",
   ";",
   "var",
   "apply",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "189",
   ")",
   ";",
   "var",
   "curryN",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "7",
   ")",
   ";",
   "var",
   "map",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "9",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "21",
   ")",
   ";",
   "var",
   "pluck",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "27",
   ")",
   ";",
   "var",
   "reduce",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "16",
   ")",
   ";",
   "var",
   "values",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "240",
   ")",
   ";",
   "/**\n\t * Given a spec object recursively mapping properties to functions, creates a\n\t * function producing an object of the same structure, by mapping each property\n\t * to the result of calling its associated function with the supplied arguments.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.20.0\n\t * @category Function\n\t * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n\t * @param {Object} spec an object recursively mapping properties to functions for\n\t *        producing the values for these properties.\n\t * @return {Function} A function that returns an object of the same structure\n\t * as `spec', with each property set to the value returned by calling its\n\t * associated function with the supplied arguments.\n\t * @see R.converge, R.juxt\n\t * @example\n\t *\n\t *      var getMetrics = R.applySpec({\n\t *        sum: R.add,\n\t *        nested: { mul: R.multiply }\n\t *      });\n\t *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n\t * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n\t */",
   "var",
   "applySpec",
   "=",
   "/*#__PURE__*/",
   "_curry1",
   "(",
   "function",
   "applySpec",
   "(",
   "spec",
   ")",
   "{",
   "spec",
   "=",
   "map",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "return",
   "typeof",
   "v",
   "==",
   "'function'",
   "?",
   "v",
   ":",
   "applySpec",
   "(",
   "v",
   ")",
   ";",
   "}",
   ",",
   "spec",
   ")",
   ";",
   "return",
   "curryN",
   "(",
   "reduce",
   "(",
   "max",
   ",",
   "0",
   ",",
   "pluck",
   "(",
   "'length'",
   ",",
   "values",
   "(",
   "spec",
   ")",
   ")",
   ")",
   ",",
   "function",
   "(",
   ")",
   "{",
   "var",
   "args",
   "=",
   "arguments",
   ";",
   "return",
   "map",
   "(",
   "function",
   "(",
   "f",
   ")",
   "{",
   "return",
   "apply",
   "(",
   "f",
   ",",
   "args",
   ")",
   ";",
   "}",
   ",",
   "spec",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "applySpec",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-60",
  "nl_tokens": [
   "Get",
   "percentage"
  ],
  "pl_tokens": [
   "function",
   "getPercentage",
   "(",
   "current",
   ",",
   "<mask>",
   ")",
   "{",
   "if",
   "(",
   "current",
   "===",
   "0",
   "||",
   "max",
   "===",
   "0",
   "||",
   "Number",
   ".",
   "isNaN",
   "(",
   "current",
   ")",
   "||",
   "Number",
   ".",
   "isNaN",
   "(",
   "max",
   ")",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "return",
   "(",
   "current",
   "/",
   "max",
   "*",
   "100",
   ")",
   ".",
   "toFixed",
   "(",
   "2",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-61",
  "nl_tokens": [
   "This",
   "function",
   "deviates",
   "from",
   "the",
   "standard",
   "BK",
   "algorithm",
   "in",
   "two",
   "ways",
   ".",
   "First",
   "it",
   "takes",
   "into",
   "account",
   "the",
   "size",
   "of",
   "the",
   "nodes",
   ".",
   "Second",
   "it",
   "includes",
   "a",
   "fix",
   "to",
   "the",
   "original",
   "algorithm",
   "that",
   "is",
   "described",
   "in",
   "Carstens",
   "Node",
   "and",
   "Label",
   "Placement",
   "in",
   "a",
   "Layered",
   "Layout",
   "Algorithm",
   "."
  ],
  "pl_tokens": [
   "function",
   "horizontalCompaction",
   "(",
   "g",
   ",",
   "layering",
   ",",
   "pos",
   ",",
   "root",
   ",",
   "align",
   ")",
   "{",
   "var",
   "sink",
   "=",
   "{",
   "}",
   ",",
   "// Mapping of node id -> sink node id for class",
   "maybeShift",
   "=",
   "{",
   "}",
   ",",
   "// Mapping of sink node id -> { class node id, min shift }",
   "shift",
   "=",
   "{",
   "}",
   ",",
   "// Mapping of sink node id -> shift",
   "pred",
   "=",
   "{",
   "}",
   ",",
   "// Mapping of node id -> predecessor node (or null)",
   "xs",
   "=",
   "{",
   "}",
   ";",
   "// Calculated X positions",
   "layering",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "layer",
   ")",
   "{",
   "layer",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "u",
   ",",
   "i",
   ")",
   "{",
   "sink",
   "[",
   "u",
   "]",
   "=",
   "u",
   ";",
   "maybeShift",
   "[",
   "u",
   "]",
   "=",
   "{",
   "}",
   ";",
   "if",
   "(",
   "i",
   ">",
   "0",
   ")",
   "pred",
   "[",
   "u",
   "]",
   "=",
   "layer",
   "[",
   "i",
   "-",
   "1",
   "]",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "function",
   "updateShift",
   "(",
   "toShift",
   ",",
   "neighbor",
   ",",
   "delta",
   ")",
   "{",
   "if",
   "(",
   "!",
   "(",
   "neighbor",
   "in",
   "maybeShift",
   "[",
   "toShift",
   "]",
   ")",
   ")",
   "{",
   "maybeShift",
   "[",
   "toShift",
   "]",
   "[",
   "neighbor",
   "]",
   "=",
   "delta",
   ";",
   "}",
   "else",
   "{",
   "maybeShift",
   "[",
   "toShift",
   "]",
   "[",
   "neighbor",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maybeShift",
   "[",
   "toShift",
   "]",
   "[",
   "neighbor",
   "]",
   ",",
   "delta",
   ")",
   ";",
   "}",
   "}",
   "function",
   "placeBlock",
   "(",
   "v",
   ")",
   "{",
   "if",
   "(",
   "!",
   "(",
   "v",
   "in",
   "xs",
   ")",
   ")",
   "{",
   "xs",
   "[",
   "v",
   "]",
   "=",
   "0",
   ";",
   "var",
   "w",
   "=",
   "v",
   ";",
   "do",
   "{",
   "if",
   "(",
   "pos",
   "[",
   "w",
   "]",
   ">",
   "0",
   ")",
   "{",
   "var",
   "u",
   "=",
   "root",
   "[",
   "pred",
   "[",
   "w",
   "]",
   "]",
   ";",
   "placeBlock",
   "(",
   "u",
   ")",
   ";",
   "if",
   "(",
   "sink",
   "[",
   "v",
   "]",
   "===",
   "v",
   ")",
   "{",
   "sink",
   "[",
   "v",
   "]",
   "=",
   "sink",
   "[",
   "u",
   "]",
   ";",
   "}",
   "var",
   "delta",
   "=",
   "sep",
   "(",
   "g",
   ",",
   "pred",
   "[",
   "w",
   "]",
   ")",
   "+",
   "sep",
   "(",
   "g",
   ",",
   "w",
   ")",
   ";",
   "if",
   "(",
   "sink",
   "[",
   "v",
   "]",
   "!==",
   "sink",
   "[",
   "u",
   "]",
   ")",
   "{",
   "updateShift",
   "(",
   "sink",
   "[",
   "u",
   "]",
   ",",
   "sink",
   "[",
   "v",
   "]",
   ",",
   "xs",
   "[",
   "v",
   "]",
   "-",
   "xs",
   "[",
   "u",
   "]",
   "-",
   "delta",
   ")",
   ";",
   "}",
   "else",
   "{",
   "xs",
   "[",
   "v",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "xs",
   "[",
   "v",
   "]",
   ",",
   "xs",
   "[",
   "u",
   "]",
   "+",
   "delta",
   ")",
   ";",
   "}",
   "}",
   "w",
   "=",
   "align",
   "[",
   "w",
   "]",
   ";",
   "}",
   "while",
   "(",
   "w",
   "!==",
   "v",
   ")",
   ";",
   "}",
   "}",
   "// Root coordinates relative to sink",
   "util",
   ".",
   "values",
   "(",
   "root",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "placeBlock",
   "(",
   "v",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// Absolute coordinates",
   "// There is an assumption here that we've resolved shifts for any classes",
   "// that begin at an earlier layer. We guarantee this by visiting layers in",
   "// order.",
   "layering",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "layer",
   ")",
   "{",
   "layer",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "xs",
   "[",
   "v",
   "]",
   "=",
   "xs",
   "[",
   "root",
   "[",
   "v",
   "]",
   "]",
   ";",
   "if",
   "(",
   "v",
   "===",
   "root",
   "[",
   "v",
   "]",
   "&&",
   "v",
   "===",
   "sink",
   "[",
   "v",
   "]",
   ")",
   "{",
   "var",
   "minShift",
   "=",
   "0",
   ";",
   "if",
   "(",
   "v",
   "in",
   "maybeShift",
   "&&",
   "Object",
   ".",
   "keys",
   "(",
   "maybeShift",
   "[",
   "v",
   "]",
   ")",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "minShift",
   "=",
   "util",
   ".",
   "min",
   "(",
   "Object",
   ".",
   "keys",
   "(",
   "maybeShift",
   "[",
   "v",
   "]",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "u",
   ")",
   "{",
   "return",
   "maybeShift",
   "[",
   "v",
   "]",
   "[",
   "u",
   "]",
   "+",
   "(",
   "u",
   "in",
   "shift",
   "?",
   "shift",
   "[",
   "u",
   "]",
   ":",
   "0",
   ")",
   ";",
   "}",
   ")",
   ")",
   ";",
   "}",
   "shift",
   "[",
   "v",
   "]",
   "=",
   "minShift",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "layering",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "layer",
   ")",
   "{",
   "layer",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "xs",
   "[",
   "v",
   "]",
   "+=",
   "shift",
   "[",
   "sink",
   "[",
   "root",
   "[",
   "v",
   "]",
   "]",
   "]",
   "||",
   "0",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "return",
   "xs",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-62",
  "nl_tokens": [
   "A",
   "helper",
   "method",
   "for",
   "inserting",
   "an",
   "element",
   "at",
   "the",
   "current",
   "caret",
   "position",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "$el",
   ")",
   "{",
   "var",
   "caret",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "caretPos",
   ",",
   "this",
   ".",
   "items",
   ".",
   "length",
   ")",
   ";",
   "var",
   "el",
   "=",
   "$el",
   "[",
   "0",
   "]",
   ";",
   "var",
   "target",
   "=",
   "this",
   ".",
   "buffer",
   "||",
   "this",
   ".",
   "$control",
   "[",
   "0",
   "]",
   ";",
   "if",
   "(",
   "caret",
   "===",
   "0",
   ")",
   "{",
   "target",
   ".",
   "insertBefore",
   "(",
   "el",
   ",",
   "target",
   ".",
   "firstChild",
   ")",
   ";",
   "}",
   "else",
   "{",
   "target",
   ".",
   "insertBefore",
   "(",
   "el",
   ",",
   "target",
   ".",
   "childNodes",
   "[",
   "caret",
   "]",
   ")",
   ";",
   "}",
   "this",
   ".",
   "setCaret",
   "(",
   "caret",
   "+",
   "1",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-63",
  "nl_tokens": [
   "Resolve",
   "the",
   "size",
   "of",
   "the",
   "layout",
   "-",
   "node",
   "from",
   "the",
   "renderable",
   "itsself",
   "."
  ],
  "pl_tokens": [
   "function",
   "_contextResolveSize",
   "(",
   "contextNodeOrId",
   ",",
   "parentSize",
   ")",
   "{",
   "var",
   "contextNode",
   "=",
   "this",
   ".",
   "_nodesById",
   "?",
   "_contextGet",
   ".",
   "call",
   "(",
   "this",
   ",",
   "contextNodeOrId",
   ")",
   ":",
   "contextNodeOrId",
   ";",
   "var",
   "resolveSize",
   "=",
   "this",
   ".",
   "_pool",
   ".",
   "resolveSize",
   ";",
   "if",
   "(",
   "!",
   "contextNode",
   ")",
   "{",
   "resolveSize",
   "[",
   "0",
   "]",
   "=",
   "0",
   ";",
   "resolveSize",
   "[",
   "1",
   "]",
   "=",
   "0",
   ";",
   "return",
   "resolveSize",
   ";",
   "}",
   "// Get in use size",
   "var",
   "renderNode",
   "=",
   "contextNode",
   ".",
   "renderNode",
   ";",
   "var",
   "size",
   "=",
   "renderNode",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "size",
   ")",
   "{",
   "return",
   "parentSize",
   ";",
   "}",
   "// Check if true-size is used and it must be reavaluated.",
   "// This particular piece of code specifically handles true-size Surfaces in famo.us.",
   "// It contains portions that ensure that the true-size of a Surface is re-evaluated",
   "// and also workaround code that backs up the size of a Surface, so that when the surface",
   "// is re-added to the DOM (e.g. when scrolling) it doesn't temporarily have a size of 0.",
   "var",
   "configSize",
   "=",
   "_resolveConfigSize",
   "(",
   "renderNode",
   ")",
   ";",
   "if",
   "(",
   "configSize",
   "&&",
   "(",
   "(",
   "configSize",
   ".",
   "size",
   "[",
   "0",
   "]",
   "===",
   "true",
   ")",
   "||",
   "(",
   "configSize",
   ".",
   "size",
   "[",
   "1",
   "]",
   "===",
   "true",
   ")",
   ")",
   ")",
   "{",
   "contextNode",
   ".",
   "usesTrueSize",
   "=",
   "true",
   ";",
   "if",
   "(",
   "configSize",
   ".",
   "renderNode",
   "instanceof",
   "Surface",
   ")",
   "{",
   "var",
   "backupSize",
   "=",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_backupSize",
   ";",
   "if",
   "(",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_contentDirty",
   "||",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_trueSizeCheck",
   ")",
   "{",
   "this",
   ".",
   "_trueSizeRequested",
   "=",
   "true",
   ";",
   "contextNode",
   ".",
   "trueSizeRequested",
   "=",
   "true",
   ";",
   "}",
   "if",
   "(",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_trueSizeCheck",
   ")",
   "{",
   "// Fix for true-size renderables. When true-size is used, the size",
   "// is incorrect for one render-cycle due to the fact that Surface.commit",
   "// updates the content after asking the DOM for the offsetHeight/offsetWidth.",
   "// The code below backs the size up, and re-uses that when this scenario",
   "// occurs.",
   "if",
   "(",
   "backupSize",
   "&&",
   "(",
   "configSize",
   ".",
   "size",
   "!==",
   "size",
   ")",
   ")",
   "{",
   "var",
   "newWidth",
   "=",
   "(",
   "configSize",
   ".",
   "size",
   "[",
   "0",
   "]",
   "===",
   "true",
   ")",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "backupSize",
   "[",
   "0",
   "]",
   ",",
   "size",
   "[",
   "0",
   "]",
   ")",
   ":",
   "size",
   "[",
   "0",
   "]",
   ";",
   "var",
   "newHeight",
   "=",
   "(",
   "configSize",
   ".",
   "size",
   "[",
   "1",
   "]",
   "===",
   "true",
   ")",
   "?",
   "Math",
   ".",
   "max",
   "(",
   "backupSize",
   "[",
   "1",
   "]",
   ",",
   "size",
   "[",
   "1",
   "]",
   ")",
   ":",
   "size",
   "[",
   "1",
   "]",
   ";",
   "backupSize",
   "[",
   "0",
   "]",
   "=",
   "newWidth",
   ";",
   "backupSize",
   "[",
   "1",
   "]",
   "=",
   "newHeight",
   ";",
   "size",
   "=",
   "backupSize",
   ";",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_backupSize",
   "=",
   "undefined",
   ";",
   "backupSize",
   "=",
   "undefined",
   ";",
   "}",
   "}",
   "if",
   "(",
   "this",
   ".",
   "_reevalTrueSize",
   "||",
   "(",
   "backupSize",
   "&&",
   "(",
   "(",
   "backupSize",
   "[",
   "0",
   "]",
   "!==",
   "size",
   "[",
   "0",
   "]",
   ")",
   "||",
   "(",
   "backupSize",
   "[",
   "1",
   "]",
   "!==",
   "size",
   "[",
   "1",
   "]",
   ")",
   ")",
   ")",
   ")",
   "{",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_trueSizeCheck",
   "=",
   "true",
   ";",
   "// force request of true-size from DOM",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_sizeDirty",
   "=",
   "true",
   ";",
   "this",
   ".",
   "_trueSizeRequested",
   "=",
   "true",
   ";",
   "}",
   "// Backup the size of the node",
   "if",
   "(",
   "!",
   "backupSize",
   ")",
   "{",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_backupSize",
   "=",
   "[",
   "0",
   ",",
   "0",
   "]",
   ";",
   "backupSize",
   "=",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_backupSize",
   ";",
   "}",
   "backupSize",
   "[",
   "0",
   "]",
   "=",
   "size",
   "[",
   "0",
   "]",
   ";",
   "backupSize",
   "[",
   "1",
   "]",
   "=",
   "size",
   "[",
   "1",
   "]",
   ";",
   "}",
   "// Ensure re-layout when a child layout-controller is using true-size and it",
   "// has ben changed.",
   "else",
   "if",
   "(",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_nodes",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "_reevalTrueSize",
   "||",
   "configSize",
   ".",
   "renderNode",
   ".",
   "_nodes",
   ".",
   "_trueSizeRequested",
   ")",
   "{",
   "contextNode",
   ".",
   "trueSizeRequested",
   "=",
   "true",
   ";",
   "this",
   ".",
   "_trueSizeRequested",
   "=",
   "true",
   ";",
   "}",
   "}",
   "}",
   "// Resolve 'undefined' to parent-size and true to 0",
   "if",
   "(",
   "(",
   "size",
   "[",
   "0",
   "]",
   "===",
   "undefined",
   ")",
   "||",
   "(",
   "size",
   "[",
   "0",
   "]",
   "===",
   "true",
   ")",
   "||",
   "(",
   "size",
   "[",
   "1",
   "]",
   "===",
   "undefined",
   ")",
   "||",
   "(",
   "size",
   "[",
   "1",
   "]",
   "===",
   "true",
   ")",
   ")",
   "{",
   "resolveSize",
   "[",
   "0",
   "]",
   "=",
   "size",
   "[",
   "0",
   "]",
   ";",
   "resolveSize",
   "[",
   "1",
   "]",
   "=",
   "size",
   "[",
   "1",
   "]",
   ";",
   "size",
   "=",
   "resolveSize",
   ";",
   "if",
   "(",
   "size",
   "[",
   "0",
   "]",
   "===",
   "undefined",
   ")",
   "{",
   "size",
   "[",
   "0",
   "]",
   "=",
   "parentSize",
   "[",
   "0",
   "]",
   ";",
   "}",
   "else",
   "if",
   "(",
   "size",
   "[",
   "0",
   "]",
   "===",
   "true",
   ")",
   "{",
   "size",
   "[",
   "0",
   "]",
   "=",
   "0",
   ";",
   "this",
   ".",
   "_trueSizeRequested",
   "=",
   "true",
   ";",
   "contextNode",
   ".",
   "trueSizeRequested",
   "=",
   "true",
   ";",
   "}",
   "if",
   "(",
   "size",
   "[",
   "1",
   "]",
   "===",
   "undefined",
   ")",
   "{",
   "size",
   "[",
   "1",
   "]",
   "=",
   "parentSize",
   "[",
   "1",
   "]",
   ";",
   "}",
   "else",
   "if",
   "(",
   "size",
   "[",
   "1",
   "]",
   "===",
   "true",
   ")",
   "{",
   "size",
   "[",
   "1",
   "]",
   "=",
   "0",
   ";",
   "this",
   ".",
   "_trueSizeRequested",
   "=",
   "true",
   ";",
   "contextNode",
   ".",
   "trueSizeRequested",
   "=",
   "true",
   ";",
   "}",
   "}",
   "return",
   "size",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-64",
  "nl_tokens": [
   "Suggest",
   "spelling",
   "for",
   "value",
   "."
  ],
  "pl_tokens": [
   "function",
   "suggest",
   "(",
   "value",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   "var",
   "replacementTable",
   "=",
   "self",
   ".",
   "replacementTable",
   "var",
   "conversion",
   "=",
   "self",
   ".",
   "conversion",
   "var",
   "groups",
   "=",
   "self",
   ".",
   "flags",
   ".",
   "KEY",
   "var",
   "suggestions",
   "=",
   "[",
   "]",
   "var",
   "weighted",
   "=",
   "{",
   "}",
   "var",
   "memory",
   "var",
   "replacement",
   "var",
   "edits",
   "=",
   "[",
   "]",
   "var",
   "values",
   "var",
   "index",
   "var",
   "length",
   "var",
   "offset",
   "var",
   "position",
   "var",
   "count",
   "var",
   "otherOffset",
   "var",
   "otherCount",
   "var",
   "otherCharacter",
   "var",
   "character",
   "var",
   "group",
   "var",
   "before",
   "var",
   "after",
   "var",
   "upper",
   "var",
   "insensitive",
   "var",
   "firstLevel",
   "var",
   "prev",
   "var",
   "next",
   "var",
   "nextCharacter",
   "var",
   "<mask>",
   "var",
   "distance",
   "var",
   "end",
   "var",
   "size",
   "var",
   "normalized",
   "var",
   "suggestion",
   "var",
   "currentCase",
   "value",
   "=",
   "normalize",
   "(",
   "trim",
   "(",
   "value",
   ")",
   ",",
   "conversion",
   ".",
   "in",
   ")",
   "if",
   "(",
   "!",
   "value",
   "||",
   "self",
   ".",
   "correct",
   "(",
   "value",
   ")",
   ")",
   "{",
   "return",
   "[",
   "]",
   "}",
   "currentCase",
   "=",
   "casing",
   "(",
   "value",
   ")",
   "// Check the replacement table.",
   "length",
   "=",
   "replacementTable",
   ".",
   "length",
   "index",
   "=",
   "-",
   "1",
   "while",
   "(",
   "++",
   "index",
   "<",
   "length",
   ")",
   "{",
   "replacement",
   "=",
   "replacementTable",
   "[",
   "index",
   "]",
   "offset",
   "=",
   "value",
   ".",
   "indexOf",
   "(",
   "replacement",
   "[",
   "0",
   "]",
   ")",
   "while",
   "(",
   "offset",
   "!==",
   "-",
   "1",
   ")",
   "{",
   "edits",
   ".",
   "push",
   "(",
   "value",
   ".",
   "replace",
   "(",
   "replacement",
   "[",
   "0",
   "]",
   ",",
   "replacement",
   "[",
   "1",
   "]",
   ")",
   ")",
   "offset",
   "=",
   "value",
   ".",
   "indexOf",
   "(",
   "replacement",
   "[",
   "0",
   "]",
   ",",
   "offset",
   "+",
   "1",
   ")",
   "}",
   "}",
   "// Check the keyboard.",
   "length",
   "=",
   "value",
   ".",
   "length",
   "index",
   "=",
   "-",
   "1",
   "while",
   "(",
   "++",
   "index",
   "<",
   "length",
   ")",
   "{",
   "character",
   "=",
   "value",
   ".",
   "charAt",
   "(",
   "index",
   ")",
   "insensitive",
   "=",
   "character",
   ".",
   "toLowerCase",
   "(",
   ")",
   "upper",
   "=",
   "insensitive",
   "!==",
   "character",
   "offset",
   "=",
   "-",
   "1",
   "count",
   "=",
   "groups",
   ".",
   "length",
   "while",
   "(",
   "++",
   "offset",
   "<",
   "count",
   ")",
   "{",
   "group",
   "=",
   "groups",
   "[",
   "offset",
   "]",
   "position",
   "=",
   "group",
   ".",
   "indexOf",
   "(",
   "insensitive",
   ")",
   "if",
   "(",
   "position",
   "===",
   "-",
   "1",
   ")",
   "{",
   "continue",
   "}",
   "before",
   "=",
   "value",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "position",
   ")",
   "after",
   "=",
   "value",
   ".",
   "slice",
   "(",
   "position",
   "+",
   "1",
   ")",
   "otherOffset",
   "=",
   "-",
   "1",
   "otherCount",
   "=",
   "group",
   ".",
   "length",
   "while",
   "(",
   "++",
   "otherOffset",
   "<",
   "otherCount",
   ")",
   "{",
   "if",
   "(",
   "otherOffset",
   "!==",
   "position",
   ")",
   "{",
   "otherCharacter",
   "=",
   "group",
   ".",
   "charAt",
   "(",
   "otherOffset",
   ")",
   "if",
   "(",
   "upper",
   ")",
   "{",
   "otherCharacter",
   "=",
   "otherCharacter",
   ".",
   "toUpperCase",
   "(",
   ")",
   "}",
   "edits",
   ".",
   "push",
   "(",
   "before",
   "+",
   "otherCharacter",
   "+",
   "after",
   ")",
   "}",
   "}",
   "}",
   "}",
   "// Check cases where one of a double character was forgotten, or one too many",
   "// were added, up to three \u201cdistances\u201d.  This increases the success-rate by 2%",
   "// and speeds the process up by 13%.",
   "length",
   "=",
   "value",
   ".",
   "length",
   "index",
   "=",
   "-",
   "1",
   "nextCharacter",
   "=",
   "value",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   "values",
   "=",
   "[",
   "''",
   "]",
   "max",
   "=",
   "1",
   "distance",
   "=",
   "0",
   "while",
   "(",
   "++",
   "index",
   "<",
   "length",
   ")",
   "{",
   "character",
   "=",
   "nextCharacter",
   "nextCharacter",
   "=",
   "value",
   ".",
   "charAt",
   "(",
   "index",
   "+",
   "1",
   ")",
   "before",
   "=",
   "value",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "index",
   ")",
   "replacement",
   "=",
   "character",
   "===",
   "nextCharacter",
   "?",
   "''",
   ":",
   "character",
   "+",
   "character",
   "offset",
   "=",
   "-",
   "1",
   "count",
   "=",
   "values",
   ".",
   "length",
   "while",
   "(",
   "++",
   "offset",
   "<",
   "count",
   ")",
   "{",
   "if",
   "(",
   "offset",
   "<=",
   "max",
   ")",
   "{",
   "values",
   ".",
   "push",
   "(",
   "values",
   "[",
   "offset",
   "]",
   "+",
   "replacement",
   ")",
   "}",
   "values",
   "[",
   "offset",
   "]",
   "+=",
   "character",
   "}",
   "if",
   "(",
   "++",
   "distance",
   "<",
   "3",
   ")",
   "{",
   "max",
   "=",
   "values",
   ".",
   "length",
   "}",
   "}",
   "edits",
   "=",
   "edits",
   ".",
   "concat",
   "(",
   "values",
   ")",
   "// Ensure the lower-cased, capitalised, and uppercase values are included.",
   "values",
   "=",
   "[",
   "value",
   "]",
   "replacement",
   "=",
   "value",
   ".",
   "toLowerCase",
   "(",
   ")",
   "if",
   "(",
   "value",
   "===",
   "replacement",
   ")",
   "{",
   "values",
   ".",
   "push",
   "(",
   "value",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   ".",
   "toUpperCase",
   "(",
   ")",
   "+",
   "replacement",
   ".",
   "slice",
   "(",
   "1",
   ")",
   ")",
   "}",
   "else",
   "{",
   "values",
   ".",
   "push",
   "(",
   "replacement",
   ")",
   "}",
   "replacement",
   "=",
   "value",
   ".",
   "toUpperCase",
   "(",
   ")",
   "if",
   "(",
   "value",
   "!==",
   "replacement",
   ")",
   "{",
   "values",
   ".",
   "push",
   "(",
   "replacement",
   ")",
   "}",
   "// Construct a memory object for `generate`.",
   "memory",
   "=",
   "{",
   "state",
   ":",
   "{",
   "}",
   ",",
   "weighted",
   ":",
   "weighted",
   ",",
   "suggestions",
   ":",
   "suggestions",
   "}",
   "firstLevel",
   "=",
   "generate",
   "(",
   "self",
   ",",
   "memory",
   ",",
   "values",
   ",",
   "edits",
   ")",
   "// While there are no suggestions based on generated values with an",
   "// edit-distance of `1`, check the generated values, `SIZE` at a time.",
   "// Basically, we\u2019re generating values with an edit-distance of `2`, but were",
   "// doing it in small batches because it\u2019s such an expensive operation.",
   "prev",
   "=",
   "0",
   "max",
   "=",
   "Math",
   ".",
   "pow",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "15",
   "-",
   "value",
   ".",
   "length",
   ",",
   "3",
   ")",
   ",",
   "3",
   ")",
   "max",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "firstLevel",
   ".",
   "length",
   ",",
   "max",
   ")",
   "end",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   "+",
   "Math",
   ".",
   "min",
   "(",
   "30",
   "*",
   "value",
   ".",
   "length",
   ",",
   "200",
   ")",
   "size",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "pow",
   "(",
   "10",
   "-",
   "value",
   ".",
   "length",
   ",",
   "3",
   ")",
   ",",
   "1",
   ")",
   "while",
   "(",
   "!",
   "suggestions",
   ".",
   "length",
   "&&",
   "prev",
   "<",
   "max",
   ")",
   "{",
   "next",
   "=",
   "prev",
   "+",
   "size",
   "generate",
   "(",
   "self",
   ",",
   "memory",
   ",",
   "firstLevel",
   ".",
   "slice",
   "(",
   "prev",
   ",",
   "next",
   ")",
   ")",
   "prev",
   "=",
   "next",
   "if",
   "(",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ">",
   "end",
   ")",
   "{",
   "break",
   "}",
   "}",
   "// Sort the suggestions based on their weight.",
   "suggestions",
   ".",
   "sort",
   "(",
   "sort",
   ")",
   "// Normalize the output.",
   "values",
   "=",
   "[",
   "]",
   "normalized",
   "=",
   "[",
   "]",
   "index",
   "=",
   "-",
   "1",
   "length",
   "=",
   "suggestions",
   ".",
   "length",
   "while",
   "(",
   "++",
   "index",
   "<",
   "length",
   ")",
   "{",
   "suggestion",
   "=",
   "normalize",
   "(",
   "suggestions",
   "[",
   "index",
   "]",
   ",",
   "conversion",
   ".",
   "out",
   ")",
   "suggestions",
   "[",
   "index",
   "]",
   "=",
   "suggestion",
   "replacement",
   "=",
   "suggestion",
   ".",
   "toLowerCase",
   "(",
   ")",
   "if",
   "(",
   "normalized",
   ".",
   "indexOf",
   "(",
   "replacement",
   ")",
   "===",
   "-",
   "1",
   ")",
   "{",
   "values",
   ".",
   "push",
   "(",
   "suggestion",
   ")",
   "normalized",
   ".",
   "push",
   "(",
   "replacement",
   ")",
   "}",
   "}",
   "// BOOM! All done!",
   "return",
   "values",
   "function",
   "sort",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "sortWeight",
   "(",
   "a",
   ",",
   "b",
   ")",
   "||",
   "sortCasing",
   "(",
   "a",
   ",",
   "b",
   ")",
   "||",
   "sortAlpha",
   "(",
   "a",
   ",",
   "b",
   ")",
   "}",
   "function",
   "sortWeight",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "if",
   "(",
   "weighted",
   "[",
   "a",
   "]",
   "===",
   "weighted",
   "[",
   "b",
   "]",
   ")",
   "{",
   "return",
   "0",
   "}",
   "return",
   "weighted",
   "[",
   "a",
   "]",
   ">",
   "weighted",
   "[",
   "b",
   "]",
   "?",
   "-",
   "1",
   ":",
   "1",
   "}",
   "function",
   "sortCasing",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "var",
   "leftCasing",
   "=",
   "casing",
   "(",
   "a",
   ")",
   "var",
   "rightCasing",
   "=",
   "casing",
   "(",
   "b",
   ")",
   "if",
   "(",
   "leftCasing",
   "!==",
   "rightCasing",
   ")",
   "{",
   "if",
   "(",
   "leftCasing",
   "===",
   "currentCase",
   ")",
   "{",
   "return",
   "-",
   "1",
   "}",
   "if",
   "(",
   "rightCasing",
   "===",
   "currentCase",
   ")",
   "{",
   "return",
   "1",
   "}",
   "}",
   "return",
   "0",
   "}",
   "function",
   "sortAlpha",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "a",
   ".",
   "localeCompare",
   "(",
   "b",
   ")",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-65",
  "nl_tokens": [
   "/",
   "---",
   "API"
  ],
  "pl_tokens": [
   "function",
   "Cache",
   "(",
   "opts",
   ")",
   "{",
   "assert",
   ".",
   "object",
   "(",
   "opts",
   ",",
   "'options'",
   ")",
   ";",
   "// assert.number(opts.dirty, 'options.dirty');",
   "assert",
   ".",
   "object",
   "(",
   "opts",
   ".",
   "log",
   ",",
   "'options.log'",
   ")",
   ";",
   "assert",
   ".",
   "string",
   "(",
   "opts",
   ".",
   "location",
   ",",
   "'options.location'",
   ")",
   ";",
   "assert",
   ".",
   "number",
   "(",
   "opts",
   ".",
   "size",
   ",",
   "'options.size'",
   ")",
   ";",
   "assert",
   ".",
   "number",
   "(",
   "opts",
   ".",
   "ttl",
   ",",
   "'options.ttl'",
   ")",
   ";",
   "assert",
   ".",
   "number",
   "(",
   "opts",
   ".",
   "wbtime",
   ",",
   "'options.wbtime'",
   ")",
   ";",
   "assert",
   ".",
   "number",
   "(",
   "opts",
   ".",
   "num_par",
   ",",
   "'options.num_par'",
   ")",
   ";",
   "events",
   ".",
   "EventEmitter",
   ".",
   "call",
   "(",
   "this",
   ",",
   "opts",
   ")",
   ";",
   "// no maxAge means entries never age out on their own",
   "this",
   ".",
   "cache",
   "=",
   "LRU",
   "(",
   "{",
   "<mask>",
   ":",
   "Infinity",
   "// hacky - but we just want LRU bookeeping",
   "}",
   ")",
   ";",
   "this",
   ".",
   "current_size",
   "=",
   "0",
   ";",
   "this",
   ".",
   "db",
   "=",
   "null",
   ";",
   "this",
   ".",
   "log",
   "=",
   "opts",
   ".",
   "log",
   ".",
   "child",
   "(",
   "{",
   "component",
   ":",
   "'MantaFsCache'",
   ",",
   "location",
   ":",
   "path",
   ".",
   "normalize",
   "(",
   "opts",
   ".",
   "location",
   ")",
   "}",
   ",",
   "true",
   ")",
   ";",
   "this",
   ".",
   "location",
   "=",
   "path",
   ".",
   "normalize",
   "(",
   "opts",
   ".",
   "location",
   ")",
   ";",
   "this",
   ".",
   "max_size",
   "=",
   "opts",
   ".",
   "size",
   ";",
   "this",
   ".",
   "curr_size",
   "=",
   "0",
   ";",
   "this",
   ".",
   "ttl_ms",
   "=",
   "opts",
   ".",
   "ttl",
   "*",
   "1000",
   ";",
   "this",
   ".",
   "wbtime",
   "=",
   "opts",
   ".",
   "wbtime",
   ";",
   "this",
   ".",
   "num_par",
   "=",
   "opts",
   ".",
   "num_par",
   ";",
   "this",
   ".",
   "manta",
   "=",
   "opts",
   ".",
   "manta",
   ";",
   "this",
   ".",
   "_mantafs_cache",
   "=",
   "true",
   ";",
   "// MDB flag",
   "// When we first startup we'll process any dirty files that might be left",
   "// in our cache during the open() function.",
   "this",
   ".",
   "open",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-66",
  "nl_tokens": [
   "Create",
   "an",
   "<input",
   "type",
   "=",
   "range",
   ">"
  ],
  "pl_tokens": [
   "function",
   "createRange",
   "(",
   "type",
   ",",
   "attributes",
   ")",
   "{",
   "// Seek input",
   "var",
   "input",
   "=",
   "createElement",
   "(",
   "'input'",
   ",",
   "extend",
   "(",
   "getAttributesFromSelector",
   "(",
   "this",
   ".",
   "config",
   ".",
   "selectors",
   ".",
   "inputs",
   "[",
   "type",
   "]",
   ")",
   ",",
   "{",
   "type",
   ":",
   "'range'",
   ",",
   "<mask>",
   ":",
   "0",
   ",",
   "max",
   ":",
   "100",
   ",",
   "step",
   ":",
   "0.01",
   ",",
   "value",
   ":",
   "0",
   ",",
   "autocomplete",
   ":",
   "'off'",
   ",",
   "// A11y fixes for https://github.com/sampotts/plyr/issues/905",
   "role",
   ":",
   "'slider'",
   ",",
   "'aria-label'",
   ":",
   "i18n",
   ".",
   "get",
   "(",
   "type",
   ",",
   "this",
   ".",
   "config",
   ")",
   ",",
   "'aria-valuemin'",
   ":",
   "0",
   ",",
   "'aria-valuemax'",
   ":",
   "100",
   ",",
   "'aria-valuenow'",
   ":",
   "0",
   "}",
   ",",
   "attributes",
   ")",
   ")",
   ";",
   "this",
   ".",
   "elements",
   ".",
   "inputs",
   "[",
   "type",
   "]",
   "=",
   "input",
   ";",
   "// Set the fill for webkit now",
   "controls",
   ".",
   "updateRangeFill",
   ".",
   "call",
   "(",
   "this",
   ",",
   "input",
   ")",
   ";",
   "// Improve support on touch devices",
   "RangeTouch",
   ".",
   "setup",
   "(",
   "input",
   ")",
   ";",
   "return",
   "input",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-67",
  "nl_tokens": [
   "Returns",
   "a",
   "domain",
   "for",
   "a",
   "given",
   "axis",
   ".",
   "This",
   "method",
   "forces",
   "the",
   "domain",
   "to",
   "include",
   "zero",
   "unless",
   "the",
   "domain",
   "is",
   "explicitly",
   "specified",
   "in",
   "props",
   "."
  ],
  "pl_tokens": [
   "function",
   "getDomainWithZero",
   "(",
   "props",
   ",",
   "axis",
   ")",
   "{",
   "const",
   "propsDomain",
   "=",
   "getDomainFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "if",
   "(",
   "propsDomain",
   ")",
   "{",
   "return",
   "propsDomain",
   ";",
   "}",
   "const",
   "dataset",
   "=",
   "Data",
   ".",
   "getData",
   "(",
   "props",
   ")",
   ";",
   "const",
   "y0Min",
   "=",
   "dataset",
   ".",
   "reduce",
   "(",
   "(",
   "<mask>",
   ",",
   "datum",
   ")",
   "=>",
   "(",
   "datum",
   ".",
   "_y0",
   "<",
   "min",
   "?",
   "datum",
   ".",
   "_y0",
   ":",
   "min",
   ")",
   ",",
   "Infinity",
   ")",
   ";",
   "const",
   "ensureZero",
   "=",
   "(",
   "domain",
   ")",
   "=>",
   "{",
   "if",
   "(",
   "axis",
   "===",
   "\"x\"",
   ")",
   "{",
   "return",
   "domain",
   ";",
   "}",
   "const",
   "defaultMin",
   "=",
   "y0Min",
   "!==",
   "Infinity",
   "?",
   "y0Min",
   ":",
   "0",
   ";",
   "const",
   "maxDomainProp",
   "=",
   "getMaxFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "minDomainProp",
   "=",
   "getMinFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "max",
   "=",
   "maxDomainProp",
   "!==",
   "undefined",
   "?",
   "maxDomainProp",
   ":",
   "Collection",
   ".",
   "getMaxValue",
   "(",
   "domain",
   ",",
   "defaultMin",
   ")",
   ";",
   "const",
   "min",
   "=",
   "minDomainProp",
   "!==",
   "undefined",
   "?",
   "minDomainProp",
   ":",
   "Collection",
   ".",
   "getMinValue",
   "(",
   "domain",
   ",",
   "defaultMin",
   ")",
   ";",
   "return",
   "getDomainFromMinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   ";",
   "const",
   "getDomainFunction",
   "=",
   "(",
   ")",
   "=>",
   "{",
   "return",
   "getDomainFromData",
   "(",
   "props",
   ",",
   "axis",
   ",",
   "dataset",
   ")",
   ";",
   "}",
   ";",
   "const",
   "formatDomainFunction",
   "=",
   "(",
   "domain",
   ")",
   "=>",
   "{",
   "return",
   "formatDomain",
   "(",
   "ensureZero",
   "(",
   "domain",
   ")",
   ",",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "}",
   ";",
   "return",
   "createDomainFunction",
   "(",
   "getDomainFunction",
   ",",
   "formatDomainFunction",
   ")",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-68",
  "nl_tokens": [
   "}}}"
  ],
  "pl_tokens": [
   "function",
   "CLIProgress",
   "(",
   "text",
   ",",
   "settings",
   ")",
   "{",
   "var",
   "progress",
   "=",
   "this",
   ";",
   "progress",
   ".",
   "settings",
   "=",
   "{",
   "text",
   ":",
   "'{{current}} / {{max}} [{{bar}}] {{percent}}%'",
   ",",
   "current",
   ":",
   "0",
   ",",
   "<mask>",
   ":",
   "100",
   ",",
   "stream",
   ":",
   "process",
   ".",
   "stderr",
   ",",
   "render",
   ":",
   "function",
   "(",
   "line",
   ")",
   "{",
   "progress",
   ".",
   "settings",
   ".",
   "stream",
   ".",
   "cursorTo",
   "(",
   "0",
   ")",
   ";",
   "progress",
   ".",
   "settings",
   ".",
   "stream",
   ".",
   "clearLine",
   "(",
   "1",
   ")",
   ";",
   "progress",
   ".",
   "settings",
   ".",
   "stream",
   ".",
   "write",
   "(",
   "line",
   ")",
   ";",
   "}",
   ",",
   "clear",
   ":",
   "function",
   "(",
   ")",
   "{",
   "progress",
   ".",
   "settings",
   ".",
   "stream",
   ".",
   "clearLine",
   "(",
   "0",
   ")",
   ";",
   "progress",
   ".",
   "settings",
   ".",
   "stream",
   ".",
   "cursorTo",
   "(",
   "0",
   ")",
   ";",
   "}",
   ",",
   "width",
   ":",
   "windowSize",
   ".",
   "width",
   ",",
   "completeChar",
   ":",
   "'='",
   ",",
   "incompleteChar",
   ":",
   "' '",
   ",",
   "percent",
   ":",
   "function",
   "(",
   ")",
   "{",
   "var",
   "pText",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   "/",
   "progress",
   ".",
   "settings",
   ".",
   "max",
   "*",
   "100",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "var",
   "strLen",
   "=",
   "stringLength",
   "(",
   "pText",
   ")",
   ";",
   "if",
   "(",
   "strLen",
   ">",
   "3",
   ")",
   "return",
   "pText",
   ";",
   "// Already over max length",
   "return",
   "padStart",
   "(",
   "pText",
   ",",
   "3",
   ",",
   "' '",
   ")",
   ";",
   "// Left pad with spaces",
   "}",
   ",",
   "throttle",
   ":",
   "50",
   ",",
   "throttleSync",
   ":",
   "false",
   ",",
   "startTime",
   ":",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ",",
   "etaFormat",
   ":",
   "'auto'",
   ",",
   "eta",
   ":",
   "function",
   "(",
   ")",
   "{",
   "var",
   "remaining",
   "=",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   ">=",
   "progress",
   ".",
   "settings",
   ".",
   "total",
   "?",
   "0",
   ":",
   "(",
   "Date",
   ".",
   "now",
   "(",
   ")",
   "-",
   "progress",
   ".",
   "settings",
   ".",
   "startTime",
   ")",
   "*",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "max",
   "/",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "remaining",
   ")",
   "||",
   "!",
   "isFinite",
   "(",
   "remaining",
   ")",
   ")",
   "remaining",
   "=",
   "0",
   ";",
   "// ETA formatting {{{",
   "switch",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "etaFormat",
   ")",
   "{",
   "case",
   "'auto'",
   ":",
   "var",
   "hour",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "60",
   "*",
   "60",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "(",
   "60",
   "*",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "var",
   "min",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "var",
   "sec",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "1000",
   ")",
   ")",
   ";",
   "if",
   "(",
   "hour",
   ">",
   "0",
   ")",
   "{",
   "return",
   "hour",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "min",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "sec",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "min",
   ">",
   "0",
   ")",
   "{",
   "return",
   "min",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "sec",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "(",
   "remaining",
   "/",
   "1000",
   ")",
   ".",
   "toFixed",
   "(",
   "1",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'H:M:s.S'",
   ":",
   "case",
   "'H:M:s'",
   ":",
   "var",
   "hour",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "60",
   "*",
   "60",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "(",
   "60",
   "*",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "var",
   "min",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "var",
   "sec",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "1000",
   ";",
   "var",
   "fraction",
   "=",
   "'.'",
   "+",
   "(",
   "remaining",
   "/",
   "1000",
   ")",
   ".",
   "toFixed",
   "(",
   "1",
   ")",
   ".",
   "substr",
   "(",
   "2",
   ")",
   ";",
   "return",
   "hour",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "min",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "sec",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   "+",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "etaFormat",
   ".",
   "endsWith",
   "(",
   "'.S'",
   ")",
   "?",
   "fraction",
   ":",
   "''",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'M:s.S'",
   ":",
   "case",
   "'M:s'",
   ":",
   "var",
   "min",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "(",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "var",
   "sec",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "remaining",
   "/",
   "(",
   "1000",
   ")",
   ")",
   ";",
   "remaining",
   "=",
   "remaining",
   "%",
   "1000",
   ";",
   "var",
   "fraction",
   "=",
   "'.'",
   "+",
   "(",
   "remaining",
   "/",
   "1000",
   ")",
   ".",
   "toFixed",
   "(",
   "1",
   ")",
   ".",
   "substr",
   "(",
   "2",
   ")",
   ";",
   "return",
   "min",
   "+",
   "':'",
   "+",
   "padStart",
   "(",
   "sec",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "2",
   ",",
   "'0'",
   ")",
   "+",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "etaFormat",
   ".",
   "endsWith",
   "(",
   "'.S'",
   ")",
   "?",
   "fraction",
   ":",
   "''",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'s'",
   ":",
   "case",
   "'s.S'",
   ":",
   "return",
   "(",
   "remaining",
   "/",
   "1000",
   ")",
   ".",
   "toFixed",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "etaFormat",
   ".",
   "endsWith",
   "(",
   "'.S'",
   ")",
   "?",
   "1",
   ":",
   "0",
   ")",
   ";",
   "}",
   "// }}}",
   "}",
   ",",
   "spinnerTheme",
   ":",
   "'dots'",
   ",",
   "spinnerFrame",
   ":",
   "0",
   ",",
   "spinner",
   ":",
   "function",
   "(",
   ")",
   "{",
   "var",
   "spinnerFrames",
   "=",
   "cliSpinners",
   "[",
   "progress",
   ".",
   "settings",
   ".",
   "spinnerTheme",
   "]",
   ";",
   "if",
   "(",
   "!",
   "spinnerFrames",
   ")",
   "throw",
   "new",
   "Error",
   "(",
   "'Spinner theme not found: \"'",
   "+",
   "progress",
   ".",
   "settings",
   ".",
   "spinnerTheme",
   "+",
   "'\"'",
   ")",
   ";",
   "if",
   "(",
   "++",
   "progress",
   ".",
   "settings",
   ".",
   "spinnerFrame",
   ">=",
   "spinnerFrames",
   ".",
   "frames",
   ".",
   "length",
   ")",
   "progress",
   ".",
   "settings",
   ".",
   "spinnerFrame",
   "=",
   "0",
   ";",
   "return",
   "spinnerFrames",
   ".",
   "frames",
   "[",
   "progress",
   ".",
   "settings",
   ".",
   "spinnerFrame",
   "]",
   ";",
   "}",
   ",",
   "}",
   ";",
   "// Map all color / style functions from chalk into the settings object (e.g. bold => chalk.bold closure) {{{",
   "Object",
   ".",
   "keys",
   "(",
   "colors",
   ".",
   "styles",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "style",
   ")",
   "{",
   "progress",
   ".",
   "settings",
   "[",
   "style",
   "]",
   "=",
   "function",
   "(",
   ")",
   "{",
   "return",
   "function",
   "(",
   "text",
   ",",
   "render",
   ")",
   "{",
   "return",
   "colors",
   "[",
   "style",
   "]",
   "(",
   "render",
   "(",
   "text",
   ")",
   ")",
   ";",
   "}",
   ";",
   "}",
   ";",
   "}",
   ")",
   ";",
   "// }}}",
   "/**\n\t* Return the output that will be sent to the output stream\n\t* return {string} The raw console-suitable output\n\t*/",
   "progress",
   ".",
   "format",
   "=",
   "function",
   "(",
   ")",
   "{",
   "var",
   "text",
   "=",
   "mustache",
   ".",
   "render",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "text",
   ",",
   "progress",
   ".",
   "settings",
   ")",
   ";",
   "// Rendering a bar? {{{",
   "if",
   "(",
   "text",
   ".",
   "indexOf",
   "(",
   "'[[BAR'",
   ")",
   ">",
   "-",
   "1",
   ")",
   "{",
   "var",
   "maxBarWidth",
   "=",
   "(",
   "windowSize",
   ".",
   "width",
   "||",
   "80",
   ")",
   "-",
   "stringLength",
   "(",
   "text",
   ")",
   ";",
   "if",
   "(",
   "!",
   "progress",
   ".",
   "settings",
   ".",
   "max",
   ")",
   "progress",
   ".",
   "settings",
   ".",
   "max",
   "=",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   ">",
   "0",
   "?",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   ":",
   "0",
   ";",
   "var",
   "barCompleteWidth",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   "/",
   "progress",
   ".",
   "settings",
   ".",
   "max",
   "*",
   "maxBarWidth",
   ")",
   ";",
   "if",
   "(",
   "barCompleteWidth",
   "==",
   "NaN",
   "||",
   "!",
   "barCompleteWidth",
   ")",
   "barCompleteWidth",
   "=",
   "0",
   ";",
   "var",
   "completeBits",
   "=",
   "Array",
   "(",
   "barCompleteWidth",
   ")",
   ".",
   "join",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "completeChar",
   ")",
   ";",
   "var",
   "incompleteBits",
   "=",
   "maxBarWidth",
   "-",
   "barCompleteWidth",
   ">",
   "0",
   "?",
   "Array",
   "(",
   "maxBarWidth",
   "-",
   "barCompleteWidth",
   ")",
   ".",
   "join",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "incompleteChar",
   ")",
   ":",
   "''",
   ";",
   "text",
   "=",
   "text",
   ".",
   "replace",
   "(",
   "/",
   "\\[\\[BAR\\]\\]",
   "/",
   "g",
   ",",
   "completeBits",
   "+",
   "incompleteBits",
   ")",
   ".",
   "replace",
   "(",
   "/",
   "\\[\\[BAR.complete\\]\\]",
   "/",
   "ig",
   ",",
   "completeBits",
   ")",
   ".",
   "replace",
   "(",
   "/",
   "\\[\\[BAR.incomplete\\]\\]",
   "/",
   "ig",
   ",",
   "incompleteBits",
   ")",
   "}",
   "// }}}",
   "return",
   "text",
   ";",
   "}",
   ";",
   "/**\n\t* Holder for the throttle timeout handle\n\t* This will be the setTimeout() response if we are throttling\n\t* @var {Object}\n\t*/",
   "progress",
   ".",
   "throttleHandle",
   ";",
   "/**\n\t* Update and re-render the progress bar\n\t* This is really just a shortcut for .set() + .render(progress.format())\n\t* @params {Object|number} Either set a number of properties or the 'current' value if passed a number\n\t* @return {Object} This object instance\n\t* @see set()\n\t*/",
   "progress",
   ".",
   "update",
   "=",
   "function",
   "(",
   "val",
   ")",
   "{",
   "progress",
   ".",
   "set",
   "(",
   "val",
   ")",
   ";",
   "if",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "throttle",
   "&&",
   "progress",
   ".",
   "settings",
   ".",
   "throttleSync",
   ")",
   "{",
   "// Employ sync throttling method (count from last update)",
   "if",
   "(",
   "!",
   "progress",
   ".",
   "lastUpdate",
   "||",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ">=",
   "progress",
   ".",
   "lastUpdate",
   "+",
   "progress",
   ".",
   "settings",
   ".",
   "throttle",
   ")",
   "{",
   "progress",
   ".",
   "updateNow",
   "(",
   ")",
   ";",
   "// Only allow redraw if we're within the update window",
   "}",
   "}",
   "else",
   "if",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "throttle",
   ")",
   "{",
   "// Employ async throttling method (setTimeout)",
   "if",
   "(",
   "!",
   "progress",
   ".",
   "throttleHandle",
   ")",
   "progress",
   ".",
   "throttleHandle",
   "=",
   "setTimeout",
   "(",
   "progress",
   ".",
   "updateNow",
   ",",
   "progress",
   ".",
   "settings",
   ".",
   "throttle",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// Not using throttle anyway",
   "progress",
   ".",
   "updateNow",
   "(",
   ")",
   ";",
   "}",
   "return",
   "progress",
   ";",
   "}",
   ";",
   "/**\n\t* The timestamp in milliseconds of the last update event\n\t* This is used when employing the synchronous throttling method\n\t* @var {date}\n\t*/",
   "progress",
   ".",
   "lastUpdate",
   ";",
   "/**\n\t* Actual updater\n\t* This is hidden behind the update throttler so its not called too many times in one cycle\n\t*/",
   "progress",
   ".",
   "updateNow",
   "=",
   "function",
   "(",
   ")",
   "{",
   "progress",
   ".",
   "lastUpdate",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ";",
   "progress",
   ".",
   "settings",
   ".",
   "render",
   "(",
   "progress",
   ".",
   "format",
   "(",
   ")",
   ")",
   ";",
   "clearTimeout",
   "(",
   "progress",
   ".",
   "throttleHandle",
   ")",
   ";",
   "progress",
   ".",
   "throttleHandle",
   "=",
   "null",
   ";",
   "}",
   ";",
   "/**\n\t* Remove the bar from the screen\n\t* @return {Object} This object instance\n\t*/",
   "progress",
   ".",
   "remove",
   "=",
   "function",
   "(",
   ")",
   "{",
   "clearTimeout",
   "(",
   "progress",
   ".",
   "throttleHandle",
   ")",
   ";",
   "// Release any throttled redraws that may be queued",
   "progress",
   ".",
   "throttleHandle",
   "=",
   "null",
   ";",
   "progress",
   ".",
   "settings",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "return",
   "progress",
   ";",
   "}",
   ";",
   "/**\n\t* Set one or more options or tokens\n\t* NOTE: Unlike .set() this function DOES NOT refresh the progress bar\n\t* @params {Object|number} Either set a number of properties or the 'current' value if passed a number\n\t* @return {Object} This object instance\n\t* @see set()\n\t*/",
   "progress",
   ".",
   "set",
   "=",
   "function",
   "(",
   "val",
   ")",
   "{",
   "if",
   "(",
   "!",
   "val",
   ")",
   "return",
   ";",
   "if",
   "(",
   "typeof",
   "val",
   "==",
   "'number'",
   ")",
   "{",
   "progress",
   ".",
   "settings",
   ".",
   "current",
   "=",
   "val",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "var",
   "k",
   "in",
   "val",
   ")",
   "{",
   "progress",
   ".",
   "settings",
   "[",
   "k",
   "]",
   "=",
   "val",
   "[",
   "k",
   "]",
   ";",
   "}",
   "if",
   "(",
   "val",
   ".",
   "text",
   ")",
   "{",
   "// Setting the formatting text?",
   "progress",
   ".",
   "settings",
   ".",
   "text",
   "=",
   "progress",
   ".",
   "settings",
   ".",
   "text",
   ".",
   "replace",
   "(",
   "/",
   "\\{\\{bar(.*?)\\}\\}",
   "/",
   "g",
   ",",
   "'[[BAR$1]]'",
   ")",
   ";",
   "// Remove mustache stuff as we have to calculate the width post-render",
   "mustache",
   ".",
   "parse",
   "(",
   "progress",
   ".",
   "settings",
   ".",
   "text",
   ")",
   ";",
   "}",
   "}",
   "return",
   "progress",
   ";",
   "}",
   ";",
   "// Load initial settings {{{",
   "if",
   "(",
   "typeof",
   "text",
   "==",
   "'string'",
   ")",
   "{",
   "progress",
   ".",
   "set",
   "(",
   "{",
   "text",
   ":",
   "text",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "progress",
   ".",
   "set",
   "(",
   "text",
   ")",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "settings",
   "==",
   "'object'",
   ")",
   "progress",
   ".",
   "set",
   "(",
   "settings",
   ")",
   ";",
   "// }}}",
   "}"
  ]
 },
 {
  "idx": "maxmin-69",
  "nl_tokens": [
   "Returns",
   "either",
   "the",
   "offsetWidth",
   "or",
   "the",
   "width",
   "of",
   "this",
   "element",
   "based",
   "on",
   "CSS",
   "width",
   "adjusted",
   "by",
   "padding",
   "or",
   "borders",
   "when",
   "needed",
   "to",
   "simulate",
   "offsetWidth",
   "when",
   "offsets",
   "aren",
   "t",
   "available",
   ".",
   "This",
   "may",
   "not",
   "work",
   "on",
   "display",
   ":",
   "none",
   "elements",
   "if",
   "a",
   "width",
   "has",
   "not",
   "been",
   "set",
   "using",
   "CSS",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "w",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "me",
   ".",
   "dom",
   ".",
   "offsetWidth",
   ",",
   "me",
   ".",
   "dom",
   ".",
   "clientWidth",
   ")",
   ";",
   "if",
   "(",
   "!",
   "w",
   ")",
   "{",
   "w",
   "=",
   "parseFloat",
   "(",
   "me",
   ".",
   "getStyle",
   "(",
   "WIDTH",
   ")",
   ")",
   "||",
   "0",
   ";",
   "if",
   "(",
   "!",
   "me",
   ".",
   "isBorderBox",
   "(",
   ")",
   ")",
   "{",
   "w",
   "+=",
   "me",
   ".",
   "getFrameWidth",
   "(",
   "'lr'",
   ")",
   ";",
   "}",
   "}",
   "return",
   "w",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-70",
  "nl_tokens": [
   "Zips",
   "N",
   "sets",
   "together",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "parts",
   "=",
   "Ext",
   ".",
   "partition",
   "(",
   "arguments",
   ",",
   "function",
   "(",
   "val",
   ")",
   "{",
   "return",
   "typeof",
   "val",
   "!=",
   "'function'",
   ";",
   "}",
   ")",
   ",",
   "arrs",
   "=",
   "parts",
   "[",
   "0",
   "]",
   ",",
   "fn",
   "=",
   "parts",
   "[",
   "1",
   "]",
   "[",
   "0",
   "]",
   ",",
   "len",
   "=",
   "Ext",
   ".",
   "<mask>",
   "(",
   "Ext",
   ".",
   "pluck",
   "(",
   "arrs",
   ",",
   "\"length\"",
   ")",
   ")",
   ",",
   "ret",
   "=",
   "[",
   "]",
   ",",
   "i",
   ",",
   "j",
   ",",
   "aLen",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ret",
   "[",
   "i",
   "]",
   "=",
   "[",
   "]",
   ";",
   "if",
   "(",
   "fn",
   ")",
   "{",
   "ret",
   "[",
   "i",
   "]",
   "=",
   "fn",
   ".",
   "apply",
   "(",
   "fn",
   ",",
   "Ext",
   ".",
   "pluck",
   "(",
   "arrs",
   ",",
   "i",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "j",
   "=",
   "0",
   ",",
   "aLen",
   "=",
   "arrs",
   ".",
   "length",
   ";",
   "j",
   "<",
   "aLen",
   ";",
   "j",
   "++",
   ")",
   "{",
   "ret",
   "[",
   "i",
   "]",
   ".",
   "push",
   "(",
   "arrs",
   "[",
   "j",
   "]",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "ret",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-71",
  "nl_tokens": [
   "<pagination",
   "home",
   "=",
   "#isNowHome",
   "position",
   "=",
   "top",
   "/",
   ">"
  ],
  "pl_tokens": [
   "function",
   "f",
   "(",
   "prex",
   ")",
   "{",
   "var",
   "templete",
   "=",
   "'<nav class=\"'",
   "+",
   "prex",
   "+",
   "'-navigation\" id=\"{{ids}}\">\\n\\t<ul class=\"pagination {{color}}\">\\n\\t\\t<li class=\"first\"><a ng-click=\"previous()\" >{{text.first}}</a></li>\\n\\t\\t<li class=\"previousPage disabled {{showPrevious}}\"><a ng-click=\"previous(showNumber)\">{{text.previous}} {{step}}</a></li>\\n\\t\\t<li class=\"previous {{showPrevious}}\"><a ng-click=\"previous(1)\">{{text.previous}}</a></li>\\n\\t\\t<li ng-repeat=\"val in arr\" class=\"{{shomMe($index)}}\"><a ng-href=\"{{hrefText(val)}}\" data-index=\"{{$index}}\">{{val}}</a></li>\\n\\t\\t<li class=\"next {{showPrevious}}\"><a ng-click=\"next(1)\">{{text.next}}</a></li>\\n\\t\\t<li class=\"nextPage {{showNext}}\"><a ng-click=\"next(step)\">{{text.next}} {{step}}</a></li>\\n\\t\\t<li class=\"last\"><a ng-click=\"next()\">{{text.last}}</a></li>\\n\\t</ul>\\n</nav>'",
   ";",
   "return",
   "{",
   "restrict",
   ":",
   "'E'",
   ",",
   "transclude",
   ":",
   "true",
   ",",
   "scope",
   ":",
   "{",
   "step",
   ":",
   "'@step'",
   ",",
   "<mask>",
   ":",
   "'@max'",
   ",",
   "text",
   ":",
   "'@text'",
   "}",
   ",",
   "link",
   ":",
   "function",
   "link",
   "(",
   "scope",
   ",",
   "elez",
   ",",
   "attrs",
   ",",
   "crtl",
   ")",
   "{",
   "scope",
   ".",
   "pagination",
   "=",
   "0",
   ";",
   "scope",
   ".",
   "step",
   "=",
   "5",
   ";",
   "scope",
   ".",
   "arr",
   "=",
   "[",
   "]",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "scope",
   ".",
   "max",
   ".",
   "length",
   "-",
   "1",
   ";",
   "i",
   ">=",
   "0",
   ";",
   "i",
   "--",
   ")",
   "{",
   "scope",
   ".",
   "arr",
   ".",
   "push",
   "(",
   "i",
   "+",
   "1",
   ")",
   ";",
   "}",
   "scope",
   ".",
   "arr",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "scope",
   ".",
   "previous",
   "=",
   "function",
   "(",
   "index",
   ")",
   "{",
   "if",
   "(",
   "angular",
   ".",
   "isNumber",
   "(",
   "index",
   ")",
   ")",
   "{",
   "scope",
   ".",
   "pagination",
   "-=",
   "index",
   ";",
   "}",
   "else",
   "{",
   "scope",
   ".",
   "pagination",
   "=",
   "0",
   ";",
   "}",
   "}",
   ";",
   "scope",
   ".",
   "next",
   "=",
   "function",
   "(",
   "index",
   ")",
   "{",
   "if",
   "(",
   "angular",
   ".",
   "isNumber",
   "(",
   "index",
   ")",
   ")",
   "{",
   "scope",
   ".",
   "pagination",
   "+=",
   "index",
   ";",
   "}",
   "else",
   "{",
   "scope",
   ".",
   "pagination",
   "=",
   "Number",
   "(",
   "attr",
   ".",
   "max",
   ")",
   "-",
   "1",
   "-",
   "scope",
   ".",
   "step",
   ";",
   "}",
   "}",
   ";",
   "scope",
   ".",
   "showMe",
   "=",
   "function",
   "(",
   ")",
   "{",
   "var",
   "index",
   "=",
   "arguments",
   ".",
   "length",
   "<=",
   "0",
   "||",
   "arguments",
   "[",
   "0",
   "]",
   "===",
   "undefined",
   "?",
   "0",
   ":",
   "arguments",
   "[",
   "0",
   "]",
   ";",
   "var",
   "max",
   "=",
   "scope",
   ".",
   "pagination",
   "+=",
   "scope",
   ".",
   "step",
   ";",
   "if",
   "(",
   "index",
   "<",
   "max",
   "&&",
   "scope",
   ".",
   "pagination",
   "<",
   "index",
   ")",
   "{",
   "return",
   "''",
   ";",
   "}",
   "else",
   "{",
   "return",
   "'all-hide'",
   ";",
   "}",
   "}",
   ";",
   "scope",
   ".",
   "hrefText",
   "=",
   "function",
   "(",
   ")",
   "{",
   "var",
   "val",
   "=",
   "arguments",
   ".",
   "length",
   "<=",
   "0",
   "||",
   "arguments",
   "[",
   "0",
   "]",
   "===",
   "undefined",
   "?",
   "0",
   ":",
   "arguments",
   "[",
   "0",
   "]",
   ";",
   "return",
   "attr",
   ".",
   "href",
   ".",
   "replace",
   "(",
   "':pages'",
   ",",
   "val",
   ")",
   ";",
   "}",
   ";",
   "}",
   ",",
   "templete",
   ":",
   "templete",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-72",
  "nl_tokens": [
   "Returns",
   "a",
   "domain",
   "from",
   "a",
   "dataset",
   "for",
   "a",
   "given",
   "axis"
  ],
  "pl_tokens": [
   "function",
   "getDomainFromData",
   "(",
   "props",
   ",",
   "axis",
   ",",
   "dataset",
   ")",
   "{",
   "dataset",
   "=",
   "dataset",
   "||",
   "Data",
   ".",
   "getData",
   "(",
   "props",
   ")",
   ";",
   "const",
   "{",
   "polar",
   ",",
   "startAngle",
   "=",
   "0",
   ",",
   "endAngle",
   "=",
   "360",
   "}",
   "=",
   "props",
   ";",
   "const",
   "minDomain",
   "=",
   "getMinFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "maxDomain",
   "=",
   "getMaxFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "if",
   "(",
   "dataset",
   ".",
   "length",
   "<",
   "1",
   ")",
   "{",
   "return",
   "minDomain",
   "!==",
   "undefined",
   "&&",
   "maxDomain",
   "!==",
   "undefined",
   "?",
   "getDomainFromMinMax",
   "(",
   "minDomain",
   ",",
   "maxDomain",
   ")",
   ":",
   "undefined",
   ";",
   "}",
   "const",
   "<mask>",
   "=",
   "minDomain",
   "!==",
   "undefined",
   "?",
   "minDomain",
   ":",
   "getExtremeFromData",
   "(",
   "dataset",
   ",",
   "axis",
   ",",
   "\"min\"",
   ")",
   ";",
   "const",
   "max",
   "=",
   "maxDomain",
   "!==",
   "undefined",
   "?",
   "maxDomain",
   ":",
   "getExtremeFromData",
   "(",
   "dataset",
   ",",
   "axis",
   ",",
   "\"max\"",
   ")",
   ";",
   "const",
   "domain",
   "=",
   "getDomainFromMinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "return",
   "polar",
   "&&",
   "axis",
   "===",
   "\"x\"",
   "&&",
   "Math",
   ".",
   "abs",
   "(",
   "startAngle",
   "-",
   "endAngle",
   ")",
   "===",
   "360",
   "?",
   "getSymmetricDomain",
   "(",
   "domain",
   ",",
   "getFlatData",
   "(",
   "dataset",
   ",",
   "axis",
   ")",
   ")",
   ":",
   "domain",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-73",
  "nl_tokens": [
   "CliGhCal",
   "Builds",
   "a",
   "GitHub",
   "Contributions",
   "like",
   "calendar",
   "using",
   "characters",
   "and",
   "ANSI",
   "styles",
   "."
  ],
  "pl_tokens": [
   "function",
   "CliGhCal",
   "(",
   "data",
   ",",
   "options",
   ")",
   "{",
   "var",
   "CLI_COLUMNS",
   "=",
   "cliSize",
   "(",
   ")",
   ".",
   "columns",
   ";",
   "var",
   "cal",
   "=",
   "{",
   "total",
   ":",
   "0",
   ",",
   "days",
   ":",
   "{",
   "}",
   ",",
   "cStreak",
   ":",
   "0",
   ",",
   "lStreak",
   ":",
   "0",
   ",",
   "<mask>",
   ":",
   "0",
   ",",
   "longestStreak",
   ":",
   "{",
   "}",
   ",",
   "currentStreak",
   ":",
   "{",
   "}",
   "}",
   "if",
   "(",
   "options",
   ".",
   "noCrop",
   "===",
   "undefined",
   ")",
   "{",
   "options",
   ".",
   "noCrop",
   "=",
   "!",
   "!",
   "options",
   ".",
   "raw",
   "||",
   "!",
   "process",
   ".",
   "stdout",
   ".",
   "isTTY",
   ";",
   "}",
   "// Convert input data dates into Moment",
   "data",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "c",
   ")",
   "{",
   "c",
   "[",
   "0",
   "]",
   "=",
   "Moment",
   "(",
   "c",
   "[",
   "0",
   "]",
   ")",
   ";",
   "c",
   "[",
   "1",
   "]",
   "=",
   "Deffy",
   "(",
   "c",
   "[",
   "1",
   "]",
   ",",
   "0",
   ")",
   ";",
   "// Sum the total",
   "cal",
   ".",
   "total",
   "+=",
   "c",
   "[",
   "1",
   "]",
   ";",
   "// Check the max value",
   "if",
   "(",
   "c",
   "[",
   "1",
   "]",
   ">",
   "cal",
   ".",
   "max",
   ")",
   "{",
   "cal",
   ".",
   "max",
   "=",
   "c",
   "[",
   "1",
   "]",
   ";",
   "}",
   "// Check the current streak and the longest streak",
   "if",
   "(",
   "c",
   "[",
   "1",
   "]",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "cal",
   ".",
   "cStreak",
   "===",
   "0",
   ")",
   "{",
   "cal",
   ".",
   "currentStreak",
   ".",
   "start",
   "=",
   "c",
   "[",
   "0",
   "]",
   ";",
   "}",
   "if",
   "(",
   "++",
   "cal",
   ".",
   "cStreak",
   ">",
   "cal",
   ".",
   "lStreak",
   ")",
   "{",
   "cal",
   ".",
   "lStreak",
   "=",
   "cal",
   ".",
   "cStreak",
   ";",
   "cal",
   ".",
   "longestStreak",
   ".",
   "start",
   "=",
   "cal",
   ".",
   "currentStreak",
   ".",
   "start",
   ";",
   "cal",
   ".",
   "longestStreak",
   ".",
   "end",
   "=",
   "c",
   "[",
   "0",
   "]",
   ";",
   "}",
   "}",
   "else",
   "{",
   "cal",
   ".",
   "cStreak",
   "=",
   "0",
   ";",
   "}",
   "}",
   ")",
   ";",
   "var",
   "levels",
   "=",
   "cal",
   ".",
   "max",
   "/",
   "(",
   "LEVELS",
   ".",
   "length",
   "*",
   "2",
   ")",
   ",",
   "cLevel",
   "=",
   "0",
   ";",
   "data",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "c",
   ")",
   "{",
   "cal",
   ".",
   "days",
   "[",
   "c",
   "[",
   "0",
   "]",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   "]",
   "=",
   "{",
   "c",
   ":",
   "c",
   "[",
   "1",
   "]",
   ",",
   "level",
   ":",
   "!",
   "levels",
   "?",
   "0",
   ":",
   "(",
   "cLevel",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "c",
   "[",
   "1",
   "]",
   "/",
   "levels",
   ")",
   ")",
   ">=",
   "4",
   "?",
   "4",
   ":",
   "!",
   "cLevel",
   "&&",
   "c",
   "[",
   "1",
   "]",
   ">",
   "0",
   "?",
   "1",
   ":",
   "cLevel",
   "}",
   ";",
   "}",
   ")",
   ";",
   "options",
   ".",
   "firstDay",
   "=",
   "\"Sun\"",
   ";",
   "if",
   "(",
   "data",
   ".",
   "length",
   ")",
   "{",
   "options",
   ".",
   "start",
   "=",
   "Deffy",
   "(",
   "options",
   ".",
   "start",
   ",",
   "data",
   "[",
   "0",
   "]",
   "[",
   "0",
   "]",
   ",",
   "true",
   ")",
   ";",
   "options",
   ".",
   "end",
   "=",
   "Deffy",
   "(",
   "options",
   ".",
   "end",
   ",",
   "data",
   ".",
   "slice",
   "(",
   "-",
   "1",
   ")",
   "[",
   "0",
   "]",
   "[",
   "0",
   "]",
   ",",
   "true",
   ")",
   ";",
   "}",
   "else",
   "{",
   "options",
   ".",
   "start",
   "=",
   "Deffy",
   "(",
   "options",
   ".",
   "start",
   ",",
   "Moment",
   "(",
   ")",
   ".",
   "subtract",
   "(",
   "1",
   ",",
   "\"years\"",
   ")",
   ")",
   ";",
   "options",
   ".",
   "end",
   "=",
   "Deffy",
   "(",
   "options",
   ".",
   "end",
   ",",
   "Moment",
   "(",
   ")",
   ")",
   ";",
   "}",
   "var",
   "cropped",
   "=",
   "false",
   ";",
   "if",
   "(",
   "!",
   "options",
   ".",
   "noCrop",
   ")",
   "{",
   "var",
   "weeks",
   "=",
   "options",
   ".",
   "end",
   ".",
   "diff",
   "(",
   "options",
   ".",
   "start",
   ",",
   "\"weeks\"",
   ")",
   ";",
   "var",
   "diff",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "CLI_COLUMNS",
   "-",
   "(",
   "weeks",
   "*",
   "2",
   "+",
   "11",
   ")",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "diff",
   "<",
   "0",
   ")",
   "{",
   "cropped",
   "=",
   "true",
   ";",
   "options",
   ".",
   "start",
   ".",
   "add",
   "(",
   "-",
   "(",
   "diff",
   "+",
   "1",
   ")",
   "/",
   "2",
   ",",
   "\"weeks\"",
   ")",
   ";",
   "}",
   "// columns",
   "// [DAY . . . . . . ]",
   "// ^^^^  ^^",
   "// 4     2 / week   ^ 1",
   "//",
   "}",
   "var",
   "year",
   "=",
   "[",
   "]",
   ",",
   "months",
   "=",
   "new",
   "Array",
   "(",
   "52",
   ")",
   "// Stores the months depending on their first week",
   ",",
   "cWeek",
   "=",
   "[",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   "]",
   ",",
   "monthHack",
   "=",
   "\"MM\"",
   ",",
   "sDay",
   "=",
   "\"\"",
   ",",
   "cDayObj",
   "=",
   "null",
   ",",
   "strYear",
   "=",
   "\"\"",
   ",",
   "strMonths",
   "=",
   "\"\"",
   ",",
   "w",
   "=",
   "0",
   ",",
   "d",
   "=",
   "0",
   ",",
   "when",
   "=",
   "options",
   ".",
   "when",
   "||",
   "\"the last year\"",
   ",",
   "mDay",
   "=",
   "null",
   ",",
   "dataClone",
   "=",
   "{",
   "start",
   ":",
   "Moment",
   "(",
   "options",
   ".",
   "start",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ",",
   "DATE_FORMAT",
   ")",
   ",",
   "end",
   ":",
   "Moment",
   "(",
   "options",
   ".",
   "end",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ",",
   "DATE_FORMAT",
   ")",
   "}",
   ";",
   "dataClone",
   ".",
   "s",
   "=",
   "options",
   ".",
   "start",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ";",
   "dataClone",
   ".",
   "e",
   "=",
   "options",
   ".",
   "end",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ";",
   "function",
   "iterateDays",
   "(",
   "callback",
   ")",
   "{",
   "var",
   "start",
   "=",
   "dataClone",
   ".",
   "start",
   ",",
   "end",
   "=",
   "dataClone",
   ".",
   "end",
   ",",
   "tomrrow",
   "=",
   "Moment",
   "(",
   "end",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ",",
   "DATE_FORMAT",
   ")",
   ".",
   "add",
   "(",
   "1",
   ",",
   "\"days\"",
   ")",
   ",",
   "endStr",
   "=",
   "tomrrow",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ",",
   "cDay",
   "=",
   "null",
   ";",
   "while",
   "(",
   "start",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   "!==",
   "endStr",
   ")",
   "{",
   "cDay",
   "=",
   "start",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   ";",
   "callback",
   "(",
   "cDay",
   ",",
   "start",
   ")",
   ";",
   "start",
   ".",
   "add",
   "(",
   "1",
   ",",
   "\"days\"",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "Moment",
   "(",
   ")",
   ".",
   "subtract",
   "(",
   "1",
   ",",
   "\"years\"",
   ")",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   "!==",
   "dataClone",
   ".",
   "s",
   "||",
   "Moment",
   "(",
   ")",
   ".",
   "format",
   "(",
   "DATE_FORMAT",
   ")",
   "!==",
   "dataClone",
   ".",
   "e",
   ")",
   "{",
   "when",
   "=",
   "[",
   "Couleurs",
   ".",
   "bold",
   "(",
   "dataClone",
   ".",
   "s",
   ")",
   ",",
   "Couleurs",
   ".",
   "bold",
   "(",
   "dataClone",
   ".",
   "e",
   ")",
   "]",
   ".",
   "join",
   "(",
   "\" \u2013 \");",
   "",
   "",
   "}",
   "iterateDays",
   "(",
   "function",
   "(",
   "cDay",
   ",",
   "mDay",
   ")",
   "{",
   "sDay",
   "=",
   "mDay",
   ".",
   "format",
   "(",
   "\"ddd\"",
   ")",
   ";",
   "cDayObj",
   "=",
   "cal",
   ".",
   "days",
   "[",
   "cDay",
   "]",
   ";",
   "if",
   "(",
   "!",
   "cDayObj",
   ")",
   "{",
   "cDayObj",
   "=",
   "{",
   "level",
   ":",
   "0",
   "}",
   ";",
   "}",
   "if",
   "(",
   "sDay",
   "===",
   "options",
   ".",
   "firstDay",
   "&&",
   "Object",
   ".",
   "keys",
   "(",
   "cWeek",
   ")",
   ".",
   "length",
   ")",
   "{",
   "year",
   ".",
   "push",
   "(",
   "cWeek",
   ")",
   ";",
   "cWeek",
   "=",
   "[",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   ",",
   "\" \"",
   "]",
   ";",
   "}",
   "// Store the new month this week",
   "if",
   "(",
   "mDay",
   ".",
   "format",
   "(",
   "\"D\"",
   ")",
   "===",
   "\"1\"",
   ")",
   "{",
   "months",
   "[",
   "year",
   ".",
   "length",
   "]",
   "=",
   "mDay",
   ".",
   "format",
   "(",
   "\"MMM\"",
   ")",
   ";",
   "}",
   "cWeek",
   "[",
   "DAYS",
   ".",
   "indexOf",
   "(",
   "sDay",
   ")",
   "]",
   "=",
   "LEVELS",
   "[",
   "cDayObj",
   ".",
   "level",
   "]",
   ";",
   "}",
   ")",
   ";",
   "if",
   "(",
   "cWeek",
   ".",
   "length",
   ")",
   "{",
   "year",
   ".",
   "push",
   "(",
   "cWeek",
   ")",
   ";",
   "}",
   "for",
   "(",
   "d",
   "=",
   "0",
   ";",
   "d",
   "<",
   "7",
   ";",
   "++",
   "d",
   ")",
   "{",
   "for",
   "(",
   "w",
   "=",
   "0",
   ";",
   "w",
   "<",
   "year",
   ".",
   "length",
   ";",
   "++",
   "w",
   ")",
   "{",
   "strYear",
   "+=",
   "\" \"",
   "+",
   "year",
   "[",
   "w",
   "]",
   "[",
   "d",
   "]",
   ";",
   "}",
   "strYear",
   "+=",
   "\"\\n\"",
   ";",
   "}",
   "// Add day names",
   "var",
   "firstDayIndex",
   "=",
   "DAYS",
   ".",
   "indexOf",
   "(",
   "options",
   ".",
   "firstDay",
   ")",
   ";",
   "strYear",
   "=",
   "strYear",
   ".",
   "split",
   "(",
   "\"\\n\"",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "c",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "i",
   ">",
   "6",
   ")",
   "{",
   "return",
   ";",
   "}",
   "return",
   "DAYS",
   "[",
   "(",
   "i",
   "+",
   "firstDayIndex",
   ")",
   "%",
   "DAYS",
   ".",
   "length",
   "]",
   "+",
   "c",
   ";",
   "}",
   ")",
   ".",
   "join",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "// Months label",
   "monthHack",
   "=",
   "\"MMMM\"",
   ";",
   "//Left padding",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "months",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "// The length of strMonths should always be 2*(i+1) (at the i-th column)",
   "if",
   "(",
   "!",
   "months",
   "[",
   "i",
   "]",
   ")",
   "{",
   "strMonths",
   "+=",
   "new",
   "Array",
   "(",
   "2",
   "*",
   "(",
   "i",
   "+",
   "1",
   ")",
   "-",
   "strMonths",
   ".",
   "length",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "\" \"",
   ")",
   ";",
   "}",
   "else",
   "{",
   "strMonths",
   "+=",
   "months",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "strYear",
   "=",
   "monthHack",
   "+",
   "strMonths",
   "+",
   "\"\\n\"",
   "+",
   "strYear",
   ";",
   "if",
   "(",
   "CLI_COLUMNS",
   ">",
   "45",
   ")",
   "{",
   "strYear",
   "+=",
   "(",
   "cropped",
   "?",
   "\" * * * \"",
   ":",
   "new",
   "Array",
   "(",
   "5",
   "+",
   "2",
   "*",
   "Math",
   ".",
   "ceil",
   "(",
   "365",
   "/",
   "7",
   ")",
   ")",
   ".",
   "join",
   "(",
   "\"-\"",
   ")",
   ")",
   "+",
   "\"\\n\"",
   "+",
   "\"Commits in \"",
   "+",
   "when",
   "+",
   "\": \"",
   "+",
   "cal",
   ".",
   "total",
   "+",
   "(",
   "cropped",
   "?",
   "\"\\n\"",
   ":",
   "\" | \"",
   ")",
   "+",
   "\"Longest Streak: \"",
   "+",
   "cal",
   ".",
   "lStreak",
   "+",
   "\" days\"",
   "+",
   "(",
   "cropped",
   "?",
   "\"\\n\"",
   ":",
   "\" | \"",
   ")",
   "+",
   "\"Current Streak: \"",
   "+",
   "cal",
   ".",
   "cStreak",
   "+",
   "\" days\"",
   "+",
   "(",
   "cropped",
   "?",
   "\"\\n\"",
   ":",
   "\" | \"",
   ")",
   "+",
   "\"Max a day: \"",
   "+",
   "cal",
   ".",
   "max",
   ";",
   "}",
   "strYear",
   "=",
   "CliBox",
   "(",
   "{",
   "w",
   ":",
   "10",
   ",",
   "h",
   ":",
   "10",
   ",",
   "marks",
   ":",
   "{",
   "nw",
   ":",
   "\"\u2554\"",
   ",",
   "n",
   ":",
   "\"\u2550\"",
   ",",
   "ne",
   ":",
   "\"\u2557\"",
   ",",
   "e",
   ":",
   "\"\u2551\"",
   ",",
   "se",
   ":",
   "\"\u255d\"",
   ",",
   "s",
   ":",
   "\"\u2550\"",
   ",",
   "sw",
   ":",
   "\"\u255a\"",
   ",",
   "w",
   ":",
   "\"\u2551\"",
   ",",
   "b",
   ":",
   "\" \"",
   "}",
   "}",
   ",",
   "{",
   "text",
   ":",
   "strYear",
   ",",
   "stretch",
   ":",
   "true",
   ",",
   "hAlign",
   ":",
   "\"left\"",
   "}",
   ")",
   ";",
   "strYear",
   "=",
   "AnsiParser",
   ".",
   "removeAnsi",
   "(",
   "strYear",
   ")",
   ";",
   "strYear",
   "=",
   "strYear",
   ".",
   "replace",
   "(",
   "monthHack",
   ",",
   "new",
   "Array",
   "(",
   "monthHack",
   ".",
   "length",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "\" \"",
   ")",
   ")",
   ";",
   "if",
   "(",
   "options",
   ".",
   "theme",
   ")",
   "{",
   "strYear",
   "=",
   "GitStatsColors",
   "(",
   "strYear",
   ",",
   "options",
   ".",
   "theme",
   ")",
   ";",
   "}",
   "if",
   "(",
   "options",
   ".",
   "raw",
   ")",
   "{",
   "cal",
   ".",
   "data",
   "=",
   "data",
   ";",
   "cal",
   ".",
   "theme",
   "=",
   "GitStatsColors",
   "(",
   "options",
   ".",
   "theme",
   ")",
   ";",
   "cal",
   ".",
   "start",
   "=",
   "options",
   ".",
   "start",
   ".",
   "toDate",
   "(",
   ")",
   ";",
   "cal",
   ".",
   "end",
   "=",
   "options",
   ".",
   "end",
   ".",
   "toDate",
   "(",
   ")",
   ";",
   "var",
   "firstDate",
   "=",
   "options",
   ".",
   "start",
   ".",
   "clone",
   "(",
   ")",
   ";",
   "cal",
   ".",
   "levels",
   "=",
   "year",
   ".",
   "map",
   "(",
   "week",
   "=>",
   "{",
   "return",
   "week",
   ".",
   "map",
   "(",
   "c",
   "=>",
   "{",
   "let",
   "lev",
   "=",
   "LEVELS",
   ".",
   "indexOf",
   "(",
   "c",
   ")",
   ";",
   "let",
   "obj",
   "=",
   "{",
   "level",
   ":",
   "lev",
   ",",
   "date",
   ":",
   "firstDate",
   ".",
   "toDate",
   ",",
   "month",
   ":",
   "firstDate",
   ".",
   "format",
   "(",
   "\"MMM\"",
   ")",
   "}",
   ";",
   "if",
   "(",
   "lev",
   "!==",
   "-",
   "1",
   ")",
   "{",
   "firstDate",
   ".",
   "add",
   "(",
   "1",
   ",",
   "\"day\"",
   ")",
   "}",
   "return",
   "obj",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// Streaks",
   "cal",
   ".",
   "currentStreak",
   ".",
   "end",
   "=",
   "Moment",
   "(",
   ")",
   ";",
   "cal",
   ".",
   "longestStreak",
   ".",
   "end",
   "=",
   "cal",
   ".",
   "longestStreak",
   ".",
   "end",
   "||",
   "cal",
   ".",
   "currentStreak",
   ".",
   "end",
   ";",
   "return",
   "cal",
   ";",
   "}",
   "return",
   "strYear",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-74",
  "nl_tokens": [
   "/",
   "//////////",
   "Property",
   "list"
  ],
  "pl_tokens": [
   "function",
   "appendPropertyTRs",
   "(",
   "parent",
   ",",
   "plist",
   ",",
   "inverse",
   ",",
   "predicateFilter",
   ")",
   "{",
   "// UI.log.info('@appendPropertyTRs, 'this' is %s, dom is %s, '+ // Gives 'can't access dead object'",
   "//                   'thisOutline.document is %s', this, dom.location, thisOutline.document.location);",
   "// UI.log.info('@appendPropertyTRs, dom is now ' + this.document.location);",
   "// UI.log.info('@appendPropertyTRs, dom is now ' + thisOutline.document.location);",
   "UI",
   ".",
   "log",
   ".",
   "debug",
   "(",
   "'Property list length = '",
   "+",
   "plist",
   ".",
   "length",
   ")",
   "if",
   "(",
   "plist",
   ".",
   "length",
   "===",
   "0",
   ")",
   "return",
   "''",
   "var",
   "sel",
   ",",
   "j",
   ",",
   "k",
   "if",
   "(",
   "inverse",
   ")",
   "{",
   "sel",
   "=",
   "function",
   "(",
   "x",
   ")",
   "{",
   "return",
   "x",
   ".",
   "subject",
   "}",
   "plist",
   "=",
   "plist",
   ".",
   "sort",
   "(",
   "UI",
   ".",
   "utils",
   ".",
   "RDFComparePredicateSubject",
   ")",
   "}",
   "else",
   "{",
   "sel",
   "=",
   "function",
   "(",
   "x",
   ")",
   "{",
   "return",
   "x",
   ".",
   "object",
   "}",
   "plist",
   "=",
   "plist",
   ".",
   "sort",
   "(",
   "UI",
   ".",
   "utils",
   ".",
   "RDFComparePredicateObject",
   ")",
   "}",
   "var",
   "<mask>",
   "=",
   "plist",
   ".",
   "length",
   "for",
   "(",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "max",
   ";",
   "j",
   "++",
   ")",
   "{",
   "// squishing together equivalent properties I think",
   "var",
   "s",
   "=",
   "plist",
   "[",
   "j",
   "]",
   "//      if (s.object == parentSubject) continue; // that we knew",
   "// Avoid predicates from other panes",
   "if",
   "(",
   "predicateFilter",
   "&&",
   "!",
   "predicateFilter",
   "(",
   "s",
   ".",
   "predicate",
   ",",
   "inverse",
   ")",
   ")",
   "continue",
   "var",
   "tr",
   "=",
   "propertyTR",
   "(",
   "dom",
   ",",
   "s",
   ",",
   "inverse",
   ")",
   "parent",
   ".",
   "appendChild",
   "(",
   "tr",
   ")",
   "var",
   "predicateTD",
   "=",
   "tr",
   ".",
   "firstChild",
   "// we need to kludge the rowspan later",
   "var",
   "defaultpropview",
   "=",
   "views",
   ".",
   "defaults",
   "[",
   "s",
   ".",
   "predicate",
   ".",
   "uri",
   "]",
   "//   LANGUAGE PREFERENCES WAS AVAILABLE WITH FF EXTENSION - get from elsewhere?",
   "var",
   "dups",
   "=",
   "0",
   "// How many rows have the same predicate, -1?",
   "var",
   "langTagged",
   "=",
   "0",
   "// how many objects have language tags?",
   "var",
   "myLang",
   "=",
   "0",
   "// Is there one I like?",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "(",
   "k",
   "+",
   "j",
   "<",
   "max",
   ")",
   "&&",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "k",
   "]",
   ".",
   "predicate",
   ".",
   "sameTerm",
   "(",
   "s",
   ".",
   "predicate",
   ")",
   ")",
   ";",
   "k",
   "++",
   ")",
   "{",
   "if",
   "(",
   "k",
   ">",
   "0",
   "&&",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "k",
   "]",
   ")",
   ".",
   "sameTerm",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "k",
   "-",
   "1",
   "]",
   ")",
   ")",
   ")",
   ")",
   "dups",
   "++",
   "if",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "k",
   "]",
   ")",
   ".",
   "lang",
   "&&",
   "outline",
   ".",
   "labeller",
   ".",
   "LanguagePreference",
   ")",
   "{",
   "langTagged",
   "+=",
   "1",
   "if",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "k",
   "]",
   ")",
   ".",
   "lang",
   ".",
   "indexOf",
   "(",
   "outline",
   ".",
   "labeller",
   ".",
   "LanguagePreference",
   ")",
   ">=",
   "0",
   ")",
   "myLang",
   "++",
   "}",
   "}",
   "/* Display only the one in the preferred language\n          ONLY in the case (currently) when all the values are tagged.\n          Then we treat them as alternatives. */",
   "if",
   "(",
   "myLang",
   ">",
   "0",
   "&&",
   "langTagged",
   "===",
   "dups",
   "+",
   "1",
   ")",
   "{",
   "for",
   "(",
   "let",
   "k",
   "=",
   "j",
   ";",
   "k",
   "<=",
   "j",
   "+",
   "dups",
   ";",
   "k",
   "++",
   ")",
   "{",
   "if",
   "(",
   "outline",
   ".",
   "labeller",
   ".",
   "LanguagePreference",
   "&&",
   "sel",
   "(",
   "plist",
   "[",
   "k",
   "]",
   ")",
   ".",
   "lang",
   ".",
   "indexOf",
   "(",
   "outline",
   ".",
   "labeller",
   ".",
   "LanguagePreference",
   ")",
   ">=",
   "0",
   ")",
   "{",
   "tr",
   ".",
   "appendChild",
   "(",
   "thisOutline",
   ".",
   "outlineObjectTD",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "k",
   "]",
   ")",
   ",",
   "defaultpropview",
   ",",
   "undefined",
   ",",
   "s",
   ")",
   ")",
   "break",
   "}",
   "}",
   "j",
   "+=",
   "dups",
   "// extra push",
   "continue",
   "}",
   "tr",
   ".",
   "appendChild",
   "(",
   "thisOutline",
   ".",
   "outlineObjectTD",
   "(",
   "sel",
   "(",
   "s",
   ")",
   ",",
   "defaultpropview",
   ",",
   "undefined",
   ",",
   "s",
   ")",
   ")",
   "/* Note: showNobj shows between n to 2n objects.\n         * This is to prevent the case where you have a long list of objects\n         * shown, and dangling at the end is '1 more' (which is easily ignored)\n         * Therefore more objects are shown than hidden.\n         */",
   "tr",
   ".",
   "showNobj",
   "=",
   "function",
   "(",
   "n",
   ")",
   "{",
   "var",
   "predDups",
   "=",
   "k",
   "-",
   "dups",
   "var",
   "show",
   "=",
   "(",
   "(",
   "2",
   "*",
   "n",
   ")",
   "<",
   "predDups",
   ")",
   "?",
   "n",
   ":",
   "predDups",
   "var",
   "showLaterArray",
   "=",
   "[",
   "]",
   "if",
   "(",
   "predDups",
   "!==",
   "1",
   ")",
   "{",
   "predicateTD",
   ".",
   "setAttribute",
   "(",
   "'rowspan'",
   ",",
   "(",
   "show",
   "===",
   "predDups",
   ")",
   "?",
   "predDups",
   ":",
   "n",
   "+",
   "1",
   ")",
   "var",
   "l",
   "if",
   "(",
   "(",
   "show",
   "<",
   "predDups",
   ")",
   "&&",
   "(",
   "show",
   "===",
   "1",
   ")",
   ")",
   "{",
   "// what case is this...",
   "predicateTD",
   ".",
   "setAttribute",
   "(",
   "'rowspan'",
   ",",
   "2",
   ")",
   "}",
   "var",
   "displayed",
   "=",
   "0",
   "// The number of cells generated-1,",
   "// all duplicate thing removed",
   "for",
   "(",
   "l",
   "=",
   "1",
   ";",
   "l",
   "<",
   "k",
   ";",
   "l",
   "++",
   ")",
   "{",
   "// This detects the same things",
   "if",
   "(",
   "!",
   "kb",
   ".",
   "canon",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "l",
   "]",
   ")",
   ")",
   ".",
   "sameTerm",
   "(",
   "kb",
   ".",
   "canon",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "l",
   "-",
   "1",
   "]",
   ")",
   ")",
   ")",
   ")",
   "{",
   "displayed",
   "++",
   "s",
   "=",
   "plist",
   "[",
   "j",
   "+",
   "l",
   "]",
   "defaultpropview",
   "=",
   "views",
   ".",
   "defaults",
   "[",
   "s",
   ".",
   "predicate",
   ".",
   "uri",
   "]",
   "var",
   "trObj",
   "=",
   "dom",
   ".",
   "createElement",
   "(",
   "'tr'",
   ")",
   "trObj",
   ".",
   "style",
   ".",
   "colspan",
   "=",
   "'1'",
   "trObj",
   ".",
   "appendChild",
   "(",
   "thisOutline",
   ".",
   "outlineObjectTD",
   "(",
   "sel",
   "(",
   "plist",
   "[",
   "j",
   "+",
   "l",
   "]",
   ")",
   ",",
   "defaultpropview",
   ",",
   "undefined",
   ",",
   "s",
   ")",
   ")",
   "trObj",
   ".",
   "AJAR_statement",
   "=",
   "s",
   "trObj",
   ".",
   "AJAR_inverse",
   "=",
   "inverse",
   "parent",
   ".",
   "appendChild",
   "(",
   "trObj",
   ")",
   "if",
   "(",
   "displayed",
   ">=",
   "show",
   ")",
   "{",
   "trObj",
   ".",
   "style",
   ".",
   "display",
   "=",
   "'none'",
   "showLaterArray",
   ".",
   "push",
   "(",
   "trObj",
   ")",
   "}",
   "}",
   "else",
   "{",
   "// ToDo: show all the data sources of this statement",
   "UI",
   ".",
   "log",
   ".",
   "info",
   "(",
   "'there are duplicates here: %s'",
   ",",
   "plist",
   "[",
   "j",
   "+",
   "l",
   "-",
   "1",
   "]",
   ")",
   "}",
   "}",
   "// @@a quick fix on the messing problem.",
   "if",
   "(",
   "show",
   "===",
   "predDups",
   ")",
   "{",
   "predicateTD",
   ".",
   "setAttribute",
   "(",
   "'rowspan'",
   ",",
   "displayed",
   "+",
   "1",
   ")",
   "}",
   "}",
   "// end of if (predDups!==1)",
   "if",
   "(",
   "show",
   "<",
   "predDups",
   ")",
   "{",
   "// Add the x more <TR> here",
   "var",
   "moreTR",
   "=",
   "dom",
   ".",
   "createElement",
   "(",
   "'tr'",
   ")",
   "var",
   "moreTD",
   "=",
   "moreTR",
   ".",
   "appendChild",
   "(",
   "dom",
   ".",
   "createElement",
   "(",
   "'td'",
   ")",
   ")",
   "moreTD",
   ".",
   "setAttribute",
   "(",
   "'style'",
   ",",
   "'margin: 0.2em; border: none; padding: 0; vertical-align: top;'",
   ")",
   "moreTD",
   ".",
   "setAttribute",
   "(",
   "'notSelectable'",
   ",",
   "'false'",
   ")",
   "if",
   "(",
   "predDups",
   ">",
   "n",
   ")",
   "{",
   "// what is this for??",
   "var",
   "small",
   "=",
   "dom",
   ".",
   "createElement",
   "(",
   "'a'",
   ")",
   "moreTD",
   ".",
   "appendChild",
   "(",
   "small",
   ")",
   "var",
   "predToggle",
   "=",
   "(",
   "function",
   "(",
   "f",
   ")",
   "{",
   "return",
   "f",
   "(",
   "predicateTD",
   ",",
   "k",
   ",",
   "dups",
   ",",
   "n",
   ")",
   "}",
   ")",
   "(",
   "function",
   "(",
   "predicateTD",
   ",",
   "k",
   ",",
   "dups",
   ",",
   "n",
   ")",
   "{",
   "return",
   "function",
   "(",
   "display",
   ")",
   "{",
   "small",
   ".",
   "innerHTML",
   "=",
   "''",
   "if",
   "(",
   "display",
   "===",
   "'none'",
   ")",
   "{",
   "small",
   ".",
   "appendChild",
   "(",
   "UI",
   ".",
   "utils",
   ".",
   "AJARImage",
   "(",
   "UI",
   ".",
   "icons",
   ".",
   "originalIconBase",
   "+",
   "'tbl-more-trans.png'",
   ",",
   "'more'",
   ",",
   "'See all'",
   ",",
   "dom",
   ")",
   ")",
   "small",
   ".",
   "appendChild",
   "(",
   "dom",
   ".",
   "createTextNode",
   "(",
   "(",
   "predDups",
   "-",
   "n",
   ")",
   "+",
   "' more...'",
   ")",
   ")",
   "predicateTD",
   ".",
   "setAttribute",
   "(",
   "'rowspan'",
   ",",
   "n",
   "+",
   "1",
   ")",
   "}",
   "else",
   "{",
   "small",
   ".",
   "appendChild",
   "(",
   "UI",
   ".",
   "utils",
   ".",
   "AJARImage",
   "(",
   "UI",
   ".",
   "icons",
   ".",
   "originalIconBase",
   "+",
   "'tbl-shrink.png'",
   ",",
   "'(less)'",
   ",",
   "undefined",
   ",",
   "dom",
   ")",
   ")",
   "predicateTD",
   ".",
   "setAttribute",
   "(",
   "'rowspan'",
   ",",
   "predDups",
   "+",
   "1",
   ")",
   "}",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "showLaterArray",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "var",
   "trObj",
   "=",
   "showLaterArray",
   "[",
   "i",
   "]",
   "trObj",
   ".",
   "style",
   ".",
   "display",
   "=",
   "display",
   "}",
   "}",
   "}",
   ")",
   "// ???",
   "var",
   "current",
   "=",
   "'none'",
   "var",
   "toggleObj",
   "=",
   "function",
   "(",
   "event",
   ")",
   "{",
   "predToggle",
   "(",
   "current",
   ")",
   "current",
   "=",
   "(",
   "current",
   "===",
   "'none'",
   ")",
   "?",
   "''",
   ":",
   "'none'",
   "if",
   "(",
   "event",
   ")",
   "event",
   ".",
   "stopPropagation",
   "(",
   ")",
   "return",
   "false",
   "// what is this for?",
   "}",
   "toggleObj",
   "(",
   ")",
   "small",
   ".",
   "addEventListener",
   "(",
   "'click'",
   ",",
   "toggleObj",
   ",",
   "false",
   ")",
   "}",
   "// if(predDups>n)",
   "parent",
   ".",
   "appendChild",
   "(",
   "moreTR",
   ")",
   "}",
   "// if",
   "}",
   "// tr.showNobj",
   "tr",
   ".",
   "showAllobj",
   "=",
   "function",
   "(",
   ")",
   "{",
   "tr",
   ".",
   "showNobj",
   "(",
   "k",
   "-",
   "dups",
   ")",
   "}",
   "tr",
   ".",
   "showNobj",
   "(",
   "10",
   ")",
   "j",
   "+=",
   "k",
   "-",
   "1",
   "// extra push",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-75",
  "nl_tokens": [
   "Finds",
   "the",
   "library",
   "needed",
   "for",
   "a",
   "resource",
   ";",
   "this",
   "depends",
   "on",
   "findAllResources",
   "having",
   "already",
   "been",
   "called",
   ".",
   "uri",
   "can",
   "include",
   "optional",
   "explicit",
   "namespace",
   "(",
   "eg",
   "qx",
   ":",
   "blah",
   "/",
   "blah",
   ".",
   "png",
   ")",
   "otherwise",
   "the",
   "library",
   "resource",
   "lookups",
   "are",
   "examined",
   "to",
   "find",
   "the",
   "library",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "uri",
   ")",
   "{",
   "var",
   "t",
   "=",
   "this",
   ";",
   "// Explicit library?",
   "var",
   "pos",
   "=",
   "uri",
   ".",
   "indexOf",
   "(",
   "\":\"",
   ")",
   ";",
   "if",
   "(",
   "pos",
   "!==",
   "-",
   "1",
   ")",
   "{",
   "var",
   "ns",
   "=",
   "uri",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "pos",
   ")",
   ";",
   "var",
   "library",
   "=",
   "this",
   ".",
   "__analyser",
   ".",
   "findLibrary",
   "(",
   "ns",
   ")",
   ";",
   "return",
   "library",
   "||",
   "null",
   ";",
   "}",
   "// Non-wildcards are a direct lookup",
   "// check for $ and *. less pos wins",
   "// fix for https://github.com/qooxdoo/qooxdoo-compiler/issues/260",
   "var",
   "pos1",
   "=",
   "uri",
   ".",
   "indexOf",
   "(",
   "\"$\"",
   ")",
   ";",
   "// Variable references are effectively a wildcard lookup",
   "var",
   "pos2",
   "=",
   "uri",
   ".",
   "indexOf",
   "(",
   "\"*\"",
   ")",
   ";",
   "if",
   "(",
   "pos1",
   "===",
   "-",
   "1",
   ")",
   "{",
   "pos",
   "=",
   "pos2",
   ";",
   "}",
   "else",
   "if",
   "(",
   "pos2",
   "===",
   "-",
   "1",
   ")",
   "{",
   "pos",
   "=",
   "pos1",
   ";",
   "}",
   "else",
   "{",
   "pos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "pos1",
   ",",
   "pos2",
   ")",
   ";",
   "}",
   "if",
   "(",
   "pos",
   "===",
   "-",
   "1",
   ")",
   "{",
   "library",
   "=",
   "t",
   ".",
   "__librariesByResourceUri",
   "[",
   "uri",
   "]",
   "||",
   "null",
   ";",
   "return",
   "library",
   ";",
   "}",
   "// Strip wildcard",
   "var",
   "isFolderMatch",
   "=",
   "uri",
   "[",
   "pos",
   "-",
   "1",
   "]",
   "===",
   "\"/\"",
   ";",
   "uri",
   "=",
   "uri",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "pos",
   "-",
   "1",
   ")",
   ";",
   "// Fast folder match",
   "if",
   "(",
   "isFolderMatch",
   ")",
   "{",
   "library",
   "=",
   "t",
   ".",
   "__librariesByResourceFolderUri",
   "[",
   "uri",
   "]",
   "||",
   "null",
   ";",
   "return",
   "library",
   ";",
   "}",
   "// Slow scan",
   "pos",
   "=",
   "qx",
   ".",
   "tool",
   ".",
   "compiler",
   ".",
   "utils",
   ".",
   "Values",
   ".",
   "binaryStartsWith",
   "(",
   "t",
   ".",
   "__allResourceUris",
   ",",
   "uri",
   ")",
   ";",
   "if",
   "(",
   "pos",
   ">",
   "-",
   "1",
   ")",
   "{",
   "var",
   "firstUri",
   "=",
   "t",
   ".",
   "__allResourceUris",
   "[",
   "pos",
   "]",
   ";",
   "library",
   "=",
   "t",
   ".",
   "__librariesByResourceUri",
   "[",
   "firstUri",
   "]",
   "||",
   "t",
   ".",
   "__librariesByResourceFolderUri",
   "[",
   "firstUri",
   "]",
   "||",
   "null",
   ";",
   "return",
   "library",
   ";",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-76",
  "nl_tokens": [
   "/",
   "*",
   "Does",
   "the",
   "same",
   "work",
   "as",
   "splice",
   "but",
   "with",
   "a",
   "slightly",
   "more",
   "convenient",
   "signature",
   ".",
   "The",
   "splice",
   "method",
   "has",
   "bugs",
   "in",
   "IE8",
   "so",
   "this",
   "is",
   "the",
   "implementation",
   "we",
   "use",
   "on",
   "that",
   "platform",
   "."
  ],
  "pl_tokens": [
   "function",
   "replaceSim",
   "(",
   "array",
   ",",
   "index",
   ",",
   "removeCount",
   ",",
   "insert",
   ")",
   "{",
   "var",
   "add",
   "=",
   "insert",
   "?",
   "insert",
   ".",
   "length",
   ":",
   "0",
   ",",
   "length",
   "=",
   "array",
   ".",
   "length",
   ",",
   "pos",
   "=",
   "fixArrayIndex",
   "(",
   "array",
   ",",
   "index",
   ")",
   ",",
   "remove",
   ",",
   "tailOldPos",
   ",",
   "tailNewPos",
   ",",
   "tailCount",
   ",",
   "lengthAfterRemove",
   ",",
   "i",
   ";",
   "// we try to use Array.push when we can for efficiency...",
   "if",
   "(",
   "pos",
   "===",
   "length",
   ")",
   "{",
   "if",
   "(",
   "add",
   ")",
   "{",
   "array",
   ".",
   "push",
   ".",
   "apply",
   "(",
   "array",
   ",",
   "insert",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "remove",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "removeCount",
   ",",
   "length",
   "-",
   "pos",
   ")",
   ";",
   "tailOldPos",
   "=",
   "pos",
   "+",
   "remove",
   ";",
   "tailNewPos",
   "=",
   "tailOldPos",
   "+",
   "add",
   "-",
   "remove",
   ";",
   "tailCount",
   "=",
   "length",
   "-",
   "tailOldPos",
   ";",
   "lengthAfterRemove",
   "=",
   "length",
   "-",
   "remove",
   ";",
   "if",
   "(",
   "tailNewPos",
   "<",
   "tailOldPos",
   ")",
   "{",
   "// case A",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "tailCount",
   ";",
   "++",
   "i",
   ")",
   "{",
   "array",
   "[",
   "tailNewPos",
   "+",
   "i",
   "]",
   "=",
   "array",
   "[",
   "tailOldPos",
   "+",
   "i",
   "]",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "tailNewPos",
   ">",
   "tailOldPos",
   ")",
   "{",
   "// case B",
   "for",
   "(",
   "i",
   "=",
   "tailCount",
   ";",
   "i",
   "--",
   ";",
   ")",
   "{",
   "array",
   "[",
   "tailNewPos",
   "+",
   "i",
   "]",
   "=",
   "array",
   "[",
   "tailOldPos",
   "+",
   "i",
   "]",
   ";",
   "}",
   "}",
   "// else, add == remove (nothing to do)",
   "if",
   "(",
   "add",
   "&&",
   "pos",
   "===",
   "lengthAfterRemove",
   ")",
   "{",
   "array",
   ".",
   "length",
   "=",
   "lengthAfterRemove",
   ";",
   "// truncate array",
   "array",
   ".",
   "push",
   ".",
   "apply",
   "(",
   "array",
   ",",
   "insert",
   ")",
   ";",
   "}",
   "else",
   "{",
   "array",
   ".",
   "length",
   "=",
   "lengthAfterRemove",
   "+",
   "add",
   ";",
   "// reserves space",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "add",
   ";",
   "++",
   "i",
   ")",
   "{",
   "array",
   "[",
   "pos",
   "+",
   "i",
   "]",
   "=",
   "insert",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "}",
   "return",
   "array",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-77",
  "nl_tokens": [
   "Compiles",
   "a",
   "loop",
   "by",
   "the",
   "specified",
   "parameters"
  ],
  "pl_tokens": [
   "function",
   "compileCycle",
   "(",
   "key",
   ",",
   "p",
   ")",
   "{",
   "const",
   "isMapSet",
   "=",
   "_types",
   ".",
   "mapSet",
   "[",
   "p",
   ".",
   "type",
   "]",
   ";",
   "const",
   "cantModI",
   "=",
   "!",
   "(",
   "p",
   ".",
   "type",
   "===",
   "'array'",
   "||",
   "p",
   ".",
   "reverse",
   "||",
   "p",
   ".",
   "type",
   "===",
   "'object'",
   "&&",
   "p",
   ".",
   "notOwn",
   "&&",
   "_hacks",
   ".",
   "OBJECT_KEYS_NATIVE_SUPPORT",
   ")",
   ";",
   "const",
   "cbArgs",
   "=",
   "cbArgsList",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "p",
   ".",
   "length",
   "?",
   "p",
   ".",
   "cbArgs",
   ":",
   "cbArgsList",
   ".",
   "length",
   ")",
   ",",
   "filterArgs",
   "=",
   "[",
   "]",
   ";",
   "const",
   "maxArgsLength",
   "=",
   "p",
   ".",
   "length",
   "?",
   "Math",
   ".",
   "<mask>",
   ".",
   "apply",
   "(",
   "null",
   ",",
   "[",
   "]",
   ".",
   "concat",
   "(",
   "p",
   ".",
   "cbArgs",
   ",",
   "p",
   ".",
   "filterArgs",
   ")",
   ")",
   ":",
   "cbArgsList",
   ".",
   "length",
   ",",
   "needParallel",
   "=",
   "p",
   ".",
   "parallel",
   "||",
   "p",
   ".",
   "race",
   ",",
   "parallelFn",
   "=",
   "p",
   ".",
   "parallel",
   "?",
   "'wait'",
   ":",
   "'race'",
   ",",
   "needCtx",
   "=",
   "maxArgsLength",
   ">",
   "3",
   "||",
   "needParallel",
   "||",
   "p",
   ".",
   "thread",
   ",",
   "fLength",
   "=",
   "p",
   ".",
   "filter",
   ".",
   "length",
   ";",
   "for",
   "(",
   "let",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "fLength",
   ";",
   "i",
   "++",
   ")",
   "{",
   "filterArgs",
   ".",
   "push",
   "(",
   "filterArgsList",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "p",
   ".",
   "length",
   "?",
   "p",
   ".",
   "filterArgs",
   "[",
   "i",
   "]",
   ":",
   "filterArgsList",
   ".",
   "length",
   ")",
   ")",
   ";",
   "}",
   "const",
   "resolveFilterVal",
   "=",
   "`",
   "${",
   "p",
   ".",
   "inverseFilter",
   "?",
   "'!'",
   ":",
   "''",
   "}",
   "`",
   ",",
   "callCycleFilter",
   "=",
   "`",
   "${",
   "filterArgsList",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "p",
   ".",
   "length",
   "?",
   "maxArgsLength",
   ":",
   "filterArgsList",
   ".",
   "length",
   ")",
   "}",
   "`",
   ";",
   "let",
   "iFn",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "withDescriptor",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "withProto",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'var getDescriptor = Object.getOwnPropertyDescriptor;'",
   ";",
   "}",
   "}",
   "//#if iterators.async",
   "if",
   "(",
   "p",
   ".",
   "async",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "cbArgs",
   "}",
   "${",
   "fLength",
   "?",
   "undefined",
   ":",
   "true",
   "}",
   "`",
   ";",
   "if",
   "(",
   "fLength",
   ")",
   "{",
   "if",
   "(",
   "fLength",
   "<",
   "5",
   ")",
   "{",
   "for",
   "(",
   "let",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "fLength",
   ";",
   "i",
   "++",
   ")",
   "{",
   "const",
   "callFilter",
   "=",
   "`",
   "${",
   "i",
   "}",
   "${",
   "filterArgs",
   "[",
   "i",
   "]",
   "}",
   "`",
   ";",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "i",
   "?",
   "'f'",
   ":",
   "'f === undefined || f'",
   "}",
   "${",
   "resolveFilterVal",
   "}",
   "${",
   "callFilter",
   "}",
   "${",
   "callFilter",
   "}",
   "${",
   "resolveFilterVal",
   "}",
   "`",
   ";",
   "}",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "resolveFilterVal",
   "}",
   "${",
   "callCycleFilter",
   "}",
   "${",
   "callCycleFilter",
   "}",
   "${",
   "resolveFilterVal",
   "}",
   "`",
   ";",
   "}",
   "}",
   "let",
   "fnCountHelper",
   "=",
   "''",
   ";",
   "if",
   "(",
   "p",
   ".",
   "from",
   ")",
   "{",
   "fnCountHelper",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "count",
   ")",
   "{",
   "fnCountHelper",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "resolveFilterVal",
   "}",
   "${",
   "fnCountHelper",
   "}",
   "${",
   "cbArgs",
   "}",
   "${",
   "fnCountHelper",
   "}",
   "${",
   "cbArgs",
   "}",
   "`",
   ";",
   "if",
   "(",
   "needParallel",
   ")",
   "{",
   "//#if iterators.async",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "parallelFn",
   "}",
   "${",
   "parallelFn",
   "}",
   "`",
   ";",
   "//#endif",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'return res;'",
   ";",
   "}",
   "iFn",
   "+=",
   "'};'",
   ";",
   "}",
   "//#endif",
   "if",
   "(",
   "needCtx",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "p",
   ".",
   "mult",
   "}",
   "${",
   "p",
   ".",
   "live",
   "}",
   "${",
   "p",
   ".",
   "reverse",
   "}",
   "${",
   "p",
   ".",
   "withDescriptor",
   "}",
   "${",
   "p",
   ".",
   "notOwn",
   "}",
   "${",
   "p",
   ".",
   "inverseFilter",
   "}",
   "${",
   "p",
   ".",
   "type",
   "}",
   "${",
   "p",
   ".",
   "async",
   "}",
   "${",
   "p",
   ".",
   "thread",
   "}",
   "${",
   "p",
   ".",
   "thread",
   "}",
   "${",
   "p",
   ".",
   "priority",
   "}",
   "${",
   "p",
   ".",
   "length",
   "}",
   "${",
   "cantModI",
   "}",
   "${",
   "cantModI",
   "}",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "async",
   ")",
   "{",
   "//#if iterators.async",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "//#endif",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "}",
   "let",
   "threadStart",
   "=",
   "''",
   ",",
   "threadEnd",
   "=",
   "''",
   ";",
   "//#if iterators.async",
   "//#if iterators.thread",
   "if",
   "(",
   "p",
   ".",
   "async",
   "&&",
   "p",
   ".",
   "thread",
   ")",
   "{",
   "threadStart",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "threadEnd",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "//#endif",
   "//#endif",
   "iFn",
   "+=",
   "'while (limit !== looper) {'",
   ";",
   "let",
   "yielder",
   "=",
   "''",
   ",",
   "asyncWait",
   "=",
   "''",
   ";",
   "//#if iterators.async",
   "if",
   "(",
   "p",
   ".",
   "async",
   ")",
   "{",
   "iFn",
   "+=",
   "'done = false;'",
   ";",
   "yielder",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "if",
   "(",
   "needCtx",
   ")",
   "{",
   "asyncWait",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "}",
   "//#endif",
   "let",
   "indexLimits",
   "=",
   "''",
   ";",
   "if",
   "(",
   "p",
   ".",
   "startIndex",
   ")",
   "{",
   "indexLimits",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "endIndex",
   ")",
   "{",
   "indexLimits",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "const",
   "defArgs",
   "=",
   "maxArgsLength",
   "||",
   "p",
   ".",
   "async",
   ";",
   "switch",
   "(",
   "p",
   ".",
   "type",
   ")",
   "{",
   "case",
   "'array'",
   ":",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "reverse",
   ")",
   "{",
   "iFn",
   "+=",
   "'clone = slice.call(clone).reverse();'",
   ";",
   "}",
   "if",
   "(",
   "(",
   "p",
   ".",
   "reverse",
   "||",
   "!",
   "p",
   ".",
   "live",
   ")",
   "&&",
   "(",
   "p",
   ".",
   "startIndex",
   "||",
   "p",
   ".",
   "endIndex",
   ")",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "if",
   "(",
   "!",
   "p",
   ".",
   "reverse",
   "&&",
   "p",
   ".",
   "live",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "indexLimits",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "`",
   ";",
   "}",
   "if",
   "(",
   "defArgs",
   ")",
   "{",
   "if",
   "(",
   "maxArgsLength",
   ">",
   "1",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "startIndex",
   ")",
   "{",
   "iFn",
   "+=",
   "`",
   "${",
   "p",
   ".",
   "reverse",
   "?",
   "'dLength - ('",
   ":",
   "''",
   "}",
   "${",
   "p",
   ".",
   "reverse",
   "?",
   "')'",
   ":",
   "''",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "`",
   "${",
   "p",
   ".",
   "reverse",
   "?",
   "'dLength - '",
   ":",
   "''",
   "}",
   "`",
   ";",
   "}",
   "}",
   "if",
   "(",
   "p",
   ".",
   "withDescriptor",
   ")",
   "{",
   "iFn",
   "+=",
   "'el = getDescriptor(clone, n);'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'el = clone[n];'",
   ";",
   "}",
   "}",
   "break",
   ";",
   "case",
   "'object'",
   ":",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "reverse",
   "||",
   "_hacks",
   ".",
   "OBJECT_KEYS_NATIVE_SUPPORT",
   "&&",
   "!",
   "p",
   ".",
   "notOwn",
   ")",
   "{",
   "iFn",
   "+=",
   "'var tmpArray;'",
   ";",
   "if",
   "(",
   "!",
   "p",
   ".",
   "notOwn",
   "&&",
   "_hacks",
   ".",
   "OBJECT_KEYS_NATIVE_SUPPORT",
   "&&",
   "!",
   "p",
   ".",
   "async",
   ")",
   "{",
   "iFn",
   "+=",
   "'tmpArray = Object.keys(data);'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'tmpArray = [];'",
   ";",
   "if",
   "(",
   "p",
   ".",
   "notOwn",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "notOwn",
   "===",
   "-",
   "1",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "}",
   "if",
   "(",
   "p",
   ".",
   "reverse",
   ")",
   "{",
   "iFn",
   "+=",
   "'tmpArray.reverse();'",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "startIndex",
   "||",
   "p",
   ".",
   "endIndex",
   ")",
   "{",
   "iFn",
   "+=",
   "`",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "notOwn",
   "===",
   "false",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "else",
   "if",
   "(",
   "p",
   ".",
   "notOwn",
   "===",
   "-",
   "1",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "indexLimits",
   "}",
   "`",
   ";",
   "}",
   "if",
   "(",
   "defArgs",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "withDescriptor",
   ")",
   "{",
   "iFn",
   "+=",
   "'el = getDescriptor(data, key);'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'el = data[key];'",
   ";",
   "}",
   "}",
   "break",
   ";",
   "case",
   "'map'",
   ":",
   "case",
   "'set'",
   ":",
   "case",
   "'generator'",
   ":",
   "case",
   "'iterator'",
   ":",
   "case",
   "'asyncIterator'",
   ":",
   "if",
   "(",
   "isMapSet",
   ")",
   "{",
   "iFn",
   "+=",
   "'var cursor = data.keys();'",
   ";",
   "if",
   "(",
   "!",
   "p",
   ".",
   "live",
   "&&",
   "!",
   "p",
   ".",
   "reverse",
   ")",
   "{",
   "iFn",
   "+=",
   "'var size = data.size;'",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "p",
   ".",
   "type",
   "===",
   "'generator'",
   ")",
   "{",
   "iFn",
   "+=",
   "'var cursor = data();'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "p",
   ".",
   "reverse",
   "?",
   "'var tmpArray = [];'",
   ":",
   "''",
   "}",
   "${",
   "threadStart",
   "}",
   "`",
   ";",
   "let",
   "asyncIterator",
   "=",
   "''",
   ";",
   "//#if iterators.async",
   "if",
   "(",
   "p",
   ".",
   "type",
   "===",
   "'asyncIterator'",
   ")",
   "{",
   "asyncIterator",
   "=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "//#endif",
   "if",
   "(",
   "p",
   ".",
   "reverse",
   ")",
   "{",
   "iFn",
   "+=",
   "`",
   "${",
   "asyncIterator",
   "}",
   "`",
   ";",
   "//#if iterators.async",
   "if",
   "(",
   "needParallel",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "parallelFn",
   "}",
   "${",
   "yielder",
   "}",
   "`",
   ";",
   "}",
   "//#endif",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "${",
   "threadEnd",
   "}",
   "${",
   "asyncWait",
   "}",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "startIndex",
   "||",
   "p",
   ".",
   "endIndex",
   ")",
   "{",
   "iFn",
   "+=",
   "`",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadStart",
   "}",
   "${",
   "defArgs",
   "?",
   "'key = tmpArray[n];'",
   ":",
   "''",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "defArgs",
   "?",
   "`",
   "`",
   ":",
   "''",
   "}",
   "${",
   "indexLimits",
   "}",
   "`",
   ";",
   "}",
   "if",
   "(",
   "defArgs",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "type",
   "===",
   "'map'",
   ")",
   "{",
   "iFn",
   "+=",
   "'el = data.get(key);'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "`",
   "${",
   "asyncIterator",
   "}",
   "`",
   ";",
   "if",
   "(",
   "maxArgsLength",
   ">",
   "1",
   ")",
   "{",
   "if",
   "(",
   "p",
   ".",
   "type",
   "===",
   "'set'",
   ")",
   "{",
   "iFn",
   "+=",
   "'key = null;'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "p",
   ".",
   "reverse",
   ")",
   "{",
   "iFn",
   "+=",
   "'key = size - i - 1;'",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "'key = i;'",
   ";",
   "}",
   "}",
   "}",
   "}",
   "break",
   ";",
   "}",
   "if",
   "(",
   "needCtx",
   ")",
   "{",
   "iFn",
   "+=",
   "'id++;'",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "count",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "let",
   "tmp",
   "=",
   "''",
   ";",
   "if",
   "(",
   "!",
   "p",
   ".",
   "async",
   ")",
   "{",
   "if",
   "(",
   "fLength",
   ")",
   "{",
   "if",
   "(",
   "fLength",
   "<",
   "5",
   ")",
   "{",
   "for",
   "(",
   "let",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "fLength",
   ";",
   "i",
   "++",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "i",
   "?",
   "'f'",
   ":",
   "'true'",
   "}",
   "${",
   "i",
   "}",
   "${",
   "filterArgs",
   "[",
   "i",
   "]",
   "}",
   "${",
   "resolveFilterVal",
   "}",
   "`",
   ";",
   "}",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "callCycleFilter",
   "}",
   "${",
   "resolveFilterVal",
   "}",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "'if (f) {'",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "count",
   ")",
   "{",
   "tmp",
   "+=",
   "'j++;'",
   ";",
   "}",
   "}",
   "tmp",
   "+=",
   "`",
   "${",
   "cbArgs",
   "}",
   "`",
   ";",
   "if",
   "(",
   "!",
   "p",
   ".",
   "mult",
   ")",
   "{",
   "tmp",
   "+=",
   "'breaker = true;'",
   ";",
   "}",
   "//#if iterators.async",
   "if",
   "(",
   "p",
   ".",
   "async",
   ")",
   "{",
   "tmp",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "`",
   ";",
   "}",
   "//#endif",
   "if",
   "(",
   "!",
   "p",
   ".",
   "async",
   "&&",
   "p",
   ".",
   "from",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "tmp",
   "}",
   "`",
   ";",
   "}",
   "else",
   "{",
   "iFn",
   "+=",
   "tmp",
   ";",
   "}",
   "if",
   "(",
   "!",
   "p",
   ".",
   "async",
   "&&",
   "fLength",
   ")",
   "{",
   "iFn",
   "+=",
   "'}'",
   ";",
   "}",
   "iFn",
   "+=",
   "yielder",
   ";",
   "if",
   "(",
   "!",
   "p",
   ".",
   "live",
   "&&",
   "!",
   "p",
   ".",
   "reverse",
   "&&",
   "isMapSet",
   ")",
   "{",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "`",
   ";",
   "}",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "threadEnd",
   "}",
   "${",
   "p",
   ".",
   "async",
   "?",
   "'|| done'",
   ":",
   "''",
   "}",
   "${",
   "needCtx",
   "?",
   "'ctx'",
   ":",
   "''",
   "}",
   "`",
   ";",
   "iFn",
   "+=",
   "_string",
   ".",
   "ws",
   "`",
   "${",
   "yielder",
   "}",
   "${",
   "asyncWait",
   "}",
   "${",
   "p",
   ".",
   "async",
   "?",
   "'done = true;'",
   ":",
   "''",
   "}",
   "`",
   ";",
   "if",
   "(",
   "p",
   ".",
   "async",
   ")",
   "{",
   "//#if iterators.async",
   "_cache",
   ".",
   "tmpCycle",
   "[",
   "key",
   "]",
   "=",
   "new",
   "Function",
   "(",
   "`",
   "${",
   "iFn",
   "}",
   "`",
   ")",
   "(",
   ")",
   ";",
   "//#endif",
   "}",
   "else",
   "{",
   "_cache",
   ".",
   "tmpCycle",
   "[",
   "key",
   "]",
   "=",
   "new",
   "Function",
   "(",
   "'o'",
   ",",
   "'p'",
   ",",
   "iFn",
   ")",
   ";",
   "}",
   "if",
   "(",
   "_core2",
   ".",
   "default",
   ".",
   "ready",
   ")",
   "{",
   "const",
   "delay",
   "=",
   "5e3",
   ";",
   "const",
   "text",
   "=",
   "`",
   "${",
   "_base",
   ".",
   "NAMESPACE",
   "}",
   "${",
   "key",
   "}",
   "${",
   "_cache",
   ".",
   "tmpCycle",
   "[",
   "key",
   "]",
   ".",
   "toString",
   "(",
   ")",
   "}",
   "`",
   ";",
   "cache",
   "[",
   "key",
   "]",
   "=",
   "text",
   ";",
   "if",
   "(",
   "_hacks",
   ".",
   "IS_BROWSER",
   "&&",
   "_hacks",
   ".",
   "LOCAL_STORAGE_SUPPORT",
   ")",
   "{",
   "clearTimeout",
   "(",
   "timeout",
   ")",
   ";",
   "timeout",
   "=",
   "setTimeout",
   "(",
   "(",
   ")",
   "=>",
   "{",
   "try",
   "{",
   "localStorage",
   ".",
   "setItem",
   "(",
   "_base",
   ".",
   "CACHE_KEY",
   ",",
   "JSON",
   ".",
   "stringify",
   "(",
   "cache",
   ")",
   ")",
   ";",
   "localStorage",
   ".",
   "setItem",
   "(",
   "_base",
   ".",
   "CACHE_VERSION_KEY",
   ",",
   "_base",
   ".",
   "CACHE_VERSION",
   ")",
   ";",
   "if",
   "(",
   "_hacks",
   ".",
   "BLOB_SUPPORT",
   ")",
   "{",
   "const",
   "script",
   "=",
   "document",
   ".",
   "createElement",
   "(",
   "'script'",
   ")",
   ";",
   "script",
   ".",
   "src",
   "=",
   "URL",
   ".",
   "createObjectURL",
   "(",
   "new",
   "Blob",
   "(",
   "[",
   "text",
   "]",
   ",",
   "{",
   "type",
   ":",
   "'application/javascript'",
   "}",
   ")",
   ")",
   ";",
   "document",
   ".",
   "head",
   ".",
   "appendChild",
   "(",
   "script",
   ")",
   ";",
   "}",
   "}",
   "catch",
   "(",
   "_",
   ")",
   "{",
   "}",
   "}",
   ",",
   "delay",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "_hacks",
   ".",
   "IS_NODE",
   ")",
   "{",
   "//#if isNode",
   "clearTimeout",
   "(",
   "timeout",
   ")",
   ";",
   "timeout",
   "=",
   "setTimeout",
   "(",
   "(",
   ")",
   "=>",
   "{",
   "require",
   "(",
   "'fs'",
   ")",
   ".",
   "writeFile",
   "(",
   "require",
   "(",
   "'path'",
   ")",
   ".",
   "join",
   "(",
   "__dirname",
   ",",
   "'collection.tmp.js'",
   ")",
   ",",
   "`",
   "${",
   "_base",
   ".",
   "CACHE_VERSION",
   "}",
   "${",
   "JSON",
   ".",
   "stringify",
   "(",
   "cache",
   ")",
   "}",
   "${",
   "returnCache",
   "(",
   "cache",
   ")",
   "}",
   "`",
   ",",
   "(",
   ")",
   "=>",
   "{",
   "}",
   ")",
   ";",
   "}",
   ",",
   "delay",
   ")",
   ";",
   "timeout",
   "[",
   "'unref'",
   "]",
   "(",
   ")",
   ";",
   "//#endif",
   "}",
   "}",
   "return",
   "_cache",
   ".",
   "tmpCycle",
   "[",
   "key",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-78",
  "nl_tokens": [
   "/",
   "*",
   "305"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry3",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "4",
   ")",
   ";",
   "var",
   "curryN",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "7",
   ")",
   ";",
   "/**\n\t * Creates a function that will process either the `onTrue` or the `onFalse`\n\t * function depending upon the result of the `condition` predicate.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.8.0\n\t * @category Logic\n\t * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n\t * @param {Function} condition A predicate function\n\t * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n\t * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n\t * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n\t *                    function depending upon the result of the `condition` predicate.\n\t * @see R.unless, R.when\n\t * @example\n\t *\n\t *      var incCount = R.ifElse(\n\t *        R.has('count'),\n\t *        R.over(R.lensProp('count'), R.inc),\n\t *        R.assoc('count', 1)\n\t *      );\n\t *      incCount({});           //=> { count: 1 }\n\t *      incCount({ count: 1 }); //=> { count: 2 }\n\t */",
   "var",
   "ifElse",
   "=",
   "/*#__PURE__*/",
   "_curry3",
   "(",
   "function",
   "ifElse",
   "(",
   "condition",
   ",",
   "onTrue",
   ",",
   "onFalse",
   ")",
   "{",
   "return",
   "curryN",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "condition",
   ".",
   "length",
   ",",
   "onTrue",
   ".",
   "length",
   ",",
   "onFalse",
   ".",
   "length",
   ")",
   ",",
   "function",
   "_ifElse",
   "(",
   ")",
   "{",
   "return",
   "condition",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   "?",
   "onTrue",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   ":",
   "onFalse",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "ifElse",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-79",
  "nl_tokens": [
   "In",
   "the",
   "event",
   "that",
   "index",
   "chunks",
   "aren",
   "t",
   "available",
   "from",
   "an",
   "external",
   "source",
   "it",
   "winds",
   "up",
   "saving",
   "time",
   "to",
   "do",
   "a",
   "fast",
   "pass",
   "over",
   "the",
   "data",
   "to",
   "compute",
   "them",
   ".",
   "This",
   "allows",
   "us",
   "to",
   "parse",
   "a",
   "single",
   "contig",
   "at",
   "a",
   "time",
   "using",
   "jBinary",
   "."
  ],
  "pl_tokens": [
   "function",
   "computeIndexChunks",
   "(",
   "buffer",
   ")",
   "{",
   "var",
   "BLOCK_SIZE",
   "=",
   "65536",
   ";",
   "var",
   "view",
   "=",
   "new",
   "jDataView",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "buffer",
   ".",
   "byteLength",
   ",",
   "true",
   "/* little endian */",
   ")",
   ";",
   "var",
   "minBlockIndex",
   "=",
   "Infinity",
   ";",
   "var",
   "contigStartOffsets",
   "=",
   "[",
   "]",
   ";",
   "view",
   ".",
   "getInt32",
   "(",
   ")",
   ";",
   "// magic",
   "var",
   "n_ref",
   "=",
   "view",
   ".",
   "getInt32",
   "(",
   ")",
   ";",
   "for",
   "(",
   "var",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "n_ref",
   ";",
   "j",
   "++",
   ")",
   "{",
   "contigStartOffsets",
   ".",
   "push",
   "(",
   "view",
   ".",
   "tell",
   "(",
   ")",
   ")",
   ";",
   "var",
   "n_bin",
   "=",
   "view",
   ".",
   "getInt32",
   "(",
   ")",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n_bin",
   ";",
   "i",
   "++",
   ")",
   "{",
   "view",
   ".",
   "getUint32",
   "(",
   ")",
   ";",
   "// bin ID",
   "var",
   "n_chunk",
   "=",
   "view",
   ".",
   "getInt32",
   "(",
   ")",
   ";",
   "view",
   ".",
   "skip",
   "(",
   "n_chunk",
   "*",
   "16",
   ")",
   ";",
   "}",
   "var",
   "n_intv",
   "=",
   "view",
   ".",
   "getInt32",
   "(",
   ")",
   ";",
   "if",
   "(",
   "n_intv",
   ")",
   "{",
   "var",
   "offset",
   "=",
   "VirtualOffset",
   ".",
   "fromBlob",
   "(",
   "view",
   ".",
   "getBytes",
   "(",
   "8",
   ")",
   ",",
   "0",
   ")",
   ",",
   "coffset",
   "=",
   "offset",
   ".",
   "coffset",
   "+",
   "(",
   "offset",
   ".",
   "uoffset",
   "?",
   "BLOCK_SIZE",
   ":",
   "0",
   ")",
   ";",
   "minBlockIndex",
   "=",
   "coffset",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "coffset",
   ",",
   "minBlockIndex",
   ")",
   ":",
   "BLOCK_SIZE",
   ";",
   "view",
   ".",
   "skip",
   "(",
   "(",
   "n_intv",
   "-",
   "1",
   ")",
   "*",
   "8",
   ")",
   ";",
   "}",
   "}",
   "contigStartOffsets",
   ".",
   "push",
   "(",
   "view",
   ".",
   "tell",
   "(",
   ")",
   ")",
   ";",
   "// At this point, `minBlockIndex` should be non-Infinity (see #405 & #406)",
   "return",
   "{",
   "chunks",
   ":",
   "_",
   ".",
   "zip",
   "(",
   "_",
   ".",
   "initial",
   "(",
   "contigStartOffsets",
   ")",
   ",",
   "_",
   ".",
   "rest",
   "(",
   "contigStartOffsets",
   ")",
   ")",
   ",",
   "minBlockIndex",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-80",
  "nl_tokens": [
   "Finds",
   "the",
   "next",
   "octant",
   "that",
   "intersects",
   "with",
   "the",
   "ray",
   "based",
   "on",
   "the",
   "exit",
   "plane",
   "of",
   "the",
   "current",
   "one",
   "."
  ],
  "pl_tokens": [
   "function",
   "findNextOctant",
   "(",
   "currentOctant",
   ",",
   "tx1",
   ",",
   "ty1",
   ",",
   "tz1",
   ")",
   "{",
   "let",
   "<mask>",
   ";",
   "let",
   "exit",
   "=",
   "0",
   ";",
   "// Find the exit plane.",
   "if",
   "(",
   "tx1",
   "<",
   "ty1",
   ")",
   "{",
   "min",
   "=",
   "tx1",
   ";",
   "exit",
   "=",
   "0",
   ";",
   "// YZ-plane.",
   "}",
   "else",
   "{",
   "min",
   "=",
   "ty1",
   ";",
   "exit",
   "=",
   "1",
   ";",
   "// XZ-plane.",
   "}",
   "if",
   "(",
   "tz1",
   "<",
   "min",
   ")",
   "{",
   "exit",
   "=",
   "2",
   ";",
   "// XY-plane.",
   "}",
   "return",
   "octantTable",
   "[",
   "currentOctant",
   "]",
   "[",
   "exit",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-81",
  "nl_tokens": [
   "/",
   "*",
   "@see",
   "http",
   ":",
   "//",
   "www",
   ".",
   "w3",
   ".",
   "org",
   "/",
   "TR",
   "/",
   "PNG",
   "-",
   "Chunks",
   ".",
   "html"
  ],
  "pl_tokens": [
   "function",
   "createZlibHeader",
   "(",
   "bytes",
   ",",
   "level",
   ")",
   "{",
   "/*\n     * @see http://www.ietf.org/rfc/rfc1950.txt for zlib header\n     */",
   "var",
   "cm",
   "=",
   "8",
   ";",
   "var",
   "cinfo",
   "=",
   "Math",
   ".",
   "LOG2E",
   "*",
   "Math",
   ".",
   "log",
   "(",
   "0x8000",
   ")",
   "-",
   "8",
   ";",
   "var",
   "cmf",
   "=",
   "cinfo",
   "<<",
   "4",
   "|",
   "cm",
   ";",
   "var",
   "hdr",
   "=",
   "cmf",
   "<<",
   "8",
   ";",
   "var",
   "flevel",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "3",
   ",",
   "(",
   "level",
   "-",
   "1",
   "&",
   "0xff",
   ")",
   ">>",
   "1",
   ")",
   ";",
   "hdr",
   "|=",
   "flevel",
   "<<",
   "6",
   ";",
   "hdr",
   "|=",
   "0",
   ";",
   "//FDICT",
   "hdr",
   "+=",
   "31",
   "-",
   "hdr",
   "%",
   "31",
   ";",
   "return",
   "[",
   "cmf",
   ",",
   "hdr",
   "&",
   "0xff",
   "&",
   "0xff",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-82",
  "nl_tokens": [
   "Support",
   "methods"
  ],
  "pl_tokens": [
   "function",
   "getMinOrMax",
   "(",
   "obj",
   ",",
   "map",
   ",",
   "which",
   ",",
   "all",
   ")",
   "{",
   "var",
   "edge",
   ",",
   "result",
   "=",
   "[",
   "]",
   ",",
   "<mask>",
   "=",
   "which",
   "===",
   "'max'",
   ",",
   "min",
   "=",
   "which",
   "===",
   "'min'",
   ",",
   "isArray",
   "=",
   "Array",
   ".",
   "isArray",
   "(",
   "obj",
   ")",
   ";",
   "iterateOverObject",
   "(",
   "obj",
   ",",
   "function",
   "(",
   "key",
   ")",
   "{",
   "var",
   "el",
   "=",
   "obj",
   "[",
   "key",
   "]",
   ",",
   "test",
   "=",
   "transformArgument",
   "(",
   "el",
   ",",
   "map",
   ",",
   "obj",
   ",",
   "isArray",
   "?",
   "[",
   "el",
   ",",
   "parseInt",
   "(",
   "key",
   ")",
   ",",
   "obj",
   "]",
   ":",
   "[",
   "]",
   ")",
   ";",
   "if",
   "(",
   "isUndefined",
   "(",
   "test",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Cannot compare with undefined'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "test",
   "===",
   "edge",
   ")",
   "{",
   "result",
   ".",
   "push",
   "(",
   "el",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "isUndefined",
   "(",
   "edge",
   ")",
   "||",
   "(",
   "max",
   "&&",
   "test",
   ">",
   "edge",
   ")",
   "||",
   "(",
   "min",
   "&&",
   "test",
   "<",
   "edge",
   ")",
   ")",
   "{",
   "result",
   "=",
   "[",
   "el",
   "]",
   ";",
   "edge",
   "=",
   "test",
   ";",
   "}",
   "}",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isArray",
   ")",
   "result",
   "=",
   "arrayFlatten",
   "(",
   "result",
   ",",
   "1",
   ")",
   ";",
   "return",
   "all",
   "?",
   "result",
   ":",
   "result",
   "[",
   "0",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-83",
  "nl_tokens": [
   "Returns",
   "the",
   "number",
   "of",
   "pixels",
   "by",
   "which",
   "the",
   "event",
   "happens",
   "from",
   "the",
   "nearest",
   "edge",
   "of",
   "the",
   "chart",
   ".",
   "For",
   "events",
   "in",
   "the",
   "interior",
   "of",
   "the",
   "chart",
   "this",
   "returns",
   "zero",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "event",
   ",",
   "g",
   ")",
   "{",
   "var",
   "chartPos",
   "=",
   "utils",
   ".",
   "findPos",
   "(",
   "g",
   ".",
   "canvas_",
   ")",
   ";",
   "var",
   "box",
   "=",
   "{",
   "left",
   ":",
   "chartPos",
   ".",
   "x",
   ",",
   "right",
   ":",
   "chartPos",
   ".",
   "x",
   "+",
   "g",
   ".",
   "canvas_",
   ".",
   "offsetWidth",
   ",",
   "top",
   ":",
   "chartPos",
   ".",
   "y",
   ",",
   "bottom",
   ":",
   "chartPos",
   ".",
   "y",
   "+",
   "g",
   ".",
   "canvas_",
   ".",
   "offsetHeight",
   "}",
   ";",
   "var",
   "pt",
   "=",
   "{",
   "x",
   ":",
   "utils",
   ".",
   "pageX",
   "(",
   "event",
   ")",
   ",",
   "y",
   ":",
   "utils",
   ".",
   "pageY",
   "(",
   "event",
   ")",
   "}",
   ";",
   "var",
   "dx",
   "=",
   "distanceFromInterval",
   "(",
   "pt",
   ".",
   "x",
   ",",
   "box",
   ".",
   "left",
   ",",
   "box",
   ".",
   "right",
   ")",
   ",",
   "dy",
   "=",
   "distanceFromInterval",
   "(",
   "pt",
   ".",
   "y",
   ",",
   "box",
   ".",
   "top",
   ",",
   "box",
   ".",
   "bottom",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "dx",
   ",",
   "dy",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-84",
  "nl_tokens": [
   "/",
   "*",
   "If",
   "u",
   "and",
   "v",
   "are",
   "connected",
   "by",
   "some",
   "edges",
   "in",
   "the",
   "graph",
   "return",
   "the",
   "minimum",
   "length",
   "of",
   "those",
   "edges",
   "as",
   "a",
   "positive",
   "number",
   "if",
   "v",
   "succeeds",
   "u",
   "and",
   "as",
   "a",
   "negative",
   "number",
   "if",
   "v",
   "precedes",
   "u",
   "."
  ],
  "pl_tokens": [
   "function",
   "minimumLength",
   "(",
   "graph",
   ",",
   "u",
   ",",
   "v",
   ")",
   "{",
   "var",
   "outEdges",
   "=",
   "graph",
   ".",
   "outEdges",
   "(",
   "u",
   ",",
   "v",
   ")",
   ";",
   "if",
   "(",
   "outEdges",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "return",
   "util",
   ".",
   "<mask>",
   "(",
   "outEdges",
   ".",
   "map",
   "(",
   "function",
   "(",
   "e",
   ")",
   "{",
   "return",
   "graph",
   ".",
   "edge",
   "(",
   "e",
   ")",
   ".",
   "minLen",
   ";",
   "}",
   ")",
   ")",
   ";",
   "}",
   "var",
   "inEdges",
   "=",
   "graph",
   ".",
   "inEdges",
   "(",
   "u",
   ",",
   "v",
   ")",
   ";",
   "if",
   "(",
   "inEdges",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "return",
   "-",
   "util",
   ".",
   "max",
   "(",
   "inEdges",
   ".",
   "map",
   "(",
   "function",
   "(",
   "e",
   ")",
   "{",
   "return",
   "graph",
   ".",
   "edge",
   "(",
   "e",
   ")",
   ".",
   "minLen",
   ";",
   "}",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-85",
  "nl_tokens": [
   "Generate",
   "a",
   "paragraph",
   "of",
   "Lorem",
   "ipsum",
   "text"
  ],
  "pl_tokens": [
   "function",
   "paragraph",
   "(",
   "dict",
   ",",
   "wordCount",
   ",",
   "startWithCommon",
   ")",
   "{",
   "const",
   "result",
   "=",
   "[",
   "]",
   ";",
   "let",
   "totalWords",
   "=",
   "0",
   ";",
   "let",
   "words",
   ";",
   "if",
   "(",
   "startWithCommon",
   "&&",
   "dict",
   ".",
   "common",
   ")",
   "{",
   "words",
   "=",
   "dict",
   ".",
   "common",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "wordCount",
   ")",
   ";",
   "totalWords",
   "+=",
   "words",
   ".",
   "length",
   ";",
   "result",
   ".",
   "push",
   "(",
   "sentence",
   "(",
   "insertCommas",
   "(",
   "words",
   ")",
   ",",
   "'.'",
   ")",
   ")",
   ";",
   "}",
   "while",
   "(",
   "totalWords",
   "<",
   "wordCount",
   ")",
   "{",
   "words",
   "=",
   "sample",
   "(",
   "dict",
   ".",
   "words",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "rand",
   "(",
   "2",
   ",",
   "30",
   ")",
   ",",
   "wordCount",
   "-",
   "totalWords",
   ")",
   ")",
   ";",
   "totalWords",
   "+=",
   "words",
   ".",
   "length",
   ";",
   "result",
   ".",
   "push",
   "(",
   "sentence",
   "(",
   "insertCommas",
   "(",
   "words",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "result",
   ".",
   "join",
   "(",
   "' '",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-86",
  "nl_tokens": [
   "Array",
   "of",
   "arrays",
   "in",
   "..",
   "Returns",
   "the",
   "length",
   "of",
   "the",
   "longest",
   "one"
  ],
  "pl_tokens": [
   "function",
   "getLongestArray",
   "(",
   "arrays",
   ")",
   "{",
   "var",
   "lengths",
   "=",
   "arrays",
   ".",
   "map",
   "(",
   "array",
   "=>",
   "array",
   ".",
   "length",
   ")",
   "return",
   "Math",
   ".",
   "<mask>",
   ".",
   "apply",
   "(",
   "null",
   ",",
   "lengths",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-87",
  "nl_tokens": [
   "/",
   "*",
   "21"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "/**\n\t * Returns the larger of its two arguments.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.1.0\n\t * @category Relation\n\t * @sig Ord a => a -> a -> a\n\t * @param {*} a\n\t * @param {*} b\n\t * @return {*}\n\t * @see R.maxBy, R.min\n\t * @example\n\t *\n\t *      R.max(789, 123); //=> 789\n\t *      R.max('a', 'b'); //=> 'b'\n\t */",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "function",
   "max",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "b",
   ">",
   "a",
   "?",
   "b",
   ":",
   "a",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "max",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-88",
  "nl_tokens": [
   "Recursively",
   "collects",
   "octants",
   "that",
   "lie",
   "inside",
   "the",
   "specified",
   "region",
   "."
  ],
  "pl_tokens": [
   "function",
   "cull",
   "(",
   "octant",
   ",",
   "region",
   ",",
   "result",
   ")",
   "{",
   "const",
   "children",
   "=",
   "octant",
   ".",
   "children",
   ";",
   "let",
   "i",
   ",",
   "l",
   ";",
   "b",
   ".",
   "<mask>",
   "=",
   "octant",
   ".",
   "min",
   ";",
   "b",
   ".",
   "max",
   "=",
   "octant",
   ".",
   "max",
   ";",
   "if",
   "(",
   "region",
   ".",
   "intersectsBox",
   "(",
   "b",
   ")",
   ")",
   "{",
   "if",
   "(",
   "children",
   "!==",
   "null",
   ")",
   "{",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "l",
   "=",
   "children",
   ".",
   "length",
   ";",
   "i",
   "<",
   "l",
   ";",
   "++",
   "i",
   ")",
   "{",
   "cull",
   "(",
   "children",
   "[",
   "i",
   "]",
   ",",
   "region",
   ",",
   "result",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "result",
   ".",
   "push",
   "(",
   "octant",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-89",
  "nl_tokens": [
   "Returns",
   "a",
   "random",
   "float",
   "in",
   "range",
   "[",
   "min",
   "max",
   "]",
   "(",
   "inclusive",
   ")"
  ],
  "pl_tokens": [
   "function",
   "(",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "min",
   "=",
   "parseFloat",
   "(",
   "min",
   ")",
   ";",
   "max",
   "=",
   "parseFloat",
   "(",
   "max",
   ")",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "min",
   ")",
   "&&",
   "!",
   "isFinite",
   "(",
   "min",
   ")",
   ")",
   "min",
   "=",
   "0",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "max",
   ")",
   "&&",
   "!",
   "isFinite",
   "(",
   "max",
   ")",
   ")",
   "max",
   "=",
   "Number",
   ".",
   "MAX_VALUE",
   ";",
   "return",
   "Math",
   ".",
   "random",
   "(",
   ")",
   "*",
   "(",
   "max",
   "-",
   "min",
   ")",
   "+",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-90",
  "nl_tokens": [
   "/",
   "*",
   "259"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry1",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "3",
   ")",
   ";",
   "var",
   "curryN",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "7",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "21",
   ")",
   ";",
   "var",
   "pluck",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "27",
   ")",
   ";",
   "var",
   "reduce",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "16",
   ")",
   ";",
   "/**\n\t * Takes a list of predicates and returns a predicate that returns true for a\n\t * given list of arguments if at least one of the provided predicates is\n\t * satisfied by those arguments.\n\t *\n\t * The function returned is a curried function whose arity matches that of the\n\t * highest-arity predicate.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.9.0\n\t * @category Logic\n\t * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n\t * @param {Array} predicates An array of predicates to check\n\t * @return {Function} The combined predicate\n\t * @see R.allPass\n\t * @example\n\t *\n\t *      var isClub = R.propEq('suit', '\u2663');\n\t *      var isSpade = R.propEq('suit', '\u2660');\n\t *      var isBlackCard = R.anyPass([isClub, isSpade]);\n\t *\n\t *      isBlackCard({rank: '10', suit: '\u2663'}); //=> true\n\t *      isBlackCard({rank: 'Q', suit: '\u2660'}); //=> true\n\t *      isBlackCard({rank: 'Q', suit: '\u2666'}); //=> false\n\t */",
   "var",
   "anyPass",
   "=",
   "/*#__PURE__*/",
   "_curry1",
   "(",
   "function",
   "anyPass",
   "(",
   "preds",
   ")",
   "{",
   "return",
   "curryN",
   "(",
   "reduce",
   "(",
   "max",
   ",",
   "0",
   ",",
   "pluck",
   "(",
   "'length'",
   ",",
   "preds",
   ")",
   ")",
   ",",
   "function",
   "(",
   ")",
   "{",
   "var",
   "idx",
   "=",
   "0",
   ";",
   "var",
   "len",
   "=",
   "preds",
   ".",
   "length",
   ";",
   "while",
   "(",
   "idx",
   "<",
   "len",
   ")",
   "{",
   "if",
   "(",
   "preds",
   "[",
   "idx",
   "]",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   ")",
   "{",
   "return",
   "true",
   ";",
   "}",
   "idx",
   "+=",
   "1",
   ";",
   "}",
   "return",
   "false",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "anyPass",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-91",
  "nl_tokens": [
   "HISTOGRAM",
   "---------",
   "Sample",
   "a",
   "histogram",
   "value",
   ".",
   "Histograms",
   "will",
   "produce",
   "metrics",
   "that",
   "describe",
   "the",
   "distribution",
   "of",
   "the",
   "recorded",
   "values",
   "namely",
   "the",
   "minimum",
   "maximum",
   "average",
   "count",
   "and",
   "the",
   "75th",
   "85th",
   "95th",
   "and",
   "99th",
   "percentiles",
   ".",
   "Optionally",
   "specify",
   "a",
   "list",
   "of",
   "*",
   "tags",
   "*",
   "to",
   "associate",
   "with",
   "the",
   "metric",
   "."
  ],
  "pl_tokens": [
   "function",
   "Histogram",
   "(",
   "key",
   ",",
   "tags",
   ",",
   "host",
   ")",
   "{",
   "Metric",
   ".",
   "call",
   "(",
   "this",
   ",",
   "key",
   ",",
   "tags",
   ",",
   "host",
   ")",
   ";",
   "this",
   ".",
   "<mask>",
   "=",
   "Infinity",
   ";",
   "this",
   ".",
   "max",
   "=",
   "-",
   "Infinity",
   ";",
   "this",
   ".",
   "sum",
   "=",
   "0",
   ";",
   "this",
   ".",
   "count",
   "=",
   "0",
   ";",
   "this",
   ".",
   "samples",
   "=",
   "[",
   "]",
   ";",
   "this",
   ".",
   "percentiles",
   "=",
   "[",
   "0.75",
   ",",
   "0.85",
   ",",
   "0.95",
   ",",
   "0.99",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-92",
  "nl_tokens": [
   "/",
   "*",
   "451"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "/**\n\t * Creates a new object out of a list of keys and a list of values.\n\t * Key/value pairing is truncated to the length of the shorter of the two lists.\n\t * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.3.0\n\t * @category List\n\t * @sig [String] -> [*] -> {String: *}\n\t * @param {Array} keys The array that will be properties on the output object.\n\t * @param {Array} values The list of values on the output object.\n\t * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n\t * @example\n\t *\n\t *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n\t */",
   "var",
   "zipObj",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "function",
   "zipObj",
   "(",
   "keys",
   ",",
   "values",
   ")",
   "{",
   "var",
   "idx",
   "=",
   "0",
   ";",
   "var",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "keys",
   ".",
   "length",
   ",",
   "values",
   ".",
   "length",
   ")",
   ";",
   "var",
   "out",
   "=",
   "{",
   "}",
   ";",
   "while",
   "(",
   "idx",
   "<",
   "len",
   ")",
   "{",
   "out",
   "[",
   "keys",
   "[",
   "idx",
   "]",
   "]",
   "=",
   "values",
   "[",
   "idx",
   "]",
   ";",
   "idx",
   "+=",
   "1",
   ";",
   "}",
   "return",
   "out",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "zipObj",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-93",
  "nl_tokens": [
   "Find",
   "an",
   "ancestor",
   "of",
   "a",
   "chunk",
   ".",
   "Return",
   "the",
   "distance",
   "from",
   "the",
   "target",
   "or",
   "-",
   "1",
   "if",
   "not",
   "found",
   "."
  ],
  "pl_tokens": [
   "function",
   "findAncestorDistance",
   "(",
   "src",
   ",",
   "target",
   ",",
   "currentDistance",
   ")",
   "{",
   "if",
   "(",
   "target",
   "===",
   "src",
   ")",
   "{",
   "return",
   "currentDistance",
   ";",
   "}",
   "const",
   "distances",
   "=",
   "[",
   "]",
   ";",
   "src",
   ".",
   "getParents",
   "(",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "srcParentChunkGroup",
   ")",
   "=>",
   "{",
   "const",
   "distance",
   "=",
   "findAncestorDistance",
   "(",
   "srcParentChunkGroup",
   ",",
   "target",
   ",",
   "currentDistance",
   "+",
   "1",
   ")",
   ";",
   "if",
   "(",
   "distance",
   ">=",
   "0",
   ")",
   "{",
   "distances",
   ".",
   "push",
   "(",
   "distance",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "if",
   "(",
   "distances",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "...",
   "distances",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-94",
  "nl_tokens": [
   "Use",
   "MockHttpRequest",
   "in",
   "demos"
  ],
  "pl_tokens": [
   "function",
   "mockXhrGenerator",
   "(",
   "file",
   ")",
   "{",
   "var",
   "xhr",
   "=",
   "new",
   "MockHttpRequest",
   "(",
   ")",
   ";",
   "xhr",
   ".",
   "upload",
   "=",
   "{",
   "}",
   ";",
   "xhr",
   ".",
   "onsend",
   "=",
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "xhr",
   ".",
   "upload",
   ".",
   "onloadstart",
   ")",
   "{",
   "xhr",
   ".",
   "upload",
   ".",
   "onloadstart",
   "(",
   ")",
   ";",
   "}",
   "var",
   "total",
   "=",
   "file",
   "&&",
   "file",
   ".",
   "size",
   "||",
   "1024",
   ",",
   "done",
   "=",
   "0",
   ";",
   "function",
   "start",
   "(",
   ")",
   "{",
   "setTimeout",
   "(",
   "progress",
   ",",
   "1000",
   ")",
   ";",
   "}",
   "function",
   "progress",
   "(",
   ")",
   "{",
   "xhr",
   ".",
   "upload",
   ".",
   "onprogress",
   "(",
   "{",
   "total",
   ":",
   "total",
   ",",
   "loaded",
   ":",
   "done",
   "}",
   ")",
   ";",
   "if",
   "(",
   "done",
   "<",
   "total",
   ")",
   "{",
   "setTimeout",
   "(",
   "progress",
   ",",
   "200",
   ")",
   ";",
   "done",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "total",
   ",",
   "done",
   "+",
   "254000",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "!",
   "file",
   ".",
   "abort",
   ")",
   "{",
   "setTimeout",
   "(",
   "finish",
   ",",
   "1000",
   ")",
   ";",
   "}",
   "}",
   "function",
   "finish",
   "(",
   ")",
   "{",
   "xhr",
   ".",
   "receive",
   "(",
   "200",
   ",",
   "'{\"message\":\"OK\"}'",
   ")",
   ";",
   "}",
   "start",
   "(",
   ")",
   ";",
   "}",
   ";",
   "return",
   "xhr",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-95",
  "nl_tokens": [
   "*",
   "@method",
   "Number",
   ".",
   "random",
   "(",
   "[",
   "n1",
   "]",
   "[",
   "n2",
   "]",
   ")",
   "@returns",
   "Number",
   "@short",
   "Returns",
   "a",
   "random",
   "integer",
   "between",
   "[",
   "n1",
   "]",
   "and",
   "[",
   "n2",
   "]",
   ".",
   "@extra",
   "If",
   "only",
   "1",
   "number",
   "is",
   "passed",
   "the",
   "other",
   "will",
   "be",
   "0",
   ".",
   "If",
   "none",
   "are",
   "passed",
   "the",
   "number",
   "will",
   "be",
   "either",
   "0",
   "or",
   "1",
   ".",
   "@example"
  ],
  "pl_tokens": [
   "function",
   "(",
   "n1",
   ",",
   "n2",
   ")",
   "{",
   "var",
   "<mask>",
   ",",
   "max",
   ";",
   "if",
   "(",
   "arguments",
   ".",
   "length",
   "==",
   "1",
   ")",
   "n2",
   "=",
   "n1",
   ",",
   "n1",
   "=",
   "0",
   ";",
   "min",
   "=",
   "math",
   ".",
   "min",
   "(",
   "n1",
   "||",
   "0",
   ",",
   "isUndefined",
   "(",
   "n2",
   ")",
   "?",
   "1",
   ":",
   "n2",
   ")",
   ";",
   "max",
   "=",
   "math",
   ".",
   "max",
   "(",
   "n1",
   "||",
   "0",
   ",",
   "isUndefined",
   "(",
   "n2",
   ")",
   "?",
   "1",
   ":",
   "n2",
   ")",
   "+",
   "1",
   ";",
   "return",
   "floor",
   "(",
   "(",
   "math",
   ".",
   "random",
   "(",
   ")",
   "*",
   "(",
   "max",
   "-",
   "min",
   ")",
   ")",
   "+",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-96",
  "nl_tokens": [
   "Calculate",
   "the",
   "height",
   "for",
   "containing",
   "the",
   "highest",
   "column"
  ],
  "pl_tokens": [
   "function",
   "calculateLineHeight",
   "(",
   "model",
   ",",
   "columnWidths",
   ")",
   "{",
   "var",
   "padding",
   "=",
   "this",
   ".",
   "internal",
   ".",
   "__cell__",
   ".",
   "padding",
   ";",
   "var",
   "fontSize",
   "=",
   "this",
   ".",
   "internal",
   ".",
   "__cell__",
   ".",
   "table_font_size",
   ";",
   "var",
   "scaleFactor",
   "=",
   "this",
   ".",
   "internal",
   ".",
   "scaleFactor",
   ";",
   "return",
   "Object",
   ".",
   "keys",
   "(",
   "model",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "value",
   ")",
   "{",
   "return",
   "typeof",
   "value",
   "===",
   "'object'",
   "?",
   "value",
   ".",
   "text",
   ":",
   "value",
   "}",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "value",
   ")",
   "{",
   "return",
   "this",
   ".",
   "splitTextToSize",
   "(",
   "value",
   ",",
   "columnWidths",
   "[",
   "value",
   "]",
   "-",
   "padding",
   "-",
   "padding",
   ")",
   "}",
   ",",
   "this",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "value",
   ")",
   "{",
   "return",
   "this",
   ".",
   "getLineHeightFactor",
   "(",
   ")",
   "*",
   "value",
   ".",
   "length",
   "*",
   "fontSize",
   "/",
   "scaleFactor",
   "+",
   "padding",
   "+",
   "padding",
   "}",
   ",",
   "this",
   ")",
   ".",
   "reduce",
   "(",
   "function",
   "(",
   "pv",
   ",",
   "cv",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "pv",
   ",",
   "cv",
   ")",
   "}",
   ",",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-97",
  "nl_tokens": [
   "Forces",
   "the",
   "pagination",
   "to",
   "move",
   "the",
   "focused",
   "tab",
   "into",
   "view",
   "."
  ],
  "pl_tokens": [
   "function",
   "adjustOffset",
   "(",
   "index",
   ")",
   "{",
   "var",
   "elements",
   "=",
   "getElements",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "angular",
   ".",
   "isNumber",
   "(",
   "index",
   ")",
   ")",
   "index",
   "=",
   "ctrl",
   ".",
   "focusIndex",
   ";",
   "if",
   "(",
   "!",
   "elements",
   ".",
   "tabs",
   "[",
   "index",
   "]",
   ")",
   "return",
   ";",
   "if",
   "(",
   "ctrl",
   ".",
   "shouldCenterTabs",
   ")",
   "return",
   ";",
   "var",
   "tab",
   "=",
   "elements",
   ".",
   "tabs",
   "[",
   "index",
   "]",
   ",",
   "left",
   "=",
   "tab",
   ".",
   "offsetLeft",
   ",",
   "right",
   "=",
   "tab",
   ".",
   "offsetWidth",
   "+",
   "left",
   ",",
   "extraOffset",
   "=",
   "32",
   ";",
   "// If we are selecting the first tab (in LTR and RTL), always set the offset to 0",
   "if",
   "(",
   "index",
   "==",
   "0",
   ")",
   "{",
   "ctrl",
   ".",
   "offsetLeft",
   "=",
   "0",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "isRtl",
   "(",
   ")",
   ")",
   "{",
   "var",
   "tabWidthsBefore",
   "=",
   "calcTabsWidth",
   "(",
   "Array",
   ".",
   "prototype",
   ".",
   "slice",
   ".",
   "call",
   "(",
   "elements",
   ".",
   "tabs",
   ",",
   "0",
   ",",
   "index",
   ")",
   ")",
   ";",
   "var",
   "tabWidthsIncluding",
   "=",
   "calcTabsWidth",
   "(",
   "Array",
   ".",
   "prototype",
   ".",
   "slice",
   ".",
   "call",
   "(",
   "elements",
   ".",
   "tabs",
   ",",
   "0",
   ",",
   "index",
   "+",
   "1",
   ")",
   ")",
   ";",
   "ctrl",
   ".",
   "offsetLeft",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "ctrl",
   ".",
   "offsetLeft",
   ",",
   "fixOffset",
   "(",
   "tabWidthsBefore",
   ")",
   ")",
   ";",
   "ctrl",
   ".",
   "offsetLeft",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ctrl",
   ".",
   "offsetLeft",
   ",",
   "fixOffset",
   "(",
   "tabWidthsIncluding",
   "-",
   "elements",
   ".",
   "canvas",
   ".",
   "clientWidth",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ctrl",
   ".",
   "offsetLeft",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ctrl",
   ".",
   "offsetLeft",
   ",",
   "fixOffset",
   "(",
   "right",
   "-",
   "elements",
   ".",
   "canvas",
   ".",
   "clientWidth",
   "+",
   "extraOffset",
   ")",
   ")",
   ";",
   "ctrl",
   ".",
   "offsetLeft",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ctrl",
   ".",
   "offsetLeft",
   ",",
   "fixOffset",
   "(",
   "left",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-98",
  "nl_tokens": [
   "Refreshes",
   "the",
   "list",
   "of",
   "available",
   "options",
   "shown",
   "in",
   "the",
   "autocomplete",
   "dropdown",
   "menu",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "triggerDropdown",
   ")",
   "{",
   "var",
   "i",
   ",",
   "j",
   ",",
   "k",
   ",",
   "n",
   ",",
   "groups",
   ",",
   "groups_order",
   ",",
   "option",
   ",",
   "option_html",
   ",",
   "optgroup",
   ",",
   "optgroups",
   ",",
   "html",
   ",",
   "html_children",
   ",",
   "has_create_option",
   ";",
   "var",
   "$active",
   ",",
   "$active_before",
   ",",
   "$create",
   ";",
   "if",
   "(",
   "typeof",
   "triggerDropdown",
   "===",
   "'undefined'",
   ")",
   "{",
   "triggerDropdown",
   "=",
   "true",
   ";",
   "}",
   "var",
   "self",
   "=",
   "this",
   ";",
   "var",
   "query",
   "=",
   "$",
   ".",
   "trim",
   "(",
   "self",
   ".",
   "$control_input",
   ".",
   "val",
   "(",
   ")",
   ")",
   ";",
   "var",
   "results",
   "=",
   "self",
   ".",
   "search",
   "(",
   "query",
   ")",
   ";",
   "var",
   "$dropdown_content",
   "=",
   "self",
   ".",
   "$dropdown_content",
   ";",
   "var",
   "active_before",
   "=",
   "self",
   ".",
   "$activeOption",
   "&&",
   "hash_key",
   "(",
   "self",
   ".",
   "$activeOption",
   ".",
   "attr",
   "(",
   "'data-value'",
   ")",
   ")",
   ";",
   "// build markup",
   "n",
   "=",
   "results",
   ".",
   "items",
   ".",
   "length",
   ";",
   "if",
   "(",
   "typeof",
   "self",
   ".",
   "settings",
   ".",
   "maxOptions",
   "===",
   "'number'",
   ")",
   "{",
   "n",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "n",
   ",",
   "self",
   ".",
   "settings",
   ".",
   "maxOptions",
   ")",
   ";",
   "}",
   "// render and group available options individually",
   "groups",
   "=",
   "{",
   "}",
   ";",
   "groups_order",
   "=",
   "[",
   "]",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "option",
   "=",
   "self",
   ".",
   "options",
   "[",
   "results",
   ".",
   "items",
   "[",
   "i",
   "]",
   ".",
   "id",
   "]",
   ";",
   "option_html",
   "=",
   "self",
   ".",
   "render",
   "(",
   "'option'",
   ",",
   "option",
   ")",
   ";",
   "optgroup",
   "=",
   "option",
   "[",
   "self",
   ".",
   "settings",
   ".",
   "optgroupField",
   "]",
   "||",
   "''",
   ";",
   "optgroups",
   "=",
   "$",
   ".",
   "isArray",
   "(",
   "optgroup",
   ")",
   "?",
   "optgroup",
   ":",
   "[",
   "optgroup",
   "]",
   ";",
   "for",
   "(",
   "j",
   "=",
   "0",
   ",",
   "k",
   "=",
   "optgroups",
   "&&",
   "optgroups",
   ".",
   "length",
   ";",
   "j",
   "<",
   "k",
   ";",
   "j",
   "++",
   ")",
   "{",
   "optgroup",
   "=",
   "optgroups",
   "[",
   "j",
   "]",
   ";",
   "if",
   "(",
   "!",
   "self",
   ".",
   "optgroups",
   ".",
   "hasOwnProperty",
   "(",
   "optgroup",
   ")",
   ")",
   "{",
   "optgroup",
   "=",
   "''",
   ";",
   "}",
   "if",
   "(",
   "!",
   "groups",
   ".",
   "hasOwnProperty",
   "(",
   "optgroup",
   ")",
   ")",
   "{",
   "groups",
   "[",
   "optgroup",
   "]",
   "=",
   "document",
   ".",
   "createDocumentFragment",
   "(",
   ")",
   ";",
   "groups_order",
   ".",
   "push",
   "(",
   "optgroup",
   ")",
   ";",
   "}",
   "groups",
   "[",
   "optgroup",
   "]",
   ".",
   "appendChild",
   "(",
   "option_html",
   ")",
   ";",
   "}",
   "}",
   "// sort optgroups",
   "if",
   "(",
   "this",
   ".",
   "settings",
   ".",
   "lockOptgroupOrder",
   ")",
   "{",
   "groups_order",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "var",
   "a_order",
   "=",
   "self",
   ".",
   "optgroups",
   "[",
   "a",
   "]",
   ".",
   "$order",
   "||",
   "0",
   ";",
   "var",
   "b_order",
   "=",
   "self",
   ".",
   "optgroups",
   "[",
   "b",
   "]",
   ".",
   "$order",
   "||",
   "0",
   ";",
   "return",
   "a_order",
   "-",
   "b_order",
   ";",
   "}",
   ")",
   ";",
   "}",
   "// render optgroup headers & join groups",
   "html",
   "=",
   "document",
   ".",
   "createDocumentFragment",
   "(",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "n",
   "=",
   "groups_order",
   ".",
   "length",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "optgroup",
   "=",
   "groups_order",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "self",
   ".",
   "optgroups",
   ".",
   "hasOwnProperty",
   "(",
   "optgroup",
   ")",
   "&&",
   "groups",
   "[",
   "optgroup",
   "]",
   ".",
   "childNodes",
   ".",
   "length",
   ")",
   "{",
   "// render the optgroup header and options within it,",
   "// then pass it to the wrapper template",
   "html_children",
   "=",
   "document",
   ".",
   "createDocumentFragment",
   "(",
   ")",
   ";",
   "html_children",
   ".",
   "appendChild",
   "(",
   "self",
   ".",
   "render",
   "(",
   "'optgroup_header'",
   ",",
   "self",
   ".",
   "optgroups",
   "[",
   "optgroup",
   "]",
   ")",
   ")",
   ";",
   "html_children",
   ".",
   "appendChild",
   "(",
   "groups",
   "[",
   "optgroup",
   "]",
   ")",
   ";",
   "html",
   ".",
   "appendChild",
   "(",
   "self",
   ".",
   "render",
   "(",
   "'optgroup'",
   ",",
   "$",
   ".",
   "extend",
   "(",
   "{",
   "}",
   ",",
   "self",
   ".",
   "optgroups",
   "[",
   "optgroup",
   "]",
   ",",
   "{",
   "html",
   ":",
   "domToString",
   "(",
   "html_children",
   ")",
   ",",
   "dom",
   ":",
   "html_children",
   "}",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "html",
   ".",
   "appendChild",
   "(",
   "groups",
   "[",
   "optgroup",
   "]",
   ")",
   ";",
   "}",
   "}",
   "$dropdown_content",
   ".",
   "html",
   "(",
   "html",
   ")",
   ";",
   "// highlight matching terms inline",
   "if",
   "(",
   "self",
   ".",
   "settings",
   ".",
   "highlight",
   ")",
   "{",
   "$dropdown_content",
   ".",
   "removeHighlight",
   "(",
   ")",
   ";",
   "if",
   "(",
   "results",
   ".",
   "query",
   ".",
   "length",
   "&&",
   "results",
   ".",
   "tokens",
   ".",
   "length",
   ")",
   "{",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "n",
   "=",
   "results",
   ".",
   "tokens",
   ".",
   "length",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "highlight",
   "(",
   "$dropdown_content",
   ",",
   "results",
   ".",
   "tokens",
   "[",
   "i",
   "]",
   ".",
   "regex",
   ")",
   ";",
   "}",
   "}",
   "}",
   "// add \"selected\" class to selected options",
   "if",
   "(",
   "!",
   "self",
   ".",
   "settings",
   ".",
   "hideSelected",
   ")",
   "{",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "n",
   "=",
   "self",
   ".",
   "items",
   ".",
   "length",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "self",
   ".",
   "getOption",
   "(",
   "self",
   ".",
   "items",
   "[",
   "i",
   "]",
   ")",
   ".",
   "addClass",
   "(",
   "'selected'",
   ")",
   ";",
   "}",
   "}",
   "// add create option",
   "has_create_option",
   "=",
   "self",
   ".",
   "canCreate",
   "(",
   "query",
   ")",
   ";",
   "if",
   "(",
   "has_create_option",
   ")",
   "{",
   "$dropdown_content",
   ".",
   "prepend",
   "(",
   "self",
   ".",
   "render",
   "(",
   "'option_create'",
   ",",
   "{",
   "input",
   ":",
   "query",
   "}",
   ")",
   ")",
   ";",
   "$create",
   "=",
   "$",
   "(",
   "$dropdown_content",
   "[",
   "0",
   "]",
   ".",
   "childNodes",
   "[",
   "0",
   "]",
   ")",
   ";",
   "}",
   "// activate",
   "self",
   ".",
   "hasOptions",
   "=",
   "results",
   ".",
   "items",
   ".",
   "length",
   ">",
   "0",
   "||",
   "has_create_option",
   ";",
   "if",
   "(",
   "self",
   ".",
   "hasOptions",
   ")",
   "{",
   "if",
   "(",
   "results",
   ".",
   "items",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "$active_before",
   "=",
   "active_before",
   "&&",
   "self",
   ".",
   "getOption",
   "(",
   "active_before",
   ")",
   ";",
   "if",
   "(",
   "$active_before",
   "&&",
   "$active_before",
   ".",
   "length",
   ")",
   "{",
   "$active",
   "=",
   "$active_before",
   ";",
   "}",
   "else",
   "if",
   "(",
   "self",
   ".",
   "settings",
   ".",
   "mode",
   "===",
   "'single'",
   "&&",
   "self",
   ".",
   "items",
   ".",
   "length",
   ")",
   "{",
   "$active",
   "=",
   "self",
   ".",
   "getOption",
   "(",
   "self",
   ".",
   "items",
   "[",
   "0",
   "]",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "$active",
   "||",
   "!",
   "$active",
   ".",
   "length",
   ")",
   "{",
   "if",
   "(",
   "$create",
   "&&",
   "!",
   "self",
   ".",
   "settings",
   ".",
   "addPrecedence",
   ")",
   "{",
   "$active",
   "=",
   "self",
   ".",
   "getAdjacentOption",
   "(",
   "$create",
   ",",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "$active",
   "=",
   "$dropdown_content",
   ".",
   "find",
   "(",
   "'[data-selectable]:first'",
   ")",
   ";",
   "}",
   "}",
   "}",
   "else",
   "{",
   "$active",
   "=",
   "$create",
   ";",
   "}",
   "self",
   ".",
   "setActiveOption",
   "(",
   "$active",
   ")",
   ";",
   "if",
   "(",
   "triggerDropdown",
   "&&",
   "!",
   "self",
   ".",
   "isOpen",
   ")",
   "{",
   "self",
   ".",
   "open",
   "(",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "self",
   ".",
   "setActiveOption",
   "(",
   "null",
   ")",
   ";",
   "if",
   "(",
   "triggerDropdown",
   "&&",
   "self",
   ".",
   "isOpen",
   ")",
   "{",
   "self",
   ".",
   "close",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-99",
  "nl_tokens": [
   "getDatetimeUnit",
   "-",
   "determine",
   "the",
   "unit",
   "of",
   "time",
   "for",
   "padding",
   "the",
   "axis"
  ],
  "pl_tokens": [
   "function",
   "getDatetimeUnit",
   "(",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "const",
   "diff",
   "=",
   "max",
   ".",
   "diff",
   "(",
   "min",
   ",",
   "'days'",
   ")",
   ";",
   "let",
   "unit",
   "=",
   "'month'",
   ";",
   "if",
   "(",
   "diff",
   "<=",
   "14",
   ")",
   "{",
   "unit",
   "=",
   "'day'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "diff",
   ">",
   "14",
   "&&",
   "diff",
   "<=",
   "183",
   ")",
   "{",
   "unit",
   "=",
   "'week'",
   ";",
   "}",
   "return",
   "unit",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-100",
  "nl_tokens": [
   "eslint",
   "-",
   "disable",
   "-",
   "next",
   "-",
   "line",
   "max",
   "-",
   "statements"
  ],
  "pl_tokens": [
   "function",
   "padDomain",
   "(",
   "domain",
   ",",
   "props",
   ",",
   "axis",
   ")",
   "{",
   "if",
   "(",
   "!",
   "props",
   ".",
   "domainPadding",
   ")",
   "{",
   "return",
   "domain",
   ";",
   "}",
   "const",
   "minDomain",
   "=",
   "getMinFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "maxDomain",
   "=",
   "getMaxFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "padding",
   "=",
   "getDomainPadding",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "if",
   "(",
   "!",
   "padding",
   ".",
   "left",
   "&&",
   "!",
   "padding",
   ".",
   "right",
   ")",
   "{",
   "return",
   "domain",
   ";",
   "}",
   "const",
   "<mask>",
   "=",
   "Collection",
   ".",
   "getMinValue",
   "(",
   "domain",
   ")",
   ";",
   "const",
   "max",
   "=",
   "Collection",
   ".",
   "getMaxValue",
   "(",
   "domain",
   ")",
   ";",
   "const",
   "currentAxis",
   "=",
   "Helpers",
   ".",
   "getCurrentAxis",
   "(",
   "axis",
   ",",
   "props",
   ".",
   "horizontal",
   ")",
   ";",
   "const",
   "range",
   "=",
   "Helpers",
   ".",
   "getRange",
   "(",
   "props",
   ",",
   "currentAxis",
   ")",
   ";",
   "const",
   "rangeExtent",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "range",
   "[",
   "0",
   "]",
   "-",
   "range",
   "[",
   "1",
   "]",
   ")",
   ";",
   "// Naive initial padding calculation",
   "const",
   "initialPadding",
   "=",
   "{",
   "left",
   ":",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "max",
   "-",
   "min",
   ")",
   "*",
   "padding",
   ".",
   "left",
   ")",
   "/",
   "rangeExtent",
   ",",
   "right",
   ":",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "max",
   "-",
   "min",
   ")",
   "*",
   "padding",
   ".",
   "right",
   ")",
   "/",
   "rangeExtent",
   "}",
   ";",
   "const",
   "singleQuadrantDomainPadding",
   "=",
   "isPlainObject",
   "(",
   "props",
   ".",
   "singleQuadrantDomainPadding",
   ")",
   "?",
   "props",
   ".",
   "singleQuadrantDomainPadding",
   "[",
   "axis",
   "]",
   ":",
   "props",
   ".",
   "singleQuadrantDomainPadding",
   ";",
   "const",
   "adjust",
   "=",
   "(",
   "val",
   ",",
   "type",
   ")",
   "=>",
   "{",
   "if",
   "(",
   "singleQuadrantDomainPadding",
   "===",
   "false",
   ")",
   "{",
   "return",
   "val",
   ";",
   "}",
   "const",
   "coerce",
   "=",
   "(",
   "type",
   "===",
   "\"min\"",
   "&&",
   "min",
   ">=",
   "0",
   "&&",
   "val",
   "<=",
   "0",
   ")",
   "||",
   "(",
   "type",
   "===",
   "\"max\"",
   "&&",
   "max",
   "<=",
   "0",
   "&&",
   "val",
   ">=",
   "0",
   ")",
   ";",
   "return",
   "coerce",
   "?",
   "0",
   ":",
   "val",
   ";",
   "}",
   ";",
   "// Adjust the domain by the initial padding",
   "const",
   "adjustedDomain",
   "=",
   "{",
   "min",
   ":",
   "adjust",
   "(",
   "min",
   ".",
   "valueOf",
   "(",
   ")",
   "-",
   "initialPadding",
   ".",
   "left",
   ",",
   "\"min\"",
   ")",
   ",",
   "max",
   ":",
   "adjust",
   "(",
   "max",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "initialPadding",
   ".",
   "right",
   ",",
   "\"max\"",
   ")",
   "}",
   ";",
   "// re-calculate padding, taking the adjusted domain into account",
   "const",
   "finalPadding",
   "=",
   "{",
   "left",
   ":",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "adjustedDomain",
   ".",
   "max",
   "-",
   "adjustedDomain",
   ".",
   "min",
   ")",
   "*",
   "padding",
   ".",
   "left",
   ")",
   "/",
   "rangeExtent",
   ",",
   "right",
   ":",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "adjustedDomain",
   ".",
   "max",
   "-",
   "adjustedDomain",
   ".",
   "min",
   ")",
   "*",
   "padding",
   ".",
   "right",
   ")",
   "/",
   "rangeExtent",
   "}",
   ";",
   "// Adjust the domain by the final padding",
   "const",
   "paddedDomain",
   "=",
   "{",
   "min",
   ":",
   "adjust",
   "(",
   "min",
   ".",
   "valueOf",
   "(",
   ")",
   "-",
   "finalPadding",
   ".",
   "left",
   ",",
   "\"min\"",
   ")",
   ",",
   "max",
   ":",
   "adjust",
   "(",
   "max",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "finalPadding",
   ".",
   "right",
   ",",
   "\"max\"",
   ")",
   "}",
   ";",
   "// default to minDomain / maxDomain if they exist",
   "const",
   "finalDomain",
   "=",
   "{",
   "min",
   ":",
   "minDomain",
   "!==",
   "undefined",
   "?",
   "minDomain",
   ":",
   "paddedDomain",
   ".",
   "min",
   ",",
   "max",
   ":",
   "maxDomain",
   "!==",
   "undefined",
   "?",
   "maxDomain",
   ":",
   "paddedDomain",
   ".",
   "max",
   "}",
   ";",
   "return",
   "min",
   "instanceof",
   "Date",
   "||",
   "max",
   "instanceof",
   "Date",
   "?",
   "getDomainFromMinMax",
   "(",
   "new",
   "Date",
   "(",
   "finalDomain",
   ".",
   "min",
   ")",
   ",",
   "new",
   "Date",
   "(",
   "finalDomain",
   ".",
   "max",
   ")",
   ")",
   ":",
   "getDomainFromMinMax",
   "(",
   "finalDomain",
   ".",
   "min",
   ",",
   "finalDomain",
   ".",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-101",
  "nl_tokens": [
   "single"
  ],
  "pl_tokens": [
   "function",
   "(",
   "data",
   ",",
   "initial",
   ",",
   "noHighlightUpdate",
   ")",
   "{",
   "var",
   "selected",
   "=",
   "0",
   ",",
   "self",
   "=",
   "this",
   ",",
   "showSearchInput",
   "=",
   "true",
   ";",
   "// find the selected element in the result list",
   "this",
   ".",
   "findHighlightableChoices",
   "(",
   ")",
   ".",
   "each2",
   "(",
   "function",
   "(",
   "i",
   ",",
   "elm",
   ")",
   "{",
   "if",
   "(",
   "equal",
   "(",
   "self",
   ".",
   "id",
   "(",
   "elm",
   ".",
   "data",
   "(",
   "\"select2-data\"",
   ")",
   ")",
   ",",
   "self",
   ".",
   "opts",
   ".",
   "element",
   ".",
   "val",
   "(",
   ")",
   ")",
   ")",
   "{",
   "selected",
   "=",
   "i",
   ";",
   "return",
   "false",
   ";",
   "}",
   "}",
   ")",
   ";",
   "// and highlight it",
   "if",
   "(",
   "noHighlightUpdate",
   "!==",
   "false",
   ")",
   "{",
   "if",
   "(",
   "initial",
   "===",
   "true",
   "&&",
   "selected",
   ">=",
   "0",
   ")",
   "{",
   "this",
   ".",
   "highlight",
   "(",
   "selected",
   ")",
   ";",
   "}",
   "else",
   "{",
   "this",
   ".",
   "highlight",
   "(",
   "0",
   ")",
   ";",
   "}",
   "}",
   "// hide the search box if this is the first we got the results and there are enough of them for search",
   "if",
   "(",
   "initial",
   "===",
   "true",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "this",
   ".",
   "opts",
   ".",
   "minimumResultsForSearch",
   ";",
   "if",
   "(",
   "min",
   ">=",
   "0",
   ")",
   "{",
   "this",
   ".",
   "showSearch",
   "(",
   "countResults",
   "(",
   "data",
   ".",
   "results",
   ")",
   ">=",
   "min",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-102",
  "nl_tokens": [
   "/",
   "*",
   "273"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_arity",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "14",
   ")",
   ";",
   "var",
   "_curry1",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "3",
   ")",
   ";",
   "var",
   "map",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "9",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "21",
   ")",
   ";",
   "var",
   "reduce",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "16",
   ")",
   ";",
   "/**\n\t * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n\t * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n\t * to `fn` are applied to each of the predicates in turn until one returns a\n\t * \"truthy\" value, at which point `fn` returns the result of applying its\n\t * arguments to the corresponding transformer. If none of the predicates\n\t * matches, `fn` returns undefined.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.6.0\n\t * @category Logic\n\t * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n\t * @param {Array} pairs A list of [predicate, transformer]\n\t * @return {Function}\n\t * @example\n\t *\n\t *      var fn = R.cond([\n\t *        [R.equals(0),   R.always('water freezes at 0\u00b0C')],\n\t *        [R.equals(100), R.always('water boils at 100\u00b0C')],\n\t *        [R.T,           temp => 'nothing special happens at ' + temp + '\u00b0C']\n\t *      ]);\n\t *      fn(0); //=> 'water freezes at 0\u00b0C'\n\t *      fn(50); //=> 'nothing special happens at 50\u00b0C'\n\t *      fn(100); //=> 'water boils at 100\u00b0C'\n\t */",
   "var",
   "cond",
   "=",
   "/*#__PURE__*/",
   "_curry1",
   "(",
   "function",
   "cond",
   "(",
   "pairs",
   ")",
   "{",
   "var",
   "arity",
   "=",
   "reduce",
   "(",
   "max",
   ",",
   "0",
   ",",
   "map",
   "(",
   "function",
   "(",
   "pair",
   ")",
   "{",
   "return",
   "pair",
   "[",
   "0",
   "]",
   ".",
   "length",
   ";",
   "}",
   ",",
   "pairs",
   ")",
   ")",
   ";",
   "return",
   "_arity",
   "(",
   "arity",
   ",",
   "function",
   "(",
   ")",
   "{",
   "var",
   "idx",
   "=",
   "0",
   ";",
   "while",
   "(",
   "idx",
   "<",
   "pairs",
   ".",
   "length",
   ")",
   "{",
   "if",
   "(",
   "pairs",
   "[",
   "idx",
   "]",
   "[",
   "0",
   "]",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   ")",
   "{",
   "return",
   "pairs",
   "[",
   "idx",
   "]",
   "[",
   "1",
   "]",
   ".",
   "apply",
   "(",
   "this",
   ",",
   "arguments",
   ")",
   ";",
   "}",
   "idx",
   "+=",
   "1",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "cond",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-103",
  "nl_tokens": [
   "Wraps",
   "a",
   "pointer",
   "(",
   "number",
   ")",
   "around",
   "a",
   "bounds",
   "(",
   "range",
   "of",
   "two",
   "numbers",
   ")",
   "or",
   "returns",
   "the",
   "next",
   "valid",
   "pointer",
   "depending",
   "on",
   "direction",
   ":",
   "E",
   ".",
   "g",
   ".",
   "If",
   "pointer",
   "is",
   "less",
   "than",
   "min",
   "then",
   "returns",
   "max",
   ".",
   "If",
   "pointer",
   "is",
   "greater",
   "than",
   "max",
   "returns",
   "min",
   ".",
   "If",
   "pointer",
   "is",
   "within",
   "bounds",
   "then",
   "returns",
   "pointer",
   "."
  ],
  "pl_tokens": [
   "function",
   "wrapPointer",
   "(",
   "pointer",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "return",
   "pointer",
   ">",
   "max",
   "?",
   "min",
   ":",
   "(",
   "pointer",
   "<",
   "min",
   "?",
   "max",
   ":",
   "pointer",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-104",
  "nl_tokens": [
   "For",
   ".",
   "indexOf",
   "we",
   "don",
   "t",
   "need",
   "to",
   "pass",
   "in",
   "the",
   "number",
   "of",
   "arguments",
   "at",
   "the",
   "callsite",
   "since",
   "ToInteger",
   "(",
   "undefined",
   ")",
   "==",
   "0",
   ";",
   "however",
   "for",
   ".",
   "lastIndexOf",
   "we",
   "need",
   "to",
   "pass",
   "it",
   "since",
   "the",
   "behavior",
   "for",
   "passing",
   "undefined",
   "is",
   "0",
   "but",
   "for",
   "not",
   "including",
   "the",
   "argument",
   "is",
   "length",
   "-",
   "1",
   "."
  ],
  "pl_tokens": [
   "function",
   "InnerArrayIndexOf",
   "(",
   "array",
   ",",
   "element",
   ",",
   "index",
   ",",
   "length",
   ")",
   "{",
   "if",
   "(",
   "length",
   "==",
   "0",
   ")",
   "return",
   "-",
   "1",
   ";",
   "if",
   "(",
   "IS_UNDEFINED",
   "(",
   "index",
   ")",
   ")",
   "{",
   "index",
   "=",
   "0",
   ";",
   "}",
   "else",
   "{",
   "index",
   "=",
   "INVERT_NEG_ZERO",
   "(",
   "TO_INTEGER",
   "(",
   "index",
   ")",
   ")",
   ";",
   "// If index is negative, index from the end of the array.",
   "if",
   "(",
   "index",
   "<",
   "0",
   ")",
   "{",
   "index",
   "=",
   "length",
   "+",
   "index",
   ";",
   "// If index is still negative, search the entire array.",
   "if",
   "(",
   "index",
   "<",
   "0",
   ")",
   "index",
   "=",
   "0",
   ";",
   "}",
   "}",
   "var",
   "<mask>",
   "=",
   "index",
   ";",
   "var",
   "max",
   "=",
   "length",
   ";",
   "if",
   "(",
   "UseSparseVariant",
   "(",
   "array",
   ",",
   "length",
   ",",
   "IS_ARRAY",
   "(",
   "array",
   ")",
   ",",
   "max",
   "-",
   "min",
   ")",
   ")",
   "{",
   "%",
   "NormalizeElements",
   "(",
   "array",
   ")",
   ";",
   "var",
   "indices",
   "=",
   "%",
   "GetArrayKeys",
   "(",
   "array",
   ",",
   "length",
   ")",
   ";",
   "if",
   "(",
   "IS_NUMBER",
   "(",
   "indices",
   ")",
   ")",
   "{",
   "// It's an interval.",
   "max",
   "=",
   "indices",
   ";",
   "// Capped by length already.",
   "// Fall through to loop below.",
   "}",
   "else",
   "{",
   "if",
   "(",
   "indices",
   ".",
   "length",
   "==",
   "0",
   ")",
   "return",
   "-",
   "1",
   ";",
   "// Get all the keys in sorted order.",
   "var",
   "sortedKeys",
   "=",
   "GetSortedArrayKeys",
   "(",
   "array",
   ",",
   "indices",
   ")",
   ";",
   "var",
   "n",
   "=",
   "sortedKeys",
   ".",
   "length",
   ";",
   "var",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "i",
   "<",
   "n",
   "&&",
   "sortedKeys",
   "[",
   "i",
   "]",
   "<",
   "index",
   ")",
   "i",
   "++",
   ";",
   "while",
   "(",
   "i",
   "<",
   "n",
   ")",
   "{",
   "var",
   "key",
   "=",
   "sortedKeys",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "array",
   "[",
   "key",
   "]",
   "===",
   "element",
   ")",
   "return",
   "key",
   ";",
   "i",
   "++",
   ";",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}",
   "}",
   "// Lookup through the array.",
   "if",
   "(",
   "!",
   "IS_UNDEFINED",
   "(",
   "element",
   ")",
   ")",
   "{",
   "for",
   "(",
   "var",
   "i",
   "=",
   "min",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "array",
   "[",
   "i",
   "]",
   "===",
   "element",
   ")",
   "return",
   "i",
   ";",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}",
   "// Lookup through the array.",
   "for",
   "(",
   "var",
   "i",
   "=",
   "min",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "IS_UNDEFINED",
   "(",
   "array",
   "[",
   "i",
   "]",
   ")",
   "&&",
   "i",
   "in",
   "array",
   ")",
   "{",
   "return",
   "i",
   ";",
   "}",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-105",
  "nl_tokens": [
   "************************************************************",
   "Event",
   "Functions",
   "************************************************************"
  ],
  "pl_tokens": [
   "function",
   "timelineMouseDown",
   "(",
   "e",
   ")",
   "{",
   "previousXPosition",
   "=",
   "e",
   ".",
   "clientX",
   ";",
   "previousYPosition",
   "=",
   "e",
   ".",
   "clientY",
   ";",
   "var",
   "chartAxes",
   "=",
   "existingChartRef",
   ".",
   "getAxes",
   "(",
   ")",
   ";",
   "var",
   "timelineAxes",
   "=",
   "plot",
   ".",
   "getAxes",
   "(",
   ")",
   ";",
   "var",
   "leftBoundVal",
   "=",
   "chartAxes",
   ".",
   "xaxis",
   ".",
   "<mask>",
   ";",
   "var",
   "rightBoundVal",
   "=",
   "chartAxes",
   ".",
   "xaxis",
   ".",
   "max",
   ";",
   "var",
   "eventVal",
   "=",
   "timelineAxes",
   ".",
   "xaxis",
   ".",
   "c2p",
   "(",
   "e",
   ".",
   "clientX",
   "-",
   "plot",
   ".",
   "offset",
   "(",
   ")",
   ".",
   "left",
   ")",
   ";",
   "if",
   "(",
   "(",
   "eventVal",
   "<",
   "leftBoundVal",
   "||",
   "eventVal",
   ">",
   "rightBoundVal",
   ")",
   "&&",
   "updateExistingChart",
   ")",
   "{",
   "//Center chart on the click event.",
   "if",
   "(",
   "existingChartRef",
   "==",
   "null",
   ")",
   "{",
   "return",
   ";",
   "}",
   "var",
   "existingChartGetAxes",
   "=",
   "existingChartRef",
   ".",
   "getAxes",
   "(",
   ")",
   ";",
   "var",
   "newPos",
   "=",
   "timelineAxes",
   ".",
   "xaxis",
   ".",
   "c2p",
   "(",
   "e",
   ".",
   "clientX",
   "-",
   "plot",
   ".",
   "offset",
   "(",
   ")",
   ".",
   "left",
   ")",
   ";",
   "var",
   "timePerDivision",
   "=",
   "(",
   "existingChartGetAxes",
   ".",
   "xaxis",
   ".",
   "max",
   "-",
   "existingChartGetAxes",
   ".",
   "xaxis",
   ".",
   "min",
   ")",
   "/",
   "10",
   ";",
   "var",
   "min",
   "=",
   "newPos",
   "-",
   "timePerDivision",
   "*",
   "5",
   ";",
   "var",
   "max",
   "=",
   "newPos",
   "+",
   "timePerDivision",
   "*",
   "5",
   ";",
   "existingChartGetAxes",
   ".",
   "xaxis",
   ".",
   "options",
   ".",
   "min",
   "=",
   "min",
   ";",
   "existingChartGetAxes",
   ".",
   "xaxis",
   ".",
   "options",
   ".",
   "max",
   "=",
   "max",
   ";",
   "existingChartRef",
   ".",
   "setupGrid",
   "(",
   ")",
   ";",
   "existingChartRef",
   ".",
   "draw",
   "(",
   ")",
   ";",
   "plot",
   ".",
   "updateTimelineCurtains",
   "(",
   "{",
   "min",
   ":",
   "min",
   ",",
   "max",
   ":",
   "max",
   "}",
   ")",
   ";",
   "}",
   "plot",
   ".",
   "getPlaceholder",
   "(",
   ")",
   ".",
   "bind",
   "(",
   "'mousemove'",
   ",",
   "horPanTimeline",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-106",
  "nl_tokens": [
   "Return",
   "a",
   "array",
   "of",
   "objects",
   "that",
   "represent",
   "bezier",
   "curves",
   "which",
   "approximate",
   "the",
   "circular",
   "arc",
   "centered",
   "at",
   "the",
   "origin",
   "from",
   "startAngle",
   "to",
   "endAngle",
   "(",
   "radians",
   ")",
   "with",
   "the",
   "specified",
   "radius",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "radius",
   ",",
   "startAngle",
   ",",
   "endAngle",
   ",",
   "anticlockwise",
   ")",
   "{",
   "var",
   "EPSILON",
   "=",
   "0.00001",
   ";",
   "// Roughly 1/1000th of a degree, see below ",
   "var",
   "twoPi",
   "=",
   "Math",
   ".",
   "PI",
   "*",
   "2",
   ";",
   "var",
   "halfPi",
   "=",
   "Math",
   ".",
   "PI",
   "/",
   "2.0",
   ";",
   "while",
   "(",
   "startAngle",
   ">",
   "endAngle",
   ")",
   "{",
   "startAngle",
   "=",
   "startAngle",
   "-",
   "twoPi",
   ";",
   "}",
   "var",
   "totalAngle",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "endAngle",
   "-",
   "startAngle",
   ")",
   ";",
   "if",
   "(",
   "totalAngle",
   "<",
   "twoPi",
   ")",
   "{",
   "if",
   "(",
   "anticlockwise",
   ")",
   "{",
   "totalAngle",
   "=",
   "twoPi",
   "-",
   "totalAngle",
   ";",
   "}",
   "}",
   "// Compute the sequence of arc curves, up to PI/2 at a time.",
   "var",
   "curves",
   "=",
   "[",
   "]",
   ";",
   "// clockwise or counterclockwise",
   "var",
   "sgn",
   "=",
   "anticlockwise",
   "?",
   "-",
   "1",
   ":",
   "+",
   "1",
   ";",
   "var",
   "a1",
   "=",
   "startAngle",
   ";",
   "for",
   "(",
   ";",
   "totalAngle",
   ">",
   "EPSILON",
   ";",
   ")",
   "{",
   "var",
   "remain",
   "=",
   "sgn",
   "*",
   "Math",
   ".",
   "<mask>",
   "(",
   "totalAngle",
   ",",
   "halfPi",
   ")",
   ";",
   "var",
   "a2",
   "=",
   "a1",
   "+",
   "remain",
   ";",
   "curves",
   ".",
   "push",
   "(",
   "createSmallArc",
   ".",
   "call",
   "(",
   "this",
   ",",
   "radius",
   ",",
   "a1",
   ",",
   "a2",
   ")",
   ")",
   ";",
   "totalAngle",
   "-=",
   "Math",
   ".",
   "abs",
   "(",
   "a2",
   "-",
   "a1",
   ")",
   ";",
   "a1",
   "=",
   "a2",
   ";",
   "}",
   "return",
   "curves",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-107",
  "nl_tokens": [
   "Return",
   "a",
   "array",
   "of",
   "objects",
   "that",
   "represent",
   "bezier",
   "curves",
   "which",
   "approximate",
   "the",
   "circular",
   "arc",
   "centered",
   "at",
   "the",
   "origin",
   "from",
   "startAngle",
   "to",
   "endAngle",
   "(",
   "radians",
   ")",
   "with",
   "the",
   "specified",
   "radius",
   "."
  ],
  "pl_tokens": [
   "function",
   "createArc",
   "(",
   "radius",
   ",",
   "startAngle",
   ",",
   "endAngle",
   ",",
   "anticlockwise",
   ")",
   "{",
   "var",
   "EPSILON",
   "=",
   "0.00001",
   ";",
   "// Roughly 1/1000th of a degree, see below        // normalize startAngle, endAngle to [-2PI, 2PI]",
   "var",
   "twoPI",
   "=",
   "Math",
   ".",
   "PI",
   "*",
   "2",
   ";",
   "var",
   "startAngleN",
   "=",
   "startAngle",
   ";",
   "if",
   "(",
   "startAngleN",
   "<",
   "twoPI",
   "||",
   "startAngleN",
   ">",
   "twoPI",
   ")",
   "{",
   "startAngleN",
   "=",
   "startAngleN",
   "%",
   "twoPI",
   ";",
   "}",
   "var",
   "endAngleN",
   "=",
   "endAngle",
   ";",
   "if",
   "(",
   "endAngleN",
   "<",
   "twoPI",
   "||",
   "endAngleN",
   ">",
   "twoPI",
   ")",
   "{",
   "endAngleN",
   "=",
   "endAngleN",
   "%",
   "twoPI",
   ";",
   "}",
   "// Compute the sequence of arc curves, up to PI/2 at a time.        // Total arc angle is less than 2PI.",
   "var",
   "curves",
   "=",
   "[",
   "]",
   ";",
   "var",
   "piOverTwo",
   "=",
   "Math",
   ".",
   "PI",
   "/",
   "2.0",
   ";",
   "//var sgn = (startAngle < endAngle) ? +1 : -1; // clockwise or counterclockwise",
   "var",
   "sgn",
   "=",
   "anticlockwise",
   "?",
   "-",
   "1",
   ":",
   "+",
   "1",
   ";",
   "var",
   "a1",
   "=",
   "startAngle",
   ";",
   "for",
   "(",
   "var",
   "totalAngle",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "twoPI",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "endAngleN",
   "-",
   "startAngleN",
   ")",
   ")",
   ";",
   "totalAngle",
   ">",
   "EPSILON",
   ";",
   ")",
   "{",
   "var",
   "a2",
   "=",
   "a1",
   "+",
   "sgn",
   "*",
   "Math",
   ".",
   "min",
   "(",
   "totalAngle",
   ",",
   "piOverTwo",
   ")",
   ";",
   "curves",
   ".",
   "push",
   "(",
   "createSmallArc",
   ".",
   "call",
   "(",
   "this",
   ",",
   "radius",
   ",",
   "a1",
   ",",
   "a2",
   ")",
   ")",
   ";",
   "totalAngle",
   "-=",
   "Math",
   ".",
   "abs",
   "(",
   "a2",
   "-",
   "a1",
   ")",
   ";",
   "a1",
   "=",
   "a2",
   ";",
   "}",
   "return",
   "curves",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-108",
  "nl_tokens": [
   "private"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ";",
   "// override encodeFilters to append type and operator in remote filtering\r",
   "Ext",
   ".",
   "apply",
   "(",
   "me",
   ".",
   "grid",
   ".",
   "store",
   ".",
   "proxy",
   ",",
   "{",
   "encodeFilters",
   ":",
   "function",
   "(",
   "filters",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "[",
   "]",
   ",",
   "length",
   "=",
   "filters",
   ".",
   "length",
   ",",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "min",
   "[",
   "i",
   "]",
   "=",
   "{",
   "property",
   ":",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "property",
   ",",
   "value",
   ":",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "value",
   "}",
   ";",
   "if",
   "(",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "type",
   ")",
   "{",
   "min",
   "[",
   "i",
   "]",
   ".",
   "type",
   "=",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "type",
   ";",
   "}",
   "if",
   "(",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "operator",
   ")",
   "{",
   "min",
   "[",
   "i",
   "]",
   ".",
   "operator",
   "=",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "operator",
   ";",
   "}",
   "}",
   "return",
   "this",
   ".",
   "applyEncoding",
   "(",
   "min",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-109",
  "nl_tokens": [
   "/",
   "*",
   "194"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "var",
   "_map",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "37",
   ")",
   ";",
   "var",
   "curryN",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "7",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "21",
   ")",
   ";",
   "var",
   "pluck",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "27",
   ")",
   ";",
   "var",
   "reduce",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "16",
   ")",
   ";",
   "/**\n\t * Accepts a converging function and a list of branching functions and returns\n\t * a new function. When invoked, this new function is applied to some\n\t * arguments, each branching function is applied to those same arguments. The\n\t * results of each branching function are passed as arguments to the converging\n\t * function to produce the return value.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.4.2\n\t * @category Function\n\t * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n\t * @param {Function} after A function. `after` will be invoked with the return values of\n\t *        `fn1` and `fn2` as its arguments.\n\t * @param {Array} functions A list of functions.\n\t * @return {Function} A new function.\n\t * @see R.useWith\n\t * @example\n\t *\n\t *      var average = R.converge(R.divide, [R.sum, R.length])\n\t *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n\t *\n\t *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n\t *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n\t *\n\t * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n\t */",
   "var",
   "converge",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "function",
   "converge",
   "(",
   "after",
   ",",
   "fns",
   ")",
   "{",
   "return",
   "curryN",
   "(",
   "reduce",
   "(",
   "max",
   ",",
   "0",
   ",",
   "pluck",
   "(",
   "'length'",
   ",",
   "fns",
   ")",
   ")",
   ",",
   "function",
   "(",
   ")",
   "{",
   "var",
   "args",
   "=",
   "arguments",
   ";",
   "var",
   "context",
   "=",
   "this",
   ";",
   "return",
   "after",
   ".",
   "apply",
   "(",
   "context",
   ",",
   "_map",
   "(",
   "function",
   "(",
   "fn",
   ")",
   "{",
   "return",
   "fn",
   ".",
   "apply",
   "(",
   "context",
   ",",
   "args",
   ")",
   ";",
   "}",
   ",",
   "fns",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "converge",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-110",
  "nl_tokens": [
   "find",
   "maximal",
   "dimension",
   "(",
   "width",
   "/",
   "height",
   ")",
   "in",
   "an",
   "array",
   "of",
   "the",
   "elements"
  ],
  "pl_tokens": [
   "function",
   "(",
   "elements",
   ",",
   "dimension",
   ")",
   "{",
   "return",
   "_",
   ".",
   "reduce",
   "(",
   "elements",
   ",",
   "function",
   "(",
   "<mask>",
   ",",
   "el",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "el",
   ".",
   "get",
   "(",
   "'size'",
   ")",
   "[",
   "dimension",
   "]",
   ",",
   "max",
   ")",
   ";",
   "}",
   ",",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-111",
  "nl_tokens": [
   "This",
   "algorithm",
   "is",
   "used",
   "to",
   "find",
   "min",
   "and",
   "max",
   "value",
   "for",
   "coloring",
   "range",
   ".",
   "Values",
   "array",
   "may",
   "contain",
   "several",
   "values",
   "that",
   "are",
   "100",
   "or",
   "more",
   "times",
   "larger",
   "then",
   "other",
   "values",
   ".",
   "In",
   "this",
   "case",
   "we",
   "ll",
   "have",
   "few",
   "fully",
   "colored",
   "regions",
   "on",
   "map",
   "and",
   "other",
   "ones",
   "will",
   "be",
   "desaturated",
   "(",
   "because",
   "all",
   "of",
   "them",
   "has",
   "100",
   "times",
   "less",
   "values",
   "comparing",
   "to",
   "max",
   ")",
   ".",
   "So",
   "this",
   "function",
   "calculates",
   "mean",
   "value",
   "(",
   "m",
   ")",
   "and",
   "deviation",
   "(",
   "d",
   ")",
   "for",
   "values",
   "array",
   ".",
   "Calculated",
   "range",
   "is",
   "(",
   "m",
   "-",
   "d",
   ";",
   "m",
   "+",
   "d",
   ")",
   "and",
   "it",
   "is",
   "includes",
   "most",
   "values",
   "in",
   "array",
   "."
  ],
  "pl_tokens": [
   "function",
   "findMedianRange",
   "(",
   "values",
   ")",
   "{",
   "var",
   "result",
   "=",
   "[",
   "null",
   ",",
   "null",
   "]",
   ";",
   "if",
   "(",
   "values",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "var",
   "n",
   "=",
   "values",
   ".",
   "length",
   ";",
   "// Calculate mean value",
   "var",
   "mean",
   "=",
   "_",
   ".",
   "reduce",
   "(",
   "values",
   ",",
   "(",
   "memo",
   ",",
   "value",
   ")",
   "=>",
   "{",
   "return",
   "memo",
   "+",
   "value",
   "/",
   "n",
   ";",
   "}",
   ",",
   "0",
   ")",
   ";",
   "// Calculate deviation",
   "var",
   "deviation",
   "=",
   "_",
   ".",
   "reduce",
   "(",
   "values",
   ",",
   "(",
   "memo",
   ",",
   "value",
   ")",
   "=>",
   "{",
   "var",
   "d",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "value",
   "-",
   "mean",
   ")",
   ";",
   "return",
   "memo",
   "+",
   "d",
   "/",
   "n",
   ";",
   "}",
   ",",
   "0",
   ")",
   ";",
   "result",
   "[",
   "0",
   "]",
   "=",
   "mean",
   "-",
   "deviation",
   ";",
   "result",
   "[",
   "1",
   "]",
   "=",
   "mean",
   "+",
   "deviation",
   ";",
   "// Calculate min and max values in array and clamp calculated range",
   "var",
   "<mask>",
   "=",
   "_",
   ".",
   "min",
   "(",
   "values",
   ")",
   ";",
   "var",
   "max",
   "=",
   "_",
   ".",
   "max",
   "(",
   "values",
   ")",
   ";",
   "if",
   "(",
   "result",
   "[",
   "0",
   "]",
   "<",
   "min",
   ")",
   "{",
   "result",
   "[",
   "0",
   "]",
   "=",
   "min",
   ";",
   "}",
   "if",
   "(",
   "result",
   "[",
   "1",
   "]",
   ">",
   "max",
   ")",
   "{",
   "result",
   "[",
   "1",
   "]",
   "=",
   "max",
   ";",
   "}",
   "}",
   "result",
   ".",
   "min",
   "=",
   "result",
   "[",
   "0",
   "]",
   ";",
   "result",
   ".",
   "max",
   "=",
   "result",
   "[",
   "1",
   "]",
   ";",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-112",
  "nl_tokens": [
   "(",
   "protected",
   ")",
   "r",
   "=",
   "this",
   ">>",
   "n",
   "*",
   "DB"
  ],
  "pl_tokens": [
   "function",
   "bnpDRShiftTo",
   "(",
   "n",
   ",",
   "r",
   ")",
   "{",
   "var",
   "this_array",
   "=",
   "this",
   ".",
   "array",
   ";",
   "var",
   "r_array",
   "=",
   "r",
   ".",
   "array",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "n",
   ";",
   "i",
   "<",
   "this",
   ".",
   "t",
   ";",
   "++",
   "i",
   ")",
   "r_array",
   "[",
   "i",
   "-",
   "n",
   "]",
   "=",
   "this_array",
   "[",
   "i",
   "]",
   ";",
   "r",
   ".",
   "t",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "t",
   "-",
   "n",
   ",",
   "0",
   ")",
   ";",
   "r",
   ".",
   "s",
   "=",
   "this",
   ".",
   "s",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-113",
  "nl_tokens": [
   "Convert",
   "a",
   "float",
   "value",
   "to",
   "a",
   "percentage"
  ],
  "pl_tokens": [
   "function",
   "toPercentage",
   "(",
   "val",
   ")",
   "{",
   "var",
   "precision",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "1",
   "&&",
   "arguments",
   "[",
   "1",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "1",
   "]",
   ":",
   "0",
   ";",
   "var",
   "<mask>",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "2",
   "&&",
   "arguments",
   "[",
   "2",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "2",
   "]",
   ":",
   "0",
   ";",
   "var",
   "max",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "3",
   "&&",
   "arguments",
   "[",
   "3",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "3",
   "]",
   ":",
   "1",
   ";",
   "if",
   "(",
   "!",
   "isNumber",
   "(",
   "val",
   ")",
   "||",
   "isNumericalNaN",
   "(",
   "val",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Value should be numeric'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isNumber",
   "(",
   "min",
   ")",
   "||",
   "isNumericalNaN",
   "(",
   "min",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Value should be numeric'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isNumber",
   "(",
   "max",
   ")",
   "||",
   "isNumericalNaN",
   "(",
   "max",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'Value should be numeric'",
   ")",
   ";",
   "}",
   "return",
   "round",
   "(",
   "(",
   "val",
   "-",
   "min",
   ")",
   "/",
   "(",
   "max",
   "-",
   "min",
   ")",
   "*",
   "100",
   ",",
   "precision",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-114",
  "nl_tokens": [
   "pinv_svd",
   "computes",
   "the",
   "pseudo",
   "-",
   "inverse",
   "using",
   "SVD"
  ],
  "pl_tokens": [
   "function",
   "(",
   "A",
   ")",
   "{",
   "var",
   "z",
   "=",
   "numeric",
   ".",
   "svd",
   "(",
   "A",
   ")",
   ",",
   "foo",
   "=",
   "z",
   ".",
   "S",
   "[",
   "0",
   "]",
   ";",
   "var",
   "U",
   "=",
   "z",
   ".",
   "U",
   ",",
   "S",
   "=",
   "z",
   ".",
   "S",
   ",",
   "V",
   "=",
   "z",
   ".",
   "V",
   ";",
   "var",
   "m",
   "=",
   "A",
   ".",
   "length",
   ",",
   "n",
   "=",
   "A",
   "[",
   "0",
   "]",
   ".",
   "length",
   ",",
   "tol",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "m",
   ",",
   "n",
   ")",
   "*",
   "numeric",
   ".",
   "epsilon",
   "*",
   "foo",
   ",",
   "M",
   "=",
   "S",
   ".",
   "length",
   ";",
   "var",
   "Sinv",
   "=",
   "new",
   "Array",
   "(",
   "M",
   ")",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "M",
   "-",
   "1",
   ";",
   "i",
   "!==",
   "-",
   "1",
   ";",
   "i",
   "--",
   ")",
   "{",
   "if",
   "(",
   "S",
   "[",
   "i",
   "]",
   ">",
   "tol",
   ")",
   "Sinv",
   "[",
   "i",
   "]",
   "=",
   "1",
   "/",
   "S",
   "[",
   "i",
   "]",
   ";",
   "else",
   "Sinv",
   "[",
   "i",
   "]",
   "=",
   "0",
   ";",
   "}",
   "return",
   "numeric",
   ".",
   "dot",
   "(",
   "numeric",
   ".",
   "dot",
   "(",
   "V",
   ",",
   "numeric",
   ".",
   "diag",
   "(",
   "Sinv",
   ")",
   ")",
   ",",
   "numeric",
   ".",
   "transpose",
   "(",
   "U",
   ")",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-115",
  "nl_tokens": [
   "Returns",
   "the",
   "group",
   "bounding",
   "box",
   ".",
   "Behaves",
   "like",
   "{"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "i",
   "=",
   "0",
   ",",
   "sprite",
   ",",
   "bb",
   ",",
   "items",
   "=",
   "this",
   ".",
   "items",
   ",",
   "len",
   "=",
   "this",
   ".",
   "length",
   ",",
   "infinity",
   "=",
   "Infinity",
   ",",
   "minX",
   "=",
   "infinity",
   ",",
   "maxHeight",
   "=",
   "-",
   "infinity",
   ",",
   "minY",
   "=",
   "infinity",
   ",",
   "maxWidth",
   "=",
   "-",
   "infinity",
   ",",
   "maxWidthBBox",
   ",",
   "maxHeightBBox",
   ";",
   "for",
   "(",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "sprite",
   "=",
   "items",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "sprite",
   ".",
   "el",
   "&&",
   "!",
   "sprite",
   ".",
   "bboxExcluded",
   ")",
   "{",
   "bb",
   "=",
   "sprite",
   ".",
   "getBBox",
   "(",
   ")",
   ";",
   "minX",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minX",
   ",",
   "bb",
   ".",
   "x",
   ")",
   ";",
   "minY",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minY",
   ",",
   "bb",
   ".",
   "y",
   ")",
   ";",
   "maxHeight",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxHeight",
   ",",
   "bb",
   ".",
   "height",
   "+",
   "bb",
   ".",
   "y",
   ")",
   ";",
   "maxWidth",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxWidth",
   ",",
   "bb",
   ".",
   "width",
   "+",
   "bb",
   ".",
   "x",
   ")",
   ";",
   "}",
   "}",
   "return",
   "{",
   "x",
   ":",
   "minX",
   ",",
   "y",
   ":",
   "minY",
   ",",
   "height",
   ":",
   "maxHeight",
   "-",
   "minY",
   ",",
   "width",
   ":",
   "maxWidth",
   "-",
   "minX",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-116",
  "nl_tokens": [
   "Utility",
   "method",
   "to",
   "check",
   "the",
   "type",
   "of",
   "the",
   "object",
   "s",
   "property"
  ],
  "pl_tokens": [
   "function",
   "checkType",
   "(",
   "obj",
   ",",
   "field",
   ",",
   "expType",
   ",",
   "mustHave",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "let",
   "value",
   "=",
   "typeof",
   "(",
   "obj",
   ")",
   "===",
   "'object'",
   "?",
   "obj",
   "[",
   "field",
   "]",
   ":",
   "obj",
   ";",
   "if",
   "(",
   "value",
   "===",
   "undefined",
   ")",
   "{",
   "return",
   "getDefault",
   "(",
   "obj",
   ",",
   "field",
   ",",
   "mustHave",
   ")",
   ";",
   "}",
   "// Try to convert value to expected type",
   "let",
   "type",
   "=",
   "expType",
   "[",
   "0",
   "]",
   "===",
   "'['",
   "?",
   "Object",
   ".",
   "prototype",
   ".",
   "toString",
   ".",
   "call",
   "(",
   "value",
   ")",
   ":",
   "typeof",
   "value",
   ";",
   "if",
   "(",
   "type",
   "===",
   "'string'",
   ")",
   "{",
   "switch",
   "(",
   "expType",
   ")",
   "{",
   "case",
   "'number'",
   ":",
   "value",
   "=",
   "checkType",
   ".",
   "strToFloat",
   "(",
   "value",
   ")",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'integer'",
   ":",
   "case",
   "'zoom'",
   ":",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   "=",
   "checkType",
   ".",
   "strToInt",
   "(",
   "value",
   ")",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'boolean'",
   ":",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   "=",
   "!",
   "!",
   "value",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'string-array'",
   ":",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   "=",
   "[",
   "value",
   "]",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'number-array'",
   ":",
   "value",
   "=",
   "checkType",
   ".",
   "strToFloat",
   "(",
   "value",
   ")",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "if",
   "(",
   "type",
   "===",
   "'number'",
   ")",
   "{",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   "=",
   "[",
   "value",
   "]",
   ";",
   "}",
   "break",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "type",
   "===",
   "'number'",
   "&&",
   "expType",
   "===",
   "'number-array'",
   ")",
   "{",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   "=",
   "[",
   "value",
   "]",
   ";",
   "type",
   "=",
   "typeof",
   "value",
   ";",
   "}",
   "// validate the type",
   "switch",
   "(",
   "expType",
   ")",
   "{",
   "case",
   "'string-array'",
   ":",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "value",
   ")",
   "||",
   "!",
   "_",
   ".",
   "all",
   "(",
   "value",
   ",",
   "v",
   "=>",
   "typeof",
   "v",
   "===",
   "'string'",
   "&&",
   "v",
   ".",
   "length",
   ">",
   "0",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param: expecting a string or an array of strings'",
   ",",
   "field",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'number-array'",
   ":",
   "let",
   "isValid",
   "=",
   "Array",
   ".",
   "isArray",
   "(",
   "value",
   ")",
   ";",
   "if",
   "(",
   "isValid",
   ")",
   "{",
   "value",
   "=",
   "_",
   ".",
   "map",
   "(",
   "value",
   ",",
   "v",
   "=>",
   "{",
   "v",
   "=",
   "checkType",
   ".",
   "strToFloat",
   "(",
   "v",
   ")",
   ";",
   "if",
   "(",
   "typeof",
   "v",
   "!==",
   "'number'",
   ")",
   "{",
   "isValid",
   "=",
   "false",
   ";",
   "}",
   "return",
   "v",
   ";",
   "}",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isValid",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param: expecting a number or an array of numbers'",
   ",",
   "field",
   ")",
   ";",
   "}",
   "obj",
   "[",
   "field",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'array'",
   ":",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "value",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param type %s given, was expecting an array'",
   ",",
   "field",
   ",",
   "type",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'integer'",
   ":",
   "if",
   "(",
   "!",
   "Number",
   ".",
   "isInteger",
   "(",
   "value",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param type %s given, was expecting an integer'",
   ",",
   "field",
   ",",
   "type",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'zoom'",
   ":",
   "if",
   "(",
   "!",
   "qidx",
   ".",
   "isValidZoom",
   "(",
   "value",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - an integer zoom value was expected'",
   ",",
   "field",
   ")",
   ";",
   "}",
   "break",
   ";",
   "default",
   ":",
   "if",
   "(",
   "type",
   "!==",
   "expType",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param type %s given, was expecting %s'",
   ",",
   "field",
   ",",
   "type",
   ",",
   "expType",
   ")",
   ";",
   "}",
   "break",
   ";",
   "}",
   "// validate ranges",
   "switch",
   "(",
   "expType",
   ")",
   "{",
   "case",
   "'number'",
   ":",
   "case",
   "'integer'",
   ":",
   "case",
   "'zoom'",
   ":",
   "if",
   "(",
   "min",
   "!==",
   "undefined",
   "&&",
   "value",
   "<",
   "min",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - must be at least %d, but given %d'",
   ",",
   "field",
   ",",
   "min",
   ",",
   "value",
   ")",
   ";",
   "}",
   "if",
   "(",
   "max",
   "!==",
   "undefined",
   "&&",
   "value",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - must be at most %d, but given %d'",
   ",",
   "field",
   ",",
   "max",
   ",",
   "value",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'string'",
   ":",
   "if",
   "(",
   "min",
   "!==",
   "undefined",
   "&&",
   "value",
   ".",
   "length",
   "<",
   "min",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - the string must be at least %d symbols'",
   ",",
   "field",
   ",",
   "min",
   ")",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'boolean'",
   ":",
   "if",
   "(",
   "value",
   "===",
   "false",
   ")",
   "{",
   "// convert false into undefined",
   "delete",
   "obj",
   "[",
   "field",
   "]",
   ";",
   "return",
   "false",
   ";",
   "}",
   "break",
   ";",
   "case",
   "'string-array'",
   ":",
   "case",
   "'number-array'",
   ":",
   "if",
   "(",
   "min",
   "!==",
   "undefined",
   "&&",
   "value",
   ".",
   "length",
   "<",
   "min",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - it must have at least %d values, but given %d'",
   ",",
   "field",
   ",",
   "min",
   ",",
   "value",
   ".",
   "length",
   ")",
   ";",
   "}",
   "if",
   "(",
   "max",
   "!==",
   "undefined",
   "&&",
   "value",
   ".",
   "length",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "Err",
   "(",
   "'Invalid %s param - it must have at least %d values, but given %d'",
   ",",
   "field",
   ",",
   "max",
   ",",
   "value",
   ".",
   "length",
   ")",
   ";",
   "}",
   "break",
   ";",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-117",
  "nl_tokens": [
   "FUNCTION",
   ":",
   "argnanmin",
   "(",
   "arr",
   ")",
   "Computes",
   "the",
   "minimum",
   "value",
   "of",
   "an",
   "array",
   "ignoring",
   "non",
   "-",
   "numeric",
   "values",
   "and",
   "returns",
   "the",
   "corresponding",
   "array",
   "indices",
   "."
  ],
  "pl_tokens": [
   "function",
   "argnanmin",
   "(",
   "arr",
   ")",
   "{",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "arr",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'argnanmin()::invalid input argument. Must provide an array.'",
   ")",
   ";",
   "}",
   "var",
   "len",
   "=",
   "arr",
   ".",
   "length",
   ",",
   "<mask>",
   "=",
   "Number",
   ".",
   "POSITIVE_INFINITY",
   ",",
   "idx",
   "=",
   "[",
   "]",
   ",",
   "val",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "val",
   "=",
   "arr",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "typeof",
   "val",
   "!==",
   "'number'",
   "||",
   "val",
   "!==",
   "val",
   ")",
   "{",
   "continue",
   ";",
   "}",
   "if",
   "(",
   "val",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "val",
   ";",
   "idx",
   ".",
   "length",
   "=",
   "0",
   ";",
   "idx",
   ".",
   "push",
   "(",
   "i",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "val",
   "===",
   "min",
   ")",
   "{",
   "idx",
   ".",
   "push",
   "(",
   "i",
   ")",
   ";",
   "}",
   "}",
   "return",
   "idx",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-118",
  "nl_tokens": [
   "/",
   "*",
   "eslint",
   "-",
   "disable",
   "no",
   "-",
   "console"
  ],
  "pl_tokens": [
   "function",
   "setupTimeoutCapture",
   "(",
   "wrapperInstance",
   ")",
   "{",
   "const",
   "{",
   "context",
   ",",
   "sendReport",
   ",",
   "config",
   "}",
   "=",
   "wrapperInstance",
   ";",
   "const",
   "{",
   "getRemainingTimeInMillis",
   "=",
   "(",
   ")",
   "=>",
   "0",
   "}",
   "=",
   "context",
   ";",
   "// if getRemainingTimeInMillis returns a very small number, it's probably a local invoke (sls framework perhaps)",
   "if",
   "(",
   "config",
   ".",
   "timeoutWindow",
   "<",
   "1",
   "||",
   "getRemainingTimeInMillis",
   "(",
   ")",
   "<",
   "10",
   ")",
   "{",
   "return",
   "undefined",
   ";",
   "}",
   "const",
   "maxEndTime",
   "=",
   "899900",
   ";",
   "/* Maximum execution: 100ms short of 15 minutes */",
   "const",
   "configEndTime",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "getRemainingTimeInMillis",
   "(",
   ")",
   "-",
   "config",
   ".",
   "timeoutWindow",
   ")",
   ";",
   "const",
   "endTime",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "configEndTime",
   ",",
   "maxEndTime",
   ")",
   ";",
   "return",
   "setTimeout",
   "(",
   "(",
   ")",
   "=>",
   "{",
   "context",
   ".",
   "iopipe",
   ".",
   "label",
   "(",
   "'@iopipe/timeout'",
   ")",
   ";",
   "sendReport",
   ".",
   "call",
   "(",
   "wrapperInstance",
   ",",
   "new",
   "Error",
   "(",
   "'Timeout Exceeded.'",
   ")",
   ",",
   "(",
   ")",
   "=>",
   "{",
   "}",
   ")",
   ";",
   "}",
   ",",
   "endTime",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-119",
  "nl_tokens": [
   "bit",
   "12",
   "-",
   "Set",
   "if",
   "the",
   "result",
   "starts",
   "with",
   "searchString",
   "bits",
   "8",
   "-",
   "11",
   ":",
   "8",
   "-",
   "number",
   "of",
   "chunks",
   "multiplied",
   "by",
   "2",
   "if",
   "cases",
   "match",
   "otherwise",
   "1",
   ".",
   "bits",
   "1",
   "-",
   "7",
   ":",
   "127",
   "-",
   "length",
   "of",
   "the",
   "entry",
   "General",
   "scheme",
   ":",
   "prefer",
   "case",
   "sensitive",
   "matches",
   "with",
   "fewer",
   "chunks",
   "and",
   "otherwise",
   "prefer",
   "shorter",
   "matches",
   "."
  ],
  "pl_tokens": [
   "function",
   "relevance",
   "(",
   "result",
   ",",
   "searchString",
   ")",
   "{",
   "var",
   "relevance",
   "=",
   "0",
   ";",
   "relevance",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "8",
   "-",
   "result",
   ".",
   "match",
   ".",
   "chunks",
   ")",
   "<<",
   "7",
   ";",
   "if",
   "(",
   "result",
   ".",
   "match",
   ".",
   "caseMatch",
   ")",
   "{",
   "relevance",
   "*=",
   "2",
   ";",
   "}",
   "if",
   "(",
   "result",
   ".",
   "match",
   ".",
   "prefix",
   ")",
   "{",
   "relevance",
   "+=",
   "2048",
   "}",
   "relevance",
   "+=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "255",
   "-",
   "result",
   ".",
   "entry",
   ".",
   "key",
   ".",
   "length",
   ")",
   ";",
   "return",
   "relevance",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-120",
  "nl_tokens": [
   "Sets",
   "a",
   "value",
   "in",
   "memory",
   "in",
   "a",
   "dynamic",
   "way",
   "at",
   "run",
   "-",
   "time",
   ".",
   "Uses",
   "the",
   "type",
   "data",
   ".",
   "This",
   "is",
   "the",
   "same",
   "as",
   "makeSetValue",
   "except",
   "that",
   "makeSetValue",
   "is",
   "done",
   "at",
   "compile",
   "-",
   "time",
   "and",
   "generates",
   "the",
   "needed",
   "code",
   "then",
   "whereas",
   "this",
   "function",
   "picks",
   "the",
   "right",
   "code",
   "at",
   "run",
   "-",
   "time",
   ".",
   "Note",
   "that",
   "setValue",
   "and",
   "getValue",
   "only",
   "do",
   "*",
   "aligned",
   "*",
   "writes",
   "and",
   "reads!",
   "Note",
   "that",
   "ccall",
   "uses",
   "JS",
   "types",
   "as",
   "for",
   "defining",
   "types",
   "while",
   "setValue",
   "and",
   "getValue",
   "need",
   "LLVM",
   "types",
   "(",
   "i8",
   "i32",
   ")",
   "-",
   "this",
   "is",
   "a",
   "lower",
   "-",
   "level",
   "operation"
  ],
  "pl_tokens": [
   "function",
   "setValue",
   "(",
   "ptr",
   ",",
   "value",
   ",",
   "type",
   ",",
   "noSafe",
   ")",
   "{",
   "type",
   "=",
   "type",
   "||",
   "'i8'",
   ";",
   "if",
   "(",
   "type",
   ".",
   "charAt",
   "(",
   "type",
   ".",
   "length",
   "-",
   "1",
   ")",
   "===",
   "'*'",
   ")",
   "type",
   "=",
   "'i32'",
   ";",
   "// pointers are 32-bit",
   "switch",
   "(",
   "type",
   ")",
   "{",
   "case",
   "'i1'",
   ":",
   "HEAP8",
   "[",
   "(",
   "ptr",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'i8'",
   ":",
   "HEAP8",
   "[",
   "(",
   "ptr",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'i16'",
   ":",
   "HEAP16",
   "[",
   "(",
   "(",
   "ptr",
   ")",
   ">>",
   "1",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'i32'",
   ":",
   "HEAP32",
   "[",
   "(",
   "(",
   "ptr",
   ")",
   ">>",
   "2",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'i64'",
   ":",
   "(",
   "tempI64",
   "=",
   "[",
   "value",
   ">>>",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "value",
   ")",
   "/",
   "(",
   "+",
   "(",
   "4294967296",
   ")",
   ")",
   ")",
   ",",
   "(",
   "+",
   "(",
   "4294967295",
   ")",
   ")",
   ")",
   ">>>",
   "0",
   "]",
   ",",
   "HEAP32",
   "[",
   "(",
   "(",
   "ptr",
   ")",
   ">>",
   "2",
   ")",
   "]",
   "=",
   "tempI64",
   "[",
   "0",
   "]",
   ",",
   "HEAP32",
   "[",
   "(",
   "(",
   "(",
   "ptr",
   ")",
   "+",
   "(",
   "4",
   ")",
   ")",
   ">>",
   "2",
   ")",
   "]",
   "=",
   "tempI64",
   "[",
   "1",
   "]",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'float'",
   ":",
   "HEAPF32",
   "[",
   "(",
   "(",
   "ptr",
   ")",
   ">>",
   "2",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "case",
   "'double'",
   ":",
   "HEAPF64",
   "[",
   "(",
   "(",
   "ptr",
   ")",
   ">>",
   "3",
   ")",
   "]",
   "=",
   "value",
   ";",
   "break",
   ";",
   "default",
   ":",
   "abort",
   "(",
   "'invalid type for setValue: '",
   "+",
   "type",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-121",
  "nl_tokens": [
   "/",
   "*",
   "Update",
   "a",
   "sequence",
   "with",
   "new",
   "JSON"
  ],
  "pl_tokens": [
   "function",
   "updateSeq",
   "(",
   "ast",
   ",",
   "newJson",
   ",",
   "yaml",
   ")",
   "{",
   "var",
   "values",
   "=",
   "(",
   "0",
   ",",
   "_jsYaml",
   ".",
   "load",
   ")",
   "(",
   "(",
   "0",
   ",",
   "_yamlJs",
   ".",
   "serialize",
   ")",
   "(",
   "ast",
   ")",
   ")",
   ";",
   "var",
   "<mask>",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "values",
   ".",
   "length",
   ",",
   "newJson",
   ".",
   "length",
   ")",
   ";",
   "if",
   "(",
   "values",
   ".",
   "length",
   ">",
   "min",
   ")",
   "{",
   "for",
   "(",
   "var",
   "i",
   "=",
   "values",
   ".",
   "length",
   "-",
   "1",
   ";",
   "i",
   ">=",
   "min",
   ";",
   "--",
   "i",
   ")",
   "{",
   "yaml",
   "=",
   "removeArrayElement",
   "(",
   "ast",
   ".",
   "value",
   "[",
   "i",
   "]",
   ",",
   "yaml",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "newJson",
   ".",
   "length",
   ">",
   "min",
   ")",
   "{",
   "yaml",
   "=",
   "insertAfterNode",
   "(",
   "ast",
   ",",
   "cleanDump",
   "(",
   "newJson",
   ".",
   "slice",
   "(",
   "min",
   ")",
   ")",
   ",",
   "yaml",
   ")",
   ";",
   "}",
   "for",
   "(",
   "var",
   "i",
   "=",
   "min",
   "-",
   "1",
   ";",
   "i",
   ">=",
   "0",
   ";",
   "--",
   "i",
   ")",
   "{",
   "yaml",
   "=",
   "changeArrayElement",
   "(",
   "ast",
   ".",
   "value",
   "[",
   "i",
   "]",
   ",",
   "cleanDump",
   "(",
   "newJson",
   "[",
   "i",
   "]",
   ")",
   ",",
   "yaml",
   ")",
   ";",
   "}",
   "return",
   "yaml",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-122",
  "nl_tokens": [
   "Gets",
   "all",
   "attributes",
   "on",
   "line",
   ".",
   "Any",
   "attribute",
   "is",
   "nice",
   "described",
   "and",
   "provides",
   "functions",
   "such",
   "remove",
   "or",
   "changeValue",
   ".",
   "attribute",
   ".",
   "remove",
   "(",
   "withChar",
   "limit",
   ")",
   "-",
   "remove",
   "attribute",
   "to",
   "the",
   "limit",
   "if",
   "withChar",
   "==",
   "true",
   "then",
   "characters",
   "will",
   "be",
   "removed",
   "too",
   ".",
   "attribute",
   ".",
   "changeValue",
   "(",
   "newValue",
   "limit",
   ")",
   "-",
   "replace",
   "current",
   "value",
   "on",
   "new",
   "to",
   "the",
   "limit",
   "-",
   "default",
   "limit",
   "is",
   "a",
   "count",
   "of",
   "following",
   "chars",
   "which",
   "have",
   "the",
   "same",
   "attribute",
   ".",
   "TIP",
   ":",
   "It",
   "should",
   "be",
   "called",
   "from",
   "stack",
   "callWithAce",
   "(",
   "inside",
   ")"
  ],
  "pl_tokens": [
   "function",
   "(",
   "lineNum",
   ")",
   "{",
   "var",
   "Changeset",
   "=",
   "require",
   "(",
   "'ep_etherpad-lite/static/js/Changeset'",
   ")",
   ";",
   "var",
   "ChangesetUtils",
   "=",
   "require",
   "(",
   "'ep_etherpad-lite/static/js/ChangesetUtils'",
   ")",
   ";",
   "var",
   "_",
   "=",
   "require",
   "(",
   "'ep_etherpad-lite/static/js/underscore'",
   ")",
   ";",
   "var",
   "aline",
   "=",
   "Cristo",
   ".",
   "rep",
   ".",
   "alines",
   "[",
   "lineNum",
   "]",
   ";",
   "if",
   "(",
   "aline",
   ")",
   "{",
   "var",
   "entry",
   "=",
   "Cristo",
   ".",
   "rep",
   ".",
   "lines",
   ".",
   "atIndex",
   "(",
   "lineNum",
   ")",
   ";",
   "var",
   "text",
   "=",
   "entry",
   ".",
   "text",
   ";",
   "var",
   "opIter",
   "=",
   "Changeset",
   ".",
   "opIterator",
   "(",
   "aline",
   ")",
   ";",
   "var",
   "ci",
   "=",
   "-",
   "1",
   ";",
   "var",
   "bci",
   "=",
   "-",
   "1",
   ";",
   "var",
   "attributes",
   "=",
   "[",
   "]",
   ";",
   "while",
   "(",
   "opIter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "var",
   "op",
   "=",
   "opIter",
   ".",
   "next",
   "(",
   ")",
   ";",
   "bci",
   "=",
   "ci",
   "+",
   "1",
   ";",
   "ci",
   "+=",
   "op",
   ".",
   "chars",
   ";",
   "Changeset",
   ".",
   "eachAttribNumber",
   "(",
   "op",
   ".",
   "attribs",
   ",",
   "function",
   "(",
   "n",
   ")",
   "{",
   "if",
   "(",
   "bci",
   ">",
   "text",
   ".",
   "length",
   ")",
   "{",
   "return",
   ";",
   "}",
   "attributes",
   ".",
   "push",
   "(",
   "{",
   "name",
   ":",
   "Cristo",
   ".",
   "rep",
   ".",
   "apool",
   ".",
   "getAttribKey",
   "(",
   "n",
   ")",
   ",",
   "value",
   ":",
   "Cristo",
   ".",
   "rep",
   ".",
   "apool",
   ".",
   "getAttribValue",
   "(",
   "n",
   ")",
   ",",
   "offset",
   ":",
   "bci",
   ",",
   "limit",
   ":",
   "ci",
   "-",
   "bci",
   "+",
   "1",
   ",",
   "charStart",
   ":",
   "text",
   "[",
   "bci",
   "]",
   ",",
   "charEnd",
   ":",
   "text",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "ci",
   ",",
   "text",
   ".",
   "length",
   "-",
   "1",
   ")",
   "]",
   ",",
   "remove",
   ":",
   "function",
   "(",
   "withChar",
   ",",
   "limit",
   ")",
   "{",
   "limit",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "offset",
   "+",
   "(",
   "limit",
   ">",
   "0",
   "?",
   "limit",
   ":",
   "this",
   ".",
   "limit",
   ")",
   ",",
   "entry",
   ".",
   "width",
   ")",
   ";",
   "var",
   "builder",
   "=",
   "Changeset",
   ".",
   "builder",
   "(",
   "Cristo",
   ".",
   "rep",
   ".",
   "lines",
   ".",
   "totalWidth",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "withChar",
   ")",
   "{",
   "ChangesetUtils",
   ".",
   "buildKeepToStartOfRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ")",
   ";",
   "ChangesetUtils",
   ".",
   "buildRemoveRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ",",
   "[",
   "lineNum",
   ",",
   "limit",
   "]",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "attribs",
   "=",
   "_replaceAttrib",
   "(",
   "this",
   ")",
   ";",
   "//console.log('rm', attribs, this.name, this.value, 'ch: '+this.char, 'l', lineNum, this.offset, limit);",
   "ChangesetUtils",
   ".",
   "buildKeepToStartOfRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ")",
   ";",
   "ChangesetUtils",
   ".",
   "buildKeepRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ",",
   "[",
   "lineNum",
   ",",
   "limit",
   "]",
   ",",
   "attribs",
   ",",
   "Cristo",
   ".",
   "rep",
   ".",
   "apool",
   ")",
   ";",
   "}",
   "return",
   "Cristo",
   ".",
   "documentAttributeManager",
   ".",
   "applyChangeset",
   "(",
   "builder",
   ")",
   ";",
   "}",
   ",",
   "changeValue",
   ":",
   "function",
   "(",
   "newValue",
   ",",
   "limit",
   ")",
   "{",
   "limit",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "offset",
   "+",
   "(",
   "limit",
   ">",
   "0",
   "?",
   "limit",
   ":",
   "this",
   ".",
   "limit",
   ")",
   ",",
   "entry",
   ".",
   "width",
   ")",
   ";",
   "var",
   "builder",
   "=",
   "Changeset",
   ".",
   "builder",
   "(",
   "Cristo",
   ".",
   "rep",
   ".",
   "lines",
   ".",
   "totalWidth",
   "(",
   ")",
   ")",
   ";",
   "var",
   "attribs",
   "=",
   "_replaceAttrib",
   "(",
   "this",
   ",",
   "newValue",
   ")",
   ";",
   "ChangesetUtils",
   ".",
   "buildKeepToStartOfRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ")",
   ";",
   "ChangesetUtils",
   ".",
   "buildKeepRange",
   "(",
   "Cristo",
   ".",
   "rep",
   ",",
   "builder",
   ",",
   "[",
   "lineNum",
   ",",
   "this",
   ".",
   "offset",
   "]",
   ",",
   "[",
   "lineNum",
   ",",
   "limit",
   "]",
   ",",
   "attribs",
   ",",
   "Cristo",
   ".",
   "rep",
   ".",
   "apool",
   ")",
   ";",
   "return",
   "Cristo",
   ".",
   "documentAttributeManager",
   ".",
   "applyChangeset",
   "(",
   "builder",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "var",
   "_replaceAttrib",
   "=",
   "function",
   "(",
   "cont",
   ",",
   "value",
   ")",
   "{",
   "value",
   "=",
   "value",
   "||",
   "''",
   ";",
   "return",
   "_",
   ".",
   "chain",
   "(",
   "attributes",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "a",
   ")",
   "{",
   "if",
   "(",
   "a",
   ".",
   "offset",
   "===",
   "cont",
   ".",
   "offset",
   "&&",
   "a",
   ".",
   "char",
   "===",
   "cont",
   ".",
   "char",
   ")",
   "{",
   "if",
   "(",
   "a",
   ".",
   "name",
   "===",
   "cont",
   ".",
   "name",
   "&&",
   "a",
   ".",
   "value",
   "===",
   "cont",
   ".",
   "value",
   ")",
   "{",
   "return",
   "[",
   "a",
   ".",
   "name",
   ",",
   "value",
   "]",
   ";",
   "}",
   "}",
   "}",
   ")",
   ".",
   "filter",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "return",
   "v",
   ";",
   "}",
   ")",
   ".",
   "value",
   "(",
   ")",
   ";",
   "}",
   ";",
   "return",
   "attributes",
   ";",
   "}",
   "return",
   "[",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-123",
  "nl_tokens": [
   "Get",
   "the",
   "first",
   "or",
   "last",
   "visible",
   "item",
   "in",
   "the",
   "view",
   "."
  ],
  "pl_tokens": [
   "function",
   "_getVisibleItem",
   "(",
   "first",
   ")",
   "{",
   "var",
   "result",
   "=",
   "{",
   "}",
   ";",
   "var",
   "diff",
   ";",
   "var",
   "prevDiff",
   "=",
   "10000000",
   ";",
   "var",
   "diffDelta",
   "=",
   "(",
   "first",
   "&&",
   "this",
   ".",
   "options",
   ".",
   "alignment",
   ")",
   "?",
   "-",
   "this",
   ".",
   "_contextSizeCache",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ":",
   "(",
   "(",
   "!",
   "first",
   "&&",
   "!",
   "this",
   ".",
   "options",
   ".",
   "alignment",
   ")",
   "?",
   "this",
   ".",
   "_contextSizeCache",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ":",
   "0",
   ")",
   ";",
   "var",
   "scrollOffset",
   "=",
   "this",
   ".",
   "_scroll",
   ".",
   "unnormalizedScrollOffset",
   ";",
   "var",
   "node",
   "=",
   "this",
   ".",
   "_nodes",
   ".",
   "getStartEnumNode",
   "(",
   "true",
   ")",
   ";",
   "while",
   "(",
   "node",
   ")",
   "{",
   "if",
   "(",
   "!",
   "node",
   ".",
   "_invalidated",
   "||",
   "(",
   "node",
   ".",
   "scrollLength",
   "===",
   "undefined",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "if",
   "(",
   "node",
   ".",
   "_viewSequence",
   ")",
   "{",
   "diff",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "diffDelta",
   "-",
   "(",
   "scrollOffset",
   "+",
   "(",
   "!",
   "first",
   "?",
   "node",
   ".",
   "scrollLength",
   ":",
   "0",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "diff",
   ">=",
   "prevDiff",
   ")",
   "{",
   "break",
   ";",
   "}",
   "prevDiff",
   "=",
   "diff",
   ";",
   "result",
   ".",
   "scrollOffset",
   "=",
   "scrollOffset",
   ";",
   "result",
   ".",
   "_node",
   "=",
   "node",
   ";",
   "scrollOffset",
   "+=",
   "node",
   ".",
   "scrollLength",
   ";",
   "}",
   "node",
   "=",
   "node",
   ".",
   "_next",
   ";",
   "}",
   "scrollOffset",
   "=",
   "this",
   ".",
   "_scroll",
   ".",
   "unnormalizedScrollOffset",
   ";",
   "node",
   "=",
   "this",
   ".",
   "_nodes",
   ".",
   "getStartEnumNode",
   "(",
   "false",
   ")",
   ";",
   "while",
   "(",
   "node",
   ")",
   "{",
   "if",
   "(",
   "!",
   "node",
   ".",
   "_invalidated",
   "||",
   "(",
   "node",
   ".",
   "scrollLength",
   "===",
   "undefined",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "if",
   "(",
   "node",
   ".",
   "_viewSequence",
   ")",
   "{",
   "scrollOffset",
   "-=",
   "node",
   ".",
   "scrollLength",
   ";",
   "diff",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "diffDelta",
   "-",
   "(",
   "scrollOffset",
   "+",
   "(",
   "!",
   "first",
   "?",
   "node",
   ".",
   "scrollLength",
   ":",
   "0",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "diff",
   ">=",
   "prevDiff",
   ")",
   "{",
   "break",
   ";",
   "}",
   "prevDiff",
   "=",
   "diff",
   ";",
   "result",
   ".",
   "scrollOffset",
   "=",
   "scrollOffset",
   ";",
   "result",
   ".",
   "_node",
   "=",
   "node",
   ";",
   "}",
   "node",
   "=",
   "node",
   ".",
   "_prev",
   ";",
   "}",
   "if",
   "(",
   "!",
   "result",
   ".",
   "_node",
   ")",
   "{",
   "return",
   "undefined",
   ";",
   "}",
   "result",
   ".",
   "scrollLength",
   "=",
   "result",
   ".",
   "_node",
   ".",
   "scrollLength",
   ";",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "alignment",
   ")",
   "{",
   "result",
   ".",
   "visiblePerc",
   "=",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "result",
   ".",
   "scrollOffset",
   "+",
   "result",
   ".",
   "scrollLength",
   ",",
   "0",
   ")",
   "-",
   "Math",
   ".",
   "max",
   "(",
   "result",
   ".",
   "scrollOffset",
   ",",
   "-",
   "this",
   ".",
   "_contextSizeCache",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ")",
   ")",
   "/",
   "result",
   ".",
   "scrollLength",
   ";",
   "}",
   "else",
   "{",
   "result",
   ".",
   "visiblePerc",
   "=",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "result",
   ".",
   "scrollOffset",
   "+",
   "result",
   ".",
   "scrollLength",
   ",",
   "this",
   ".",
   "_contextSizeCache",
   "[",
   "this",
   ".",
   "_direction",
   "]",
   ")",
   "-",
   "Math",
   ".",
   "max",
   "(",
   "result",
   ".",
   "scrollOffset",
   ",",
   "0",
   ")",
   ")",
   "/",
   "result",
   ".",
   "scrollLength",
   ";",
   "}",
   "result",
   ".",
   "index",
   "=",
   "result",
   ".",
   "_node",
   ".",
   "_viewSequence",
   ".",
   "getIndex",
   "(",
   ")",
   ";",
   "result",
   ".",
   "viewSequence",
   "=",
   "result",
   ".",
   "_node",
   ".",
   "_viewSequence",
   ";",
   "result",
   ".",
   "renderNode",
   "=",
   "result",
   ".",
   "_node",
   ".",
   "renderNode",
   ";",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-124",
  "nl_tokens": [
   "Returns",
   "a",
   "random",
   "integer",
   "in",
   "range",
   "[",
   "min",
   "max",
   "]",
   "(",
   "inclusive",
   ")"
  ],
  "pl_tokens": [
   "function",
   "(",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "min",
   "=",
   "parseInt",
   "(",
   "min",
   ",",
   "10",
   ")",
   ";",
   "max",
   "=",
   "parseInt",
   "(",
   "max",
   ",",
   "10",
   ")",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "min",
   ")",
   "&&",
   "!",
   "isFinite",
   "(",
   "min",
   ")",
   ")",
   "min",
   "=",
   "0",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "max",
   ")",
   "&&",
   "!",
   "isFinite",
   "(",
   "max",
   ")",
   ")",
   "max",
   "=",
   "Number",
   ".",
   "MAX_VALUE",
   ";",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "Math",
   ".",
   "random",
   "(",
   ")",
   "*",
   "(",
   "max",
   "-",
   "min",
   "+",
   "1",
   ")",
   ")",
   "+",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-125",
  "nl_tokens": [
   "Calculate",
   "the",
   "min",
   "and",
   "max",
   "values",
   "for",
   "this",
   "series",
   "s",
   "xField",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "chart",
   "=",
   "me",
   ".",
   "chart",
   ",",
   "store",
   "=",
   "chart",
   ".",
   "getChartStore",
   "(",
   ")",
   ",",
   "data",
   "=",
   "store",
   ".",
   "data",
   ".",
   "items",
   ",",
   "count",
   "=",
   "me",
   ".",
   "getRecordCount",
   "(",
   ")",
   ",",
   "i",
   ",",
   "ln",
   ",",
   "record",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "xField",
   "=",
   "me",
   ".",
   "xField",
   ",",
   "xValue",
   ";",
   "if",
   "(",
   "count",
   ">",
   "0",
   ")",
   "{",
   "min",
   "=",
   "Infinity",
   ";",
   "max",
   "=",
   "-",
   "min",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "ln",
   "=",
   "data",
   ".",
   "length",
   ";",
   "i",
   "<",
   "ln",
   ";",
   "i",
   "++",
   ")",
   "{",
   "record",
   "=",
   "data",
   "[",
   "i",
   "]",
   ";",
   "xValue",
   "=",
   "record",
   ".",
   "get",
   "(",
   "xField",
   ")",
   ";",
   "if",
   "(",
   "xValue",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "xValue",
   ";",
   "}",
   "if",
   "(",
   "xValue",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "xValue",
   ";",
   "}",
   "}",
   "// If we made no progress, treat it like a category axis",
   "if",
   "(",
   "min",
   "==",
   "Infinity",
   ")",
   "{",
   "min",
   "=",
   "0",
   ";",
   "}",
   "if",
   "(",
   "max",
   "==",
   "-",
   "Infinity",
   ")",
   "{",
   "max",
   "=",
   "count",
   "-",
   "1",
   ";",
   "}",
   "}",
   "else",
   "{",
   "min",
   "=",
   "max",
   "=",
   "0",
   ";",
   "}",
   "return",
   "[",
   "min",
   ",",
   "max",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-126",
  "nl_tokens": [
   "*",
   "@package",
   "Number",
   "@dependency",
   "core",
   "@description",
   "Number",
   "formatting",
   "rounding",
   "(",
   "with",
   "precision",
   ")",
   "and",
   "ranges",
   ".",
   "Aliases",
   "to",
   "Math",
   "methods",
   "."
  ],
  "pl_tokens": [
   "function",
   "abbreviateNumber",
   "(",
   "num",
   ",",
   "roundTo",
   ",",
   "str",
   ",",
   "mid",
   ",",
   "limit",
   ",",
   "bytes",
   ")",
   "{",
   "var",
   "fixed",
   "=",
   "num",
   ".",
   "toFixed",
   "(",
   "20",
   ")",
   ",",
   "decimalPlace",
   "=",
   "fixed",
   ".",
   "search",
   "(",
   "/",
   "\\.",
   "/",
   ")",
   ",",
   "numeralPlace",
   "=",
   "fixed",
   ".",
   "search",
   "(",
   "/",
   "[1-9]",
   "/",
   ")",
   ",",
   "significant",
   "=",
   "decimalPlace",
   "-",
   "numeralPlace",
   ",",
   "unit",
   ",",
   "i",
   ",",
   "divisor",
   ";",
   "if",
   "(",
   "significant",
   ">",
   "0",
   ")",
   "{",
   "significant",
   "-=",
   "1",
   ";",
   "}",
   "i",
   "=",
   "math",
   ".",
   "<mask>",
   "(",
   "math",
   ".",
   "min",
   "(",
   "(",
   "significant",
   "/",
   "3",
   ")",
   ".",
   "floor",
   "(",
   ")",
   ",",
   "limit",
   "===",
   "false",
   "?",
   "str",
   ".",
   "length",
   ":",
   "limit",
   ")",
   ",",
   "-",
   "mid",
   ")",
   ";",
   "unit",
   "=",
   "str",
   ".",
   "charAt",
   "(",
   "i",
   "+",
   "mid",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "significant",
   "<",
   "-",
   "9",
   ")",
   "{",
   "i",
   "=",
   "-",
   "3",
   ";",
   "roundTo",
   "=",
   "significant",
   ".",
   "abs",
   "(",
   ")",
   "-",
   "9",
   ";",
   "unit",
   "=",
   "str",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "1",
   ")",
   ";",
   "}",
   "divisor",
   "=",
   "bytes",
   "?",
   "(",
   "2",
   ")",
   ".",
   "pow",
   "(",
   "10",
   "*",
   "i",
   ")",
   ":",
   "(",
   "10",
   ")",
   ".",
   "pow",
   "(",
   "i",
   "*",
   "3",
   ")",
   ";",
   "return",
   "(",
   "num",
   "/",
   "divisor",
   ")",
   ".",
   "round",
   "(",
   "roundTo",
   "||",
   "0",
   ")",
   ".",
   "format",
   "(",
   ")",
   "+",
   "unit",
   ".",
   "trim",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-127",
  "nl_tokens": [
   "Updates",
   "the",
   "state",
   "."
  ],
  "pl_tokens": [
   "function",
   "_updateState",
   "(",
   ")",
   "{",
   "var",
   "prevItem",
   ";",
   "var",
   "invalidated",
   "=",
   "false",
   ";",
   "var",
   "hiddenViewCount",
   "=",
   "0",
   ";",
   "var",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "i",
   "<",
   "this",
   ".",
   "_viewStack",
   ".",
   "length",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "_viewStack",
   "[",
   "i",
   "]",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "HIDDEN",
   ")",
   "{",
   "hiddenViewCount",
   "++",
   ";",
   "for",
   "(",
   "var",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "this",
   ".",
   "_viewStack",
   ".",
   "length",
   ";",
   "j",
   "++",
   ")",
   "{",
   "if",
   "(",
   "(",
   "this",
   ".",
   "_viewStack",
   "[",
   "j",
   "]",
   ".",
   "state",
   "!==",
   "ItemState",
   ".",
   "HIDDEN",
   ")",
   "&&",
   "(",
   "this",
   ".",
   "_viewStack",
   "[",
   "j",
   "]",
   ".",
   "view",
   "===",
   "this",
   ".",
   "_viewStack",
   "[",
   "i",
   "]",
   ".",
   "view",
   ")",
   ")",
   "{",
   "this",
   ".",
   "_viewStack",
   "[",
   "i",
   "]",
   ".",
   "view",
   "=",
   "undefined",
   ";",
   "this",
   ".",
   "_renderables",
   ".",
   "views",
   ".",
   "splice",
   "(",
   "i",
   ",",
   "1",
   ")",
   ";",
   "this",
   ".",
   "_viewStack",
   ".",
   "splice",
   "(",
   "i",
   ",",
   "1",
   ")",
   ";",
   "i",
   "--",
   ";",
   "hiddenViewCount",
   "--",
   ";",
   "break",
   ";",
   "}",
   "}",
   "}",
   "i",
   "++",
   ";",
   "}",
   "while",
   "(",
   "hiddenViewCount",
   ">",
   "this",
   ".",
   "options",
   ".",
   "keepHiddenViewsInDOMCount",
   ")",
   "{",
   "this",
   ".",
   "_viewStack",
   "[",
   "0",
   "]",
   ".",
   "view",
   "=",
   "undefined",
   ";",
   "this",
   ".",
   "_renderables",
   ".",
   "views",
   ".",
   "splice",
   "(",
   "0",
   ",",
   "1",
   ")",
   ";",
   "this",
   ".",
   "_viewStack",
   ".",
   "splice",
   "(",
   "0",
   ",",
   "1",
   ")",
   ";",
   "hiddenViewCount",
   "--",
   ";",
   "}",
   "for",
   "(",
   "i",
   "=",
   "hiddenViewCount",
   ";",
   "i",
   "<",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "_viewStack",
   ".",
   "length",
   "-",
   "hiddenViewCount",
   ",",
   "2",
   ")",
   "+",
   "hiddenViewCount",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "var",
   "item",
   "=",
   "this",
   ".",
   "_viewStack",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "item",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "QUEUED",
   ")",
   "{",
   "if",
   "(",
   "!",
   "prevItem",
   "||",
   "(",
   "prevItem",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "VISIBLE",
   ")",
   "||",
   "(",
   "prevItem",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "HIDING",
   ")",
   ")",
   "{",
   "if",
   "(",
   "prevItem",
   "&&",
   "(",
   "prevItem",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "VISIBLE",
   ")",
   ")",
   "{",
   "prevItem",
   ".",
   "state",
   "=",
   "ItemState",
   ".",
   "HIDE",
   ";",
   "prevItem",
   ".",
   "wait",
   "=",
   "item",
   ".",
   "wait",
   ";",
   "}",
   "item",
   ".",
   "state",
   "=",
   "ItemState",
   ".",
   "SHOW",
   ";",
   "invalidated",
   "=",
   "true",
   ";",
   "}",
   "break",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "item",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "VISIBLE",
   ")",
   "&&",
   "item",
   ".",
   "hide",
   ")",
   "{",
   "item",
   ".",
   "state",
   "=",
   "ItemState",
   ".",
   "HIDE",
   ";",
   "}",
   "if",
   "(",
   "(",
   "item",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "SHOW",
   ")",
   "||",
   "(",
   "item",
   ".",
   "state",
   "===",
   "ItemState",
   ".",
   "HIDE",
   ")",
   ")",
   "{",
   "this",
   ".",
   "layout",
   ".",
   "reflowLayout",
   "(",
   ")",
   ";",
   "}",
   "prevItem",
   "=",
   "item",
   ";",
   "}",
   "if",
   "(",
   "invalidated",
   ")",
   "{",
   "_updateState",
   ".",
   "call",
   "(",
   "this",
   ")",
   ";",
   "this",
   ".",
   "layout",
   ".",
   "reflowLayout",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-128",
  "nl_tokens": [
   "function",
   "isRecastable",
   "(",
   "ext",
   ")",
   "{",
   "return",
   "extToFunction",
   "[",
   "ext",
   "]",
   "?",
   "true",
   ":",
   "false",
   ";",
   "}"
  ],
  "pl_tokens": [
   "function",
   "composeFunction",
   "(",
   "flist",
   ")",
   "{",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "0",
   ")",
   "return",
   "function",
   "identity",
   "(",
   "data",
   ")",
   "{",
   "return",
   "VOW",
   ".",
   "kept",
   "(",
   "data",
   ")",
   ";",
   "}",
   ";",
   "else",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "1",
   ")",
   "return",
   "flist",
   "[",
   "0",
   "]",
   ";",
   "else",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "2",
   ")",
   "return",
   "function",
   "(",
   "data",
   ")",
   "{",
   "return",
   "flist",
   "[",
   "0",
   "]",
   "(",
   "data",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "1",
   "]",
   ")",
   ";",
   "}",
   ";",
   "else",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "3",
   ")",
   "return",
   "function",
   "(",
   "data",
   ")",
   "{",
   "return",
   "flist",
   "[",
   "0",
   "]",
   "(",
   "data",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "1",
   "]",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "2",
   "]",
   ")",
   ";",
   "}",
   ";",
   "else",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "4",
   ")",
   "return",
   "function",
   "(",
   "data",
   ")",
   "{",
   "return",
   "flist",
   "[",
   "0",
   "]",
   "(",
   "data",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "1",
   "]",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "2",
   "]",
   ")",
   ".",
   "when",
   "(",
   "flist",
   "[",
   "3",
   "]",
   ")",
   ";",
   "}",
   ";",
   "return",
   "function",
   "(",
   ")",
   "{",
   "return",
   "VOW",
   ".",
   "broken",
   "(",
   "\"Can't have more than four passes!!!. Shouldn't happen!!!\"",
   ")",
   ";",
   "}",
   ";",
   "//needs debugging:",
   "return",
   "function",
   "(",
   "data",
   ")",
   "{",
   "function",
   "chain",
   "(",
   "p1",
   ",",
   "p2",
   ")",
   "{",
   "return",
   "p1",
   ".",
   "when",
   "(",
   "p2",
   ")",
   ";",
   "}",
   "if",
   "(",
   "flist",
   ".",
   "length",
   "===",
   "0",
   ")",
   "return",
   "VOW",
   ".",
   "kept",
   "(",
   "data",
   ")",
   ";",
   "var",
   "promise",
   "=",
   "flist",
   "[",
   "0",
   "]",
   "(",
   "data",
   ")",
   ";",
   "var",
   "i",
   "=",
   "0",
   ";",
   "var",
   "<mask>",
   "=",
   "flist",
   ".",
   "length",
   "-",
   "1",
   ";",
   "while",
   "(",
   "i",
   "<",
   "max",
   ")",
   "promise",
   "=",
   "chain",
   "(",
   "promise",
   ",",
   "flist",
   "[",
   "i",
   "+",
   "1",
   "]",
   ")",
   ";",
   "return",
   "promise",
   ";",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-129",
  "nl_tokens": [
   "returns",
   "linear",
   "friction",
   "coeff",
   ".",
   "When",
   "value",
   "is",
   "0",
   "coeff",
   "is",
   "1",
   "(",
   "no",
   "friction",
   ")",
   "then",
   "it",
   "grows",
   "linearly",
   "until",
   "it",
   "reaches",
   "MAX_FRICTION",
   "when",
   "value",
   "is",
   "equal",
   "to",
   "MAX_VALUE"
  ],
  "pl_tokens": [
   "function",
   "friction",
   "(",
   "value",
   ")",
   "{",
   "const",
   "MAX_FRICTION",
   "=",
   "5",
   ";",
   "const",
   "MAX_VALUE",
   "=",
   "100",
   ";",
   "return",
   "<mask>",
   "(",
   "1",
   ",",
   "min",
   "(",
   "MAX_FRICTION",
   ",",
   "add",
   "(",
   "1",
   ",",
   "multiply",
   "(",
   "value",
   ",",
   "(",
   "MAX_FRICTION",
   "-",
   "1",
   ")",
   "/",
   "MAX_VALUE",
   ")",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-130",
  "nl_tokens": [
   "Returns",
   "a",
   "domain",
   "based",
   "on",
   "categories",
   "if",
   "they",
   "exist"
  ],
  "pl_tokens": [
   "function",
   "getDomainFromCategories",
   "(",
   "props",
   ",",
   "axis",
   ",",
   "categories",
   ")",
   "{",
   "categories",
   "=",
   "categories",
   "||",
   "Data",
   ".",
   "getCategories",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "{",
   "polar",
   ",",
   "startAngle",
   "=",
   "0",
   ",",
   "endAngle",
   "=",
   "360",
   "}",
   "=",
   "props",
   ";",
   "if",
   "(",
   "!",
   "categories",
   ")",
   "{",
   "return",
   "undefined",
   ";",
   "}",
   "const",
   "minDomain",
   "=",
   "getMinFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "maxDomain",
   "=",
   "getMaxFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "stringArray",
   "=",
   "Collection",
   ".",
   "containsStrings",
   "(",
   "categories",
   ")",
   "?",
   "Data",
   ".",
   "getStringsFromCategories",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ":",
   "[",
   "]",
   ";",
   "const",
   "stringMap",
   "=",
   "stringArray",
   ".",
   "length",
   "===",
   "0",
   "?",
   "null",
   ":",
   "stringArray",
   ".",
   "reduce",
   "(",
   "(",
   "memo",
   ",",
   "string",
   ",",
   "index",
   ")",
   "=>",
   "{",
   "memo",
   "[",
   "string",
   "]",
   "=",
   "index",
   "+",
   "1",
   ";",
   "return",
   "memo",
   ";",
   "}",
   ",",
   "{",
   "}",
   ")",
   ";",
   "const",
   "categoryValues",
   "=",
   "stringMap",
   "?",
   "categories",
   ".",
   "map",
   "(",
   "(",
   "value",
   ")",
   "=>",
   "stringMap",
   "[",
   "value",
   "]",
   ")",
   ":",
   "categories",
   ";",
   "const",
   "<mask>",
   "=",
   "minDomain",
   "!==",
   "undefined",
   "?",
   "minDomain",
   ":",
   "Collection",
   ".",
   "getMinValue",
   "(",
   "categoryValues",
   ")",
   ";",
   "const",
   "max",
   "=",
   "maxDomain",
   "!==",
   "undefined",
   "?",
   "maxDomain",
   ":",
   "Collection",
   ".",
   "getMaxValue",
   "(",
   "categoryValues",
   ")",
   ";",
   "const",
   "categoryDomain",
   "=",
   "getDomainFromMinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "return",
   "polar",
   "&&",
   "axis",
   "===",
   "\"x\"",
   "&&",
   "Math",
   ".",
   "abs",
   "(",
   "startAngle",
   "-",
   "endAngle",
   ")",
   "===",
   "360",
   "?",
   "getSymmetricDomain",
   "(",
   "categoryDomain",
   ",",
   "categoryValues",
   ")",
   ":",
   "categoryDomain",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-131",
  "nl_tokens": [
   "Calculate",
   "the",
   "min",
   "and",
   "max",
   "values",
   "for",
   "this",
   "series",
   "s",
   "yField",
   "(",
   "s",
   ")",
   ".",
   "Takes",
   "into",
   "account",
   "yField",
   "combinations",
   "exclusions",
   "and",
   "stacking",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "chart",
   "=",
   "me",
   ".",
   "chart",
   ",",
   "store",
   "=",
   "chart",
   ".",
   "getChartStore",
   "(",
   ")",
   ",",
   "data",
   "=",
   "store",
   ".",
   "data",
   ".",
   "items",
   ",",
   "count",
   "=",
   "me",
   ".",
   "getRecordCount",
   "(",
   ")",
   ",",
   "i",
   ",",
   "ln",
   ",",
   "record",
   ",",
   "stacked",
   "=",
   "me",
   ".",
   "stacked",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "positiveTotal",
   ",",
   "negativeTotal",
   ";",
   "function",
   "eachYValueStacked",
   "(",
   "yValue",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "!",
   "me",
   ".",
   "isExcluded",
   "(",
   "i",
   ")",
   ")",
   "{",
   "if",
   "(",
   "yValue",
   "<",
   "0",
   ")",
   "{",
   "negativeTotal",
   "+=",
   "yValue",
   ";",
   "}",
   "else",
   "{",
   "positiveTotal",
   "+=",
   "yValue",
   ";",
   "}",
   "}",
   "}",
   "function",
   "eachYValue",
   "(",
   "yValue",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "!",
   "me",
   ".",
   "isExcluded",
   "(",
   "i",
   ")",
   ")",
   "{",
   "if",
   "(",
   "yValue",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "yValue",
   ";",
   "}",
   "if",
   "(",
   "yValue",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "yValue",
   ";",
   "}",
   "}",
   "}",
   "if",
   "(",
   "count",
   ">",
   "0",
   ")",
   "{",
   "min",
   "=",
   "Infinity",
   ";",
   "max",
   "=",
   "-",
   "min",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "ln",
   "=",
   "data",
   ".",
   "length",
   ";",
   "i",
   "<",
   "ln",
   ";",
   "i",
   "++",
   ")",
   "{",
   "record",
   "=",
   "data",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "stacked",
   ")",
   "{",
   "positiveTotal",
   "=",
   "0",
   ";",
   "negativeTotal",
   "=",
   "0",
   ";",
   "me",
   ".",
   "eachYValue",
   "(",
   "record",
   ",",
   "eachYValueStacked",
   ")",
   ";",
   "if",
   "(",
   "positiveTotal",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "positiveTotal",
   ";",
   "}",
   "if",
   "(",
   "negativeTotal",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "negativeTotal",
   ";",
   "}",
   "}",
   "else",
   "{",
   "me",
   ".",
   "eachYValue",
   "(",
   "record",
   ",",
   "eachYValue",
   ")",
   ";",
   "}",
   "}",
   "// If we made no progress, treat it like a category axis",
   "if",
   "(",
   "min",
   "==",
   "Infinity",
   ")",
   "{",
   "min",
   "=",
   "0",
   ";",
   "}",
   "if",
   "(",
   "max",
   "==",
   "-",
   "Infinity",
   ")",
   "{",
   "max",
   "=",
   "count",
   "-",
   "1",
   ";",
   "}",
   "}",
   "else",
   "{",
   "min",
   "=",
   "max",
   "=",
   "0",
   ";",
   "}",
   "return",
   "[",
   "min",
   ",",
   "max",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-132",
  "nl_tokens": [
   "Returns",
   "a",
   "domain",
   "in",
   "the",
   "form",
   "of",
   "a",
   "two",
   "element",
   "array",
   "given",
   "a",
   "min",
   "and",
   "max",
   "value",
   "."
  ],
  "pl_tokens": [
   "function",
   "getDomainFromMinMax",
   "(",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "const",
   "getSinglePointDomain",
   "=",
   "(",
   "val",
   ")",
   "=>",
   "{",
   "// d3-scale does not properly resolve very small differences.",
   "// eslint-disable-next-line no-magic-numbers",
   "const",
   "verySmallNumber",
   "=",
   "val",
   "===",
   "0",
   "?",
   "2",
   "*",
   "Math",
   ".",
   "pow",
   "(",
   "10",
   ",",
   "-",
   "10",
   ")",
   ":",
   "Math",
   ".",
   "pow",
   "(",
   "10",
   ",",
   "-",
   "10",
   ")",
   ";",
   "const",
   "verySmallDate",
   "=",
   "1",
   ";",
   "const",
   "minVal",
   "=",
   "val",
   "instanceof",
   "Date",
   "?",
   "new",
   "Date",
   "(",
   "+",
   "val",
   "-",
   "verySmallDate",
   ")",
   ":",
   "+",
   "val",
   "-",
   "verySmallNumber",
   ";",
   "const",
   "maxVal",
   "=",
   "val",
   "instanceof",
   "Date",
   "?",
   "new",
   "Date",
   "(",
   "+",
   "val",
   "+",
   "verySmallDate",
   ")",
   ":",
   "+",
   "val",
   "+",
   "verySmallNumber",
   ";",
   "return",
   "val",
   "===",
   "0",
   "?",
   "[",
   "0",
   ",",
   "maxVal",
   "]",
   ":",
   "[",
   "minVal",
   ",",
   "maxVal",
   "]",
   ";",
   "}",
   ";",
   "return",
   "+",
   "min",
   "===",
   "+",
   "max",
   "?",
   "getSinglePointDomain",
   "(",
   "max",
   ")",
   ":",
   "[",
   "min",
   ",",
   "max",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-133",
  "nl_tokens": [
   "Returns",
   "a",
   "domain",
   "based",
   "tickValues"
  ],
  "pl_tokens": [
   "function",
   "getDomainFromData",
   "(",
   "props",
   ",",
   "axis",
   ")",
   "{",
   "const",
   "{",
   "polar",
   ",",
   "startAngle",
   "=",
   "0",
   ",",
   "endAngle",
   "=",
   "360",
   "}",
   "=",
   "props",
   ";",
   "const",
   "tickValues",
   "=",
   "getTickArray",
   "(",
   "props",
   ")",
   ";",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "tickValues",
   ")",
   ")",
   "{",
   "return",
   "undefined",
   ";",
   "}",
   "const",
   "minDomain",
   "=",
   "Domain",
   ".",
   "getMinFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "maxDomain",
   "=",
   "Domain",
   ".",
   "getMaxFromProps",
   "(",
   "props",
   ",",
   "axis",
   ")",
   ";",
   "const",
   "tickStrings",
   "=",
   "stringTicks",
   "(",
   "props",
   ")",
   ";",
   "const",
   "ticks",
   "=",
   "tickValues",
   ".",
   "map",
   "(",
   "(",
   "value",
   ")",
   "=>",
   "+",
   "value",
   ")",
   ";",
   "const",
   "defaultMin",
   "=",
   "tickStrings",
   "?",
   "1",
   ":",
   "Collection",
   ".",
   "getMinValue",
   "(",
   "ticks",
   ")",
   ";",
   "const",
   "defaultMax",
   "=",
   "tickStrings",
   "?",
   "tickValues",
   ".",
   "length",
   ":",
   "Collection",
   ".",
   "getMaxValue",
   "(",
   "ticks",
   ")",
   ";",
   "const",
   "<mask>",
   "=",
   "minDomain",
   "!==",
   "undefined",
   "?",
   "minDomain",
   ":",
   "defaultMin",
   ";",
   "const",
   "max",
   "=",
   "maxDomain",
   "!==",
   "undefined",
   "?",
   "maxDomain",
   ":",
   "defaultMax",
   ";",
   "const",
   "initialDomain",
   "=",
   "Domain",
   ".",
   "getDomainFromMinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "const",
   "domain",
   "=",
   "polar",
   "&&",
   "axis",
   "===",
   "\"x\"",
   "&&",
   "Math",
   ".",
   "abs",
   "(",
   "startAngle",
   "-",
   "endAngle",
   ")",
   "===",
   "360",
   "?",
   "Domain",
   ".",
   "getSymmetricDomain",
   "(",
   "initialDomain",
   ",",
   "ticks",
   ")",
   ":",
   "initialDomain",
   ";",
   "if",
   "(",
   "isVertical",
   "(",
   "props",
   ")",
   "&&",
   "!",
   "polar",
   ")",
   "{",
   "domain",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "}",
   "return",
   "domain",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-134",
  "nl_tokens": [
   "Webkit",
   "polyfill",
   "for",
   "lower",
   "fill",
   "range"
  ],
  "pl_tokens": [
   "function",
   "updateRangeFill",
   "(",
   "target",
   ")",
   "{",
   "// Get range from event if event passed",
   "var",
   "range",
   "=",
   "is$1",
   ".",
   "event",
   "(",
   "target",
   ")",
   "?",
   "target",
   ".",
   "target",
   ":",
   "target",
   ";",
   "// Needs to be a valid <input type='range'>",
   "if",
   "(",
   "!",
   "is$1",
   ".",
   "element",
   "(",
   "range",
   ")",
   "||",
   "range",
   ".",
   "getAttribute",
   "(",
   "'type'",
   ")",
   "!==",
   "'range'",
   ")",
   "{",
   "return",
   ";",
   "}",
   "// Set aria values for https://github.com/sampotts/plyr/issues/905",
   "if",
   "(",
   "matches$1",
   "(",
   "range",
   ",",
   "this",
   ".",
   "config",
   ".",
   "selectors",
   ".",
   "inputs",
   ".",
   "seek",
   ")",
   ")",
   "{",
   "range",
   ".",
   "setAttribute",
   "(",
   "'aria-valuenow'",
   ",",
   "this",
   ".",
   "currentTime",
   ")",
   ";",
   "var",
   "currentTime",
   "=",
   "controls",
   ".",
   "formatTime",
   "(",
   "this",
   ".",
   "currentTime",
   ")",
   ";",
   "var",
   "duration",
   "=",
   "controls",
   ".",
   "formatTime",
   "(",
   "this",
   ".",
   "duration",
   ")",
   ";",
   "var",
   "format",
   "=",
   "i18n",
   ".",
   "get",
   "(",
   "'seekLabel'",
   ",",
   "this",
   ".",
   "config",
   ")",
   ";",
   "range",
   ".",
   "setAttribute",
   "(",
   "'aria-valuetext'",
   ",",
   "format",
   ".",
   "replace",
   "(",
   "'{currentTime}'",
   ",",
   "currentTime",
   ")",
   ".",
   "replace",
   "(",
   "'{duration}'",
   ",",
   "duration",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "matches$1",
   "(",
   "range",
   ",",
   "this",
   ".",
   "config",
   ".",
   "selectors",
   ".",
   "inputs",
   ".",
   "volume",
   ")",
   ")",
   "{",
   "var",
   "percent",
   "=",
   "range",
   ".",
   "value",
   "*",
   "100",
   ";",
   "range",
   ".",
   "setAttribute",
   "(",
   "'aria-valuenow'",
   ",",
   "percent",
   ")",
   ";",
   "range",
   ".",
   "setAttribute",
   "(",
   "'aria-valuetext'",
   ",",
   "\"\"",
   ".",
   "concat",
   "(",
   "percent",
   ".",
   "toFixed",
   "(",
   "1",
   ")",
   ",",
   "\"%\"",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "range",
   ".",
   "setAttribute",
   "(",
   "'aria-valuenow'",
   ",",
   "range",
   ".",
   "value",
   ")",
   ";",
   "}",
   "// WebKit only",
   "if",
   "(",
   "!",
   "browser",
   ".",
   "isWebkit",
   ")",
   "{",
   "return",
   ";",
   "}",
   "// Set CSS custom property",
   "range",
   ".",
   "style",
   ".",
   "setProperty",
   "(",
   "'--value'",
   ",",
   "\"\"",
   ".",
   "concat",
   "(",
   "range",
   ".",
   "value",
   "/",
   "range",
   ".",
   "<mask>",
   "*",
   "100",
   ",",
   "\"%\"",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-135",
  "nl_tokens": [
   "table",
   "is",
   "array",
   "of",
   "rows",
   "where",
   "row",
   "is",
   "array",
   "of",
   "cells",
   "cell",
   "is",
   "array",
   "of",
   "spans"
  ],
  "pl_tokens": [
   "function",
   "formatTable",
   "(",
   "table",
   ",",
   "links",
   ",",
   "notes",
   ")",
   "{",
   "var",
   "widths",
   "=",
   "[",
   "]",
   ";",
   "var",
   "rows",
   "=",
   "table",
   ".",
   "map",
   "(",
   "function",
   "(",
   "row",
   ")",
   "{",
   "var",
   "cells",
   "=",
   "row",
   ".",
   "map",
   "(",
   "function",
   "(",
   "cell",
   ")",
   "{",
   "return",
   "formatSpans",
   "(",
   "cell",
   ",",
   "links",
   ",",
   "notes",
   ")",
   ";",
   "}",
   ")",
   ";",
   "cells",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "cell",
   ",",
   "index",
   ")",
   "{",
   "widths",
   "[",
   "index",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "cell",
   ".",
   "length",
   ",",
   "widths",
   "[",
   "index",
   "]",
   "||",
   "5",
   ")",
   ";",
   "widths",
   "[",
   "index",
   "]",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "widths",
   "[",
   "index",
   "]",
   ",",
   "50",
   ")",
   ";",
   "}",
   ")",
   ";",
   "return",
   "cells",
   ".",
   "join",
   "(",
   "' & '",
   ")",
   ";",
   "}",
   ")",
   ";",
   "var",
   "totalWidth",
   "=",
   "widths",
   ".",
   "reduce",
   "(",
   "function",
   "sum",
   "(",
   "val",
   ",",
   "width",
   ")",
   "{",
   "return",
   "val",
   "+",
   "width",
   ";",
   "}",
   ",",
   "0",
   ")",
   ";",
   "totalWidth",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "totalWidth",
   ",",
   "100",
   ")",
   ";",
   "widths",
   "=",
   "widths",
   ".",
   "map",
   "(",
   "function",
   "(",
   "width",
   ")",
   "{",
   "var",
   "relativeWidth",
   "=",
   "width",
   "/",
   "totalWidth",
   ";",
   "return",
   "'p{'",
   "+",
   "relativeWidth",
   "+",
   "'\\\\textwidth}'",
   ";",
   "}",
   ")",
   ".",
   "join",
   "(",
   "' | '",
   ")",
   ";",
   "var",
   "str",
   "=",
   "'\\\\begin{longtable}{ | '",
   "+",
   "widths",
   "+",
   "' |}\\n'",
   "+",
   "'\\\\hline\\n'",
   "+",
   "rows",
   ".",
   "join",
   "(",
   "' \\\\\\\\\\n\\\\hline\\n'",
   ")",
   "+",
   "' \\\\\\\\\\n'",
   "+",
   "'\\\\hline\\n'",
   "+",
   "'\\\\end{longtable}'",
   ";",
   "return",
   "str",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-136",
  "nl_tokens": [
   "Returns",
   "the",
   "key",
   "of",
   "the",
   "item",
   "with",
   "the",
   "highest",
   "value",
   "in",
   "the",
   "object",
   "."
  ],
  "pl_tokens": [
   "function",
   "keyOfMax",
   "(",
   "o",
   ",",
   "func",
   ")",
   "{",
   "if",
   "(",
   "!",
   "o",
   "||",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "if",
   "(",
   "libs",
   ".",
   "object",
   ".",
   "size",
   "(",
   "o",
   ")",
   "===",
   "0",
   ")",
   "return",
   ";",
   "if",
   "(",
   "!",
   "(",
   "func",
   "instanceof",
   "Function",
   ")",
   ")",
   "func",
   "=",
   "undefined",
   ";",
   "var",
   "<mask>",
   ",",
   "maxValue",
   ",",
   "maxKey",
   ";",
   "if",
   "(",
   "!",
   "func",
   ")",
   "{",
   "max",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "maxKey",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "keys",
   "(",
   "o",
   ")",
   "[",
   "0",
   "]",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ",",
   "key",
   ")",
   "{",
   "if",
   "(",
   "item",
   ">=",
   "max",
   ")",
   "{",
   "max",
   "=",
   "item",
   ";",
   "maxKey",
   "=",
   "key",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "max",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "maxKey",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "keys",
   "(",
   "o",
   ")",
   "[",
   "0",
   "]",
   ";",
   "maxValue",
   "=",
   "func",
   ".",
   "call",
   "(",
   "max",
   ",",
   "max",
   ")",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ",",
   "key",
   ")",
   "{",
   "var",
   "value",
   "=",
   "func",
   ".",
   "call",
   "(",
   "item",
   ",",
   "item",
   ")",
   ";",
   "if",
   "(",
   "value",
   ">=",
   "maxValue",
   ")",
   "{",
   "if",
   "(",
   "value",
   ">=",
   "maxValue",
   ")",
   "{",
   "max",
   "=",
   "item",
   ";",
   "maxValue",
   "=",
   "value",
   ";",
   "maxKey",
   "=",
   "key",
   ";",
   "}",
   "}",
   "}",
   ")",
   ";",
   "}",
   "return",
   "maxKey",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-137",
  "nl_tokens": [
   "Format",
   "a",
   "size",
   "in",
   "bytes",
   "into",
   "a",
   "human",
   "-",
   "readable",
   "string",
   "with",
   "metric",
   "unit",
   "prefixes",
   "."
  ],
  "pl_tokens": [
   "function",
   "formatSize",
   "(",
   "sizeBytes",
   ")",
   "{",
   "if",
   "(",
   "sizeBytes",
   "<",
   "1024",
   ")",
   "{",
   "return",
   "sizeBytes",
   "+",
   "' B'",
   ";",
   "}",
   "var",
   "i",
   ",",
   "sizeVal",
   "=",
   "sizeBytes",
   ",",
   "precision",
   "=",
   "1",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "sizeVal",
   ">=",
   "1024",
   ";",
   "i",
   "+=",
   "1",
   ")",
   "{",
   "sizeVal",
   "/=",
   "1024",
   ";",
   "}",
   "// If we are just reporting a low number, no need for decimal places.",
   "if",
   "(",
   "sizeVal",
   "<",
   "10",
   ")",
   "{",
   "precision",
   "=",
   "3",
   ";",
   "}",
   "else",
   "if",
   "(",
   "sizeVal",
   "<",
   "100",
   ")",
   "{",
   "precision",
   "=",
   "2",
   ";",
   "}",
   "return",
   "sizeVal",
   ".",
   "toFixed",
   "(",
   "precision",
   ")",
   "+",
   "' '",
   "+",
   "[",
   "'B'",
   ",",
   "'kB'",
   ",",
   "'MB'",
   ",",
   "'GB'",
   ",",
   "'TB'",
   "]",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "i",
   ",",
   "4",
   ")",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-138",
  "nl_tokens": [
   "bracketRegex",
   "is",
   "used",
   "to",
   "specify",
   "which",
   "type",
   "of",
   "bracket",
   "to",
   "scan",
   "should",
   "be",
   "a",
   "regexp",
   "e",
   ".",
   "g",
   ".",
   "/",
   "[[",
   "\\",
   "]]",
   "/",
   "Note",
   ":",
   "If",
   "where",
   "is",
   "on",
   "an",
   "open",
   "bracket",
   "then",
   "this",
   "bracket",
   "is",
   "ignored",
   ".",
   "Returns",
   "false",
   "when",
   "no",
   "bracket",
   "was",
   "found",
   "null",
   "when",
   "it",
   "reached",
   "maxScanLines",
   "and",
   "gave",
   "up"
  ],
  "pl_tokens": [
   "function",
   "scanForBracket",
   "(",
   "cm",
   ",",
   "where",
   ",",
   "dir",
   ",",
   "style",
   ",",
   "config",
   ")",
   "{",
   "var",
   "maxScanLen",
   "=",
   "(",
   "config",
   "&&",
   "config",
   ".",
   "maxScanLineLength",
   ")",
   "||",
   "10000",
   ";",
   "var",
   "maxScanLines",
   "=",
   "(",
   "config",
   "&&",
   "config",
   ".",
   "maxScanLines",
   ")",
   "||",
   "1000",
   ";",
   "var",
   "stack",
   "=",
   "[",
   "]",
   ";",
   "var",
   "re",
   "=",
   "config",
   "&&",
   "config",
   ".",
   "bracketRegex",
   "?",
   "config",
   ".",
   "bracketRegex",
   ":",
   "/",
   "[(){}[\\]]",
   "/",
   ";",
   "var",
   "lineEnd",
   "=",
   "dir",
   ">",
   "0",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "where",
   ".",
   "line",
   "+",
   "maxScanLines",
   ",",
   "cm",
   ".",
   "lastLine",
   "(",
   ")",
   "+",
   "1",
   ")",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "cm",
   ".",
   "firstLine",
   "(",
   ")",
   "-",
   "1",
   ",",
   "where",
   ".",
   "line",
   "-",
   "maxScanLines",
   ")",
   ";",
   "for",
   "(",
   "var",
   "lineNo",
   "=",
   "where",
   ".",
   "line",
   ";",
   "lineNo",
   "!=",
   "lineEnd",
   ";",
   "lineNo",
   "+=",
   "dir",
   ")",
   "{",
   "var",
   "line",
   "=",
   "cm",
   ".",
   "getLine",
   "(",
   "lineNo",
   ")",
   ";",
   "if",
   "(",
   "!",
   "line",
   ")",
   "continue",
   ";",
   "var",
   "pos",
   "=",
   "dir",
   ">",
   "0",
   "?",
   "0",
   ":",
   "line",
   ".",
   "length",
   "-",
   "1",
   ",",
   "end",
   "=",
   "dir",
   ">",
   "0",
   "?",
   "line",
   ".",
   "length",
   ":",
   "-",
   "1",
   ";",
   "if",
   "(",
   "line",
   ".",
   "length",
   ">",
   "maxScanLen",
   ")",
   "continue",
   ";",
   "if",
   "(",
   "lineNo",
   "==",
   "where",
   ".",
   "line",
   ")",
   "pos",
   "=",
   "where",
   ".",
   "ch",
   "-",
   "(",
   "dir",
   "<",
   "0",
   "?",
   "1",
   ":",
   "0",
   ")",
   ";",
   "for",
   "(",
   ";",
   "pos",
   "!=",
   "end",
   ";",
   "pos",
   "+=",
   "dir",
   ")",
   "{",
   "var",
   "ch",
   "=",
   "line",
   ".",
   "charAt",
   "(",
   "pos",
   ")",
   ";",
   "if",
   "(",
   "re",
   ".",
   "test",
   "(",
   "ch",
   ")",
   "&&",
   "(",
   "style",
   "===",
   "undefined",
   "||",
   "cm",
   ".",
   "getTokenTypeAt",
   "(",
   "Pos",
   "(",
   "lineNo",
   ",",
   "pos",
   "+",
   "1",
   ")",
   ")",
   "==",
   "style",
   ")",
   ")",
   "{",
   "var",
   "match",
   "=",
   "matching",
   "[",
   "ch",
   "]",
   ";",
   "if",
   "(",
   "(",
   "match",
   ".",
   "charAt",
   "(",
   "1",
   ")",
   "==",
   "\">\"",
   ")",
   "==",
   "(",
   "dir",
   ">",
   "0",
   ")",
   ")",
   "stack",
   ".",
   "push",
   "(",
   "ch",
   ")",
   ";",
   "else",
   "if",
   "(",
   "!",
   "stack",
   ".",
   "length",
   ")",
   "return",
   "{",
   "pos",
   ":",
   "Pos",
   "(",
   "lineNo",
   ",",
   "pos",
   ")",
   ",",
   "ch",
   ":",
   "ch",
   "}",
   ";",
   "else",
   "stack",
   ".",
   "pop",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "lineNo",
   "-",
   "dir",
   "==",
   "(",
   "dir",
   ">",
   "0",
   "?",
   "cm",
   ".",
   "lastLine",
   "(",
   ")",
   ":",
   "cm",
   ".",
   "firstLine",
   "(",
   ")",
   ")",
   "?",
   "false",
   ":",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-139",
  "nl_tokens": [
   "/",
   "*",
   "452"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry3",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "4",
   ")",
   ";",
   "/**\n\t * Creates a new list out of the two supplied by applying the function to each\n\t * equally-positioned pair in the lists. The returned list is truncated to the\n\t * length of the shorter of the two input lists.\n\t *\n\t * @function\n\t * @memberOf R\n\t * @since v0.1.0\n\t * @category List\n\t * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n\t * @param {Function} fn The function used to combine the two elements into one value.\n\t * @param {Array} list1 The first array to consider.\n\t * @param {Array} list2 The second array to consider.\n\t * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n\t *         using `fn`.\n\t * @example\n\t *\n\t *      var f = (x, y) => {\n\t *        // ...\n\t *      };\n\t *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n\t *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n\t * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n\t */",
   "var",
   "zipWith",
   "=",
   "/*#__PURE__*/",
   "_curry3",
   "(",
   "function",
   "zipWith",
   "(",
   "fn",
   ",",
   "a",
   ",",
   "b",
   ")",
   "{",
   "var",
   "rv",
   "=",
   "[",
   "]",
   ";",
   "var",
   "idx",
   "=",
   "0",
   ";",
   "var",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "length",
   ",",
   "b",
   ".",
   "length",
   ")",
   ";",
   "while",
   "(",
   "idx",
   "<",
   "len",
   ")",
   "{",
   "rv",
   "[",
   "idx",
   "]",
   "=",
   "fn",
   "(",
   "a",
   "[",
   "idx",
   "]",
   ",",
   "b",
   "[",
   "idx",
   "]",
   ")",
   ";",
   "idx",
   "+=",
   "1",
   ";",
   "}",
   "return",
   "rv",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "zipWith",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-140",
  "nl_tokens": [
   "/",
   "*",
   "377"
  ],
  "pl_tokens": [
   "function",
   "(",
   "module",
   ",",
   "exports",
   ",",
   "__webpack_require__",
   ")",
   "{",
   "var",
   "_curry2",
   "=",
   "/*#__PURE__*/",
   "__webpack_require__",
   "(",
   "1",
   ")",
   ";",
   "/**\n\t * Returns the smaller of its two arguments.\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.1.0\n\t * @category Relation\n\t * @sig Ord a => a -> a -> a\n\t * @param {*} a\n\t * @param {*} b\n\t * @return {*}\n\t * @see R.minBy, R.max\n\t * @example\n\t *\n\t *      R.min(789, 123); //=> 123\n\t *      R.min('a', 'b'); //=> 'a'\n\t */",
   "var",
   "<mask>",
   "=",
   "/*#__PURE__*/",
   "_curry2",
   "(",
   "function",
   "min",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "b",
   "<",
   "a",
   "?",
   "b",
   ":",
   "a",
   ";",
   "}",
   ")",
   ";",
   "module",
   ".",
   "exports",
   "=",
   "min",
   ";",
   "/***/",
   "}"
  ]
 },
 {
  "idx": "maxmin-141",
  "nl_tokens": [
   "updates",
   "the",
   "starting",
   "position",
   "for",
   "paged",
   "navigation",
   "and",
   "then",
   "rebuilds",
   "the",
   "graph",
   "based",
   "on",
   "the",
   "selected",
   "page"
  ],
  "pl_tokens": [
   "function",
   "(",
   "direction",
   ",",
   "cloud_element",
   ")",
   "{",
   "var",
   "start",
   "=",
   "$",
   "(",
   "'#cloudGraphPagingStart'",
   ")",
   ".",
   "val",
   "(",
   ")",
   ";",
   "var",
   "rows",
   "=",
   "$",
   "(",
   "'#cloudGraphPagingRows'",
   ")",
   ".",
   "val",
   "(",
   ")",
   ";",
   "var",
   "startAt",
   "=",
   "start",
   "?",
   "parseInt",
   "(",
   "start",
   ")",
   ":",
   "0",
   ";",
   "var",
   "numRows",
   "=",
   "rows",
   "?",
   "parseInt",
   "(",
   "rows",
   ")",
   ":",
   "20",
   ";",
   "var",
   "newStart",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "startAt",
   "+",
   "(",
   "rows",
   "*",
   "direction",
   ")",
   ",",
   "0",
   ")",
   ";",
   "$",
   "(",
   "'#cloudGraphPagingStart'",
   ")",
   ".",
   "val",
   "(",
   "newStart",
   ")",
   ";",
   "var",
   "graph_element",
   "=",
   "$",
   "(",
   "'#graph-content'",
   ",",
   "cloud_element",
   ")",
   ";",
   "$",
   "(",
   "'#canvas'",
   ",",
   "graph_element",
   ")",
   ".",
   "empty",
   "(",
   ")",
   ";",
   "init_graph",
   "(",
   "graph_element",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-142",
  "nl_tokens": [
   "/",
   "*",
   "Constrain",
   "a",
   "left",
   "to",
   "keep",
   "the",
   "element",
   "in",
   "the",
   "window"
  ],
  "pl_tokens": [
   "function",
   "(",
   "off",
   ",",
   "el",
   ")",
   "{",
   "const",
   "ew",
   "=",
   "getBoundingClientRect",
   "(",
   "el",
   ")",
   ".",
   "width",
   ";",
   "off",
   ".",
   "left",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "off",
   ".",
   "left",
   ",",
   "viewport",
   ".",
   "width",
   "-",
   "ew",
   ")",
   ")",
   ";",
   "return",
   "off",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-143",
  "nl_tokens": [
   "Create",
   "a",
   "<progress",
   ">"
  ],
  "pl_tokens": [
   "function",
   "createProgress",
   "(",
   "type",
   ",",
   "attributes",
   ")",
   "{",
   "var",
   "progress",
   "=",
   "createElement",
   "(",
   "'progress'",
   ",",
   "extend",
   "(",
   "getAttributesFromSelector",
   "(",
   "this",
   ".",
   "config",
   ".",
   "selectors",
   ".",
   "display",
   "[",
   "type",
   "]",
   ")",
   ",",
   "{",
   "<mask>",
   ":",
   "0",
   ",",
   "max",
   ":",
   "100",
   ",",
   "value",
   ":",
   "0",
   ",",
   "role",
   ":",
   "'progressbar'",
   ",",
   "'aria-hidden'",
   ":",
   "true",
   "}",
   ",",
   "attributes",
   ")",
   ")",
   ";",
   "// Create the label inside",
   "if",
   "(",
   "type",
   "!==",
   "'volume'",
   ")",
   "{",
   "progress",
   ".",
   "appendChild",
   "(",
   "createElement",
   "(",
   "'span'",
   ",",
   "null",
   ",",
   "'0'",
   ")",
   ")",
   ";",
   "var",
   "suffixKey",
   "=",
   "{",
   "played",
   ":",
   "'played'",
   ",",
   "buffer",
   ":",
   "'buffered'",
   "}",
   "[",
   "type",
   "]",
   ";",
   "var",
   "suffix",
   "=",
   "suffixKey",
   "?",
   "i18n",
   ".",
   "get",
   "(",
   "suffixKey",
   ",",
   "this",
   ".",
   "config",
   ")",
   ":",
   "''",
   ";",
   "progress",
   ".",
   "innerText",
   "=",
   "\"% \"",
   ".",
   "concat",
   "(",
   "suffix",
   ".",
   "toLowerCase",
   "(",
   ")",
   ")",
   ";",
   "}",
   "this",
   ".",
   "elements",
   ".",
   "display",
   "[",
   "type",
   "]",
   "=",
   "progress",
   ";",
   "return",
   "progress",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-144",
  "nl_tokens": [
   "Extracts",
   "nearest",
   "HTML",
   "tag",
   "range",
   "from",
   "<code",
   ">",
   "content<",
   "/",
   "code",
   ">",
   "starting",
   "at",
   "<code",
   ">",
   "pos<",
   "/",
   "code",
   ">",
   "position"
  ],
  "pl_tokens": [
   "function",
   "(",
   "content",
   ",",
   "pos",
   ",",
   "isBackward",
   ")",
   "{",
   "var",
   "len",
   "=",
   "content",
   ".",
   "length",
   ",",
   "i",
   ";",
   "var",
   "range",
   "=",
   "require",
   "(",
   "'range'",
   ")",
   ";",
   "// max extraction length. I don't think there may be tags larger ",
   "// than 2000 characters length",
   "var",
   "maxLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "2000",
   ",",
   "len",
   ")",
   ";",
   "/** @type Range */",
   "var",
   "r",
   "=",
   "null",
   ";",
   "var",
   "match",
   "=",
   "function",
   "(",
   "pos",
   ")",
   "{",
   "var",
   "m",
   ";",
   "if",
   "(",
   "content",
   ".",
   "charAt",
   "(",
   "pos",
   ")",
   "==",
   "'<'",
   "&&",
   "(",
   "m",
   "=",
   "content",
   ".",
   "substr",
   "(",
   "pos",
   ",",
   "maxLen",
   ")",
   ".",
   "match",
   "(",
   "startTag",
   ")",
   ")",
   ")",
   "return",
   "range",
   ".",
   "create",
   "(",
   "pos",
   ",",
   "m",
   "[",
   "0",
   "]",
   ")",
   ";",
   "}",
   ";",
   "// lookup backward, in case we are inside tag already",
   "for",
   "(",
   "i",
   "=",
   "pos",
   ";",
   "i",
   ">=",
   "0",
   ";",
   "i",
   "--",
   ")",
   "{",
   "if",
   "(",
   "r",
   "=",
   "match",
   "(",
   "i",
   ")",
   ")",
   "break",
   ";",
   "}",
   "if",
   "(",
   "r",
   "&&",
   "(",
   "r",
   ".",
   "inside",
   "(",
   "pos",
   ")",
   "||",
   "isBackward",
   ")",
   ")",
   "return",
   "r",
   ";",
   "if",
   "(",
   "!",
   "r",
   "&&",
   "isBackward",
   ")",
   "return",
   "null",
   ";",
   "// search forward",
   "for",
   "(",
   "i",
   "=",
   "pos",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "r",
   "=",
   "match",
   "(",
   "i",
   ")",
   ")",
   "return",
   "r",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-145",
  "nl_tokens": [
   "/",
   "*",
   "Sends",
   "the",
   "buffer",
   "of",
   "the",
   "asset",
   "to",
   "the",
   "client",
   ".",
   "Accepts",
   "options",
   "to",
   "perform",
   "transformations",
   "on",
   "the",
   "asset",
   "."
  ],
  "pl_tokens": [
   "function",
   "sendAsset",
   "(",
   "res",
   ",",
   "assetDocument",
   ",",
   "options",
   ")",
   "{",
   "var",
   "data",
   ",",
   "id",
   ";",
   "if",
   "(",
   "assetDocument",
   ".",
   "metadata",
   "&&",
   "assetDocument",
   ".",
   "metadata",
   "[",
   "'content-type'",
   "]",
   ")",
   "{",
   "res",
   ".",
   "setHeader",
   "(",
   "'Content-Type'",
   ",",
   "assetDocument",
   ".",
   "metadata",
   "[",
   "'content-type'",
   "]",
   ")",
   ";",
   "}",
   "else",
   "{",
   "res",
   ".",
   "setHeader",
   "(",
   "'Content-Type'",
   ",",
   "'text/plain'",
   ")",
   ";",
   "}",
   "data",
   "=",
   "assetDocument",
   ".",
   "data",
   ";",
   "id",
   "=",
   "assetDocument",
   ".",
   "id",
   ";",
   "/*\n         *\tPerforms transformations on an image\n         *\tTODO: Think about a more generic way to perform other transformations.\n         *\tTODO: Implement filters\n         */",
   "if",
   "(",
   "options",
   "&&",
   "options",
   ".",
   "transform",
   ")",
   "{",
   "var",
   "aspectRatio",
   "=",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "aspectRatio",
   ".",
   "value",
   ",",
   "width",
   "=",
   "parseInt",
   "(",
   "options",
   ".",
   "transform",
   ".",
   "width",
   ",",
   "10",
   ")",
   "||",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "width",
   ",",
   "//Use the original values, since the transformation uses the lower value, aspect ratio gets corrected",
   "height",
   "=",
   "parseInt",
   "(",
   "options",
   ".",
   "transform",
   ".",
   "height",
   ",",
   "10",
   ")",
   "||",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "height",
   ",",
   "scale_mode",
   "=",
   "options",
   ".",
   "transform",
   ".",
   "scale_mode",
   "===",
   "'fit'",
   "?",
   "''",
   ":",
   "'!'",
   ",",
   "//gm accepts an third parameter \"options\" which forces a resize when set to '!'",
   "transformData",
   "=",
   "{",
   "}",
   ",",
   "// contains the data, applied to their respectice transform function from gm",
   "transformOrderDef",
   "=",
   "[",
   "\"resize\"",
   ",",
   "\"crop\"",
   "]",
   ",",
   "//The default transformorder",
   "transformOrder",
   "=",
   "options",
   ".",
   "transform",
   ".",
   "transform",
   ",",
   "//Weakly match length to filter all falsy values, if no transform order was specified, use the default one.",
   "cropCoords",
   "=",
   "options",
   ".",
   "transform",
   ".",
   "cropCoords",
   ",",
   "cleanedCoords",
   "=",
   "[",
   "]",
   ",",
   "// [width,height,x,y]",
   "cropSize",
   ",",
   "parsedCoords",
   ",",
   "//JSON parsed cropCoords",
   "gmInstance",
   ",",
   "tmpCond",
   ",",
   "//used to temporarily assign test conditions",
   "query",
   ",",
   "<mask>",
   ";",
   "//Parse the transformorder",
   "if",
   "(",
   "transformOrder",
   ")",
   "{",
   "try",
   "{",
   "transformOrder",
   "=",
   "JSON",
   ".",
   "parse",
   "(",
   "transformOrder",
   ")",
   ";",
   "//Should be assigned to its own variable",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "transformOrder",
   "=",
   "transformOrderDef",
   ";",
   "}",
   "}",
   "else",
   "{",
   "transformOrder",
   "=",
   "transformOrderDef",
   ";",
   "}",
   "/*\n             *  preserve the right values for width and height, to match the aspect ratio if scale mode is fit\n             *\tWe need to normalize the data to e.g. get the same cached version for w: 50 h: 7889 and w:50 h: 123\n             */",
   "if",
   "(",
   "scale_mode",
   "!==",
   "'!'",
   ")",
   "{",
   "//'' == false.",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "width",
   ",",
   "height",
   ")",
   ";",
   "if",
   "(",
   "width",
   "===",
   "max",
   ")",
   "{",
   "width",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "height",
   "*",
   "aspectRatio",
   ")",
   ";",
   "//Round it if the aspect ratio * height is not an int",
   "}",
   "else",
   "if",
   "(",
   "height",
   "===",
   "max",
   ")",
   "{",
   "height",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "width",
   "/",
   "aspectRatio",
   ")",
   ";",
   "}",
   "}",
   "//If the aspect ratio matches the original, scale_mode:fill should be corrected, to make sure the cached assets are the same",
   "if",
   "(",
   "(",
   "width",
   "/",
   "height",
   ")",
   ".",
   "toPrecision",
   "(",
   "5",
   ")",
   "===",
   "aspectRatio",
   ".",
   "toPrecision",
   "(",
   "5",
   ")",
   ")",
   "{",
   "scale_mode",
   "=",
   "''",
   ";",
   "}",
   "// reformat the cropcoords vlaue to be able to directly apply it on the crop function of gm",
   "if",
   "(",
   "typeof",
   "cropCoords",
   "!==",
   "'undefined'",
   ")",
   "{",
   "try",
   "{",
   "parsedCoords",
   "=",
   "JSON",
   ".",
   "parse",
   "(",
   "cropCoords",
   ")",
   ";",
   "//The sum of the cropcoords, only a value > 0 makes sense...",
   "tmpCond",
   "=",
   "parsedCoords",
   ".",
   "reduce",
   "(",
   "function",
   "sum",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "a",
   "+",
   "(",
   "Array",
   ".",
   "isArray",
   "(",
   "b",
   ")",
   "?",
   "b",
   ".",
   "reduce",
   "(",
   "sum",
   ",",
   "0",
   ")",
   ":",
   "b",
   ")",
   ";",
   "}",
   ",",
   "0",
   ")",
   ";",
   "if",
   "(",
   "transformOrder",
   ".",
   "indexOf",
   "(",
   "\"crop\"",
   ")",
   ">",
   "transformOrder",
   ".",
   "indexOf",
   "(",
   "\"resize\"",
   ")",
   ")",
   "{",
   "cropSize",
   "=",
   "[",
   "width",
   ",",
   "height",
   "]",
   ";",
   "//If the cropping should happen after the resizing, we should use the resized images width and height for reference",
   "}",
   "else",
   "{",
   "cropSize",
   "=",
   "[",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "width",
   ",",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "height",
   "]",
   ";",
   "//otherwise we use the original image size as reference for the cropping",
   "}",
   "//TODO: Handle negative new width and rheight values",
   "if",
   "(",
   "tmpCond",
   ">",
   "0",
   ")",
   "{",
   "cleanedCoords",
   "[",
   "0",
   "]",
   "=",
   "cropSize",
   "[",
   "0",
   "]",
   "-",
   "parsedCoords",
   "[",
   "1",
   "]",
   "[",
   "0",
   "]",
   ";",
   "//new width",
   "cleanedCoords",
   "[",
   "1",
   "]",
   "=",
   "cropSize",
   "[",
   "1",
   "]",
   "-",
   "parsedCoords",
   "[",
   "1",
   "]",
   "[",
   "1",
   "]",
   ";",
   "//new height",
   "cleanedCoords",
   "[",
   "2",
   "]",
   "=",
   "parsedCoords",
   "[",
   "0",
   "]",
   "[",
   "0",
   "]",
   ";",
   "//x",
   "cleanedCoords",
   "[",
   "3",
   "]",
   "=",
   "parsedCoords",
   "[",
   "0",
   "]",
   "[",
   "1",
   "]",
   ";",
   "//y",
   "}",
   "tmpCond",
   "=",
   "null",
   ";",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "//don't crop the image if false values have been passed",
   "}",
   "}",
   "//If the recaalculated width and height either match the original size or are larger, use the original image.",
   "if",
   "(",
   "width",
   ">=",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "width",
   "&&",
   "height",
   ">=",
   "assetDocument",
   ".",
   "metadata",
   ".",
   "height",
   "&&",
   "cleanedCoords",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "res",
   ".",
   "writeHead",
   "(",
   "200",
   ")",
   ";",
   "return",
   "res",
   ".",
   "end",
   "(",
   "data",
   ")",
   ";",
   "}",
   "query",
   "=",
   "{",
   "parentId",
   ":",
   "id",
   ",",
   "'transforms.width'",
   ":",
   "width",
   ",",
   "'transforms.height'",
   ":",
   "height",
   ",",
   "'transforms.scale_mode'",
   ":",
   "scale_mode",
   ",",
   "'transforms.cropCoords'",
   ":",
   "cleanedCoords",
   ",",
   "'transforms.transformOrder'",
   ":",
   "transformOrder",
   "}",
   ";",
   "//The query to find the cached version, if existent",
   "Asset",
   ".",
   "findOne",
   "(",
   "query",
   ",",
   "'parentId transforms data'",
   ",",
   "function",
   "(",
   "err",
   ",",
   "cachedAssetDocument",
   ")",
   "{",
   "if",
   "(",
   "!",
   "cachedAssetDocument",
   ")",
   "{",
   "//If no transformed asset exists with the given parameters",
   "cachedAssetDocument",
   "=",
   "new",
   "Asset",
   "(",
   ")",
   ";",
   "//we create a new one, and save it in the mongodb",
   "//Define the data that should be passed to the different transformation methods",
   "transformData",
   ".",
   "resize",
   "=",
   "[",
   "width",
   ",",
   "height",
   ",",
   "scale_mode",
   "]",
   ";",
   "transformData",
   ".",
   "crop",
   "=",
   "cleanedCoords",
   ";",
   "gmInstance",
   "=",
   "gm",
   "(",
   "data",
   ")",
   ";",
   "/*\tIterate over the transformations that shopuld be performed, in their (optionally) defined order.\n                     *\tcheck if we have a defined dataset that can be applied to the transformation\n                     *\tand if the data exists\n                     */",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ",",
   "transformation",
   ",",
   "currentData",
   ";",
   "i",
   "<",
   "transformOrder",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "transformation",
   "=",
   "transformOrder",
   "[",
   "i",
   "]",
   ";",
   "currentData",
   "=",
   "transformData",
   "[",
   "transformation",
   "]",
   ";",
   "if",
   "(",
   "currentData",
   "&&",
   "currentData",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "gmInstance",
   "[",
   "transformation",
   "]",
   ".",
   "apply",
   "(",
   "gmInstance",
   ",",
   "currentData",
   ")",
   ";",
   "}",
   "}",
   "//When the transformations were applied, save the resulting image and return its buffer",
   "gmInstance",
   ".",
   "toBuffer",
   "(",
   "function",
   "(",
   "err",
   ",",
   "buffer",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   "cachedAssetDocument",
   ".",
   "data",
   "=",
   "buffer",
   ";",
   "cachedAssetDocument",
   ".",
   "parentId",
   "=",
   "id",
   ";",
   "cachedAssetDocument",
   ".",
   "transforms",
   "=",
   "{",
   "width",
   ":",
   "width",
   ",",
   "height",
   ":",
   "height",
   ",",
   "cropCoords",
   ":",
   "cleanedCoords",
   ",",
   "transformOrder",
   ":",
   "transformOrder",
   ",",
   "scale_mode",
   ":",
   "scale_mode",
   "}",
   ";",
   "cachedAssetDocument",
   ".",
   "save",
   "(",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   "res",
   ".",
   "send",
   "(",
   "buffer",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "//Otherwise send back the cached version",
   "res",
   ".",
   "send",
   "(",
   "cachedAssetDocument",
   ".",
   "data",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "res",
   ".",
   "writeHead",
   "(",
   "200",
   ")",
   ";",
   "return",
   "res",
   ".",
   "end",
   "(",
   "data",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-146",
  "nl_tokens": [
   "TO",
   "-",
   "DO",
   ":",
   "clean",
   "up",
   "the",
   "mess"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "center",
   "=",
   "-",
   "this",
   ".",
   "y",
   "+",
   "this",
   ".",
   "wrapperHeight",
   "/",
   "2",
   ";",
   "var",
   "minorPhase",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "-",
   "this",
   ".",
   "y",
   "/",
   "this",
   ".",
   "infiniteElementHeight",
   ")",
   "-",
   "this",
   ".",
   "infiniteUpperBufferSize",
   ",",
   "0",
   ")",
   ",",
   "majorPhase",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "minorPhase",
   "/",
   "this",
   ".",
   "infiniteLength",
   ")",
   ",",
   "phase",
   "=",
   "minorPhase",
   "-",
   "majorPhase",
   "*",
   "this",
   ".",
   "infiniteLength",
   ";",
   "var",
   "top",
   "=",
   "0",
   ";",
   "var",
   "i",
   "=",
   "0",
   ";",
   "var",
   "update",
   "=",
   "[",
   "]",
   ";",
   "//var cachePhase = Math.floor((minorPhase + this.infiniteLength / 2) / this.infiniteCacheBuffer);",
   "var",
   "cachePhase",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "minorPhase",
   "/",
   "this",
   ".",
   "infiniteCacheBuffer",
   ")",
   ";",
   "while",
   "(",
   "i",
   "<",
   "this",
   ".",
   "infiniteLength",
   ")",
   "{",
   "top",
   "=",
   "i",
   "*",
   "this",
   ".",
   "infiniteElementHeight",
   "+",
   "majorPhase",
   "*",
   "this",
   ".",
   "infiniteHeight",
   ";",
   "if",
   "(",
   "phase",
   ">",
   "i",
   ")",
   "{",
   "top",
   "+=",
   "this",
   ".",
   "infiniteElementHeight",
   "*",
   "this",
   ".",
   "infiniteLength",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "_top",
   "!==",
   "top",
   ")",
   "{",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "_phase",
   "=",
   "top",
   "/",
   "this",
   ".",
   "infiniteElementHeight",
   ";",
   "if",
   "(",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "_phase",
   "<",
   "this",
   ".",
   "options",
   ".",
   "infiniteLimit",
   ")",
   "{",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "_top",
   "=",
   "top",
   ";",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "infiniteUseTransform",
   ")",
   "{",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "style",
   "[",
   "utils",
   ".",
   "style",
   ".",
   "transform",
   "]",
   "=",
   "'translate(0, '",
   "+",
   "top",
   "+",
   "'px)'",
   "+",
   "this",
   ".",
   "translateZ",
   ";",
   "}",
   "else",
   "{",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ".",
   "style",
   ".",
   "top",
   "=",
   "top",
   "+",
   "'px'",
   ";",
   "}",
   "update",
   ".",
   "push",
   "(",
   "this",
   ".",
   "infiniteElements",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "}",
   "i",
   "++",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "cachePhase",
   "!=",
   "cachePhase",
   "&&",
   "(",
   "cachePhase",
   "===",
   "0",
   "||",
   "minorPhase",
   "-",
   "this",
   ".",
   "infiniteCacheBuffer",
   ">",
   "0",
   ")",
   ")",
   "{",
   "this",
   ".",
   "options",
   ".",
   "dataset",
   ".",
   "call",
   "(",
   "this",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "cachePhase",
   "*",
   "this",
   ".",
   "infiniteCacheBuffer",
   "-",
   "this",
   ".",
   "infiniteCacheBuffer",
   ",",
   "0",
   ")",
   ",",
   "this",
   ".",
   "options",
   ".",
   "cacheSize",
   ")",
   ";",
   "}",
   "this",
   ".",
   "cachePhase",
   "=",
   "cachePhase",
   ";",
   "this",
   ".",
   "updateContent",
   "(",
   "update",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-147",
  "nl_tokens": [
   "Returns",
   "the",
   "minimum",
   "item",
   "in",
   "the",
   "object",
   "."
  ],
  "pl_tokens": [
   "function",
   "<mask>",
   "(",
   "o",
   ",",
   "func",
   ")",
   "{",
   "if",
   "(",
   "!",
   "o",
   "||",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "if",
   "(",
   "libs",
   ".",
   "object",
   ".",
   "size",
   "(",
   "o",
   ")",
   "===",
   "0",
   ")",
   "return",
   ";",
   "if",
   "(",
   "!",
   "(",
   "func",
   "instanceof",
   "Function",
   ")",
   ")",
   "func",
   "=",
   "undefined",
   ";",
   "if",
   "(",
   "typeof",
   "o",
   "!==",
   "'object'",
   ")",
   "return",
   "o",
   ";",
   "var",
   "min",
   ",",
   "minValue",
   ";",
   "if",
   "(",
   "!",
   "func",
   ")",
   "{",
   "min",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "if",
   "(",
   "item",
   "<=",
   "min",
   ")",
   "min",
   "=",
   "item",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "min",
   "=",
   "libs",
   ".",
   "object",
   ".",
   "first",
   "(",
   "o",
   ")",
   ";",
   "minValue",
   "=",
   "func",
   ".",
   "call",
   "(",
   "min",
   ",",
   "min",
   ")",
   ";",
   "libs",
   ".",
   "object",
   ".",
   "each",
   "(",
   "o",
   ",",
   "1",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "var",
   "value",
   "=",
   "func",
   ".",
   "call",
   "(",
   "item",
   ",",
   "item",
   ")",
   ";",
   "if",
   "(",
   "value",
   "<=",
   "minValue",
   ")",
   "{",
   "min",
   "=",
   "item",
   ";",
   "minValue",
   "=",
   "value",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-148",
  "nl_tokens": [
   "/",
   "*",
   "@see",
   "http",
   ":",
   "//",
   "www",
   ".",
   "w3",
   ".",
   "org",
   "/",
   "TR",
   "/",
   "PNG",
   "-",
   "Chunks",
   ".",
   "html"
  ],
  "pl_tokens": [
   "function",
   "getIndexOfSmallestSum",
   "(",
   "arrays",
   ")",
   "{",
   "var",
   "i",
   "=",
   "0",
   ",",
   "len",
   "=",
   "arrays",
   ".",
   "length",
   ",",
   "sum",
   ",",
   "<mask>",
   ",",
   "ind",
   ";",
   "while",
   "(",
   "i",
   "<",
   "len",
   ")",
   "{",
   "sum",
   "=",
   "absSum",
   "(",
   "arrays",
   "[",
   "i",
   "]",
   ".",
   "slice",
   "(",
   "1",
   ")",
   ")",
   ";",
   "if",
   "(",
   "sum",
   "<",
   "min",
   "||",
   "!",
   "min",
   ")",
   "{",
   "min",
   "=",
   "sum",
   ";",
   "ind",
   "=",
   "i",
   ";",
   "}",
   "i",
   "++",
   ";",
   "}",
   "return",
   "ind",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-149",
  "nl_tokens": [
   "Magnet",
   "functions"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "this",
   ".",
   "_magnets",
   "=",
   "[",
   "]",
   ";",
   "var",
   "$link",
   "=",
   "this",
   ".",
   "$",
   "(",
   "'.link'",
   ")",
   ";",
   "var",
   "magnetElements",
   "=",
   "this",
   ".",
   "options",
   ".",
   "cellView",
   ".",
   "$",
   "(",
   "'[magnet=\"true\"]'",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "magnetFilter",
   ")",
   "{",
   "if",
   "(",
   "_",
   ".",
   "isFunction",
   "(",
   "this",
   ".",
   "options",
   ".",
   "magnetFilter",
   ")",
   ")",
   "{",
   "// We want function to be called with a magnet element as the first parameter. Not an index",
   "// as jQuery.filter would do it.",
   "magnetElements",
   "=",
   "_",
   ".",
   "filter",
   "(",
   "magnetElements",
   ",",
   "this",
   ".",
   "options",
   ".",
   "magnetFilter",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// Every other case runs jQuery.filter method",
   "magnetElements",
   "=",
   "magnetElements",
   ".",
   "filter",
   "(",
   "this",
   ".",
   "options",
   ".",
   "magnetFilter",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "$link",
   ".",
   "length",
   "&&",
   "magnetElements",
   ".",
   "length",
   ")",
   "{",
   "var",
   "linkWidth",
   "=",
   "$link",
   ".",
   "width",
   "(",
   ")",
   ";",
   "var",
   "linkHeight",
   "=",
   "$link",
   ".",
   "height",
   "(",
   ")",
   ";",
   "_",
   ".",
   "each",
   "(",
   "magnetElements",
   ",",
   "function",
   "(",
   "magnetElement",
   ")",
   "{",
   "var",
   "magnetClientRect",
   "=",
   "magnetElement",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ";",
   "var",
   "$haloElement",
   "=",
   "$link",
   ".",
   "clone",
   "(",
   ")",
   ".",
   "addClass",
   "(",
   "'halo-magnet'",
   ")",
   ".",
   "css",
   "(",
   "{",
   "width",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "magnetClientRect",
   ".",
   "width",
   ",",
   "linkWidth",
   ")",
   ",",
   "height",
   ":",
   "Math",
   ".",
   "min",
   "(",
   "magnetClientRect",
   ".",
   "height",
   ",",
   "linkHeight",
   ")",
   ",",
   "'background-size'",
   ":",
   "'contain'",
   "}",
   ")",
   ".",
   "data",
   "(",
   "'selector'",
   ",",
   "this",
   ".",
   "options",
   ".",
   "cellView",
   ".",
   "getSelector",
   "(",
   "magnetElement",
   ")",
   ")",
   ".",
   "appendTo",
   "(",
   "this",
   ".",
   "$el",
   ")",
   ";",
   "this",
   ".",
   "_magnets",
   ".",
   "push",
   "(",
   "{",
   "$halo",
   ":",
   "$haloElement",
   ",",
   "el",
   ":",
   "magnetElement",
   "}",
   ")",
   ";",
   "}",
   ",",
   "this",
   ")",
   ";",
   "}",
   "// disable linking & forking from the element itself if is it not a magnet",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "cellView",
   ".",
   "$el",
   ".",
   "attr",
   "(",
   "'magnet'",
   ")",
   "==",
   "'false'",
   ")",
   "{",
   "$link",
   ".",
   "hide",
   "(",
   ")",
   ";",
   "this",
   ".",
   "$",
   "(",
   "'.fork'",
   ")",
   ".",
   "hide",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-150",
  "nl_tokens": [
   "Returns",
   "a",
   "working",
   "plan",
   "for",
   "the",
   "current",
   "iteration",
   "of",
   "the",
   "event",
   "loop"
  ],
  "pl_tokens": [
   "function",
   "getTasks",
   "(",
   ")",
   "{",
   "const",
   "tasks",
   "=",
   "{",
   "}",
   ",",
   "tmp",
   "=",
   "{",
   "}",
   ",",
   "mods",
   "=",
   "{",
   "}",
   ",",
   "exec",
   "=",
   "Object",
   ".",
   "assign",
   "(",
   "{",
   "}",
   ",",
   "execStack",
   ")",
   ";",
   "let",
   "total",
   "=",
   "0",
   ",",
   "count",
   "=",
   "0",
   ";",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "exec",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "el",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "tmp",
   "[",
   "key",
   "]",
   "=",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "el",
   ")",
   ".",
   "map",
   "(",
   "(",
   "el",
   ",",
   "key",
   ")",
   "=>",
   "key",
   ")",
   ";",
   "mods",
   "[",
   "key",
   "]",
   "=",
   "0",
   ";",
   "count",
   "++",
   ";",
   "}",
   ",",
   "el",
   "=>",
   "el",
   ".",
   "length",
   ")",
   ";",
   "/* eslint-disable no-loop-func */",
   "const",
   "sort",
   "=",
   "(",
   "a",
   ",",
   "b",
   ")",
   "=>",
   "b",
   ".",
   "value",
   "-",
   "a",
   ".",
   "value",
   ";",
   "while",
   "(",
   "total",
   "<=",
   "_thread",
   ".",
   "MAX_PRIORITY",
   ")",
   "{",
   "const",
   "rands",
   "=",
   "[",
   "]",
   ";",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "exec",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "el",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "rands",
   ".",
   "push",
   "(",
   "{",
   "key",
   ",",
   "value",
   ":",
   "_thread",
   ".",
   "PRIORITY",
   "[",
   "key",
   "]",
   "}",
   ")",
   ";",
   "}",
   ",",
   "el",
   "=>",
   "el",
   ".",
   "length",
   ")",
   ";",
   "rands",
   ".",
   "sort",
   "(",
   "sort",
   ")",
   ";",
   "let",
   "pos",
   "=",
   "rands",
   ".",
   "length",
   "-",
   "1",
   ",",
   "<mask>",
   "=",
   "0",
   ";",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "rands",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "el",
   ",",
   "i",
   ")",
   "=>",
   "{",
   "const",
   "interval",
   "=",
   "intervals",
   "[",
   "pos",
   "]",
   ";",
   "if",
   "(",
   "interval",
   "[",
   "1",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "interval",
   "[",
   "1",
   "]",
   ";",
   "}",
   "rands",
   "[",
   "i",
   "]",
   ".",
   "value",
   "=",
   "interval",
   ";",
   "pos",
   "--",
   ";",
   "}",
   ")",
   ";",
   "const",
   "rand",
   "=",
   "(",
   "0",
   ",",
   "_math",
   ".",
   "getRandomInt",
   ")",
   "(",
   "0",
   ",",
   "max",
   ")",
   ";",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "rands",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "{",
   "key",
   ",",
   "value",
   "}",
   ")",
   "=>",
   "{",
   "const",
   "arr",
   "=",
   "tmp",
   "[",
   "key",
   "]",
   ";",
   "if",
   "(",
   "rand",
   ">=",
   "value",
   "[",
   "0",
   "]",
   "&&",
   "rand",
   "<=",
   "value",
   "[",
   "1",
   "]",
   ")",
   "{",
   "tasks",
   "[",
   "key",
   "]",
   "=",
   "tasks",
   "[",
   "key",
   "]",
   "||",
   "[",
   "]",
   ";",
   "let",
   "pos",
   "=",
   "lastPos",
   "[",
   "key",
   "]",
   ";",
   "if",
   "(",
   "arr",
   "[",
   "pos",
   "]",
   "==",
   "null",
   ")",
   "{",
   "lastPos",
   "[",
   "key",
   "]",
   "=",
   "pos",
   "=",
   "0",
   ";",
   "mods",
   "[",
   "key",
   "]",
   "=",
   "0",
   ";",
   "}",
   "const",
   "point",
   "=",
   "exec",
   "[",
   "key",
   "]",
   "[",
   "arr",
   "[",
   "pos",
   "]",
   "]",
   ";",
   "if",
   "(",
   "point",
   "&&",
   "!",
   "point",
   ".",
   "pause",
   ")",
   "{",
   "mods",
   "[",
   "key",
   "]",
   "++",
   ";",
   "tasks",
   "[",
   "key",
   "]",
   ".",
   "push",
   "(",
   "arr",
   "[",
   "pos",
   "]",
   ")",
   ";",
   "total",
   "+=",
   "_thread",
   ".",
   "PRIORITY",
   "[",
   "key",
   "]",
   ";",
   "}",
   "arr",
   ".",
   "splice",
   "(",
   "pos",
   ",",
   "1",
   ")",
   ";",
   "if",
   "(",
   "!",
   "arr",
   ".",
   "length",
   ")",
   "{",
   "delete",
   "exec",
   "[",
   "key",
   "]",
   ";",
   "count",
   "--",
   ";",
   "}",
   "return",
   "false",
   ";",
   "}",
   "}",
   ")",
   ";",
   "if",
   "(",
   "!",
   "count",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "/* eslint-enable no-loop-func */",
   "(",
   "0",
   ",",
   "_core2",
   ".",
   "default",
   ")",
   "(",
   "mods",
   ")",
   ".",
   "forEach",
   "(",
   "(",
   "el",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "lastPos",
   "[",
   "key",
   "]",
   "+=",
   "el",
   ";",
   "}",
   ")",
   ";",
   "return",
   "tasks",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-151",
  "nl_tokens": [
   "Returns",
   "the",
   "minimum",
   "value",
   "in",
   "the",
   "Array",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "array",
   ",",
   "comparisonFn",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "array",
   "[",
   "0",
   "]",
   ",",
   "i",
   ",",
   "ln",
   ",",
   "item",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "ln",
   "=",
   "array",
   ".",
   "length",
   ";",
   "i",
   "<",
   "ln",
   ";",
   "i",
   "++",
   ")",
   "{",
   "item",
   "=",
   "array",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "comparisonFn",
   ")",
   "{",
   "if",
   "(",
   "comparisonFn",
   "(",
   "min",
   ",",
   "item",
   ")",
   "===",
   "1",
   ")",
   "{",
   "min",
   "=",
   "item",
   ";",
   "}",
   "}",
   "else",
   "{",
   "if",
   "(",
   "item",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "item",
   ";",
   "}",
   "}",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-152",
  "nl_tokens": [
   "(",
   "protected",
   ")",
   "r",
   "=",
   "this",
   "op",
   "a",
   "(",
   "bitwise",
   ")"
  ],
  "pl_tokens": [
   "function",
   "bnpBitwiseTo",
   "(",
   "a",
   ",",
   "op",
   ",",
   "r",
   ")",
   "{",
   "var",
   "this_array",
   "=",
   "this",
   ".",
   "array",
   ";",
   "var",
   "a_array",
   "=",
   "a",
   ".",
   "array",
   ";",
   "var",
   "r_array",
   "=",
   "r",
   ".",
   "array",
   ";",
   "var",
   "i",
   ",",
   "f",
   ",",
   "m",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "t",
   ",",
   "this",
   ".",
   "t",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "m",
   ";",
   "++",
   "i",
   ")",
   "r_array",
   "[",
   "i",
   "]",
   "=",
   "op",
   "(",
   "this_array",
   "[",
   "i",
   "]",
   ",",
   "a_array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "a",
   ".",
   "t",
   "<",
   "this",
   ".",
   "t",
   ")",
   "{",
   "f",
   "=",
   "a",
   ".",
   "s",
   "&",
   "BI_DM",
   ";",
   "for",
   "(",
   "i",
   "=",
   "m",
   ";",
   "i",
   "<",
   "this",
   ".",
   "t",
   ";",
   "++",
   "i",
   ")",
   "r_array",
   "[",
   "i",
   "]",
   "=",
   "op",
   "(",
   "this_array",
   "[",
   "i",
   "]",
   ",",
   "f",
   ")",
   ";",
   "r",
   ".",
   "t",
   "=",
   "this",
   ".",
   "t",
   ";",
   "}",
   "else",
   "{",
   "f",
   "=",
   "this",
   ".",
   "s",
   "&",
   "BI_DM",
   ";",
   "for",
   "(",
   "i",
   "=",
   "m",
   ";",
   "i",
   "<",
   "a",
   ".",
   "t",
   ";",
   "++",
   "i",
   ")",
   "r_array",
   "[",
   "i",
   "]",
   "=",
   "op",
   "(",
   "f",
   ",",
   "a_array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "r",
   ".",
   "t",
   "=",
   "a",
   ".",
   "t",
   ";",
   "}",
   "r",
   ".",
   "s",
   "=",
   "op",
   "(",
   "this",
   ".",
   "s",
   ",",
   "a",
   ".",
   "s",
   ")",
   ";",
   "r",
   ".",
   "clamp",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-153",
  "nl_tokens": [
   "Computes",
   "the",
   "extremes",
   "of",
   "a",
   "simplex",
   "which",
   "will",
   "be",
   "the",
   "initial",
   "hull"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "new",
   "THREE",
   ".",
   "Vector3",
   "(",
   ")",
   ";",
   "var",
   "max",
   "=",
   "new",
   "THREE",
   ".",
   "Vector3",
   "(",
   ")",
   ";",
   "var",
   "minVertices",
   "=",
   "[",
   "]",
   ";",
   "var",
   "maxVertices",
   "=",
   "[",
   "]",
   ";",
   "var",
   "i",
   ",",
   "l",
   ",",
   "j",
   ";",
   "// initially assume that the first vertex is the min/max",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "3",
   ";",
   "i",
   "++",
   ")",
   "{",
   "minVertices",
   "[",
   "i",
   "]",
   "=",
   "maxVertices",
   "[",
   "i",
   "]",
   "=",
   "this",
   ".",
   "vertices",
   "[",
   "0",
   "]",
   ";",
   "}",
   "min",
   ".",
   "copy",
   "(",
   "this",
   ".",
   "vertices",
   "[",
   "0",
   "]",
   ".",
   "point",
   ")",
   ";",
   "max",
   ".",
   "copy",
   "(",
   "this",
   ".",
   "vertices",
   "[",
   "0",
   "]",
   ".",
   "point",
   ")",
   ";",
   "// compute the min/max vertex on all six directions",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "l",
   "=",
   "this",
   ".",
   "vertices",
   ".",
   "length",
   ";",
   "i",
   "<",
   "l",
   ";",
   "i",
   "++",
   ")",
   "{",
   "var",
   "vertex",
   "=",
   "this",
   ".",
   "vertices",
   "[",
   "i",
   "]",
   ";",
   "var",
   "point",
   "=",
   "vertex",
   ".",
   "point",
   ";",
   "// update the min coordinates",
   "for",
   "(",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "3",
   ";",
   "j",
   "++",
   ")",
   "{",
   "if",
   "(",
   "point",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   "<",
   "min",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   ")",
   "{",
   "min",
   ".",
   "setComponent",
   "(",
   "j",
   ",",
   "point",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   ")",
   ";",
   "minVertices",
   "[",
   "j",
   "]",
   "=",
   "vertex",
   ";",
   "}",
   "}",
   "// update the max coordinates",
   "for",
   "(",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "3",
   ";",
   "j",
   "++",
   ")",
   "{",
   "if",
   "(",
   "point",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   ">",
   "max",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   ")",
   "{",
   "max",
   ".",
   "setComponent",
   "(",
   "j",
   ",",
   "point",
   ".",
   "getComponent",
   "(",
   "j",
   ")",
   ")",
   ";",
   "maxVertices",
   "[",
   "j",
   "]",
   "=",
   "vertex",
   ";",
   "}",
   "}",
   "}",
   "// use min/max vectors to compute an optimal epsilon",
   "this",
   ".",
   "tolerance",
   "=",
   "3",
   "*",
   "Number",
   ".",
   "EPSILON",
   "*",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "min",
   ".",
   "x",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "max",
   ".",
   "x",
   ")",
   ")",
   "+",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "min",
   ".",
   "y",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "max",
   ".",
   "y",
   ")",
   ")",
   "+",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "min",
   ".",
   "z",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "max",
   ".",
   "z",
   ")",
   ")",
   ")",
   ";",
   "return",
   "{",
   "min",
   ":",
   "minVertices",
   ",",
   "max",
   ":",
   "maxVertices",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-154",
  "nl_tokens": [
   "INCREMENTAL",
   "MIN",
   "//",
   "FUNCTION",
   ":",
   "incrmin",
   "()",
   "Returns",
   "a",
   "method",
   "to",
   "compute",
   "the",
   "minimum",
   "value",
   "incrementally",
   "."
  ],
  "pl_tokens": [
   "function",
   "incrmin",
   "(",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "null",
   ";",
   "/**\n\t* FUNCTION: incrmin( [value] )\n\t*\tIf a `value` is provided, updates and returns the updated min. If no `value` is provided, returns the current min.\n\t*\n\t* @param {Number} [value] - value used to update the min\n\t* @returns {Number|Null} min value\n\t*/",
   "return",
   "function",
   "incrmin",
   "(",
   "x",
   ")",
   "{",
   "if",
   "(",
   "!",
   "arguments",
   ".",
   "length",
   ")",
   "{",
   "return",
   "min",
   ";",
   "}",
   "if",
   "(",
   "x",
   "<",
   "min",
   "||",
   "min",
   "===",
   "null",
   ")",
   "{",
   "min",
   "=",
   "x",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-155",
  "nl_tokens": [
   "Compare",
   "two",
   "OIDs",
   "returning",
   "-",
   "1",
   "0",
   "or",
   "+",
   "1",
   "depending",
   "on",
   "the",
   "relation",
   "between",
   "oidA",
   "and",
   "oidB",
   "."
  ],
  "pl_tokens": [
   "function",
   "compareOids",
   "(",
   "oidA",
   ",",
   "oidB",
   ")",
   "{",
   "var",
   "mlen",
   ",",
   "i",
   ";",
   "// The undefined OID, if there is any, is deemed lesser.",
   "if",
   "(",
   "typeof",
   "oidA",
   "===",
   "'undefined'",
   "&&",
   "typeof",
   "oidB",
   "!==",
   "'undefined'",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "else",
   "if",
   "(",
   "typeof",
   "oidA",
   "!==",
   "'undefined'",
   "&&",
   "typeof",
   "oidB",
   "===",
   "'undefined'",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "// Check each number part of the OIDs individually, and if there is any",
   "// position where one OID is larger than the other, return accordingly.",
   "// This will only check up to the minimum length of both OIDs.",
   "mlen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "oidA",
   ".",
   "length",
   ",",
   "oidB",
   ".",
   "length",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "mlen",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "oidA",
   "[",
   "i",
   "]",
   ">",
   "oidB",
   "[",
   "i",
   "]",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "else",
   "if",
   "(",
   "oidB",
   "[",
   "i",
   "]",
   ">",
   "oidA",
   "[",
   "i",
   "]",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "}",
   "// If there is one OID that is longer than the other after the above comparison,",
   "// consider the shorter OID to be lesser.",
   "if",
   "(",
   "oidA",
   ".",
   "length",
   ">",
   "oidB",
   ".",
   "length",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "else",
   "if",
   "(",
   "oidB",
   ".",
   "length",
   ">",
   "oidA",
   ".",
   "length",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "else",
   "{",
   "// The OIDs are obviously equal.",
   "return",
   "0",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-156",
  "nl_tokens": [
   "Returns",
   "a",
   "number",
   "whose",
   "value",
   "is",
   "limited",
   "to",
   "the",
   "given",
   "range",
   "."
  ],
  "pl_tokens": [
   "function",
   "clamp",
   "(",
   ")",
   "{",
   "var",
   "input",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "0",
   "&&",
   "arguments",
   "[",
   "0",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "0",
   "]",
   ":",
   "0",
   ";",
   "var",
   "<mask>",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "1",
   "&&",
   "arguments",
   "[",
   "1",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "1",
   "]",
   ":",
   "0",
   ";",
   "var",
   "max",
   "=",
   "arguments",
   ".",
   "length",
   ">",
   "2",
   "&&",
   "arguments",
   "[",
   "2",
   "]",
   "!==",
   "undefined",
   "?",
   "arguments",
   "[",
   "2",
   "]",
   ":",
   "255",
   ";",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "input",
   ",",
   "min",
   ")",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-157",
  "nl_tokens": [
   "Rule",
   "for",
   "validating",
   "minimum",
   "and",
   "maximum",
   "allowed",
   "values",
   "."
  ],
  "pl_tokens": [
   "function",
   "range",
   "(",
   "rule",
   ",",
   "value",
   ",",
   "source",
   ",",
   "errors",
   ",",
   "options",
   ")",
   "{",
   "const",
   "len",
   "=",
   "typeof",
   "rule",
   ".",
   "len",
   "===",
   "'number'",
   ";",
   "const",
   "<mask>",
   "=",
   "typeof",
   "rule",
   ".",
   "min",
   "===",
   "'number'",
   ";",
   "const",
   "max",
   "=",
   "typeof",
   "rule",
   ".",
   "max",
   "===",
   "'number'",
   ";",
   "// \u6b63\u5219\u5339\u914d\u7801\u70b9\u8303\u56f4\u4eceU+010000\u4e00\u76f4\u5230U+10FFFF\u7684\u6587\u5b57\uff08\u8865\u5145\u5e73\u9762Supplementary Plane\uff09",
   "const",
   "spRegexp",
   "=",
   "/",
   "[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]",
   "/",
   "g",
   ";",
   "let",
   "val",
   "=",
   "value",
   ";",
   "let",
   "key",
   "=",
   "null",
   ";",
   "const",
   "num",
   "=",
   "typeof",
   "(",
   "value",
   ")",
   "===",
   "'number'",
   ";",
   "const",
   "str",
   "=",
   "typeof",
   "(",
   "value",
   ")",
   "===",
   "'string'",
   ";",
   "const",
   "arr",
   "=",
   "Array",
   ".",
   "isArray",
   "(",
   "value",
   ")",
   ";",
   "if",
   "(",
   "num",
   ")",
   "{",
   "key",
   "=",
   "'number'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "str",
   ")",
   "{",
   "key",
   "=",
   "'string'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "arr",
   ")",
   "{",
   "key",
   "=",
   "'array'",
   ";",
   "}",
   "// if the value is not of a supported type for range validation",
   "// the validation rule rule should use the",
   "// type property to also test for a particular type",
   "if",
   "(",
   "!",
   "key",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "if",
   "(",
   "arr",
   ")",
   "{",
   "val",
   "=",
   "value",
   ".",
   "length",
   ";",
   "}",
   "if",
   "(",
   "str",
   ")",
   "{",
   "// \u5904\u7406\u7801\u70b9\u5927\u4e8eU+010000\u7684\u6587\u5b57length\u5c5e\u6027\u4e0d\u51c6\u786e\u7684bug\uff0c\u5982\"\ud842\udfb7\ud842\udfb7\ud842\udfb7\".lenght !== 3",
   "val",
   "=",
   "value",
   ".",
   "replace",
   "(",
   "spRegexp",
   ",",
   "'_'",
   ")",
   ".",
   "length",
   ";",
   "}",
   "if",
   "(",
   "len",
   ")",
   "{",
   "if",
   "(",
   "val",
   "!==",
   "rule",
   ".",
   "len",
   ")",
   "{",
   "errors",
   ".",
   "push",
   "(",
   "util",
   ".",
   "format",
   "(",
   "options",
   ".",
   "messages",
   "[",
   "key",
   "]",
   ".",
   "len",
   ",",
   "rule",
   ".",
   "fullField",
   ",",
   "rule",
   ".",
   "len",
   ")",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "min",
   "&&",
   "!",
   "max",
   "&&",
   "val",
   "<",
   "rule",
   ".",
   "min",
   ")",
   "{",
   "errors",
   ".",
   "push",
   "(",
   "util",
   ".",
   "format",
   "(",
   "options",
   ".",
   "messages",
   "[",
   "key",
   "]",
   ".",
   "min",
   ",",
   "rule",
   ".",
   "fullField",
   ",",
   "rule",
   ".",
   "min",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "max",
   "&&",
   "!",
   "min",
   "&&",
   "val",
   ">",
   "rule",
   ".",
   "max",
   ")",
   "{",
   "errors",
   ".",
   "push",
   "(",
   "util",
   ".",
   "format",
   "(",
   "options",
   ".",
   "messages",
   "[",
   "key",
   "]",
   ".",
   "max",
   ",",
   "rule",
   ".",
   "fullField",
   ",",
   "rule",
   ".",
   "max",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "min",
   "&&",
   "max",
   "&&",
   "(",
   "val",
   "<",
   "rule",
   ".",
   "min",
   "||",
   "val",
   ">",
   "rule",
   ".",
   "max",
   ")",
   ")",
   "{",
   "errors",
   ".",
   "push",
   "(",
   "util",
   ".",
   "format",
   "(",
   "options",
   ".",
   "messages",
   "[",
   "key",
   "]",
   ".",
   "range",
   ",",
   "rule",
   ".",
   "fullField",
   ",",
   "rule",
   ".",
   "min",
   ",",
   "rule",
   ".",
   "max",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-158",
  "nl_tokens": [
   "Constrains",
   "a",
   "number",
   "within",
   "a",
   "set",
   "of",
   "bounds",
   "(",
   "range",
   "of",
   "two",
   "numbers",
   ")",
   "or",
   "returns",
   "the",
   "pointer",
   "if",
   "it",
   "is",
   "within",
   "bounds",
   ".",
   "E",
   ".",
   "g",
   ".",
   "If",
   "pointer",
   "is",
   "less",
   "than",
   "min",
   "then",
   "returns",
   "min",
   ".",
   "If",
   "pointer",
   "is",
   "greater",
   "than",
   "max",
   "returns",
   "max",
   ".",
   "If",
   "pointer",
   "is",
   "within",
   "bounds",
   "returns",
   "pointer",
   "."
  ],
  "pl_tokens": [
   "function",
   "constrainPointer",
   "(",
   "pointer",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "return",
   "pointer",
   "<",
   "min",
   "?",
   "min",
   ":",
   "(",
   "(",
   "pointer",
   ">",
   "max",
   ")",
   "?",
   "max",
   ":",
   "pointer",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-159",
  "nl_tokens": [
   "\u83b7\u53d6\u8f93\u5165\u6846\u503c"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "realValue",
   "=",
   "this",
   ".",
   "value",
   ";",
   "realValue",
   "=",
   "isNaN",
   "(",
   "realValue",
   ")",
   "?",
   "0",
   ":",
   "realValue",
   ";",
   "realValue",
   "=",
   "realValue",
   "<",
   "options",
   ".",
   "<mask>",
   "?",
   "options",
   ".",
   "min",
   ":",
   "realValue",
   ";",
   "realValue",
   "=",
   "realValue",
   ">",
   "options",
   ".",
   "max",
   "?",
   "options",
   ".",
   "max",
   ":",
   "realValue",
   ";",
   "this",
   ".",
   "value",
   "=",
   "realValue",
   ";",
   "var",
   "inputScale",
   "=",
   "(",
   "realValue",
   "-",
   "options",
   ".",
   "min",
   ")",
   "/",
   "(",
   "options",
   ".",
   "max",
   "-",
   "options",
   ".",
   "min",
   ")",
   "*",
   "100",
   "/",
   "step",
   ";",
   "change",
   "(",
   "inputScale",
   ",",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-160",
  "nl_tokens": [
   "Fetch",
   "alignments",
   "from",
   "the",
   "remote",
   "source",
   "at",
   "the",
   "locations",
   "specified",
   "by",
   "Chunks",
   ".",
   "This",
   "can",
   "potentially",
   "result",
   "in",
   "many",
   "network",
   "requests",
   ".",
   "The",
   "returned",
   "promise",
   "is",
   "fulfilled",
   "once",
   "it",
   "can",
   "be",
   "proved",
   "that",
   "no",
   "more",
   "alignments",
   "need",
   "to",
   "be",
   "fetched",
   "."
  ],
  "pl_tokens": [
   "function",
   "fetchAlignments",
   "(",
   "remoteFile",
   ":",
   "RemoteFile",
   ",",
   "refName",
   ":",
   "string",
   ",",
   "idxRange",
   ":",
   "ContigInterval",
   "<",
   "number",
   ">",
   ",",
   "contained",
   ":",
   "boolean",
   ",",
   "chunks",
   ":",
   "Chunk",
   "[",
   "]",
   ")",
   ":",
   "Q",
   ".",
   "Promise",
   "<",
   "SamRead",
   "[",
   "]",
   ">",
   "{",
   "var",
   "numRequests",
   "=",
   "0",
   ",",
   "alignments",
   "=",
   "[",
   "]",
   ",",
   "deferred",
   "=",
   "Q",
   ".",
   "defer",
   "(",
   ")",
   ";",
   "function",
   "fetch",
   "(",
   "chunks",
   ":",
   "Chunk",
   "[",
   "]",
   ")",
   "{",
   "if",
   "(",
   "chunks",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "deferred",
   ".",
   "resolve",
   "(",
   "alignments",
   ")",
   ";",
   "return",
   ";",
   "}",
   "// Never fetch more than 128k at a time -- this reduces contention on the",
   "// main thread and can avoid sending unnecessary bytes over the network.",
   "var",
   "chunk",
   "=",
   "chunks",
   "[",
   "0",
   "]",
   ",",
   "chunk_beg",
   "=",
   "chunk",
   ".",
   "chunk_beg",
   ".",
   "coffset",
   ",",
   "chunk_end",
   "=",
   "chunk",
   ".",
   "chunk_end",
   ".",
   "coffset",
   ";",
   "var",
   "bytesToFetch",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "kMaxFetch",
   ",",
   "(",
   "chunk_end",
   "+",
   "65536",
   ")",
   "-",
   "chunk_beg",
   ")",
   ";",
   "remoteFile",
   ".",
   "getBytes",
   "(",
   "chunk_beg",
   ",",
   "bytesToFetch",
   ")",
   ".",
   "then",
   "(",
   "buffer",
   "=>",
   "{",
   "numRequests",
   "++",
   ";",
   "deferred",
   ".",
   "notify",
   "(",
   "{",
   "numRequests",
   "}",
   ")",
   ";",
   "var",
   "cacheKey",
   "=",
   "{",
   "filename",
   ":",
   "remoteFile",
   ".",
   "url",
   ",",
   "initialOffset",
   ":",
   "chunk_beg",
   "}",
   ";",
   "var",
   "blocks",
   "=",
   "utils",
   ".",
   "inflateConcatenatedGzip",
   "(",
   "buffer",
   ",",
   "chunk_end",
   "-",
   "chunk_beg",
   ",",
   "cacheKey",
   ")",
   ";",
   "// If the chunk hasn't been exhausted, resume it at an appropriate place.",
   "// The last block needs to be re-read, since it may not have been exhausted.",
   "var",
   "lastBlock",
   "=",
   "blocks",
   "[",
   "blocks",
   ".",
   "length",
   "-",
   "1",
   "]",
   ",",
   "lastByte",
   "=",
   "chunk_beg",
   "+",
   "lastBlock",
   ".",
   "offset",
   "-",
   "1",
   ",",
   "newChunk",
   "=",
   "null",
   ";",
   "if",
   "(",
   "blocks",
   ".",
   "length",
   ">",
   "1",
   "&&",
   "lastByte",
   "<",
   "chunk_end",
   ")",
   "{",
   "newChunk",
   "=",
   "{",
   "chunk_beg",
   ":",
   "new",
   "VirtualOffset",
   "(",
   "lastByte",
   "+",
   "1",
   ",",
   "0",
   ")",
   ",",
   "chunk_end",
   ":",
   "chunk",
   ".",
   "chunk_end",
   "}",
   ";",
   "}",
   "var",
   "buffers",
   "=",
   "blocks",
   ".",
   "map",
   "(",
   "x",
   "=>",
   "x",
   ".",
   "buffer",
   ")",
   ";",
   "buffers",
   "[",
   "0",
   "]",
   "=",
   "buffers",
   "[",
   "0",
   "]",
   ".",
   "slice",
   "(",
   "chunk",
   ".",
   "chunk_beg",
   ".",
   "uoffset",
   ")",
   ";",
   "var",
   "decomp",
   "=",
   "utils",
   ".",
   "concatArrayBuffers",
   "(",
   "buffers",
   ")",
   ";",
   "if",
   "(",
   "decomp",
   ".",
   "byteLength",
   ">",
   "0",
   ")",
   "{",
   "var",
   "{",
   "shouldAbort",
   ",",
   "nextOffset",
   "}",
   "=",
   "readAlignmentsToEnd",
   "(",
   "decomp",
   ",",
   "refName",
   ",",
   "idxRange",
   ",",
   "contained",
   ",",
   "chunk",
   ".",
   "chunk_beg",
   ",",
   "blocks",
   ",",
   "alignments",
   ")",
   ";",
   "if",
   "(",
   "shouldAbort",
   ")",
   "{",
   "deferred",
   ".",
   "resolve",
   "(",
   "alignments",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "newChunk",
   ")",
   "{",
   "newChunk",
   ".",
   "chunk_beg",
   "=",
   "nextOffset",
   ";",
   "}",
   "}",
   "else",
   "{",
   "newChunk",
   "=",
   "null",
   ";",
   "// This is most likely EOF",
   "}",
   "fetch",
   "(",
   "(",
   "newChunk",
   "!==",
   "null",
   "?",
   "[",
   "newChunk",
   "]",
   ":",
   "[",
   "]",
   ")",
   ".",
   "concat",
   "(",
   "_",
   ".",
   "rest",
   "(",
   "chunks",
   ")",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "fetch",
   "(",
   "chunks",
   ")",
   ";",
   "return",
   "deferred",
   ".",
   "promise",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-161",
  "nl_tokens": [
   "Get",
   "the",
   "number",
   "of",
   "decimal",
   "places"
  ],
  "pl_tokens": [
   "function",
   "getDecimalPlaces",
   "(",
   "value",
   ")",
   "{",
   "var",
   "match",
   "=",
   "\"\"",
   ".",
   "concat",
   "(",
   "value",
   ")",
   ".",
   "match",
   "(",
   "/",
   "(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$",
   "/",
   ")",
   ";",
   "if",
   "(",
   "!",
   "match",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "// Number of digits right of decimal point.",
   "(",
   "match",
   "[",
   "1",
   "]",
   "?",
   "match",
   "[",
   "1",
   "]",
   ".",
   "length",
   ":",
   "0",
   ")",
   "-",
   "(",
   "// Adjust for scientific notation.",
   "match",
   "[",
   "2",
   "]",
   "?",
   "+",
   "match",
   "[",
   "2",
   "]",
   ":",
   "0",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-162",
  "nl_tokens": [
   "Date",
   "comparison",
   "helpers"
  ],
  "pl_tokens": [
   "function",
   "compareDate",
   "(",
   "d",
   ",",
   "find",
   ",",
   "buffer",
   ",",
   "forceUTC",
   ")",
   "{",
   "var",
   "p",
   ",",
   "t",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "minOffset",
   ",",
   "maxOffset",
   ",",
   "override",
   ",",
   "capitalized",
   ",",
   "accuracy",
   "=",
   "0",
   ",",
   "loBuffer",
   "=",
   "0",
   ",",
   "hiBuffer",
   "=",
   "0",
   ";",
   "p",
   "=",
   "getExtendedDate",
   "(",
   "find",
   ",",
   "null",
   ",",
   "null",
   ",",
   "forceUTC",
   ")",
   ";",
   "if",
   "(",
   "buffer",
   ">",
   "0",
   ")",
   "{",
   "loBuffer",
   "=",
   "hiBuffer",
   "=",
   "buffer",
   ";",
   "override",
   "=",
   "true",
   ";",
   "}",
   "if",
   "(",
   "!",
   "p",
   ".",
   "date",
   ".",
   "isValid",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "p",
   ".",
   "set",
   "&&",
   "p",
   ".",
   "set",
   ".",
   "specificity",
   ")",
   "{",
   "DateUnits",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "u",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "u",
   ".",
   "unit",
   "===",
   "p",
   ".",
   "set",
   ".",
   "specificity",
   ")",
   "{",
   "accuracy",
   "=",
   "u",
   ".",
   "multiplier",
   "(",
   "p",
   ".",
   "date",
   ",",
   "d",
   "-",
   "p",
   ".",
   "date",
   ")",
   "-",
   "1",
   ";",
   "}",
   "}",
   ")",
   ";",
   "capitalized",
   "=",
   "simpleCapitalize",
   "(",
   "p",
   ".",
   "set",
   ".",
   "specificity",
   ")",
   ";",
   "if",
   "(",
   "p",
   ".",
   "set",
   "[",
   "'edge'",
   "]",
   "||",
   "p",
   ".",
   "set",
   "[",
   "'shift'",
   "]",
   ")",
   "{",
   "p",
   ".",
   "date",
   "[",
   "'beginningOf'",
   "+",
   "capitalized",
   "]",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "p",
   ".",
   "set",
   ".",
   "specificity",
   "===",
   "'month'",
   ")",
   "{",
   "max",
   "=",
   "p",
   ".",
   "date",
   ".",
   "clone",
   "(",
   ")",
   "[",
   "'endOf'",
   "+",
   "capitalized",
   "]",
   "(",
   ")",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "override",
   "&&",
   "p",
   ".",
   "set",
   "[",
   "'sign'",
   "]",
   "&&",
   "p",
   ".",
   "set",
   ".",
   "specificity",
   "!=",
   "'millisecond'",
   ")",
   "{",
   "// If the time is relative, there can occasionally be an disparity between the relative date",
   "// and \"now\", which it is being compared to, so set an extra buffer to account for this.",
   "loBuffer",
   "=",
   "50",
   ";",
   "hiBuffer",
   "=",
   "-",
   "50",
   ";",
   "}",
   "}",
   "t",
   "=",
   "d",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "min",
   "=",
   "p",
   ".",
   "date",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "max",
   "=",
   "max",
   "||",
   "(",
   "min",
   "+",
   "accuracy",
   ")",
   ";",
   "max",
   "=",
   "compensateForTimezoneTraversal",
   "(",
   "d",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "return",
   "t",
   ">=",
   "(",
   "min",
   "-",
   "loBuffer",
   ")",
   "&&",
   "t",
   "<=",
   "(",
   "max",
   "+",
   "hiBuffer",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-163",
  "nl_tokens": [
   "Generate",
   "a",
   "random",
   "number",
   "in",
   "a",
   "given",
   "range",
   "and",
   "round",
   "to",
   "a",
   "given",
   "value"
  ],
  "pl_tokens": [
   "function",
   "_getRandomDelayBetween",
   "(",
   "<mask>",
   ",",
   "max",
   ",",
   "roundTo",
   ")",
   "{",
   "return",
   "Number",
   "(",
   "Math",
   ".",
   "random",
   "(",
   ")",
   "*",
   "(",
   "max",
   "-",
   "min",
   ")",
   "+",
   "min",
   ")",
   ".",
   "toFixed",
   "(",
   "roundTo",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-164",
  "nl_tokens": [
   "Encodes",
   "the",
   "array",
   "of",
   "{"
  ],
  "pl_tokens": [
   "function",
   "(",
   "filters",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "[",
   "]",
   ",",
   "length",
   "=",
   "filters",
   ".",
   "length",
   ",",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "min",
   "[",
   "i",
   "]",
   "=",
   "{",
   "property",
   ":",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "getProperty",
   "(",
   ")",
   ",",
   "value",
   ":",
   "filters",
   "[",
   "i",
   "]",
   ".",
   "getValue",
   "(",
   ")",
   "}",
   ";",
   "}",
   "return",
   "this",
   ".",
   "applyEncoding",
   "(",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-165",
  "nl_tokens": [
   "Utility",
   "method",
   "to",
   "get",
   "the",
   "Individual",
   "Values",
   "from",
   "Pok\u00e9mon"
  ],
  "pl_tokens": [
   "function",
   "(",
   "pokemon",
   ",",
   "decimals",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "decimals",
   "===",
   "'undefined'",
   ")",
   "decimals",
   "=",
   "-",
   "1",
   ";",
   "decimals",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "decimals",
   ",",
   "20",
   ")",
   ";",
   "var",
   "att",
   "=",
   "pokemon",
   ".",
   "individual_attack",
   ",",
   "def",
   "=",
   "pokemon",
   ".",
   "individual_defense",
   ",",
   "stam",
   "=",
   "pokemon",
   ".",
   "individual_stamina",
   ";",
   "var",
   "unroundedPercentage",
   "=",
   "(",
   "att",
   "+",
   "def",
   "+",
   "stam",
   ")",
   "/",
   "45",
   "*",
   "100",
   ";",
   "var",
   "percent",
   "=",
   "decimals",
   "<",
   "0",
   "?",
   "unroundedPercentage",
   ":",
   "+",
   "unroundedPercentage",
   ".",
   "toFixed",
   "(",
   "decimals",
   ")",
   ";",
   "return",
   "{",
   "att",
   ":",
   "att",
   ",",
   "def",
   ":",
   "def",
   ",",
   "stam",
   ":",
   "stam",
   ",",
   "percent",
   ":",
   "percent",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-166",
  "nl_tokens": [
   "This",
   "function",
   "is",
   "made",
   "by",
   "the",
   "following",
   "requirements",
   ":",
   "x",
   ">",
   "5",
   "y",
   "=",
   "1",
   "f",
   "(",
   "x",
   ")",
   "=",
   "a",
   "*",
   "sqrt",
   "(",
   "x",
   ")",
   "+",
   "b",
   "*",
   "x^2",
   "+",
   "c",
   "f",
   "(",
   "0",
   ")",
   "=",
   "0",
   ".",
   "2",
   "f",
   "(",
   "5",
   ")",
   "=",
   "1",
   "f",
   "(",
   "5",
   ")",
   "=",
   "0"
  ],
  "pl_tokens": [
   "function",
   "linebreakScore",
   "(",
   "x",
   ")",
   "{",
   "if",
   "(",
   "x",
   ">",
   "5",
   ")",
   "return",
   "1",
   ";",
   "else",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "0.477",
   "*",
   "Math",
   ".",
   "sqrt",
   "(",
   "x",
   ")",
   "-",
   "0.0106",
   "*",
   "Math",
   ".",
   "pow",
   "(",
   "x",
   ",",
   "2",
   ")",
   "+",
   "0.2",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-167",
  "nl_tokens": [
   "Resizer",
   "()",
   "resizes",
   "items",
   "based",
   "on",
   "the",
   "object",
   "width",
   "divided",
   "by",
   "the",
   "compressor",
   "*",
   "10"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "$this",
   ".",
   "css",
   "(",
   "'font-size'",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "$this",
   ".",
   "width",
   "(",
   ")",
   "/",
   "(",
   "compressor",
   "*",
   "10",
   ")",
   ",",
   "parseFloat",
   "(",
   "settings",
   ".",
   "maxFontSize",
   ")",
   ")",
   ",",
   "parseFloat",
   "(",
   "settings",
   ".",
   "minFontSize",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-168",
  "nl_tokens": [
   "Convert",
   "a",
   "string",
   "value",
   "to",
   "a",
   "printable",
   "string",
   "representation",
   "."
  ],
  "pl_tokens": [
   "function",
   "formatString",
   "(",
   "value",
   ",",
   "options",
   ")",
   "{",
   "var",
   "opts",
   "=",
   "options",
   "||",
   "{",
   "}",
   ";",
   "var",
   "result",
   "=",
   "value",
   ".",
   "replace",
   "(",
   "/",
   "[\\0-\\37]",
   "/",
   "g",
   ",",
   "function",
   "(",
   "ch",
   ")",
   "{",
   "switch",
   "(",
   "ch",
   ")",
   "{",
   "case",
   "'\\n'",
   ":",
   "return",
   "'\\\\n'",
   ";",
   "case",
   "'\\r'",
   ":",
   "return",
   "'\\\\r'",
   ";",
   "case",
   "'\\t'",
   ":",
   "return",
   "'\\\\t'",
   ";",
   "case",
   "'\\b'",
   ":",
   "return",
   "'\\\\b'",
   ";",
   "case",
   "'\\v'",
   ":",
   "return",
   "'\\\\v'",
   ";",
   "case",
   "'\\f'",
   ":",
   "return",
   "'\\\\f'",
   ";",
   "default",
   ":",
   "return",
   "'\\\\'",
   "+",
   "ch",
   ".",
   "charCodeAt",
   "(",
   "0",
   ")",
   ".",
   "toString",
   "(",
   "8",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "if",
   "(",
   "opts",
   ".",
   "clip",
   "&&",
   "result",
   ".",
   "length",
   ">",
   "opts",
   ".",
   "clip",
   ")",
   "{",
   "result",
   "=",
   "result",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "opts",
   ".",
   "clip",
   "-",
   "3",
   ")",
   ")",
   "+",
   "'...'",
   ";",
   "}",
   "return",
   "'\"'",
   "+",
   "result",
   "+",
   "'\"'",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-169",
  "nl_tokens": [
   "Encodes",
   "the",
   "array",
   "of",
   "{"
  ],
  "pl_tokens": [
   "function",
   "(",
   "sorters",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "[",
   "]",
   ",",
   "length",
   "=",
   "sorters",
   ".",
   "length",
   ",",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "min",
   "[",
   "i",
   "]",
   "=",
   "{",
   "property",
   ":",
   "sorters",
   "[",
   "i",
   "]",
   ".",
   "getProperty",
   "(",
   ")",
   ",",
   "direction",
   ":",
   "sorters",
   "[",
   "i",
   "]",
   ".",
   "getDirection",
   "(",
   ")",
   "}",
   ";",
   "}",
   "return",
   "this",
   ".",
   "applyEncoding",
   "(",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-170",
  "nl_tokens": [
   "Renders",
   "panorama",
   "view",
   "."
  ],
  "pl_tokens": [
   "function",
   "render",
   "(",
   ")",
   "{",
   "var",
   "tmpyaw",
   ";",
   "if",
   "(",
   "loaded",
   ")",
   "{",
   "// Keep a tmp value of yaw for autoRotate comparison later",
   "tmpyaw",
   "=",
   "config",
   ".",
   "yaw",
   ";",
   "// Optionally avoid showing background (empty space) on left or right by adapting min/max yaw",
   "var",
   "hoffcut",
   "=",
   "0",
   ",",
   "voffcut",
   "=",
   "0",
   ";",
   "if",
   "(",
   "config",
   ".",
   "avoidShowingBackground",
   ")",
   "{",
   "var",
   "canvas",
   "=",
   "renderer",
   ".",
   "getCanvas",
   "(",
   ")",
   ",",
   "hfov2",
   "=",
   "config",
   ".",
   "hfov",
   "/",
   "2",
   ",",
   "vfov2",
   "=",
   "Math",
   ".",
   "atan2",
   "(",
   "Math",
   ".",
   "tan",
   "(",
   "hfov2",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   ",",
   "(",
   "canvas",
   ".",
   "width",
   "/",
   "canvas",
   ".",
   "height",
   ")",
   ")",
   "*",
   "180",
   "/",
   "Math",
   ".",
   "PI",
   ",",
   "transposed",
   "=",
   "config",
   ".",
   "vaov",
   ">",
   "config",
   ".",
   "haov",
   ";",
   "if",
   "(",
   "transposed",
   ")",
   "{",
   "voffcut",
   "=",
   "vfov2",
   "*",
   "(",
   "1",
   "-",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "cos",
   "(",
   "(",
   "config",
   ".",
   "pitch",
   "-",
   "hfov2",
   ")",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   ",",
   "Math",
   ".",
   "cos",
   "(",
   "(",
   "config",
   ".",
   "pitch",
   "+",
   "hfov2",
   ")",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "hoffcut",
   "=",
   "hfov2",
   "*",
   "(",
   "1",
   "-",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "cos",
   "(",
   "(",
   "config",
   ".",
   "pitch",
   "-",
   "vfov2",
   ")",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   ",",
   "Math",
   ".",
   "cos",
   "(",
   "(",
   "config",
   ".",
   "pitch",
   "+",
   "vfov2",
   ")",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "// Ensure the yaw is within min and max allowed",
   "var",
   "yawRange",
   "=",
   "config",
   ".",
   "maxYaw",
   "-",
   "config",
   ".",
   "minYaw",
   ",",
   "minYaw",
   "=",
   "-",
   "180",
   ",",
   "maxYaw",
   "=",
   "180",
   ";",
   "if",
   "(",
   "yawRange",
   "<",
   "360",
   ")",
   "{",
   "minYaw",
   "=",
   "config",
   ".",
   "minYaw",
   "+",
   "config",
   ".",
   "hfov",
   "/",
   "2",
   "+",
   "hoffcut",
   ";",
   "maxYaw",
   "=",
   "config",
   ".",
   "maxYaw",
   "-",
   "config",
   ".",
   "hfov",
   "/",
   "2",
   "-",
   "hoffcut",
   ";",
   "if",
   "(",
   "yawRange",
   "<",
   "config",
   ".",
   "hfov",
   ")",
   "{",
   "// Lock yaw to average of min and max yaw when both can be seen at once",
   "minYaw",
   "=",
   "maxYaw",
   "=",
   "(",
   "minYaw",
   "+",
   "maxYaw",
   ")",
   "/",
   "2",
   ";",
   "}",
   "config",
   ".",
   "yaw",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "minYaw",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "maxYaw",
   ",",
   "config",
   ".",
   "yaw",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "config",
   ".",
   "yaw",
   ">",
   "180",
   ")",
   "{",
   "config",
   ".",
   "yaw",
   "-=",
   "360",
   ";",
   "}",
   "else",
   "if",
   "(",
   "config",
   ".",
   "yaw",
   "<",
   "-",
   "180",
   ")",
   "{",
   "config",
   ".",
   "yaw",
   "+=",
   "360",
   ";",
   "}",
   "// Check if we autoRotate in a limited by min and max yaw",
   "// If so reverse direction",
   "if",
   "(",
   "config",
   ".",
   "autoRotate",
   "!==",
   "false",
   "&&",
   "tmpyaw",
   "!=",
   "config",
   ".",
   "yaw",
   "&&",
   "prevTime",
   "!==",
   "undefined",
   ")",
   "{",
   "// this condition prevents changing the direction initially",
   "config",
   ".",
   "autoRotate",
   "*=",
   "-",
   "1",
   ";",
   "}",
   "// Ensure the calculated pitch is within min and max allowed",
   "var",
   "canvas",
   "=",
   "renderer",
   ".",
   "getCanvas",
   "(",
   ")",
   ";",
   "var",
   "vfov",
   "=",
   "2",
   "*",
   "Math",
   ".",
   "atan",
   "(",
   "Math",
   ".",
   "tan",
   "(",
   "config",
   ".",
   "hfov",
   "/",
   "180",
   "*",
   "Math",
   ".",
   "PI",
   "*",
   "0.5",
   ")",
   "/",
   "(",
   "canvas",
   ".",
   "width",
   "/",
   "canvas",
   ".",
   "height",
   ")",
   ")",
   "/",
   "Math",
   ".",
   "PI",
   "*",
   "180",
   ";",
   "var",
   "minPitch",
   "=",
   "config",
   ".",
   "minPitch",
   "+",
   "vfov",
   "/",
   "2",
   ",",
   "maxPitch",
   "=",
   "config",
   ".",
   "maxPitch",
   "-",
   "vfov",
   "/",
   "2",
   ";",
   "var",
   "pitchRange",
   "=",
   "config",
   ".",
   "maxPitch",
   "-",
   "config",
   ".",
   "minPitch",
   ";",
   "if",
   "(",
   "pitchRange",
   "<",
   "vfov",
   ")",
   "{",
   "// Lock pitch to average of min and max pitch when both can be seen at once",
   "minPitch",
   "=",
   "maxPitch",
   "=",
   "(",
   "minPitch",
   "+",
   "maxPitch",
   ")",
   "/",
   "2",
   ";",
   "}",
   "if",
   "(",
   "isNaN",
   "(",
   "minPitch",
   ")",
   ")",
   "minPitch",
   "=",
   "-",
   "90",
   ";",
   "if",
   "(",
   "isNaN",
   "(",
   "maxPitch",
   ")",
   ")",
   "maxPitch",
   "=",
   "90",
   ";",
   "config",
   ".",
   "pitch",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "minPitch",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "maxPitch",
   ",",
   "config",
   ".",
   "pitch",
   ")",
   ")",
   ";",
   "renderer",
   ".",
   "render",
   "(",
   "config",
   ".",
   "pitch",
   "*",
   "Math",
   ".",
   "PI",
   "/",
   "180",
   ",",
   "config",
   ".",
   "yaw",
   "*",
   "Math",
   ".",
   "PI",
   "/",
   "180",
   ",",
   "config",
   ".",
   "hfov",
   "*",
   "Math",
   ".",
   "PI",
   "/",
   "180",
   ",",
   "{",
   "roll",
   ":",
   "config",
   ".",
   "roll",
   "*",
   "Math",
   ".",
   "PI",
   "/",
   "180",
   "}",
   ")",
   ";",
   "renderHotSpots",
   "(",
   ")",
   ";",
   "// Update compass",
   "if",
   "(",
   "config",
   ".",
   "compass",
   ")",
   "{",
   "compass",
   ".",
   "style",
   ".",
   "transform",
   "=",
   "'rotate('",
   "+",
   "(",
   "-",
   "config",
   ".",
   "yaw",
   "-",
   "config",
   ".",
   "northOffset",
   ")",
   "+",
   "'deg)'",
   ";",
   "compass",
   ".",
   "style",
   ".",
   "webkitTransform",
   "=",
   "'rotate('",
   "+",
   "(",
   "-",
   "config",
   ".",
   "yaw",
   "-",
   "config",
   ".",
   "northOffset",
   ")",
   "+",
   "'deg)'",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-171",
  "nl_tokens": [
   "A",
   "smoothing",
   "function",
   "for",
   "small",
   "U",
   "-",
   "patterns",
   "."
  ],
  "pl_tokens": [
   "function",
   "smoothArea",
   "(",
   "d",
   ",",
   "b",
   ")",
   "{",
   "const",
   "a1",
   "=",
   "b",
   ".",
   "<mask>",
   ";",
   "const",
   "a2",
   "=",
   "b",
   ".",
   "max",
   ";",
   "const",
   "b1X",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "a1",
   ".",
   "x",
   "*",
   "2.0",
   ")",
   "*",
   "0.5",
   ";",
   "const",
   "b1Y",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "a1",
   ".",
   "y",
   "*",
   "2.0",
   ")",
   "*",
   "0.5",
   ";",
   "const",
   "b2X",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "a2",
   ".",
   "x",
   "*",
   "2.0",
   ")",
   "*",
   "0.5",
   ";",
   "const",
   "b2Y",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "a2",
   ".",
   "y",
   "*",
   "2.0",
   ")",
   "*",
   "0.5",
   ";",
   "const",
   "p",
   "=",
   "saturate",
   "(",
   "d",
   "/",
   "SMOOTH_MAX_DISTANCE",
   ")",
   ";",
   "a1",
   ".",
   "set",
   "(",
   "lerp",
   "(",
   "b1X",
   ",",
   "a1",
   ".",
   "x",
   ",",
   "p",
   ")",
   ",",
   "lerp",
   "(",
   "b1Y",
   ",",
   "a1",
   ".",
   "y",
   ",",
   "p",
   ")",
   ")",
   ";",
   "a2",
   ".",
   "set",
   "(",
   "lerp",
   "(",
   "b2X",
   ",",
   "a2",
   ".",
   "x",
   ",",
   "p",
   ")",
   ",",
   "lerp",
   "(",
   "b2Y",
   ",",
   "a2",
   ".",
   "y",
   ",",
   "p",
   ")",
   ")",
   ";",
   "return",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-172",
  "nl_tokens": [
   "Implements",
   "an",
   "<input",
   ">",
   "host",
   "component",
   "that",
   "allows",
   "setting",
   "these",
   "optional",
   "props",
   ":",
   "checked",
   "value",
   "defaultChecked",
   "and",
   "defaultValue",
   "."
  ],
  "pl_tokens": [
   "function",
   "getHostProps",
   "(",
   "element",
   ",",
   "props",
   ")",
   "{",
   "var",
   "node",
   "=",
   "element",
   ";",
   "var",
   "value",
   "=",
   "props",
   ".",
   "value",
   ";",
   "var",
   "checked",
   "=",
   "props",
   ".",
   "checked",
   ";",
   "var",
   "hostProps",
   "=",
   "_assign",
   "(",
   "{",
   "// Make sure we set .type before any other properties (setting .value",
   "// before .type means .value is lost in IE11 and below)",
   "type",
   ":",
   "undefined",
   ",",
   "// Make sure we set .step before .value (setting .value before .step",
   "// means .value is rounded on mount, based upon step precision)",
   "step",
   ":",
   "undefined",
   ",",
   "// Make sure we set .min & .max before .value (to ensure proper order",
   "// in corner cases such as min or max deriving from value, e.g. Issue #7170)",
   "<mask>",
   ":",
   "undefined",
   ",",
   "max",
   ":",
   "undefined",
   "}",
   ",",
   "props",
   ",",
   "{",
   "defaultChecked",
   ":",
   "undefined",
   ",",
   "defaultValue",
   ":",
   "undefined",
   ",",
   "value",
   ":",
   "value",
   "!=",
   "null",
   "?",
   "value",
   ":",
   "node",
   ".",
   "_wrapperState",
   ".",
   "initialValue",
   ",",
   "checked",
   ":",
   "checked",
   "!=",
   "null",
   "?",
   "checked",
   ":",
   "node",
   ".",
   "_wrapperState",
   ".",
   "initialChecked",
   "}",
   ")",
   ";",
   "return",
   "hostProps",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-173",
  "nl_tokens": [
   "/",
   "*",
   "TODO",
   ":",
   "replace",
   "with",
   "buffer",
   ".",
   "compare",
   "once",
   "we",
   "move",
   "to",
   "node",
   "0",
   ".",
   "12"
  ],
  "pl_tokens": [
   "function",
   "(",
   "left",
   ",",
   "right",
   ")",
   "{",
   "if",
   "(",
   "(",
   "left",
   "===",
   "null",
   ")",
   "&&",
   "(",
   "right",
   "===",
   "null",
   ")",
   ")",
   "{",
   "return",
   "true",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "left",
   "===",
   "null",
   ")",
   "||",
   "(",
   "right",
   "===",
   "null",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "if",
   "(",
   "!",
   "Buffer",
   ".",
   "isBuffer",
   "(",
   "left",
   ")",
   ")",
   "{",
   "left",
   "=",
   "new",
   "Buffer",
   "(",
   "left",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "Buffer",
   ".",
   "isBuffer",
   "(",
   "right",
   ")",
   ")",
   "{",
   "right",
   "=",
   "new",
   "Buffer",
   "(",
   "right",
   ")",
   ";",
   "}",
   "var",
   "same",
   "=",
   "(",
   "left",
   ".",
   "length",
   "===",
   "right",
   ".",
   "length",
   ")",
   ",",
   "i",
   "=",
   "0",
   ",",
   "<mask>",
   "=",
   "left",
   ".",
   "length",
   ";",
   "while",
   "(",
   "i",
   "<",
   "max",
   ")",
   "{",
   "same",
   "&=",
   "(",
   "left",
   "[",
   "i",
   "]",
   "==",
   "right",
   "[",
   "i",
   "]",
   ")",
   ";",
   "//eslint-disable-line eqeqeq",
   "i",
   "++",
   ";",
   "}",
   "return",
   "same",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-174",
  "nl_tokens": [
   "Returns",
   "a",
   "range",
   "of",
   "items",
   "in",
   "this",
   "collection"
  ],
  "pl_tokens": [
   "function",
   "(",
   "start",
   ",",
   "end",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "items",
   "=",
   "me",
   ".",
   "items",
   ",",
   "range",
   "=",
   "[",
   "]",
   ",",
   "i",
   ";",
   "if",
   "(",
   "items",
   ".",
   "length",
   "<",
   "1",
   ")",
   "{",
   "return",
   "range",
   ";",
   "}",
   "start",
   "=",
   "start",
   "||",
   "0",
   ";",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "typeof",
   "end",
   "==",
   "'undefined'",
   "?",
   "me",
   ".",
   "length",
   "-",
   "1",
   ":",
   "end",
   ",",
   "me",
   ".",
   "length",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "start",
   "<=",
   "end",
   ")",
   "{",
   "for",
   "(",
   "i",
   "=",
   "start",
   ";",
   "i",
   "<=",
   "end",
   ";",
   "i",
   "++",
   ")",
   "{",
   "range",
   "[",
   "range",
   ".",
   "length",
   "]",
   "=",
   "items",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "else",
   "{",
   "for",
   "(",
   "i",
   "=",
   "start",
   ";",
   "i",
   ">=",
   "end",
   ";",
   "i",
   "--",
   ")",
   "{",
   "range",
   "[",
   "range",
   ".",
   "length",
   "]",
   "=",
   "items",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "return",
   "range",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-175",
  "nl_tokens": [
   "Get",
   "color",
   "for",
   "value"
  ],
  "pl_tokens": [
   "function",
   "getColorGrad",
   "(",
   "pct",
   ",",
   "col",
   ",",
   "maxBri",
   ")",
   "{",
   "var",
   "no",
   ",",
   "inc",
   ",",
   "colors",
   ",",
   "percentage",
   ",",
   "rval",
   ",",
   "gval",
   ",",
   "bval",
   ",",
   "lower",
   ",",
   "upper",
   ",",
   "range",
   ",",
   "rangePct",
   ",",
   "pctLower",
   ",",
   "pctUpper",
   ",",
   "color",
   ",",
   "pow",
   ";",
   "no",
   "=",
   "col",
   ".",
   "length",
   ";",
   "if",
   "(",
   "no",
   "===",
   "1",
   ")",
   "return",
   "col",
   "[",
   "0",
   "]",
   ";",
   "inc",
   "=",
   "1",
   "/",
   "(",
   "no",
   "-",
   "1",
   ")",
   ";",
   "colors",
   "=",
   "[",
   "]",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "col",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "col",
   "[",
   "i",
   "]",
   "===",
   "'object'",
   ")",
   "{",
   "percentage",
   "=",
   "col",
   "[",
   "i",
   "]",
   ".",
   "pct",
   "?",
   "col",
   "[",
   "i",
   "]",
   ".",
   "pct",
   ":",
   "inc",
   "*",
   "i",
   ";",
   "pow",
   "=",
   "col",
   "[",
   "i",
   "]",
   ".",
   "pow",
   "||",
   "1",
   ";",
   "rval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ".",
   "color",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "2",
   ")",
   ",",
   "16",
   ")",
   ";",
   "gval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ".",
   "color",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "2",
   ",",
   "4",
   ")",
   ",",
   "16",
   ")",
   ";",
   "bval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ".",
   "color",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "4",
   ",",
   "6",
   ")",
   ",",
   "16",
   ")",
   ";",
   "}",
   "else",
   "{",
   "percentage",
   "=",
   "inc",
   "*",
   "i",
   ";",
   "pow",
   "=",
   "1",
   ";",
   "rval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "2",
   ")",
   ",",
   "16",
   ")",
   ";",
   "gval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "2",
   ",",
   "4",
   ")",
   ",",
   "16",
   ")",
   ";",
   "bval",
   "=",
   "parseInt",
   "(",
   "(",
   "cutHex",
   "(",
   "col",
   "[",
   "i",
   "]",
   ")",
   ")",
   ".",
   "substring",
   "(",
   "4",
   ",",
   "6",
   ")",
   ",",
   "16",
   ")",
   ";",
   "}",
   "colors",
   "[",
   "i",
   "]",
   "=",
   "{",
   "pct",
   ":",
   "percentage",
   ",",
   "pow",
   ":",
   "pow",
   ",",
   "color",
   ":",
   "{",
   "r",
   ":",
   "rval",
   ",",
   "g",
   ":",
   "gval",
   ",",
   "b",
   ":",
   "bval",
   "}",
   "}",
   ";",
   "}",
   "if",
   "(",
   "pct",
   "===",
   "0",
   ")",
   "{",
   "return",
   "'rgb('",
   "+",
   "[",
   "colors",
   "[",
   "0",
   "]",
   ".",
   "color",
   ".",
   "r",
   ",",
   "colors",
   "[",
   "0",
   "]",
   ".",
   "color",
   ".",
   "g",
   ",",
   "colors",
   "[",
   "0",
   "]",
   ".",
   "color",
   ".",
   "b",
   "]",
   ".",
   "join",
   "(",
   "','",
   ")",
   "+",
   "')'",
   ";",
   "}",
   "for",
   "(",
   "var",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "colors",
   ".",
   "length",
   ";",
   "j",
   "++",
   ")",
   "{",
   "if",
   "(",
   "pct",
   "<=",
   "colors",
   "[",
   "j",
   "]",
   ".",
   "pct",
   ")",
   "{",
   "var",
   "colorMax",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "colors",
   "[",
   "j",
   "]",
   ".",
   "color",
   ".",
   "r",
   ",",
   "colors",
   "[",
   "j",
   "]",
   ".",
   "color",
   ".",
   "g",
   ",",
   "colors",
   "[",
   "j",
   "]",
   ".",
   "color",
   ".",
   "b",
   ")",
   ";",
   "lower",
   "=",
   "colors",
   "[",
   "j",
   "-",
   "1",
   "]",
   ";",
   "upper",
   "=",
   "colors",
   "[",
   "j",
   "]",
   ";",
   "range",
   "=",
   "upper",
   ".",
   "pct",
   "-",
   "lower",
   ".",
   "pct",
   ";",
   "rangePct",
   "=",
   "Math",
   ".",
   "pow",
   "(",
   "(",
   "pct",
   "-",
   "lower",
   ".",
   "pct",
   ")",
   "/",
   "range",
   ",",
   "colors",
   "[",
   "j",
   "]",
   ".",
   "pow",
   "/",
   "colors",
   "[",
   "j",
   "-",
   "1",
   "]",
   ".",
   "pow",
   ")",
   ";",
   "pctLower",
   "=",
   "1",
   "-",
   "rangePct",
   ";",
   "pctUpper",
   "=",
   "rangePct",
   ";",
   "color",
   "=",
   "{",
   "r",
   ":",
   "Math",
   ".",
   "floor",
   "(",
   "lower",
   ".",
   "color",
   ".",
   "r",
   "*",
   "pctLower",
   "+",
   "upper",
   ".",
   "color",
   ".",
   "r",
   "*",
   "pctUpper",
   ")",
   ",",
   "g",
   ":",
   "Math",
   ".",
   "floor",
   "(",
   "lower",
   ".",
   "color",
   ".",
   "g",
   "*",
   "pctLower",
   "+",
   "upper",
   ".",
   "color",
   ".",
   "g",
   "*",
   "pctUpper",
   ")",
   ",",
   "b",
   ":",
   "Math",
   ".",
   "floor",
   "(",
   "lower",
   ".",
   "color",
   ".",
   "b",
   "*",
   "pctLower",
   "+",
   "upper",
   ".",
   "color",
   ".",
   "b",
   "*",
   "pctUpper",
   ")",
   "}",
   ";",
   "if",
   "(",
   "maxBri",
   ")",
   "{",
   "var",
   "colorMax2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "color",
   ".",
   "r",
   ",",
   "color",
   ".",
   "g",
   ",",
   "color",
   ".",
   "b",
   ")",
   ";",
   "return",
   "'rgb('",
   "+",
   "[",
   "Math",
   ".",
   "floor",
   "(",
   "color",
   ".",
   "r",
   "/",
   "colorMax2",
   "*",
   "colorMax",
   ")",
   ",",
   "Math",
   ".",
   "floor",
   "(",
   "color",
   ".",
   "g",
   "/",
   "colorMax2",
   "*",
   "colorMax",
   ")",
   ",",
   "Math",
   ".",
   "floor",
   "(",
   "color",
   ".",
   "b",
   "/",
   "colorMax2",
   "*",
   "colorMax",
   ")",
   "]",
   ".",
   "join",
   "(",
   "','",
   ")",
   "+",
   "')'",
   ";",
   "}",
   "else",
   "{",
   "return",
   "'rgb('",
   "+",
   "[",
   "color",
   ".",
   "r",
   ",",
   "color",
   ".",
   "g",
   ",",
   "color",
   ".",
   "b",
   "]",
   ".",
   "join",
   "(",
   "','",
   ")",
   "+",
   "')'",
   ";",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-176",
  "nl_tokens": [
   "inflate",
   "/",
   "deflate",
   "core",
   "functions"
  ],
  "pl_tokens": [
   "function",
   "launchWorkerProcess",
   "(",
   "worker",
   ",",
   "initialMessage",
   ",",
   "reader",
   ",",
   "writer",
   ",",
   "offset",
   ",",
   "size",
   ",",
   "onprogress",
   ",",
   "onend",
   ",",
   "onreaderror",
   ",",
   "onwriteerror",
   ")",
   "{",
   "var",
   "chunkIndex",
   "=",
   "0",
   ",",
   "index",
   ",",
   "outputSize",
   ",",
   "sn",
   "=",
   "initialMessage",
   ".",
   "sn",
   ",",
   "crc",
   ";",
   "function",
   "onflush",
   "(",
   ")",
   "{",
   "worker",
   ".",
   "removeEventListener",
   "(",
   "'message'",
   ",",
   "onmessage",
   ",",
   "false",
   ")",
   ";",
   "onend",
   "(",
   "outputSize",
   ",",
   "crc",
   ")",
   ";",
   "}",
   "function",
   "onmessage",
   "(",
   "event",
   ")",
   "{",
   "var",
   "message",
   "=",
   "event",
   ".",
   "data",
   ",",
   "data",
   "=",
   "message",
   ".",
   "data",
   ",",
   "err",
   "=",
   "message",
   ".",
   "error",
   ";",
   "if",
   "(",
   "err",
   ")",
   "{",
   "err",
   ".",
   "toString",
   "=",
   "function",
   "(",
   ")",
   "{",
   "return",
   "'Error: '",
   "+",
   "this",
   ".",
   "message",
   ";",
   "}",
   ";",
   "onreaderror",
   "(",
   "err",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "message",
   ".",
   "sn",
   "!==",
   "sn",
   ")",
   "return",
   ";",
   "if",
   "(",
   "typeof",
   "message",
   ".",
   "codecTime",
   "===",
   "'number'",
   ")",
   "worker",
   ".",
   "codecTime",
   "+=",
   "message",
   ".",
   "codecTime",
   ";",
   "// should be before onflush()",
   "if",
   "(",
   "typeof",
   "message",
   ".",
   "crcTime",
   "===",
   "'number'",
   ")",
   "worker",
   ".",
   "crcTime",
   "+=",
   "message",
   ".",
   "crcTime",
   ";",
   "switch",
   "(",
   "message",
   ".",
   "type",
   ")",
   "{",
   "case",
   "'append'",
   ":",
   "if",
   "(",
   "data",
   ")",
   "{",
   "outputSize",
   "+=",
   "data",
   ".",
   "length",
   ";",
   "writer",
   ".",
   "writeUint8Array",
   "(",
   "data",
   ",",
   "function",
   "(",
   ")",
   "{",
   "step",
   "(",
   ")",
   ";",
   "}",
   ",",
   "onwriteerror",
   ")",
   ";",
   "}",
   "else",
   "step",
   "(",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'flush'",
   ":",
   "crc",
   "=",
   "message",
   ".",
   "crc",
   ";",
   "if",
   "(",
   "data",
   ")",
   "{",
   "outputSize",
   "+=",
   "data",
   ".",
   "length",
   ";",
   "writer",
   ".",
   "writeUint8Array",
   "(",
   "data",
   ",",
   "function",
   "(",
   ")",
   "{",
   "onflush",
   "(",
   ")",
   ";",
   "}",
   ",",
   "onwriteerror",
   ")",
   ";",
   "}",
   "else",
   "onflush",
   "(",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'progress'",
   ":",
   "if",
   "(",
   "onprogress",
   ")",
   "onprogress",
   "(",
   "index",
   "+",
   "message",
   ".",
   "loaded",
   ",",
   "size",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'importScripts'",
   ":",
   "//no need to handle here",
   "case",
   "'newTask'",
   ":",
   "case",
   "'echo'",
   ":",
   "break",
   ";",
   "default",
   ":",
   "console",
   ".",
   "warn",
   "(",
   "'zip.js:launchWorkerProcess: unknown message: '",
   ",",
   "message",
   ")",
   ";",
   "}",
   "}",
   "function",
   "step",
   "(",
   ")",
   "{",
   "index",
   "=",
   "chunkIndex",
   "*",
   "CHUNK_SIZE",
   ";",
   "// use `<=` instead of `<`, because `size` may be 0.",
   "if",
   "(",
   "index",
   "<=",
   "size",
   ")",
   "{",
   "reader",
   ".",
   "readUint8Array",
   "(",
   "offset",
   "+",
   "index",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "CHUNK_SIZE",
   ",",
   "size",
   "-",
   "index",
   ")",
   ",",
   "function",
   "(",
   "array",
   ")",
   "{",
   "if",
   "(",
   "onprogress",
   ")",
   "onprogress",
   "(",
   "index",
   ",",
   "size",
   ")",
   ";",
   "var",
   "msg",
   "=",
   "index",
   "===",
   "0",
   "?",
   "initialMessage",
   ":",
   "{",
   "sn",
   ":",
   "sn",
   "}",
   ";",
   "msg",
   ".",
   "type",
   "=",
   "'append'",
   ";",
   "msg",
   ".",
   "data",
   "=",
   "array",
   ";",
   "// posting a message with transferables will fail on IE10",
   "try",
   "{",
   "worker",
   ".",
   "postMessage",
   "(",
   "msg",
   ",",
   "[",
   "array",
   ".",
   "buffer",
   "]",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "ex",
   ")",
   "{",
   "worker",
   ".",
   "postMessage",
   "(",
   "msg",
   ")",
   ";",
   "// retry without transferables",
   "}",
   "chunkIndex",
   "++",
   ";",
   "}",
   ",",
   "onreaderror",
   ")",
   ";",
   "}",
   "else",
   "{",
   "worker",
   ".",
   "postMessage",
   "(",
   "{",
   "sn",
   ":",
   "sn",
   ",",
   "type",
   ":",
   "'flush'",
   "}",
   ")",
   ";",
   "}",
   "}",
   "outputSize",
   "=",
   "0",
   ";",
   "worker",
   ".",
   "addEventListener",
   "(",
   "'message'",
   ",",
   "onmessage",
   ",",
   "false",
   ")",
   ";",
   "step",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-177",
  "nl_tokens": [
   "Get",
   "current",
   "upload",
   "progress",
   "status"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "error",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "chunks",
   ".",
   "length",
   "===",
   "1",
   ")",
   "{",
   "this",
   ".",
   "_prevProgress",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "_prevProgress",
   ",",
   "this",
   ".",
   "chunks",
   "[",
   "0",
   "]",
   ".",
   "progress",
   "(",
   ")",
   ")",
   ";",
   "return",
   "this",
   ".",
   "_prevProgress",
   ";",
   "}",
   "// Sum up progress across everything",
   "var",
   "bytesLoaded",
   "=",
   "0",
   ";",
   "each",
   "(",
   "this",
   ".",
   "chunks",
   ",",
   "function",
   "(",
   "c",
   ")",
   "{",
   "// get chunk progress relative to entire file",
   "bytesLoaded",
   "+=",
   "c",
   ".",
   "progress",
   "(",
   ")",
   "*",
   "(",
   "c",
   ".",
   "endByte",
   "-",
   "c",
   ".",
   "startByte",
   ")",
   ";",
   "}",
   ")",
   ";",
   "var",
   "percent",
   "=",
   "bytesLoaded",
   "/",
   "this",
   ".",
   "size",
   ";",
   "// We don't want to lose percentages when an upload is paused",
   "this",
   ".",
   "_prevProgress",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "_prevProgress",
   ",",
   "percent",
   ">",
   "0.9999",
   "?",
   "1",
   ":",
   "percent",
   ")",
   ";",
   "return",
   "this",
   ".",
   "_prevProgress",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-178",
  "nl_tokens": [
   "Uses",
   "a",
   "set",
   "of",
   "changes",
   "plus",
   "the",
   "current",
   "scroll",
   "position",
   "to",
   "determine",
   "which",
   "DOM",
   "updates",
   "have",
   "to",
   "be",
   "made",
   "and",
   "makes",
   "the",
   "updates",
   "."
  ],
  "pl_tokens": [
   "function",
   "updateDisplayInner",
   "(",
   "cm",
   ",",
   "changes",
   ",",
   "viewPort",
   ")",
   "{",
   "var",
   "display",
   "=",
   "cm",
   ".",
   "display",
   ",",
   "doc",
   "=",
   "cm",
   ".",
   "view",
   ".",
   "doc",
   ";",
   "if",
   "(",
   "!",
   "display",
   ".",
   "wrapper",
   ".",
   "clientWidth",
   ")",
   "{",
   "display",
   ".",
   "showingFrom",
   "=",
   "display",
   ".",
   "showingTo",
   "=",
   "display",
   ".",
   "viewOffset",
   "=",
   "0",
   ";",
   "return",
   ";",
   "}",
   "// Compute the new visible window",
   "// If scrollTop is specified, use that to determine which lines",
   "// to render instead of the current scrollbar position.",
   "var",
   "visible",
   "=",
   "visibleLines",
   "(",
   "display",
   ",",
   "doc",
   ",",
   "viewPort",
   ")",
   ";",
   "// Bail out if the visible area is already rendered and nothing changed.",
   "if",
   "(",
   "changes",
   "!==",
   "true",
   "&&",
   "changes",
   ".",
   "length",
   "==",
   "0",
   "&&",
   "visible",
   ".",
   "from",
   ">",
   "display",
   ".",
   "showingFrom",
   "&&",
   "visible",
   ".",
   "to",
   "<",
   "display",
   ".",
   "showingTo",
   ")",
   "return",
   ";",
   "if",
   "(",
   "changes",
   "&&",
   "maybeUpdateLineNumberWidth",
   "(",
   "cm",
   ")",
   ")",
   "changes",
   "=",
   "true",
   ";",
   "display",
   ".",
   "sizer",
   ".",
   "style",
   ".",
   "marginLeft",
   "=",
   "display",
   ".",
   "scrollbarH",
   ".",
   "style",
   ".",
   "left",
   "=",
   "display",
   ".",
   "gutters",
   ".",
   "offsetWidth",
   "+",
   "\"px\"",
   ";",
   "// When merged lines are present, the line that needs to be",
   "// redrawn might not be the one that was changed.",
   "if",
   "(",
   "changes",
   "!==",
   "true",
   "&&",
   "sawCollapsedSpans",
   ")",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "changes",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "var",
   "ch",
   "=",
   "changes",
   "[",
   "i",
   "]",
   ",",
   "merged",
   ";",
   "while",
   "(",
   "merged",
   "=",
   "collapsedSpanAtStart",
   "(",
   "getLine",
   "(",
   "doc",
   ",",
   "ch",
   ".",
   "from",
   ")",
   ")",
   ")",
   "{",
   "var",
   "from",
   "=",
   "merged",
   ".",
   "find",
   "(",
   ")",
   ".",
   "from",
   ".",
   "line",
   ";",
   "if",
   "(",
   "ch",
   ".",
   "diff",
   ")",
   "ch",
   ".",
   "diff",
   "-=",
   "ch",
   ".",
   "from",
   "-",
   "from",
   ";",
   "ch",
   ".",
   "from",
   "=",
   "from",
   ";",
   "}",
   "}",
   "// Used to determine which lines need their line numbers updated",
   "var",
   "positionsChangedFrom",
   "=",
   "changes",
   "===",
   "true",
   "?",
   "0",
   ":",
   "Infinity",
   ";",
   "if",
   "(",
   "cm",
   ".",
   "options",
   ".",
   "lineNumbers",
   "&&",
   "changes",
   "&&",
   "changes",
   "!==",
   "true",
   ")",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "changes",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "if",
   "(",
   "changes",
   "[",
   "i",
   "]",
   ".",
   "diff",
   ")",
   "{",
   "positionsChangedFrom",
   "=",
   "changes",
   "[",
   "i",
   "]",
   ".",
   "from",
   ";",
   "break",
   ";",
   "}",
   "var",
   "from",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "visible",
   ".",
   "from",
   "-",
   "cm",
   ".",
   "options",
   ".",
   "viewportMargin",
   ",",
   "0",
   ")",
   ";",
   "var",
   "to",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "doc",
   ".",
   "size",
   ",",
   "visible",
   ".",
   "to",
   "+",
   "cm",
   ".",
   "options",
   ".",
   "viewportMargin",
   ")",
   ";",
   "if",
   "(",
   "display",
   ".",
   "showingFrom",
   "<",
   "from",
   "&&",
   "from",
   "-",
   "display",
   ".",
   "showingFrom",
   "<",
   "20",
   ")",
   "from",
   "=",
   "display",
   ".",
   "showingFrom",
   ";",
   "if",
   "(",
   "display",
   ".",
   "showingTo",
   ">",
   "to",
   "&&",
   "display",
   ".",
   "showingTo",
   "-",
   "to",
   "<",
   "20",
   ")",
   "to",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "doc",
   ".",
   "size",
   ",",
   "display",
   ".",
   "showingTo",
   ")",
   ";",
   "if",
   "(",
   "sawCollapsedSpans",
   ")",
   "{",
   "from",
   "=",
   "lineNo",
   "(",
   "visualLine",
   "(",
   "doc",
   ",",
   "getLine",
   "(",
   "doc",
   ",",
   "from",
   ")",
   ")",
   ")",
   ";",
   "while",
   "(",
   "to",
   "<",
   "doc",
   ".",
   "size",
   "&&",
   "lineIsHidden",
   "(",
   "getLine",
   "(",
   "doc",
   ",",
   "to",
   ")",
   ")",
   ")",
   "++",
   "to",
   ";",
   "}",
   "// Create a range of theoretically intact lines, and punch holes",
   "// in that using the change info.",
   "var",
   "intact",
   "=",
   "changes",
   "===",
   "true",
   "?",
   "[",
   "]",
   ":",
   "computeIntact",
   "(",
   "[",
   "{",
   "from",
   ":",
   "display",
   ".",
   "showingFrom",
   ",",
   "to",
   ":",
   "display",
   ".",
   "showingTo",
   "}",
   "]",
   ",",
   "changes",
   ")",
   ";",
   "// Clip off the parts that won't be visible",
   "var",
   "intactLines",
   "=",
   "0",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "intact",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "var",
   "range",
   "=",
   "intact",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "range",
   ".",
   "from",
   "<",
   "from",
   ")",
   "range",
   ".",
   "from",
   "=",
   "from",
   ";",
   "if",
   "(",
   "range",
   ".",
   "to",
   ">",
   "to",
   ")",
   "range",
   ".",
   "to",
   "=",
   "to",
   ";",
   "if",
   "(",
   "range",
   ".",
   "from",
   ">=",
   "range",
   ".",
   "to",
   ")",
   "intact",
   ".",
   "splice",
   "(",
   "i",
   "--",
   ",",
   "1",
   ")",
   ";",
   "else",
   "intactLines",
   "+=",
   "range",
   ".",
   "to",
   "-",
   "range",
   ".",
   "from",
   ";",
   "}",
   "if",
   "(",
   "intactLines",
   "==",
   "to",
   "-",
   "from",
   "&&",
   "from",
   "==",
   "display",
   ".",
   "showingFrom",
   "&&",
   "to",
   "==",
   "display",
   ".",
   "showingTo",
   ")",
   "return",
   ";",
   "intact",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "a",
   ".",
   "from",
   "-",
   "b",
   ".",
   "from",
   ";",
   "}",
   ")",
   ";",
   "if",
   "(",
   "intactLines",
   "<",
   "(",
   "to",
   "-",
   "from",
   ")",
   "*",
   ".7",
   ")",
   "display",
   ".",
   "lineDiv",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"none\"",
   ";",
   "patchDisplay",
   "(",
   "cm",
   ",",
   "from",
   ",",
   "to",
   ",",
   "intact",
   ",",
   "positionsChangedFrom",
   ")",
   ";",
   "display",
   ".",
   "lineDiv",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"\"",
   ";",
   "var",
   "different",
   "=",
   "from",
   "!=",
   "display",
   ".",
   "showingFrom",
   "||",
   "to",
   "!=",
   "display",
   ".",
   "showingTo",
   "||",
   "display",
   ".",
   "lastSizeC",
   "!=",
   "display",
   ".",
   "wrapper",
   ".",
   "clientHeight",
   ";",
   "// This is just a bogus formula that detects when the editor is",
   "// resized or the font size changes.",
   "if",
   "(",
   "different",
   ")",
   "display",
   ".",
   "lastSizeC",
   "=",
   "display",
   ".",
   "wrapper",
   ".",
   "clientHeight",
   ";",
   "display",
   ".",
   "showingFrom",
   "=",
   "from",
   ";",
   "display",
   ".",
   "showingTo",
   "=",
   "to",
   ";",
   "startWorker",
   "(",
   "cm",
   ",",
   "100",
   ")",
   ";",
   "var",
   "prevBottom",
   "=",
   "display",
   ".",
   "lineDiv",
   ".",
   "offsetTop",
   ";",
   "for",
   "(",
   "var",
   "node",
   "=",
   "display",
   ".",
   "lineDiv",
   ".",
   "firstChild",
   ",",
   "height",
   ";",
   "node",
   ";",
   "node",
   "=",
   "node",
   ".",
   "nextSibling",
   ")",
   "if",
   "(",
   "node",
   ".",
   "lineObj",
   ")",
   "{",
   "if",
   "(",
   "ie_lt8",
   ")",
   "{",
   "var",
   "bot",
   "=",
   "node",
   ".",
   "offsetTop",
   "+",
   "node",
   ".",
   "offsetHeight",
   ";",
   "height",
   "=",
   "bot",
   "-",
   "prevBottom",
   ";",
   "prevBottom",
   "=",
   "bot",
   ";",
   "}",
   "else",
   "{",
   "var",
   "box",
   "=",
   "node",
   ".",
   "getBoundingClientRect",
   "(",
   ")",
   ";",
   "height",
   "=",
   "box",
   ".",
   "bottom",
   "-",
   "box",
   ".",
   "top",
   ";",
   "}",
   "var",
   "diff",
   "=",
   "node",
   ".",
   "lineObj",
   ".",
   "height",
   "-",
   "height",
   ";",
   "if",
   "(",
   "height",
   "<",
   "2",
   ")",
   "height",
   "=",
   "textHeight",
   "(",
   "display",
   ")",
   ";",
   "if",
   "(",
   "diff",
   ">",
   ".001",
   "||",
   "diff",
   "<",
   "-",
   ".001",
   ")",
   "updateLineHeight",
   "(",
   "node",
   ".",
   "lineObj",
   ",",
   "height",
   ")",
   ";",
   "}",
   "display",
   ".",
   "viewOffset",
   "=",
   "heightAtLine",
   "(",
   "cm",
   ",",
   "getLine",
   "(",
   "doc",
   ",",
   "from",
   ")",
   ")",
   ";",
   "// Position the mover div to align with the current virtual scroll position",
   "display",
   ".",
   "mover",
   ".",
   "style",
   ".",
   "top",
   "=",
   "display",
   ".",
   "viewOffset",
   "+",
   "\"px\"",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-179",
  "nl_tokens": [
   "7",
   ".",
   "1",
   ".",
   "15",
   "ToLength"
  ],
  "pl_tokens": [
   "function",
   "ToLength",
   "(",
   "argument",
   ")",
   "{",
   "var",
   "len",
   "=",
   "ToInteger",
   "(",
   "argument",
   ")",
   ";",
   "return",
   "len",
   "<=",
   "0",
   "?",
   "0",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "Math",
   ".",
   "pow",
   "(",
   "2",
   ",",
   "53",
   ")",
   "-",
   "1",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-180",
  "nl_tokens": [
   "Display",
   "values",
   "in",
   "a",
   "table",
   "."
  ],
  "pl_tokens": [
   "function",
   "tablature",
   "(",
   "conf",
   ")",
   "{",
   "const",
   "{",
   "keys",
   "=",
   "[",
   "]",
   ",",
   "data",
   "=",
   "[",
   "]",
   ",",
   "headings",
   "=",
   "{",
   "}",
   ",",
   "replacements",
   "=",
   "{",
   "}",
   ",",
   "centerValues",
   "=",
   "[",
   "]",
   ",",
   "centerHeadings",
   "=",
   "[",
   "]",
   ",",
   "}",
   "=",
   "conf",
   "const",
   "[",
   "i",
   "]",
   "=",
   "data",
   "if",
   "(",
   "!",
   "i",
   ")",
   "return",
   "''",
   "const",
   "cv",
   "=",
   "makeBinaryHash",
   "(",
   "centerValues",
   ")",
   "const",
   "hv",
   "=",
   "makeBinaryHash",
   "(",
   "centerHeadings",
   ")",
   "const",
   "k",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "i",
   ")",
   ".",
   "reduce",
   "(",
   "(",
   "acc",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "const",
   "h",
   "=",
   "headings",
   "[",
   "key",
   "]",
   "return",
   "{",
   "...",
   "acc",
   ",",
   "[",
   "key",
   "]",
   ":",
   "h",
   "?",
   "h",
   ".",
   "length",
   ":",
   "key",
   ".",
   "length",
   ",",
   "// initialise with titles lengths",
   "}",
   "}",
   ",",
   "{",
   "}",
   ")",
   "const",
   "widths",
   "=",
   "data",
   ".",
   "reduce",
   "(",
   "(",
   "dac",
   ",",
   "d",
   ")",
   "=>",
   "{",
   "const",
   "res",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "d",
   ")",
   ".",
   "reduce",
   "(",
   "(",
   "acc",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "const",
   "maxLength",
   "=",
   "dac",
   "[",
   "key",
   "]",
   "const",
   "val",
   "=",
   "d",
   "[",
   "key",
   "]",
   "const",
   "r",
   "=",
   "getReplacement",
   "(",
   "replacements",
   ",",
   "key",
   ")",
   "const",
   "{",
   "length",
   "}",
   "=",
   "r",
   "(",
   "val",
   ")",
   "return",
   "{",
   "...",
   "acc",
   ",",
   "[",
   "key",
   "]",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   ",",
   "maxLength",
   ")",
   ",",
   "}",
   "}",
   ",",
   "{",
   "}",
   ")",
   "return",
   "res",
   "}",
   ",",
   "k",
   ")",
   "const",
   "kk",
   "=",
   "keys",
   ".",
   "reduce",
   "(",
   "(",
   "acc",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "const",
   "h",
   "=",
   "headings",
   "[",
   "key",
   "]",
   "return",
   "{",
   "...",
   "acc",
   ",",
   "[",
   "key",
   "]",
   ":",
   "h",
   "||",
   "key",
   ",",
   "}",
   "}",
   ",",
   "{",
   "}",
   ")",
   "const",
   "hr",
   "=",
   "keys",
   ".",
   "reduce",
   "(",
   "(",
   "acc",
   ",",
   "key",
   ")",
   "=>",
   "{",
   "return",
   "{",
   "...",
   "acc",
   ",",
   "[",
   "key",
   "]",
   ":",
   "heading",
   ",",
   "}",
   "}",
   ",",
   "{",
   "}",
   ")",
   "const",
   "hl",
   "=",
   "getLine",
   "(",
   "keys",
   ",",
   "kk",
   ",",
   "widths",
   ",",
   "hr",
   ",",
   "hv",
   ")",
   "const",
   "rl",
   "=",
   "data",
   ".",
   "map",
   "(",
   "(",
   "row",
   ")",
   "=>",
   "{",
   "const",
   "line",
   "=",
   "getLine",
   "(",
   "keys",
   ",",
   "row",
   ",",
   "widths",
   ",",
   "replacements",
   ",",
   "cv",
   ")",
   "return",
   "line",
   "}",
   ")",
   "return",
   "[",
   "hl",
   ",",
   "...",
   "rl",
   ",",
   "]",
   ".",
   "join",
   "(",
   "'\\n'",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-181",
  "nl_tokens": [
   "Tell",
   "the",
   "classifier",
   "that",
   "the",
   "given",
   "sample",
   "belongs",
   "to",
   "the",
   "given",
   "classes",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "sample",
   ",",
   "classes",
   ")",
   "{",
   "var",
   "classesSet",
   "=",
   "hash",
   ".",
   "normalized",
   "(",
   "classes",
   ")",
   ";",
   "var",
   "ranks",
   "=",
   "this",
   ".",
   "predict",
   "(",
   "sample",
   ",",
   "/*averaging=*/",
   "false",
   ")",
   ";",
   "// pairs of [class,score] sorted by decreasing score",
   "// find the lowest ranked relevant label r:",
   "var",
   "r",
   "=",
   "0",
   "var",
   "r_score",
   "=",
   "Number",
   ".",
   "MAX_VALUE",
   "ranks",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "labelAndScore",
   ")",
   "{",
   "var",
   "label",
   "=",
   "labelAndScore",
   "[",
   "0",
   "]",
   ";",
   "var",
   "score",
   "=",
   "labelAndScore",
   "[",
   "1",
   "]",
   ";",
   "if",
   "(",
   "(",
   "label",
   "in",
   "classesSet",
   ")",
   "&&",
   "score",
   "<",
   "r_score",
   ")",
   "{",
   "r",
   "=",
   "label",
   "r_score",
   "=",
   "score",
   "}",
   "}",
   ")",
   ";",
   "// find the highest ranked irrelevant label s",
   "var",
   "s",
   "=",
   "0",
   "var",
   "s_score",
   "=",
   "-",
   "Number",
   ".",
   "MAX_VALUE",
   "ranks",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "ranks",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "labelAndScore",
   ")",
   "{",
   "var",
   "label",
   "=",
   "labelAndScore",
   "[",
   "0",
   "]",
   ";",
   "var",
   "score",
   "=",
   "labelAndScore",
   "[",
   "1",
   "]",
   ";",
   "if",
   "(",
   "!",
   "(",
   "label",
   "in",
   "classesSet",
   ")",
   "&&",
   "score",
   ">",
   "s_score",
   ")",
   "{",
   "s",
   "=",
   "label",
   ";",
   "s_score",
   "=",
   "score",
   ";",
   "}",
   "}",
   ")",
   ";",
   "var",
   "loss",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "1.0",
   "-",
   "r_score",
   ",",
   "0.0",
   ")",
   "+",
   "Math",
   ".",
   "max",
   "(",
   "1.0",
   "+",
   "s_score",
   ",",
   "0.0",
   ")",
   ";",
   "if",
   "(",
   "loss",
   ">",
   "0",
   ")",
   "{",
   "var",
   "sample_norm2",
   "=",
   "hash",
   ".",
   "sum_of_square_values",
   "(",
   "sample",
   ")",
   ";",
   "var",
   "tau",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "Constant",
   ",",
   "loss",
   "/",
   "sample_norm2",
   ")",
   ";",
   "if",
   "(",
   "r_score",
   "<",
   "Number",
   ".",
   "MAX_VALUE",
   ")",
   "hash",
   ".",
   "addtimes",
   "(",
   "this",
   ".",
   "weights",
   "[",
   "r",
   "]",
   ",",
   "tau",
   ",",
   "sample",
   ")",
   ";",
   "// weights[r] += tau*sample",
   "if",
   "(",
   "s_score",
   ">",
   "-",
   "Number",
   ".",
   "MAX_VALUE",
   ")",
   "hash",
   ".",
   "addtimes",
   "(",
   "this",
   ".",
   "weights",
   "[",
   "s",
   "]",
   ",",
   "-",
   "tau",
   ",",
   "sample",
   ")",
   ";",
   "// weights[s] -= tau*sample",
   "}",
   "// this.weights_sum = (this.weights + this.weights_sum);",
   "for",
   "(",
   "category",
   "in",
   "this",
   ".",
   "weights",
   ")",
   "hash",
   ".",
   "add",
   "(",
   "this",
   ".",
   "weights_sum",
   "[",
   "category",
   "]",
   ",",
   "this",
   ".",
   "weights",
   "[",
   "category",
   "]",
   ")",
   ";",
   "hash",
   ".",
   "add",
   "(",
   "this",
   ".",
   "seenFeatures",
   ",",
   "sample",
   ")",
   ";",
   "this",
   ".",
   "num_iterations",
   "+=",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-182",
  "nl_tokens": [
   "Natural",
   "sort",
   "-",
   "https",
   ":",
   "//",
   "github",
   ".",
   "com",
   "/",
   "overset",
   "/",
   "javascript",
   "-",
   "natural",
   "-",
   "sort",
   "(",
   "date",
   "sorting",
   "removed",
   ")",
   "this",
   "function",
   "will",
   "only",
   "accept",
   "strings",
   "or",
   "you",
   "ll",
   "see",
   "TypeError",
   ":",
   "undefined",
   "is",
   "not",
   "a",
   "function",
   "I",
   "could",
   "add",
   "a",
   "=",
   "a",
   ".",
   "toString",
   "()",
   ";",
   "b",
   "=",
   "b",
   ".",
   "toString",
   "()",
   ";",
   "but",
   "it",
   "ll",
   "slow",
   "down",
   "the",
   "sort",
   "overall"
  ],
  "pl_tokens": [
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "if",
   "(",
   "a",
   "===",
   "b",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "var",
   "aNum",
   ",",
   "bNum",
   ",",
   "aFloat",
   ",",
   "bFloat",
   ",",
   "indx",
   ",",
   "<mask>",
   ",",
   "regex",
   "=",
   "ts",
   ".",
   "regex",
   ";",
   "// first try and sort Hex codes",
   "if",
   "(",
   "regex",
   ".",
   "hex",
   ".",
   "test",
   "(",
   "b",
   ")",
   ")",
   "{",
   "aNum",
   "=",
   "parseInt",
   "(",
   "a",
   ".",
   "match",
   "(",
   "regex",
   ".",
   "hex",
   ")",
   ",",
   "16",
   ")",
   ";",
   "bNum",
   "=",
   "parseInt",
   "(",
   "b",
   ".",
   "match",
   "(",
   "regex",
   ".",
   "hex",
   ")",
   ",",
   "16",
   ")",
   ";",
   "if",
   "(",
   "aNum",
   "<",
   "bNum",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "if",
   "(",
   "aNum",
   ">",
   "bNum",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "}",
   "// chunk/tokenize",
   "aNum",
   "=",
   "a",
   ".",
   "replace",
   "(",
   "regex",
   ".",
   "chunk",
   ",",
   "'\\\\0$1\\\\0'",
   ")",
   ".",
   "replace",
   "(",
   "regex",
   ".",
   "chunks",
   ",",
   "''",
   ")",
   ".",
   "split",
   "(",
   "'\\\\0'",
   ")",
   ";",
   "bNum",
   "=",
   "b",
   ".",
   "replace",
   "(",
   "regex",
   ".",
   "chunk",
   ",",
   "'\\\\0$1\\\\0'",
   ")",
   ".",
   "replace",
   "(",
   "regex",
   ".",
   "chunks",
   ",",
   "''",
   ")",
   ".",
   "split",
   "(",
   "'\\\\0'",
   ")",
   ";",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "aNum",
   ".",
   "length",
   ",",
   "bNum",
   ".",
   "length",
   ")",
   ";",
   "// natural sorting through split numeric strings and default strings",
   "for",
   "(",
   "indx",
   "=",
   "0",
   ";",
   "indx",
   "<",
   "max",
   ";",
   "indx",
   "++",
   ")",
   "{",
   "// find floats not starting with '0', string or 0 if not defined",
   "aFloat",
   "=",
   "isNaN",
   "(",
   "aNum",
   "[",
   "indx",
   "]",
   ")",
   "?",
   "aNum",
   "[",
   "indx",
   "]",
   "||",
   "0",
   ":",
   "parseFloat",
   "(",
   "aNum",
   "[",
   "indx",
   "]",
   ")",
   "||",
   "0",
   ";",
   "bFloat",
   "=",
   "isNaN",
   "(",
   "bNum",
   "[",
   "indx",
   "]",
   ")",
   "?",
   "bNum",
   "[",
   "indx",
   "]",
   "||",
   "0",
   ":",
   "parseFloat",
   "(",
   "bNum",
   "[",
   "indx",
   "]",
   ")",
   "||",
   "0",
   ";",
   "// handle numeric vs string comparison - number < string - (Kyle Adams)",
   "if",
   "(",
   "isNaN",
   "(",
   "aFloat",
   ")",
   "!==",
   "isNaN",
   "(",
   "bFloat",
   ")",
   ")",
   "{",
   "return",
   "isNaN",
   "(",
   "aFloat",
   ")",
   "?",
   "1",
   ":",
   "-",
   "1",
   ";",
   "}",
   "// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'",
   "if",
   "(",
   "typeof",
   "aFloat",
   "!==",
   "typeof",
   "bFloat",
   ")",
   "{",
   "aFloat",
   "+=",
   "''",
   ";",
   "bFloat",
   "+=",
   "''",
   ";",
   "}",
   "if",
   "(",
   "aFloat",
   "<",
   "bFloat",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "if",
   "(",
   "aFloat",
   ">",
   "bFloat",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-183",
  "nl_tokens": [
   "Checks",
   "whether",
   "or",
   "not",
   "the",
   "passed",
   "number",
   "is",
   "within",
   "a",
   "desired",
   "range",
   ".",
   "If",
   "the",
   "number",
   "is",
   "already",
   "within",
   "the",
   "range",
   "it",
   "is",
   "returned",
   "otherwise",
   "the",
   "min",
   "or",
   "max",
   "value",
   "is",
   "returned",
   "depending",
   "on",
   "which",
   "side",
   "of",
   "the",
   "range",
   "is",
   "exceeded",
   ".",
   "Note",
   "that",
   "this",
   "method",
   "returns",
   "the",
   "constrained",
   "value",
   "but",
   "does",
   "not",
   "change",
   "the",
   "current",
   "number",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "number",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "number",
   "=",
   "parseFloat",
   "(",
   "number",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isNaN",
   "(",
   "min",
   ")",
   ")",
   "{",
   "number",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "number",
   ",",
   "min",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isNaN",
   "(",
   "max",
   ")",
   ")",
   "{",
   "number",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "number",
   ",",
   "max",
   ")",
   ";",
   "}",
   "return",
   "number",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-184",
  "nl_tokens": [
   "Internal",
   "function",
   "to",
   "execute",
   "the",
   "next",
   "pending",
   "queue",
   "item",
   "This",
   "is",
   "usually",
   "called",
   "after",
   "the",
   "completion",
   "of",
   "every",
   "asyncChainable",
   ".",
   "run",
   "call"
  ],
  "pl_tokens": [
   "function",
   "_execute",
   "(",
   "err",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   ";",
   "if",
   "(",
   "err",
   ")",
   "return",
   "this",
   ".",
   "_finalize",
   "(",
   "err",
   ")",
   ";",
   "// An error has been raised - stop exec and call finalize now",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_executing",
   ")",
   "{",
   "// Never before run this object - run fire('start') and defer until it finishes",
   "self",
   ".",
   "_executing",
   "=",
   "true",
   ";",
   "return",
   "self",
   ".",
   "fire",
   ".",
   "call",
   "(",
   "self",
   ",",
   "'start'",
   ",",
   "self",
   ".",
   "_execute",
   ".",
   "bind",
   "(",
   "self",
   ")",
   ")",
   ";",
   "}",
   "do",
   "{",
   "var",
   "redo",
   "=",
   "false",
   ";",
   "if",
   "(",
   "self",
   ".",
   "_structPointer",
   ">=",
   "self",
   ".",
   "_struct",
   ".",
   "length",
   ")",
   "return",
   "this",
   ".",
   "_finalize",
   "(",
   "err",
   ")",
   ";",
   "// Nothing more to execute in struct",
   "self",
   ".",
   "_deferCheck",
   "(",
   ")",
   ";",
   "// Kick off any pending deferred items",
   "var",
   "currentExec",
   "=",
   "self",
   ".",
   "_struct",
   "[",
   "self",
   ".",
   "_structPointer",
   "]",
   ";",
   "// Sanity checks {{{",
   "if",
   "(",
   "!",
   "currentExec",
   ".",
   "type",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'No type is specified for async-chainable structure at offset '",
   "+",
   "self",
   ".",
   "_structPointer",
   ")",
   ";",
   "return",
   "self",
   ";",
   "}",
   "// }}}",
   "self",
   ".",
   "_structPointer",
   "++",
   ";",
   "// Skip step when function supports skipping if the argument is empty {{{",
   "if",
   "(",
   "[",
   "'parallelArray'",
   ",",
   "'parallelObject'",
   ",",
   "'forEachArray'",
   ",",
   "'forEachObject'",
   ",",
   "'seriesArray'",
   ",",
   "'seriesObject'",
   ",",
   "'deferArray'",
   ",",
   "'deferObject'",
   ",",
   "'set'",
   "]",
   ".",
   "indexOf",
   "(",
   "currentExec",
   ".",
   "type",
   ")",
   ">",
   "-",
   "1",
   "&&",
   "(",
   "!",
   "currentExec",
   ".",
   "payload",
   "||",
   "// Not set OR",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "currentExec",
   ".",
   "payload",
   ",",
   "'array'",
   ")",
   "&&",
   "!",
   "currentExec",
   ".",
   "payload",
   ".",
   "length",
   ")",
   "||",
   "// An empty array",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "currentExec",
   ".",
   "payload",
   ",",
   "'object'",
   ")",
   "&&",
   "!",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "length",
   ")",
   "// An empty object",
   ")",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "continue",
   ";",
   "}",
   "// }}}",
   "switch",
   "(",
   "currentExec",
   ".",
   "type",
   ")",
   "{",
   "case",
   "'forEachRange'",
   ":",
   "var",
   "iterArray",
   "=",
   "Array",
   "(",
   "currentExec",
   ".",
   "<mask>",
   "-",
   "currentExec",
   ".",
   "min",
   "+",
   "1",
   ")",
   ".",
   "fill",
   "(",
   "false",
   ")",
   ";",
   "self",
   ".",
   "runArray",
   "(",
   "iterArray",
   ".",
   "map",
   "(",
   "function",
   "(",
   "v",
   ",",
   "i",
   ")",
   "{",
   "var",
   "val",
   "=",
   "self",
   ".",
   "_context",
   ".",
   "_item",
   "=",
   "currentExec",
   ".",
   "min",
   "+",
   "i",
   ";",
   "var",
   "index",
   "=",
   "self",
   ".",
   "_context",
   ".",
   "_key",
   "=",
   "i",
   ";",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "if",
   "(",
   "currentExec",
   ".",
   "translate",
   ")",
   "val",
   "=",
   "currentExec",
   ".",
   "translate",
   "(",
   "val",
   ",",
   "index",
   ",",
   "iterArray",
   ".",
   "length",
   ")",
   ";",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "callback",
   ",",
   "next",
   ",",
   "[",
   "val",
   ",",
   "index",
   ",",
   "iterArray",
   ".",
   "length",
   "]",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'forEachArray'",
   ":",
   "self",
   ".",
   "runArray",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "map",
   "(",
   "function",
   "(",
   "item",
   ",",
   "iter",
   ")",
   "{",
   "self",
   ".",
   "_context",
   ".",
   "_item",
   "=",
   "item",
   ";",
   "self",
   ".",
   "_context",
   ".",
   "_key",
   "=",
   "iter",
   ";",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "callback",
   ",",
   "next",
   ",",
   "[",
   "item",
   ",",
   "iter",
   "]",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'forEachObject'",
   ":",
   "self",
   ".",
   "runArray",
   "(",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "self",
   ".",
   "_context",
   ".",
   "_item",
   "=",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ";",
   "self",
   ".",
   "_context",
   ".",
   "_key",
   "=",
   "key",
   ";",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "callback",
   ",",
   "function",
   "(",
   "err",
   ",",
   "value",
   ")",
   "{",
   "self",
   ".",
   "_set",
   "(",
   "key",
   ",",
   "value",
   ")",
   ";",
   "// Allocate returned value to context",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   ",",
   "[",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ",",
   "key",
   "]",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'forEachLateBound'",
   ":",
   "if",
   "(",
   "!",
   "currentExec",
   ".",
   "payload",
   "||",
   "!",
   "currentExec",
   ".",
   "payload",
   ".",
   "length",
   ")",
   "{",
   "// Payload is blank",
   "// Goto next chain",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "var",
   "resolvedPayload",
   "=",
   "self",
   ".",
   "getPath",
   "(",
   "self",
   ".",
   "_context",
   ",",
   "currentExec",
   ".",
   "payload",
   ")",
   ";",
   "if",
   "(",
   "!",
   "resolvedPayload",
   ")",
   "{",
   "// Resolved payload is blank",
   "// Goto next chain",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "// Replace own exec array with actual type of payload now we know what it is {{{",
   "if",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "resolvedPayload",
   ",",
   "'array'",
   ")",
   ")",
   "{",
   "currentExec",
   ".",
   "type",
   "=",
   "'forEachArray'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "resolvedPayload",
   ",",
   "'object'",
   ")",
   ")",
   "{",
   "currentExec",
   ".",
   "type",
   "=",
   "'forEachObject'",
   ";",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Cannot perform forEach over unknown object type: '",
   "+",
   "argy",
   ".",
   "getType",
   "(",
   "resolvedPayload",
   ")",
   ")",
   ";",
   "}",
   "currentExec",
   ".",
   "payload",
   "=",
   "resolvedPayload",
   ";",
   "self",
   ".",
   "_structPointer",
   "--",
   ";",
   "// Force re-eval of this chain item now its been replace with its real (late-bound) type",
   "redo",
   "=",
   "true",
   ";",
   "// }}}",
   "break",
   ";",
   "case",
   "'mapArray'",
   ":",
   "var",
   "output",
   "=",
   "new",
   "Array",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "length",
   ")",
   ";",
   "self",
   ".",
   "runArray",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "map",
   "(",
   "function",
   "(",
   "item",
   ",",
   "iter",
   ")",
   "{",
   "self",
   ".",
   "_context",
   ".",
   "_item",
   "=",
   "item",
   ";",
   "self",
   ".",
   "_context",
   ".",
   "_key",
   "=",
   "iter",
   ";",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "callback",
   ",",
   "function",
   "(",
   "err",
   ",",
   "value",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "return",
   "next",
   "(",
   "err",
   ")",
   ";",
   "output",
   "[",
   "iter",
   "]",
   "=",
   "value",
   ";",
   "next",
   "(",
   ")",
   ";",
   "}",
   ",",
   "[",
   "item",
   ",",
   "iter",
   "]",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_set",
   "(",
   "currentExec",
   ".",
   "output",
   ",",
   "output",
   ")",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'mapObject'",
   ":",
   "var",
   "output",
   "=",
   "{",
   "}",
   ";",
   "self",
   ".",
   "runArray",
   "(",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "self",
   ".",
   "_context",
   ".",
   "_item",
   "=",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ";",
   "self",
   ".",
   "_context",
   ".",
   "_key",
   "=",
   "key",
   ";",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "callback",
   ",",
   "function",
   "(",
   "err",
   ",",
   "value",
   ",",
   "outputKey",
   ")",
   "{",
   "output",
   "[",
   "outputKey",
   "||",
   "key",
   "]",
   "=",
   "value",
   ";",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   ",",
   "[",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ",",
   "key",
   "]",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_set",
   "(",
   "currentExec",
   ".",
   "output",
   ",",
   "output",
   ")",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'mapLateBound'",
   ":",
   "if",
   "(",
   "!",
   "currentExec",
   ".",
   "payload",
   "||",
   "!",
   "currentExec",
   ".",
   "payload",
   ".",
   "length",
   ")",
   "{",
   "// Payload is blank",
   "// Goto next chain",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "var",
   "resolvedPayload",
   "=",
   "self",
   ".",
   "getPath",
   "(",
   "self",
   ".",
   "_context",
   ",",
   "currentExec",
   ".",
   "payload",
   ")",
   ";",
   "if",
   "(",
   "!",
   "resolvedPayload",
   ")",
   "{",
   "// Resolved payload is blank",
   "// Goto next chain",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "// Replace own exec array with actual type of payload now we know what it is {{{",
   "if",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "resolvedPayload",
   ",",
   "'array'",
   ")",
   ")",
   "{",
   "currentExec",
   ".",
   "type",
   "=",
   "'mapArray'",
   ";",
   "}",
   "else",
   "if",
   "(",
   "argy",
   ".",
   "isType",
   "(",
   "resolvedPayload",
   ",",
   "'object'",
   ")",
   ")",
   "{",
   "currentExec",
   ".",
   "type",
   "=",
   "'mapObject'",
   ";",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Cannot perform map over unknown object type: '",
   "+",
   "argy",
   ".",
   "getType",
   "(",
   "resolvedPayload",
   ")",
   ")",
   ";",
   "}",
   "currentExec",
   ".",
   "payload",
   "=",
   "resolvedPayload",
   ";",
   "self",
   ".",
   "_structPointer",
   "--",
   ";",
   "// Force re-eval of this chain item now its been replace with its real (late-bound) type",
   "redo",
   "=",
   "true",
   ";",
   "// }}}",
   "break",
   ";",
   "case",
   "'parallelArray'",
   ":",
   "case",
   "'seriesArray'",
   ":",
   "self",
   ".",
   "runArray",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "map",
   "(",
   "function",
   "(",
   "task",
   ")",
   "{",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "task",
   ",",
   "next",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "currentExec",
   ".",
   "type",
   "==",
   "'parallelArray'",
   "?",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ":",
   "1",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'seriesObject'",
   ":",
   "case",
   "'parallelObject'",
   ":",
   "self",
   ".",
   "runArray",
   "(",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ",",
   "function",
   "(",
   "err",
   ",",
   "value",
   ")",
   "{",
   "self",
   ".",
   "_set",
   "(",
   "key",
   ",",
   "value",
   ")",
   ";",
   "// Allocate returned value to context",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "currentExec",
   ".",
   "type",
   "==",
   "'parallelObject'",
   "?",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ":",
   "1",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'race'",
   ":",
   "var",
   "hasResult",
   "=",
   "false",
   ";",
   "var",
   "hasError",
   "=",
   "false",
   ";",
   "self",
   ".",
   "runArray",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "map",
   "(",
   "function",
   "(",
   "task",
   ")",
   "{",
   "return",
   "function",
   "(",
   "next",
   ")",
   "{",
   "run",
   "(",
   "self",
   ".",
   "_options",
   ".",
   "context",
   ",",
   "task",
   ",",
   "function",
   "(",
   "err",
   ",",
   "taskResult",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "hasError",
   "=",
   "true",
   "next",
   "(",
   "err",
   ",",
   "taskResult",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "!",
   "hasResult",
   "&&",
   "!",
   "hasError",
   "&&",
   "taskResult",
   "!==",
   "null",
   "&&",
   "typeof",
   "taskResult",
   "!==",
   "'undefined'",
   ")",
   "{",
   "self",
   ".",
   "_set",
   "(",
   "currentExec",
   ".",
   "id",
   ",",
   "taskResult",
   ")",
   ";",
   "// Allocate returned value to context",
   "hasResult",
   "=",
   "true",
   ";",
   "next",
   "(",
   "'!RACEDONE!'",
   ",",
   "taskResult",
   ")",
   ";",
   "// Force an error to stop the run() function",
   "}",
   "else",
   "{",
   "next",
   "(",
   "err",
   ",",
   "taskResult",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ";",
   "}",
   ")",
   ",",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   ",",
   "function",
   "(",
   "err",
   ",",
   "val",
   ")",
   "{",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "// Override race finish error as it was just to stop the race and not a real one",
   "if",
   "(",
   "err",
   "==",
   "'!RACEDONE!'",
   ")",
   "return",
   "self",
   ".",
   "_execute",
   "(",
   ")",
   ";",
   "self",
   ".",
   "_execute",
   "(",
   "err",
   ")",
   ";",
   "}",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'deferArray'",
   ":",
   "currentExec",
   ".",
   "payload",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "task",
   ")",
   "{",
   "self",
   ".",
   "_deferAdd",
   "(",
   "null",
   ",",
   "task",
   ",",
   "currentExec",
   ")",
   ";",
   "}",
   ")",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "case",
   "'deferObject'",
   ":",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "self",
   ".",
   "_deferAdd",
   "(",
   "key",
   ",",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ",",
   "currentExec",
   ")",
   ";",
   "}",
   ")",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "break",
   ";",
   "case",
   "'await'",
   ":",
   "// Await can operate in two modes, either payload=[] (examine all) else (examine specific keys)",
   "if",
   "(",
   "!",
   "currentExec",
   ".",
   "payload",
   ".",
   "length",
   ")",
   "{",
   "// Check all tasks are complete",
   "if",
   "(",
   "self",
   ".",
   "_struct",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "self",
   ".",
   "_structPointer",
   "-",
   "1",
   ")",
   ".",
   "every",
   "(",
   "function",
   "(",
   "stage",
   ")",
   "{",
   "// Examine all items UP TO self one and check they are complete",
   "return",
   "stage",
   ".",
   "completed",
   ";",
   "}",
   ")",
   ")",
   "{",
   "// All tasks up to self point are marked as completed",
   "if",
   "(",
   "_deferTimeoutHandle",
   ")",
   "clearTimeout",
   "(",
   "_deferTimeoutHandle",
   ")",
   ";",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "self",
   ".",
   "_structPointer",
   "--",
   ";",
   "// At least one task is outstanding - rewind to self stage so we repeat on next resolution",
   "}",
   "}",
   "else",
   "{",
   "// Check certain tasks are complete by key",
   "if",
   "(",
   "currentExec",
   ".",
   "payload",
   ".",
   "every",
   "(",
   "function",
   "(",
   "dep",
   ")",
   "{",
   "// Examine all named dependencies",
   "return",
   "!",
   "!",
   "self",
   ".",
   "_context",
   "[",
   "dep",
   "]",
   ";",
   "}",
   ")",
   ")",
   "{",
   "// All are present",
   "if",
   "(",
   "_deferTimeoutHandle",
   ")",
   "clearTimeout",
   "(",
   "_deferTimeoutHandle",
   ")",
   ";",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "self",
   ".",
   "_structPointer",
   "--",
   ";",
   "// At least one dependency is outstanding - rewind to self stage so we repeat on next resolution",
   "}",
   "}",
   "break",
   ";",
   "case",
   "'limit'",
   ":",
   "// Set the options.limit variable",
   "self",
   ".",
   "_options",
   ".",
   "limit",
   "=",
   "currentExec",
   ".",
   "payload",
   ";",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "// Move on to next action",
   "break",
   ";",
   "case",
   "'timeout'",
   ":",
   "// Set the timeout function or its timeout value",
   "if",
   "(",
   "currentExec",
   ".",
   "delay",
   "===",
   "false",
   ")",
   "{",
   "// Disable",
   "self",
   ".",
   "_options",
   ".",
   "timeout",
   "=",
   "false",
   ";",
   "}",
   "else",
   "{",
   "// Set the callback if one was passed",
   "if",
   "(",
   "currentExec",
   ".",
   "callback",
   ")",
   "self",
   ".",
   "_options",
   ".",
   "timeoutHandler",
   "=",
   "currentExec",
   ".",
   "callback",
   ";",
   "// Set the delay if one was passed",
   "if",
   "(",
   "currentExec",
   ".",
   "delay",
   ")",
   "self",
   ".",
   "_options",
   ".",
   "timeout",
   "=",
   "currentExec",
   ".",
   "delay",
   ";",
   "}",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "// Move to next action",
   "break",
   ";",
   "case",
   "'context'",
   ":",
   "// Change the self._options.context object",
   "self",
   ".",
   "_options",
   ".",
   "context",
   "=",
   "currentExec",
   ".",
   "payload",
   "?",
   "currentExec",
   ".",
   "payload",
   ":",
   "self",
   ".",
   "_context",
   ";",
   "// Set context (if null use internal context)",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "// Move on to next action",
   "break",
   ";",
   "case",
   "'set'",
   ":",
   "// Set a hash of variables within context",
   "Object",
   ".",
   "keys",
   "(",
   "currentExec",
   ".",
   "payload",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "self",
   ".",
   "_set",
   "(",
   "key",
   ",",
   "currentExec",
   ".",
   "payload",
   "[",
   "key",
   "]",
   ")",
   ";",
   "}",
   ")",
   ";",
   "currentExec",
   ".",
   "completed",
   "=",
   "true",
   ";",
   "redo",
   "=",
   "true",
   ";",
   "// Move on to next action",
   "break",
   ";",
   "case",
   "'end'",
   ":",
   "// self should ALWAYS be the last item in the structure and indicates the final function call",
   "this",
   ".",
   "_finalize",
   "(",
   ")",
   ";",
   "break",
   ";",
   "default",
   ":",
   "if",
   "(",
   "this",
   ".",
   "_plugins",
   "[",
   "currentExec",
   ".",
   "type",
   "]",
   ")",
   "{",
   "// Is there a plugin that should manage this?",
   "this",
   ".",
   "_plugins",
   "[",
   "currentExec",
   ".",
   "type",
   "]",
   ".",
   "call",
   "(",
   "this",
   ",",
   "currentExec",
   ")",
   ";",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Unknown async-chainable exec type: '",
   "+",
   "currentExec",
   ".",
   "type",
   ")",
   ";",
   "}",
   "return",
   ";",
   "}",
   "}",
   "while",
   "(",
   "redo",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-185",
  "nl_tokens": [
   "each"
  ],
  "pl_tokens": [
   "function",
   "each",
   "(",
   "array",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "index",
   "=",
   "0",
   ",",
   "<mask>",
   "=",
   "array",
   ".",
   "length",
   ";",
   "if",
   "(",
   "!",
   "array",
   "||",
   "!",
   "max",
   ")",
   "{",
   "return",
   ";",
   "}",
   "while",
   "(",
   "index",
   "<",
   "max",
   ")",
   "{",
   "if",
   "(",
   "callback",
   "(",
   "array",
   "[",
   "index",
   "]",
   ",",
   "index",
   ")",
   "===",
   "false",
   ")",
   "{",
   "return",
   ";",
   "}",
   "index",
   "+=",
   "1",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-186",
  "nl_tokens": [
   "Repeat",
   "the",
   "given",
   "string",
   "the",
   "specified",
   "number",
   "of",
   "times",
   "."
  ],
  "pl_tokens": [
   "function",
   "repeat",
   "(",
   "str",
   ",",
   "num",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "str",
   "!==",
   "'string'",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'repeat-string expects a string.'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "num",
   "===",
   "1",
   ")",
   "return",
   "str",
   ";",
   "if",
   "(",
   "num",
   "===",
   "2",
   ")",
   "return",
   "str",
   "+",
   "str",
   ";",
   "var",
   "<mask>",
   "=",
   "str",
   ".",
   "length",
   "*",
   "num",
   ";",
   "if",
   "(",
   "cache",
   "!==",
   "str",
   "||",
   "typeof",
   "cache",
   "===",
   "'undefined'",
   ")",
   "{",
   "cache",
   "=",
   "str",
   ";",
   "res",
   "=",
   "''",
   ";",
   "}",
   "while",
   "(",
   "max",
   ">",
   "res",
   ".",
   "length",
   "&&",
   "num",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "num",
   "&",
   "1",
   ")",
   "{",
   "res",
   "+=",
   "str",
   ";",
   "}",
   "num",
   ">>=",
   "1",
   ";",
   "if",
   "(",
   "!",
   "num",
   ")",
   "break",
   ";",
   "str",
   "+=",
   "str",
   ";",
   "}",
   "return",
   "res",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-187",
  "nl_tokens": [
   "return",
   "the",
   "dissimilarity",
   "between",
   "two",
   "individual",
   "transit",
   "segments",
   "(",
   "each",
   "with",
   "only",
   "a",
   "single",
   "pattern",
   "not",
   "yet",
   "merged",
   ")"
  ],
  "pl_tokens": [
   "function",
   "segmentDissimilarity",
   "(",
   "s1",
   ":",
   "Segment",
   ",",
   "s2",
   ":",
   "Segment",
   ",",
   "{",
   "patterns",
   ",",
   "stops",
   "}",
   ":",
   "{",
   "patterns",
   ":",
   "Array",
   "<",
   "Pattern",
   ">",
   ",",
   "stops",
   ":",
   "Array",
   "<",
   "Stop",
   ">",
   "}",
   ")",
   ":",
   "number",
   "{",
   "const",
   "pat1",
   "=",
   "patterns",
   ".",
   "find",
   "(",
   "(",
   "p",
   ")",
   "=>",
   "p",
   ".",
   "pattern_id",
   "===",
   "s1",
   ".",
   "pattern_id",
   ")",
   "const",
   "pat2",
   "=",
   "patterns",
   ".",
   "find",
   "(",
   "(",
   "p",
   ")",
   "=>",
   "p",
   ".",
   "pattern_id",
   "===",
   "s2",
   ".",
   "pattern_id",
   ")",
   "if",
   "(",
   "!",
   "pat1",
   "||",
   "!",
   "pat2",
   ")",
   "return",
   "Infinity",
   "const",
   "s1f",
   "=",
   "s1",
   ".",
   "from_stop_index",
   "const",
   "s1t",
   "=",
   "s1",
   ".",
   "to_stop_index",
   "const",
   "s2f",
   "=",
   "s2",
   ".",
   "from_stop_index",
   "const",
   "s2t",
   "=",
   "s2",
   ".",
   "to_stop_index",
   "if",
   "(",
   "s1f",
   "==",
   "null",
   "||",
   "s1t",
   "==",
   "null",
   "||",
   "s2f",
   "==",
   "null",
   "||",
   "s2t",
   "==",
   "null",
   ")",
   "return",
   "Infinity",
   "function",
   "findStop",
   "(",
   "id",
   ":",
   "string",
   ")",
   ":",
   "?",
   "Stop",
   "{",
   "return",
   "stops",
   ".",
   "find",
   "(",
   "(",
   "stop",
   ")",
   "=>",
   "stop",
   ".",
   "stop_id",
   "===",
   "id",
   ")",
   "}",
   "const",
   "from1",
   "=",
   "findStop",
   "(",
   "pat1",
   ".",
   "stops",
   "[",
   "s1f",
   "]",
   ".",
   "stop_id",
   ")",
   "const",
   "to1",
   "=",
   "findStop",
   "(",
   "pat1",
   ".",
   "stops",
   "[",
   "s1t",
   "]",
   ".",
   "stop_id",
   ")",
   "const",
   "from2",
   "=",
   "findStop",
   "(",
   "pat2",
   ".",
   "stops",
   "[",
   "s2f",
   "]",
   ".",
   "stop_id",
   ")",
   "const",
   "to2",
   "=",
   "findStop",
   "(",
   "pat2",
   ".",
   "stops",
   "[",
   "s2t",
   "]",
   ".",
   "stop_id",
   ")",
   "if",
   "(",
   "!",
   "from1",
   "||",
   "!",
   "from2",
   "||",
   "!",
   "to1",
   "||",
   "!",
   "to2",
   ")",
   "return",
   "Infinity",
   "const",
   "d1",
   "=",
   "stopDistance",
   "(",
   "from1",
   ",",
   "from2",
   ")",
   "const",
   "d2",
   "=",
   "stopDistance",
   "(",
   "to1",
   ",",
   "to2",
   ")",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "d1",
   ",",
   "d2",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-188",
  "nl_tokens": [
   "FUNCTION",
   ":",
   "cmin",
   "(",
   "arr",
   ")",
   "Computes",
   "the",
   "cumulative",
   "minimum",
   "of",
   "a",
   "numeric",
   "array",
   "."
  ],
  "pl_tokens": [
   "function",
   "cmin",
   "(",
   "arr",
   ")",
   "{",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "arr",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'cmin()::invalid input argument. Must provide an array.'",
   ")",
   ";",
   "}",
   "var",
   "len",
   "=",
   "arr",
   ".",
   "length",
   ",",
   "v",
   "=",
   "new",
   "Array",
   "(",
   "len",
   ")",
   ",",
   "<mask>",
   ";",
   "min",
   "=",
   "arr",
   "[",
   "0",
   "]",
   ";",
   "v",
   "[",
   "0",
   "]",
   "=",
   "min",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "arr",
   "[",
   "i",
   "]",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "arr",
   "[",
   "i",
   "]",
   ";",
   "}",
   "v",
   "[",
   "i",
   "]",
   "=",
   "min",
   ";",
   "}",
   "return",
   "v",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-189",
  "nl_tokens": [
   "Options",
   "for",
   "{",
   "@link",
   "TravisStatusQueryOptions",
   "}",
   "."
  ],
  "pl_tokens": [
   "function",
   "queryWithWait",
   "(",
   "query",
   ",",
   "valueIsPending",
   ",",
   "options",
   ")",
   "{",
   "const",
   "maxWaitMs",
   "=",
   "options",
   "&&",
   "options",
   ".",
   "wait",
   "?",
   "Number",
   "(",
   "options",
   ".",
   "wait",
   ")",
   ":",
   "0",
   ";",
   "if",
   "(",
   "Number",
   ".",
   "isNaN",
   "(",
   "maxWaitMs",
   ")",
   ")",
   "{",
   "return",
   "Promise",
   ".",
   "reject",
   "(",
   "new",
   "TypeError",
   "(",
   "'wait must be a number'",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "maxWaitMs",
   "<",
   "0",
   ")",
   "{",
   "return",
   "Promise",
   ".",
   "reject",
   "(",
   "new",
   "RangeError",
   "(",
   "'wait must be non-negative'",
   ")",
   ")",
   ";",
   "}",
   "const",
   "startMs",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ";",
   "// Note:  Divide by 2 so we can double unconditionally below",
   "let",
   "nextWaitMs",
   "=",
   "POLL_TIME_START_MS",
   "/",
   "2",
   ";",
   "function",
   "doQuery",
   "(",
   "cb",
   ")",
   "{",
   "query",
   ".",
   "get",
   "(",
   "cb",
   ")",
   ";",
   "}",
   "return",
   "new",
   "Promise",
   "(",
   "(",
   "resolve",
   ",",
   "reject",
   ")",
   "=>",
   "{",
   "function",
   "checkBuild",
   "(",
   "err",
   ",",
   "result",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "reject",
   "(",
   "err",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "maxWaitMs",
   ")",
   "{",
   "let",
   "isPending",
   ";",
   "try",
   "{",
   "isPending",
   "=",
   "valueIsPending",
   "(",
   "result",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "errPending",
   ")",
   "{",
   "reject",
   "(",
   "errPending",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "isPending",
   ")",
   "{",
   "const",
   "nowMs",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ";",
   "const",
   "totalWaitMs",
   "=",
   "nowMs",
   "-",
   "startMs",
   ";",
   "if",
   "(",
   "totalWaitMs",
   "<",
   "maxWaitMs",
   ")",
   "{",
   "nextWaitMs",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "nextWaitMs",
   "*",
   "2",
   ",",
   "POLL_TIME_MAX_MS",
   ",",
   "maxWaitMs",
   "-",
   "totalWaitMs",
   ")",
   ";",
   "setTimeout",
   "(",
   "doQuery",
   ",",
   "nextWaitMs",
   ",",
   "checkBuild",
   ")",
   ";",
   "return",
   ";",
   "}",
   "}",
   "}",
   "resolve",
   "(",
   "result",
   ")",
   ";",
   "}",
   "doQuery",
   "(",
   "checkBuild",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-190",
  "nl_tokens": [
   "Insert",
   "a",
   "jquery",
   "element",
   "at",
   "a",
   "specific",
   "position"
  ],
  "pl_tokens": [
   "function",
   "insertAt",
   "(",
   "parent",
   ",",
   "selector",
   ",",
   "index",
   ",",
   "element",
   ")",
   "{",
   "var",
   "lastIndex",
   "=",
   "parent",
   ".",
   "children",
   "(",
   "selector",
   ")",
   ".",
   "length",
   ";",
   "if",
   "(",
   "index",
   "<",
   "0",
   ")",
   "{",
   "index",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "lastIndex",
   "+",
   "1",
   "+",
   "index",
   ")",
   ";",
   "}",
   "parent",
   ".",
   "append",
   "(",
   "element",
   ")",
   ";",
   "if",
   "(",
   "index",
   "<",
   "lastIndex",
   ")",
   "{",
   "parent",
   ".",
   "children",
   "(",
   "selector",
   ")",
   ".",
   "eq",
   "(",
   "index",
   ")",
   ".",
   "before",
   "(",
   "parent",
   ".",
   "children",
   "(",
   "selector",
   ")",
   ".",
   "last",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-191",
  "nl_tokens": [
   "Update",
   "speed",
   "parameters"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "var",
   "timeSpan",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   "-",
   "this",
   ".",
   "_lastProgressCallback",
   ";",
   "if",
   "(",
   "!",
   "timeSpan",
   ")",
   "{",
   "return",
   ";",
   "}",
   "var",
   "smoothingFactor",
   "=",
   "this",
   ".",
   "flowObj",
   ".",
   "opts",
   ".",
   "speedSmoothingFactor",
   ";",
   "var",
   "uploaded",
   "=",
   "this",
   ".",
   "sizeUploaded",
   "(",
   ")",
   ";",
   "// Prevent negative upload speed after file upload resume",
   "this",
   ".",
   "currentSpeed",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "uploaded",
   "-",
   "this",
   ".",
   "_prevUploadedSize",
   ")",
   "/",
   "timeSpan",
   "*",
   "1000",
   ",",
   "0",
   ")",
   ";",
   "this",
   ".",
   "averageSpeed",
   "=",
   "smoothingFactor",
   "*",
   "this",
   ".",
   "currentSpeed",
   "+",
   "(",
   "1",
   "-",
   "smoothingFactor",
   ")",
   "*",
   "this",
   ".",
   "averageSpeed",
   ";",
   "this",
   ".",
   "_prevUploadedSize",
   "=",
   "uploaded",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-192",
  "nl_tokens": [
   "Allow",
   "the",
   "collection",
   "to",
   "be",
   "sorted",
   "by",
   "a",
   "custom",
   "view",
   "comparator"
  ],
  "pl_tokens": [
   "function",
   "(",
   "addedAt",
   ")",
   "{",
   "var",
   "viewComparator",
   "=",
   "this",
   ".",
   "getViewComparator",
   "(",
   ")",
   ";",
   "var",
   "models",
   "=",
   "this",
   ".",
   "collection",
   ".",
   "models",
   ";",
   "addedAt",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "addedAt",
   ",",
   "0",
   ")",
   ",",
   "models",
   ".",
   "length",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "viewComparator",
   ")",
   "{",
   "var",
   "addedModel",
   ";",
   "// Preserve `at` location, even for a sorted view",
   "if",
   "(",
   "addedAt",
   ")",
   "{",
   "addedModel",
   "=",
   "models",
   "[",
   "addedAt",
   "]",
   ";",
   "models",
   "=",
   "models",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "addedAt",
   ")",
   ".",
   "concat",
   "(",
   "models",
   ".",
   "slice",
   "(",
   "addedAt",
   "+",
   "1",
   ")",
   ")",
   ";",
   "}",
   "models",
   "=",
   "this",
   ".",
   "_sortModelsBy",
   "(",
   "models",
   ",",
   "viewComparator",
   ")",
   ";",
   "if",
   "(",
   "addedModel",
   ")",
   "{",
   "models",
   ".",
   "splice",
   "(",
   "addedAt",
   ",",
   "0",
   ",",
   "addedModel",
   ")",
   ";",
   "}",
   "}",
   "// Filter after sorting in case the filter uses the index",
   "if",
   "(",
   "this",
   ".",
   "getOption",
   "(",
   "'filter'",
   ")",
   ")",
   "{",
   "models",
   "=",
   "_",
   ".",
   "filter",
   "(",
   "models",
   ",",
   "function",
   "(",
   "model",
   ",",
   "index",
   ")",
   "{",
   "return",
   "this",
   ".",
   "_shouldAddChild",
   "(",
   "model",
   ",",
   "index",
   ")",
   ";",
   "}",
   ",",
   "this",
   ")",
   ";",
   "}",
   "return",
   "models",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-193",
  "nl_tokens": [
   "@protected"
  ],
  "pl_tokens": [
   "function",
   "(",
   "word",
   ",",
   "typeRules",
   ",",
   "irregular",
   ")",
   "{",
   "var",
   "inflection",
   ",",
   "substitution",
   ",",
   "result",
   ",",
   "lowercase",
   ",",
   "isBlank",
   ",",
   "isUncountable",
   ",",
   "isIrregular",
   ",",
   "isIrregularInverse",
   ",",
   "rule",
   ";",
   "isBlank",
   "=",
   "BLANK_REGEX",
   ".",
   "test",
   "(",
   "word",
   ")",
   ";",
   "if",
   "(",
   "isBlank",
   ")",
   "{",
   "return",
   "word",
   ";",
   "}",
   "lowercase",
   "=",
   "word",
   ".",
   "toLowerCase",
   "(",
   ")",
   ";",
   "isUncountable",
   "=",
   "this",
   ".",
   "rules",
   ".",
   "uncountable",
   "[",
   "lowercase",
   "]",
   ";",
   "if",
   "(",
   "isUncountable",
   ")",
   "{",
   "return",
   "word",
   ";",
   "}",
   "isIrregular",
   "=",
   "irregular",
   "&&",
   "irregular",
   "[",
   "lowercase",
   "]",
   ";",
   "if",
   "(",
   "isIrregular",
   ")",
   "{",
   "return",
   "isIrregular",
   ";",
   "}",
   "for",
   "(",
   "var",
   "i",
   "=",
   "typeRules",
   ".",
   "length",
   ",",
   "<mask>",
   "=",
   "0",
   ";",
   "i",
   ">",
   "min",
   ";",
   "i",
   "--",
   ")",
   "{",
   "inflection",
   "=",
   "typeRules",
   "[",
   "i",
   "-",
   "1",
   "]",
   ";",
   "rule",
   "=",
   "inflection",
   "[",
   "0",
   "]",
   ";",
   "if",
   "(",
   "rule",
   ".",
   "test",
   "(",
   "word",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "inflection",
   "=",
   "inflection",
   "||",
   "[",
   "]",
   ";",
   "rule",
   "=",
   "inflection",
   "[",
   "0",
   "]",
   ";",
   "substitution",
   "=",
   "inflection",
   "[",
   "1",
   "]",
   ";",
   "result",
   "=",
   "word",
   ".",
   "replace",
   "(",
   "rule",
   ",",
   "substitution",
   ")",
   ";",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-194",
  "nl_tokens": [
   "return",
   "the",
   "maximum",
   "width",
   "of",
   "a",
   "string",
   "in",
   "the",
   "left",
   "-",
   "hand",
   "column",
   "of",
   "a",
   "table",
   "."
  ],
  "pl_tokens": [
   "function",
   "maxWidth",
   "(",
   "table",
   ")",
   "{",
   "var",
   "width",
   "=",
   "0",
   "// table might be of the form [leftColumn],",
   "// or {key: leftColumn}}",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "table",
   ")",
   ")",
   "{",
   "table",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "table",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "key",
   ")",
   "{",
   "return",
   "[",
   "table",
   "[",
   "key",
   "]",
   "]",
   "}",
   ")",
   "}",
   "table",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "v",
   ")",
   "{",
   "width",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "v",
   "[",
   "0",
   "]",
   ".",
   "length",
   ",",
   "width",
   ")",
   "}",
   ")",
   "// if we've enabled 'wrap' we should limit",
   "// the max-width of the left-column.",
   "if",
   "(",
   "wrap",
   ")",
   "width",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "width",
   ",",
   "parseInt",
   "(",
   "wrap",
   "*",
   "0.5",
   ",",
   "10",
   ")",
   ")",
   "return",
   "width",
   "}"
  ]
 },
 {
  "idx": "maxmin-195",
  "nl_tokens": [
   "Function",
   "to",
   "retrieve",
   "the",
   "source",
   "code",
   "text",
   "being",
   "linted",
   ".",
   "Returns",
   "the",
   "complete",
   "source",
   "code",
   "if",
   "no",
   "node",
   "specified"
  ],
  "pl_tokens": [
   "function",
   "(",
   "node",
   ",",
   "beforeCount",
   ",",
   "afterCount",
   ")",
   "{",
   "let",
   "sourceCodeText",
   "=",
   "this",
   ".",
   "text",
   ";",
   "if",
   "(",
   "node",
   ")",
   "{",
   "if",
   "(",
   "astUtils",
   ".",
   "isASTNode",
   "(",
   "node",
   ")",
   ")",
   "{",
   "return",
   "this",
   ".",
   "text",
   ".",
   "slice",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "node",
   ".",
   "start",
   "-",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "beforeCount",
   ")",
   "||",
   "0",
   ")",
   ")",
   ",",
   "node",
   ".",
   "end",
   "+",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "afterCount",
   ")",
   "||",
   "0",
   ")",
   ")",
   ";",
   "}",
   "throw",
   "new",
   "Error",
   "(",
   "\"Invalid Node object\"",
   ")",
   ";",
   "}",
   "return",
   "sourceCodeText",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-196",
  "nl_tokens": [
   "/",
   "*",
   "Maps",
   "a",
   "value",
   "between",
   "[",
   "0",
   "--",
   "max",
   "]",
   "back",
   "into",
   "[",
   "minRange",
   "--",
   "maxRange",
   "]",
   ".",
   "The",
   "target",
   "range",
   "can",
   "be",
   "a",
   "floating",
   "point",
   "number",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "val",
   ",",
   "<mask>",
   ")",
   "{",
   "var",
   "$this",
   "=",
   "this",
   ";",
   "var",
   "rangeMin",
   "=",
   "$this",
   ".",
   "data",
   "(",
   "'range_min'",
   ")",
   ";",
   "var",
   "rangeMax",
   "=",
   "$this",
   ".",
   "data",
   "(",
   "'range_max'",
   ")",
   ";",
   "if",
   "(",
   "val",
   "<=",
   "0",
   ")",
   "{",
   "return",
   "rangeMin",
   ";",
   "}",
   "if",
   "(",
   "val",
   ">=",
   "max",
   ")",
   "{",
   "return",
   "rangeMax",
   ";",
   "}",
   "//",
   "// To do this we first map 0 -- max relatively withing [minRange",
   "// and maxRange], that is between [0 and (maxRange-minRange)].",
   "//",
   "var",
   "relativeMapping",
   "=",
   "(",
   "rangeMax",
   "-",
   "rangeMin",
   ")",
   "*",
   "val",
   "/",
   "max",
   ";",
   "// ... then we bring this to the actual value by adding rangeMin.",
   "return",
   "relativeMapping",
   "+",
   "rangeMin",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-197",
  "nl_tokens": [
   "Sets",
   "value",
   "back",
   "to",
   "the",
   "given",
   "min",
   "-",
   "max",
   "range",
   "if",
   "necessary"
  ],
  "pl_tokens": [
   "function",
   "forceInRange",
   "(",
   "value",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "if",
   "(",
   "value",
   ">",
   "max",
   ")",
   "{",
   "return",
   "max",
   ";",
   "}",
   "else",
   "if",
   "(",
   "value",
   "<",
   "min",
   ")",
   "{",
   "return",
   "min",
   ";",
   "}",
   "else",
   "{",
   "return",
   "value",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-198",
  "nl_tokens": [
   "get_tick_widths"
  ],
  "pl_tokens": [
   "function",
   "get_tick_widths",
   "(",
   "scaleOptions",
   ",",
   "font",
   ")",
   "{",
   "if",
   "(",
   "!",
   "scaleOptions",
   ")",
   "return",
   "{",
   "width",
   ":",
   "[",
   "]",
   ",",
   "<mask>",
   ":",
   "0",
   "}",
   ";",
   "var",
   "numTicks",
   "=",
   "scaleOptions",
   ".",
   "tickValues",
   ".",
   "length",
   "-",
   "1",
   ";",
   "var",
   "formattedTicks",
   "=",
   "reduce",
   "(",
   "scaleOptions",
   ".",
   "tickValues",
   ",",
   "function",
   "(",
   "prev",
   ",",
   "tick",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "i",
   "===",
   "numTicks",
   ")",
   "{",
   "return",
   "prev",
   ".",
   "concat",
   "(",
   "[",
   "scaleOptions",
   ".",
   "prefix",
   ",",
   "help",
   ".",
   "roundToPrecision",
   "(",
   "tick",
   ",",
   "scaleOptions",
   ".",
   "precision",
   ")",
   ",",
   "scaleOptions",
   ".",
   "suffix",
   "]",
   ".",
   "join",
   "(",
   "\"\"",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "prev",
   ".",
   "concat",
   "(",
   "help",
   ".",
   "roundToPrecision",
   "(",
   "tick",
   ",",
   "scaleOptions",
   ".",
   "precision",
   ")",
   ")",
   ";",
   "}",
   "}",
   ",",
   "[",
   "]",
   ")",
   ";",
   "var",
   "widths",
   "=",
   "map",
   "(",
   "formattedTicks",
   ",",
   "function",
   "(",
   "text",
   ")",
   "{",
   "return",
   "help",
   ".",
   "computeTextWidth",
   "(",
   "text",
   ",",
   "font",
   ")",
   ";",
   "}",
   ")",
   ";",
   "return",
   "{",
   "widths",
   ":",
   "widths",
   ",",
   "max",
   ":",
   "d3",
   ".",
   "max",
   "(",
   "widths",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "-",
   "1",
   ")",
   ")",
   "// ignore the top tick",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-199",
  "nl_tokens": [
   "This",
   "function",
   "returns",
   "all",
   "the",
   "possible",
   "true",
   "/",
   "false",
   "combinations",
   "for",
   "a",
   "given",
   "number",
   "-",
   "e",
   ".",
   "g",
   ".",
   "for",
   "two",
   "the",
   "possible",
   "combinations",
   "are",
   "[",
   "true",
   "true",
   "]",
   "[",
   "true",
   "false",
   "]",
   "[",
   "false",
   "true",
   "]",
   "[",
   "false",
   "false",
   "]",
   ".",
   "It",
   "does",
   "so",
   "by",
   "getting",
   "all",
   "the",
   "binary",
   "values",
   "between",
   "0",
   "and",
   "e",
   ".",
   "g",
   ".",
   "11"
  ],
  "pl_tokens": [
   "function",
   "getStarMap",
   "(",
   "num",
   ")",
   "{",
   "var",
   "ones",
   "=",
   "''",
   ",",
   "<mask>",
   ",",
   "binary",
   ",",
   "starMap",
   ",",
   "mapper",
   ",",
   "i",
   ";",
   "if",
   "(",
   "!",
   "starMaps",
   "[",
   "num",
   "]",
   ")",
   "{",
   "starMap",
   "=",
   "[",
   "]",
   ";",
   "while",
   "(",
   "ones",
   ".",
   "length",
   "<",
   "num",
   ")",
   "{",
   "ones",
   "+=",
   "1",
   ";",
   "}",
   "max",
   "=",
   "parseInt",
   "(",
   "ones",
   ",",
   "2",
   ")",
   ";",
   "mapper",
   "=",
   "function",
   "(",
   "digit",
   ")",
   "{",
   "return",
   "digit",
   "===",
   "'1'",
   ";",
   "}",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<=",
   "max",
   ";",
   "i",
   "+=",
   "1",
   ")",
   "{",
   "binary",
   "=",
   "i",
   ".",
   "toString",
   "(",
   "2",
   ")",
   ";",
   "while",
   "(",
   "binary",
   ".",
   "length",
   "<",
   "num",
   ")",
   "{",
   "binary",
   "=",
   "'0'",
   "+",
   "binary",
   ";",
   "}",
   "starMap",
   "[",
   "i",
   "]",
   "=",
   "Array",
   ".",
   "prototype",
   ".",
   "map",
   ".",
   "call",
   "(",
   "binary",
   ",",
   "mapper",
   ")",
   ";",
   "}",
   "starMaps",
   "[",
   "num",
   "]",
   "=",
   "starMap",
   ";",
   "}",
   "return",
   "starMaps",
   "[",
   "num",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-200",
  "nl_tokens": [
   "/",
   "*",
   "Notice",
   ":",
   "It",
   "s",
   "a",
   "Scrollable",
   "best",
   "practice",
   "to",
   "use",
   "plain",
   "functions",
   "instead",
   "of",
   "React",
   "bound",
   "methods",
   ".",
   "Read",
   "more",
   "about",
   "why",
   "on",
   "the",
   "minimal",
   "example",
   "."
  ],
  "pl_tokens": [
   "function",
   "handler",
   "(",
   "x",
   ",",
   "y",
   ",",
   "self",
   ",",
   "items",
   ",",
   "scroller",
   ")",
   "{",
   "var",
   "transitionPixels",
   "=",
   "100",
   ";",
   "var",
   "ratio",
   "=",
   "6",
   ";",
   "var",
   "headerPos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "transitionPixels",
   "-",
   "y",
   ",",
   "0",
   ")",
   "/",
   "ratio",
   ";",
   "if",
   "(",
   "y",
   "<",
   "0",
   ")",
   "{",
   "headerPos",
   "=",
   "transitionPixels",
   "/",
   "ratio",
   ";",
   "}",
   "switch",
   "(",
   "self",
   ".",
   "props",
   ".",
   "name",
   ")",
   "{",
   "case",
   "\"content\"",
   ":",
   "return",
   "{",
   "zIndex",
   ":",
   "3",
   ",",
   "y",
   ":",
   "-",
   "y",
   "+",
   "items",
   ".",
   "background",
   ".",
   "rect",
   ".",
   "height",
   ",",
   "}",
   ";",
   "case",
   "\"white\"",
   ":",
   "return",
   "{",
   "// this rounding to 0.001 and 0.9999 should not be needed.",
   "// some browsers were causing re-paint. So I will leave this here",
   "// as documentation",
   "opacity",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "0.001",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "1",
   "/",
   "transitionPixels",
   "*",
   "y",
   ",",
   "0.9999",
   ")",
   ")",
   ",",
   "zIndex",
   ":",
   "5",
   ",",
   "y",
   ":",
   "headerPos",
   ",",
   "}",
   ";",
   "case",
   "\"transparent\"",
   ":",
   "return",
   "{",
   "zIndex",
   ":",
   "4",
   ",",
   "y",
   ":",
   "headerPos",
   ",",
   "}",
   ";",
   "case",
   "\"background\"",
   ":",
   "return",
   "{",
   "scale",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "1",
   ",",
   "1",
   "-",
   "(",
   "y",
   "/",
   "400",
   ")",
   ")",
   ",",
   "zIndex",
   ":",
   "2",
   ",",
   "y",
   ":",
   "Math",
   ".",
   "min",
   "(",
   "0",
   ",",
   "-",
   "y",
   ")",
   ",",
   "}",
   ";",
   "default",
   ":",
   "// during development, if I create a new <ScrollItem> this is handy",
   "// as it will sticky this element to the bottom of the <Scroller>",
   "return",
   "{",
   "zIndex",
   ":",
   "10",
   ",",
   "y",
   ":",
   "scroller",
   ".",
   "rect",
   ".",
   "height",
   "-",
   "self",
   ".",
   "rect",
   ".",
   "height",
   ",",
   "}",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-201",
  "nl_tokens": [
   "ms"
  ],
  "pl_tokens": [
   "function",
   "handlePositionWhenShowingAllCategories",
   "(",
   "x",
   ",",
   "y",
   ",",
   "self",
   ",",
   "items",
   ",",
   "scroller",
   ")",
   "{",
   "var",
   "order",
   "=",
   "Data",
   ".",
   "categoryIds",
   ".",
   "indexOf",
   "(",
   "self",
   ".",
   "props",
   ".",
   "categoryId",
   ")",
   ";",
   "var",
   "multiplier",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "1",
   "-",
   "(",
   "y",
   "/",
   "friction",
   ")",
   ")",
   ";",
   "// stretch effect",
   "var",
   "pos",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "order",
   "*",
   "multiplier",
   "*",
   "itemSizeDuringListMode",
   "-",
   "y",
   ")",
   ";",
   "return",
   "{",
   "height",
   ":",
   "scroller",
   ".",
   "rect",
   ".",
   "height",
   "-",
   "spaceAtBottom",
   "+",
   "'px'",
   ",",
   "zIndex",
   ":",
   "2",
   "+",
   "order",
   ",",
   "y",
   ":",
   "pos",
   ",",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-202",
  "nl_tokens": [
   "Return",
   "a",
   "text",
   "surrounded",
   "by",
   "space"
  ],
  "pl_tokens": [
   "function",
   "formatColumn",
   "(",
   "text",
   ",",
   "width",
   ",",
   "offsetLeft",
   ",",
   "offsetRight",
   ")",
   "{",
   "offsetLeft",
   "=",
   "undefined",
   "!==",
   "offsetLeft",
   "?",
   "offsetLeft",
   ":",
   "3",
   ";",
   "offsetRight",
   "=",
   "undefined",
   "!==",
   "offsetRight",
   "?",
   "offsetRight",
   ":",
   "3",
   ";",
   "return",
   "new",
   "Array",
   "(",
   "offsetLeft",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "' '",
   ")",
   "+",
   "text",
   "+",
   "new",
   "Array",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "width",
   "-",
   "text",
   ".",
   "length",
   ",",
   "0",
   ")",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "' '",
   ")",
   "+",
   "new",
   "Array",
   "(",
   "offsetRight",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "' '",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-203",
  "nl_tokens": [
   "Truncate",
   "a",
   "string",
   "and",
   "add",
   "an",
   "ellipsis",
   "(",
   "...",
   ")",
   "to",
   "the",
   "end",
   "if",
   "it",
   "exceeds",
   "the",
   "specified",
   "length",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "value",
   ",",
   "len",
   ",",
   "word",
   ")",
   "{",
   "if",
   "(",
   "value",
   "&&",
   "value",
   ".",
   "length",
   ">",
   "len",
   ")",
   "{",
   "if",
   "(",
   "word",
   ")",
   "{",
   "var",
   "vs",
   "=",
   "value",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "len",
   "-",
   "2",
   ")",
   ",",
   "index",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "vs",
   ".",
   "lastIndexOf",
   "(",
   "' '",
   ")",
   ",",
   "vs",
   ".",
   "lastIndexOf",
   "(",
   "'.'",
   ")",
   ",",
   "vs",
   ".",
   "lastIndexOf",
   "(",
   "'!'",
   ")",
   ",",
   "vs",
   ".",
   "lastIndexOf",
   "(",
   "'?'",
   ")",
   ")",
   ";",
   "if",
   "(",
   "index",
   "!=",
   "-",
   "1",
   "&&",
   "index",
   ">=",
   "(",
   "len",
   "-",
   "15",
   ")",
   ")",
   "{",
   "return",
   "vs",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "index",
   ")",
   "+",
   "\"...\"",
   ";",
   "}",
   "}",
   "return",
   "value",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "len",
   "-",
   "3",
   ")",
   "+",
   "\"...\"",
   ";",
   "}",
   "return",
   "value",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-204",
  "nl_tokens": [
   "Bounding",
   "sphere",
   "collision",
   "detection"
  ],
  "pl_tokens": [
   "function",
   "intersect",
   "(",
   "el",
   ")",
   "{",
   "let",
   "radius",
   ",",
   "mesh",
   ",",
   "distance",
   ",",
   "extent",
   ";",
   "if",
   "(",
   "!",
   "el",
   ".",
   "isEntity",
   ")",
   "{",
   "return",
   ";",
   "}",
   "mesh",
   "=",
   "el",
   ".",
   "getObject3D",
   "(",
   "'mesh'",
   ")",
   ";",
   "if",
   "(",
   "!",
   "mesh",
   ")",
   "{",
   "return",
   ";",
   "}",
   "box",
   ".",
   "setFromObject",
   "(",
   "mesh",
   ")",
   ".",
   "getSize",
   "(",
   "size",
   ")",
   ";",
   "extent",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "size",
   ".",
   "x",
   ",",
   "size",
   ".",
   "y",
   ",",
   "size",
   ".",
   "z",
   ")",
   "/",
   "2",
   ";",
   "radius",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "2",
   "*",
   "extent",
   "*",
   "extent",
   ")",
   ";",
   "box",
   ".",
   "getCenter",
   "(",
   "meshPosition",
   ")",
   ";",
   "if",
   "(",
   "!",
   "radius",
   ")",
   "{",
   "return",
   ";",
   "}",
   "distance",
   "=",
   "position",
   ".",
   "distanceTo",
   "(",
   "meshPosition",
   ")",
   ";",
   "if",
   "(",
   "distance",
   "<",
   "radius",
   "+",
   "colliderRadius",
   ")",
   "{",
   "collisions",
   ".",
   "push",
   "(",
   "el",
   ")",
   ";",
   "distanceMap",
   ".",
   "set",
   "(",
   "el",
   ",",
   "distance",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-205",
  "nl_tokens": [
   "For",
   "each",
   "small",
   "multiple\u2026"
  ],
  "pl_tokens": [
   "function",
   "bulvar",
   "(",
   "g",
   ")",
   "{",
   "g",
   ".",
   "each",
   "(",
   "function",
   "(",
   "d",
   ",",
   "i",
   ")",
   "{",
   "var",
   "rangez",
   "=",
   "ranges",
   ".",
   "call",
   "(",
   "this",
   ",",
   "d",
   ",",
   "i",
   ")",
   ".",
   "slice",
   "(",
   ")",
   ".",
   "sort",
   "(",
   "d3Descending",
   ")",
   ",",
   "markerz",
   "=",
   "markers",
   ".",
   "call",
   "(",
   "this",
   ",",
   "d",
   ",",
   "i",
   ")",
   ".",
   "slice",
   "(",
   ")",
   ".",
   "sort",
   "(",
   "d3Descending",
   ")",
   ",",
   "measurez",
   "=",
   "measures",
   ".",
   "call",
   "(",
   "this",
   ",",
   "d",
   ",",
   "i",
   ")",
   ".",
   "slice",
   "(",
   ")",
   ".",
   "sort",
   "(",
   "d3Descending",
   ")",
   ",",
   "g2",
   "=",
   "d3Select",
   "(",
   "this",
   ")",
   ",",
   "extentX",
   ",",
   "extentY",
   ";",
   "var",
   "wrap",
   "=",
   "g2",
   ".",
   "select",
   "(",
   "\"g.wrap\"",
   ")",
   ";",
   "if",
   "(",
   "wrap",
   ".",
   "empty",
   "(",
   ")",
   ")",
   "wrap",
   "=",
   "g2",
   ".",
   "append",
   "(",
   "\"g\"",
   ")",
   ".",
   "attr",
   "(",
   "\"class\"",
   ",",
   "\"wrap\"",
   ")",
   ";",
   "if",
   "(",
   "vertical",
   ")",
   "{",
   "extentX",
   "=",
   "height",
   ",",
   "extentY",
   "=",
   "width",
   ";",
   "wrap",
   ".",
   "attr",
   "(",
   "\"transform\"",
   ",",
   "\"rotate(90)translate(0,\"",
   "+",
   "-",
   "width",
   "+",
   "\")\"",
   ")",
   ";",
   "}",
   "else",
   "{",
   "extentX",
   "=",
   "width",
   ",",
   "extentY",
   "=",
   "height",
   ";",
   "wrap",
   ".",
   "attr",
   "(",
   "\"transform\"",
   ",",
   "null",
   ")",
   ";",
   "}",
   "// Compute the new x-scale.",
   "var",
   "x1",
   "=",
   "d3ScaleLinear",
   "(",
   ")",
   ".",
   "domain",
   "(",
   "[",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "rangez",
   "[",
   "0",
   "]",
   ",",
   "markerz",
   "[",
   "0",
   "]",
   ",",
   "measurez",
   "[",
   "0",
   "]",
   ")",
   "]",
   ")",
   ".",
   "range",
   "(",
   "reverse",
   "?",
   "[",
   "extentX",
   ",",
   "0",
   "]",
   ":",
   "[",
   "0",
   ",",
   "extentX",
   "]",
   ")",
   ";",
   "// Retrieve the old x-scale, if this is an update.",
   "var",
   "x0",
   "=",
   "this",
   ".",
   "__chart__",
   "||",
   "d3ScaleLinear",
   "(",
   ")",
   ".",
   "domain",
   "(",
   "[",
   "0",
   ",",
   "Infinity",
   "]",
   ")",
   ".",
   "range",
   "(",
   "x1",
   ".",
   "range",
   "(",
   ")",
   ")",
   ";",
   "// Stash the new scale.",
   "this",
   ".",
   "__chart__",
   "=",
   "x1",
   ";",
   "// Derive width-scales from the x-scales.",
   "var",
   "w0",
   "=",
   "bulvarWidth",
   "(",
   "x0",
   ")",
   ",",
   "w1",
   "=",
   "bulvarWidth",
   "(",
   "x1",
   ")",
   ";",
   "// Update the range rects.",
   "var",
   "range",
   "=",
   "wrap",
   ".",
   "selectAll",
   "(",
   "\"rect.range\"",
   ")",
   ".",
   "data",
   "(",
   "rangez",
   ")",
   ";",
   "range",
   ".",
   "enter",
   "(",
   ")",
   ".",
   "append",
   "(",
   "\"rect\"",
   ")",
   ".",
   "attr",
   "(",
   "\"class\"",
   ",",
   "function",
   "(",
   "_d",
   ",",
   "i2",
   ")",
   "{",
   "return",
   "\"range s\"",
   "+",
   "i2",
   ";",
   "}",
   ")",
   ".",
   "attr",
   "(",
   "\"width\"",
   ",",
   "w0",
   ")",
   ".",
   "attr",
   "(",
   "\"height\"",
   ",",
   "extentY",
   ")",
   ".",
   "attr",
   "(",
   "\"x\"",
   ",",
   "reverse",
   "?",
   "x0",
   ":",
   "0",
   ")",
   ".",
   "merge",
   "(",
   "range",
   ")",
   ".",
   "transition",
   "(",
   "range",
   ")",
   ".",
   "attr",
   "(",
   "\"x\"",
   ",",
   "reverse",
   "?",
   "x1",
   ":",
   "0",
   ")",
   ".",
   "attr",
   "(",
   "\"width\"",
   ",",
   "w1",
   ")",
   ".",
   "attr",
   "(",
   "\"height\"",
   ",",
   "extentY",
   ")",
   ";",
   "// Update the measure rects.",
   "var",
   "measure",
   "=",
   "wrap",
   ".",
   "selectAll",
   "(",
   "\"rect.measure\"",
   ")",
   ".",
   "data",
   "(",
   "measurez",
   ")",
   ";",
   "measure",
   ".",
   "enter",
   "(",
   ")",
   ".",
   "append",
   "(",
   "\"rect\"",
   ")",
   ".",
   "attr",
   "(",
   "\"class\"",
   ",",
   "function",
   "(",
   "_d",
   ",",
   "i2",
   ")",
   "{",
   "return",
   "\"measure s\"",
   "+",
   "i2",
   ";",
   "}",
   ")",
   ".",
   "attr",
   "(",
   "\"width\"",
   ",",
   "w0",
   ")",
   ".",
   "attr",
   "(",
   "\"height\"",
   ",",
   "extentY",
   "/",
   "3",
   ")",
   ".",
   "attr",
   "(",
   "\"x\"",
   ",",
   "reverse",
   "?",
   "x0",
   ":",
   "0",
   ")",
   ".",
   "attr",
   "(",
   "\"y\"",
   ",",
   "extentY",
   "/",
   "3",
   ")",
   ".",
   "merge",
   "(",
   "measure",
   ")",
   ".",
   "transition",
   "(",
   "measure",
   ")",
   ".",
   "attr",
   "(",
   "\"width\"",
   ",",
   "w1",
   ")",
   ".",
   "attr",
   "(",
   "\"height\"",
   ",",
   "extentY",
   "/",
   "3",
   ")",
   ".",
   "attr",
   "(",
   "\"x\"",
   ",",
   "reverse",
   "?",
   "x1",
   ":",
   "0",
   ")",
   ".",
   "attr",
   "(",
   "\"y\"",
   ",",
   "extentY",
   "/",
   "3",
   ")",
   ";",
   "// Update the marker lines.",
   "var",
   "marker",
   "=",
   "wrap",
   ".",
   "selectAll",
   "(",
   "\"line.marker\"",
   ")",
   ".",
   "data",
   "(",
   "markerz",
   ")",
   ";",
   "marker",
   ".",
   "enter",
   "(",
   ")",
   ".",
   "append",
   "(",
   "\"line\"",
   ")",
   ".",
   "attr",
   "(",
   "\"class\"",
   ",",
   "\"marker\"",
   ")",
   ".",
   "attr",
   "(",
   "\"x1\"",
   ",",
   "x0",
   ")",
   ".",
   "attr",
   "(",
   "\"x2\"",
   ",",
   "x0",
   ")",
   ".",
   "attr",
   "(",
   "\"y1\"",
   ",",
   "extentY",
   "/",
   "6",
   ")",
   ".",
   "attr",
   "(",
   "\"y2\"",
   ",",
   "extentY",
   "*",
   "5",
   "/",
   "6",
   ")",
   ".",
   "merge",
   "(",
   "marker",
   ")",
   ".",
   "transition",
   "(",
   "marker",
   ")",
   ".",
   "attr",
   "(",
   "\"x1\"",
   ",",
   "x1",
   ")",
   ".",
   "attr",
   "(",
   "\"x2\"",
   ",",
   "x1",
   ")",
   ".",
   "attr",
   "(",
   "\"y1\"",
   ",",
   "extentY",
   "/",
   "6",
   ")",
   ".",
   "attr",
   "(",
   "\"y2\"",
   ",",
   "extentY",
   "*",
   "5",
   "/",
   "6",
   ")",
   ";",
   "var",
   "axis",
   "=",
   "g2",
   ".",
   "selectAll",
   "(",
   "\"g.axis\"",
   ")",
   ".",
   "data",
   "(",
   "[",
   "0",
   "]",
   ")",
   ";",
   "axis",
   ".",
   "enter",
   "(",
   ")",
   ".",
   "append",
   "(",
   "\"g\"",
   ")",
   ".",
   "attr",
   "(",
   "\"class\"",
   ",",
   "\"axis\"",
   ")",
   ";",
   "axis",
   ".",
   "attr",
   "(",
   "\"transform\"",
   ",",
   "vertical",
   "?",
   "null",
   ":",
   "\"translate(0,\"",
   "+",
   "extentY",
   "+",
   "\")\"",
   ")",
   ".",
   "call",
   "(",
   "xAxis",
   ".",
   "scale",
   "(",
   "x1",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "d3TimerFlush",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-206",
  "nl_tokens": [
   "Get",
   "the",
   "dissimilarity",
   "between",
   "two",
   "clusters",
   "using",
   "complete",
   "linkages",
   "(",
   "see",
   "James",
   "et",
   "al",
   ".",
   "_An",
   "Introduction",
   "to",
   "Statistical",
   "Learning",
   "with",
   "Applications",
   "in",
   "R_",
   ".",
   "New",
   "York",
   ":",
   "Springer",
   "2013",
   "pg",
   ".",
   "395",
   ".",
   ")"
  ],
  "pl_tokens": [
   "function",
   "getClusterDissimilarity",
   "(",
   "c1",
   ":",
   "Array",
   "<",
   "Journey",
   ">",
   ",",
   "c2",
   ":",
   "Array",
   "<",
   "Journey",
   ">",
   ",",
   "{",
   "patterns",
   ",",
   "stops",
   "}",
   ":",
   "{",
   "patterns",
   ":",
   "Array",
   "<",
   "Pattern",
   ">",
   ",",
   "stops",
   ":",
   "Array",
   "<",
   "Stop",
   ">",
   "}",
   ")",
   ":",
   "number",
   "{",
   "let",
   "dissimilarity",
   "=",
   "0",
   "for",
   "(",
   "const",
   "j1",
   "of",
   "c1",
   ")",
   "{",
   "for",
   "(",
   "const",
   "j2",
   "of",
   "c2",
   ")",
   "{",
   "// if they are not the same length, don't cluster them",
   "if",
   "(",
   "j1",
   ".",
   "segments",
   ".",
   "length",
   "!==",
   "j2",
   ".",
   "segments",
   ".",
   "length",
   ")",
   "return",
   "Infinity",
   "// otherwise compute maximum dissimilarity of stops at either start or end",
   "for",
   "(",
   "let",
   "segment",
   "=",
   "0",
   ";",
   "segment",
   "<",
   "j1",
   ".",
   "segments",
   ".",
   "length",
   ";",
   "segment",
   "++",
   ")",
   "{",
   "const",
   "s1",
   "=",
   "j1",
   ".",
   "segments",
   "[",
   "segment",
   "]",
   "const",
   "s2",
   "=",
   "j2",
   ".",
   "segments",
   "[",
   "segment",
   "]",
   "// if one has a walk segment where the other has a transit segment these",
   "// are not comparable",
   "if",
   "(",
   "s1",
   ".",
   "type",
   "!==",
   "s2",
   ".",
   "type",
   ")",
   "return",
   "Infinity",
   "// Only cluster  on the stop positions which we get from transit segments",
   "if",
   "(",
   "s1",
   ".",
   "type",
   "!==",
   "'WALK'",
   ")",
   "{",
   "dissimilarity",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dissimilarity",
   ",",
   "segmentDissimilarity",
   "(",
   "s1",
   ",",
   "s2",
   ",",
   "{",
   "patterns",
   ",",
   "stops",
   "}",
   ")",
   ")",
   "// no point in continuing, these won't be merged",
   "if",
   "(",
   "dissimilarity",
   ">",
   "MAX_DISSIMILARITY",
   ")",
   "return",
   "Infinity",
   "}",
   "}",
   "}",
   "}",
   "return",
   "dissimilarity",
   "}"
  ]
 },
 {
  "idx": "maxmin-207",
  "nl_tokens": [
   "Provides",
   "a",
   "convenient",
   "method",
   "for",
   "performing",
   "basic",
   "date",
   "arithmetic",
   ".",
   "This",
   "method",
   "does",
   "not",
   "modify",
   "the",
   "Date",
   "instance",
   "being",
   "called",
   "-",
   "it",
   "creates",
   "and",
   "returns",
   "a",
   "new",
   "Date",
   "instance",
   "containing",
   "the",
   "resulting",
   "date",
   "value",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "date",
   ",",
   "interval",
   ",",
   "value",
   ")",
   "{",
   "var",
   "d",
   "=",
   "Ext",
   ".",
   "Date",
   ".",
   "clone",
   "(",
   "date",
   ")",
   ";",
   "if",
   "(",
   "!",
   "interval",
   "||",
   "value",
   "===",
   "0",
   ")",
   "return",
   "d",
   ";",
   "switch",
   "(",
   "interval",
   ".",
   "toLowerCase",
   "(",
   ")",
   ")",
   "{",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "MILLI",
   ":",
   "d",
   "=",
   "new",
   "Date",
   "(",
   "d",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "value",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "SECOND",
   ":",
   "d",
   "=",
   "new",
   "Date",
   "(",
   "d",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "value",
   "*",
   "1000",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "MINUTE",
   ":",
   "d",
   "=",
   "new",
   "Date",
   "(",
   "d",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "value",
   "*",
   "60000",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "HOUR",
   ":",
   "d",
   "=",
   "new",
   "Date",
   "(",
   "d",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "value",
   "*",
   "3600000",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "DAY",
   ":",
   "d",
   "=",
   "new",
   "Date",
   "(",
   "d",
   ".",
   "valueOf",
   "(",
   ")",
   "+",
   "value",
   "*",
   "86400000",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "MONTH",
   ":",
   "var",
   "day",
   "=",
   "date",
   ".",
   "getDate",
   "(",
   ")",
   ";",
   "if",
   "(",
   "day",
   ">",
   "28",
   ")",
   "{",
   "day",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "day",
   ",",
   "Ext",
   ".",
   "Date",
   ".",
   "getLastDateOfMonth",
   "(",
   "Ext",
   ".",
   "Date",
   ".",
   "add",
   "(",
   "Ext",
   ".",
   "Date",
   ".",
   "getFirstDateOfMonth",
   "(",
   "date",
   ")",
   ",",
   "'mo'",
   ",",
   "value",
   ")",
   ")",
   ".",
   "getDate",
   "(",
   ")",
   ")",
   ";",
   "}",
   "d",
   ".",
   "setDate",
   "(",
   "day",
   ")",
   ";",
   "d",
   ".",
   "setMonth",
   "(",
   "date",
   ".",
   "getMonth",
   "(",
   ")",
   "+",
   "value",
   ")",
   ";",
   "break",
   ";",
   "case",
   "Ext",
   ".",
   "Date",
   ".",
   "YEAR",
   ":",
   "d",
   ".",
   "setFullYear",
   "(",
   "date",
   ".",
   "getFullYear",
   "(",
   ")",
   "+",
   "value",
   ")",
   ";",
   "break",
   ";",
   "}",
   "return",
   "d",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-208",
  "nl_tokens": [
   "FUNCTIONS",
   "//",
   "FUNCTION",
   ":",
   "createTopic",
   "(",
   "options",
   ")",
   "Creates",
   "a",
   "new",
   "topic",
   "."
  ],
  "pl_tokens": [
   "function",
   "createTopic",
   "(",
   "options",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "Number",
   ".",
   "MAX_VALUE",
   ",",
   "duplicates",
   "=",
   "false",
   ";",
   "if",
   "(",
   "!",
   "options",
   ".",
   "hasOwnProperty",
   "(",
   "'max'",
   ")",
   ")",
   "{",
   "options",
   ".",
   "max",
   "=",
   "max",
   ";",
   "}",
   "else",
   "{",
   "max",
   "=",
   "options",
   ".",
   "max",
   ";",
   "}",
   "if",
   "(",
   "!",
   "options",
   ".",
   "hasOwnProperty",
   "(",
   "'duplicates'",
   ")",
   ")",
   "{",
   "options",
   ".",
   "duplicates",
   "=",
   "duplicates",
   ";",
   "}",
   "else",
   "{",
   "duplicates",
   "=",
   "options",
   ".",
   "duplicates",
   ";",
   "}",
   "if",
   "(",
   "!",
   "isInteger",
   "(",
   "max",
   ")",
   "||",
   "max",
   "<",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'createTopic()::invalid option. Max subscribers must be an integer greater than or equal to 0.'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "duplicates",
   "!==",
   "'boolean'",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'createTopic()::invalid option. Duplicates flag must be a boolean.'",
   ")",
   ";",
   "}",
   "return",
   "{",
   "'subscribers'",
   ":",
   "[",
   "]",
   ",",
   "'options'",
   ":",
   "options",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-209",
  "nl_tokens": [
   "Determine",
   "if",
   "all",
   "tickValues",
   "are",
   "modulo",
   "some",
   "interval",
   "value"
  ],
  "pl_tokens": [
   "function",
   "all_modulo",
   "(",
   "tickValues",
   ",",
   "interval",
   ")",
   "{",
   "// we can't modulo-check decimals so we need to multiply by 10^Ndecimals",
   "var",
   "maxDecimals",
   "=",
   "reduce",
   "(",
   "tickValues",
   ",",
   "function",
   "(",
   "prevMax",
   ",",
   "tick",
   ")",
   "{",
   "if",
   "(",
   "(",
   "tick",
   "%",
   "1",
   ")",
   "!==",
   "0",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "prevMax",
   ",",
   "tick",
   ".",
   "toString",
   "(",
   ")",
   ".",
   "split",
   "(",
   "\".\"",
   ")",
   "[",
   "1",
   "]",
   ".",
   "length",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "prevMax",
   ";",
   "}",
   "}",
   ",",
   "0",
   ")",
   ";",
   "var",
   "decimalOffset",
   "=",
   "Math",
   ".",
   "pow",
   "(",
   "10",
   ",",
   "maxDecimals",
   ")",
   ";",
   "interval",
   "=",
   "interval",
   "*",
   "decimalOffset",
   ";",
   "return",
   "reduce",
   "(",
   "tickValues",
   ",",
   "function",
   "(",
   "prev",
   ",",
   "curr",
   ")",
   "{",
   "return",
   "prev",
   "&&",
   "(",
   "(",
   "curr",
   "*",
   "decimalOffset",
   ")",
   "%",
   "interval",
   "===",
   "0",
   ")",
   ";",
   "}",
   ",",
   "true",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-210",
  "nl_tokens": [
   "Initialises",
   "body",
   "properties",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "body",
   ",",
   "options",
   ")",
   "{",
   "options",
   "=",
   "options",
   "||",
   "{",
   "}",
   ";",
   "// init required properties (order is important)",
   "Body",
   ".",
   "set",
   "(",
   "body",
   ",",
   "{",
   "bounds",
   ":",
   "body",
   ".",
   "bounds",
   "||",
   "Bounds",
   ".",
   "create",
   "(",
   "body",
   ".",
   "vertices",
   ")",
   ",",
   "positionPrev",
   ":",
   "body",
   ".",
   "positionPrev",
   "||",
   "Vector",
   ".",
   "clone",
   "(",
   "body",
   ".",
   "position",
   ")",
   ",",
   "anglePrev",
   ":",
   "body",
   ".",
   "anglePrev",
   "||",
   "body",
   ".",
   "angle",
   ",",
   "vertices",
   ":",
   "body",
   ".",
   "vertices",
   ",",
   "parts",
   ":",
   "body",
   ".",
   "parts",
   "||",
   "[",
   "body",
   "]",
   ",",
   "isStatic",
   ":",
   "body",
   ".",
   "isStatic",
   ",",
   "isSleeping",
   ":",
   "body",
   ".",
   "isSleeping",
   ",",
   "parent",
   ":",
   "body",
   ".",
   "parent",
   "||",
   "body",
   "}",
   ")",
   ";",
   "Vertices",
   ".",
   "rotate",
   "(",
   "body",
   ".",
   "vertices",
   ",",
   "body",
   ".",
   "angle",
   ",",
   "body",
   ".",
   "position",
   ")",
   ";",
   "Axes",
   ".",
   "rotate",
   "(",
   "body",
   ".",
   "axes",
   ",",
   "body",
   ".",
   "angle",
   ")",
   ";",
   "Bounds",
   ".",
   "update",
   "(",
   "body",
   ".",
   "bounds",
   ",",
   "body",
   ".",
   "vertices",
   ",",
   "body",
   ".",
   "velocity",
   ")",
   ";",
   "// allow options to override the automatically calculated properties",
   "Body",
   ".",
   "set",
   "(",
   "body",
   ",",
   "{",
   "axes",
   ":",
   "options",
   ".",
   "axes",
   "||",
   "body",
   ".",
   "axes",
   ",",
   "area",
   ":",
   "options",
   ".",
   "area",
   "||",
   "body",
   ".",
   "area",
   ",",
   "mass",
   ":",
   "options",
   ".",
   "mass",
   "||",
   "body",
   ".",
   "mass",
   ",",
   "inertia",
   ":",
   "options",
   ".",
   "inertia",
   "||",
   "body",
   ".",
   "inertia",
   "}",
   ")",
   ";",
   "// render properties",
   "var",
   "defaultFillStyle",
   "=",
   "(",
   "body",
   ".",
   "isStatic",
   "?",
   "'#2e2b44'",
   ":",
   "Common",
   ".",
   "choose",
   "(",
   "[",
   "'#006BA6'",
   ",",
   "'#0496FF'",
   ",",
   "'#FFBC42'",
   ",",
   "'#D81159'",
   ",",
   "'#8F2D56'",
   "]",
   ")",
   ")",
   ",",
   "defaultStrokeStyle",
   "=",
   "'#000'",
   ";",
   "body",
   ".",
   "render",
   ".",
   "fillStyle",
   "=",
   "body",
   ".",
   "render",
   ".",
   "fillStyle",
   "||",
   "defaultFillStyle",
   ";",
   "body",
   ".",
   "render",
   ".",
   "strokeStyle",
   "=",
   "body",
   ".",
   "render",
   ".",
   "strokeStyle",
   "||",
   "defaultStrokeStyle",
   ";",
   "body",
   ".",
   "render",
   ".",
   "sprite",
   ".",
   "xOffset",
   "+=",
   "-",
   "(",
   "body",
   ".",
   "bounds",
   ".",
   "<mask>",
   ".",
   "x",
   "-",
   "body",
   ".",
   "position",
   ".",
   "x",
   ")",
   "/",
   "(",
   "body",
   ".",
   "bounds",
   ".",
   "max",
   ".",
   "x",
   "-",
   "body",
   ".",
   "bounds",
   ".",
   "min",
   ".",
   "x",
   ")",
   ";",
   "body",
   ".",
   "render",
   ".",
   "sprite",
   ".",
   "yOffset",
   "+=",
   "-",
   "(",
   "body",
   ".",
   "bounds",
   ".",
   "min",
   ".",
   "y",
   "-",
   "body",
   ".",
   "position",
   ".",
   "y",
   ")",
   "/",
   "(",
   "body",
   ".",
   "bounds",
   ".",
   "max",
   ".",
   "y",
   "-",
   "body",
   ".",
   "bounds",
   ".",
   "min",
   ".",
   "y",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-211",
  "nl_tokens": [
   "Pans",
   "and",
   "/",
   "or",
   "zooms",
   "panorama",
   "based",
   "on",
   "currently",
   "pressed",
   "keys",
   ".",
   "Also",
   "handles",
   "panorama",
   "inertia",
   "and",
   "auto",
   "rotation",
   "."
  ],
  "pl_tokens": [
   "function",
   "keyRepeat",
   "(",
   ")",
   "{",
   "// Only do something if the panorama is loaded",
   "if",
   "(",
   "!",
   "loaded",
   ")",
   "{",
   "return",
   ";",
   "}",
   "var",
   "isKeyDown",
   "=",
   "false",
   ";",
   "var",
   "prevPitch",
   "=",
   "config",
   ".",
   "pitch",
   ";",
   "var",
   "prevYaw",
   "=",
   "config",
   ".",
   "yaw",
   ";",
   "var",
   "prevZoom",
   "=",
   "config",
   ".",
   "hfov",
   ";",
   "var",
   "newTime",
   ";",
   "if",
   "(",
   "typeof",
   "performance",
   "!==",
   "'undefined'",
   "&&",
   "performance",
   ".",
   "now",
   "(",
   ")",
   ")",
   "{",
   "newTime",
   "=",
   "performance",
   ".",
   "now",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "newTime",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "prevTime",
   "===",
   "undefined",
   ")",
   "{",
   "prevTime",
   "=",
   "newTime",
   ";",
   "}",
   "var",
   "diff",
   "=",
   "(",
   "newTime",
   "-",
   "prevTime",
   ")",
   "*",
   "config",
   ".",
   "hfov",
   "/",
   "1700",
   ";",
   "diff",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "diff",
   ",",
   "1.0",
   ")",
   ";",
   "// If minus key is down",
   "if",
   "(",
   "keysDown",
   "[",
   "0",
   "]",
   "&&",
   "config",
   ".",
   "keyboardZoom",
   "===",
   "true",
   ")",
   "{",
   "setHfov",
   "(",
   "config",
   ".",
   "hfov",
   "+",
   "(",
   "speed",
   ".",
   "hfov",
   "*",
   "0.8",
   "+",
   "0.5",
   ")",
   "*",
   "diff",
   ")",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "// If plus key is down",
   "if",
   "(",
   "keysDown",
   "[",
   "1",
   "]",
   "&&",
   "config",
   ".",
   "keyboardZoom",
   "===",
   "true",
   ")",
   "{",
   "setHfov",
   "(",
   "config",
   ".",
   "hfov",
   "+",
   "(",
   "speed",
   ".",
   "hfov",
   "*",
   "0.8",
   "-",
   "0.2",
   ")",
   "*",
   "diff",
   ")",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "// If up arrow or \"w\" is down",
   "if",
   "(",
   "keysDown",
   "[",
   "2",
   "]",
   "||",
   "keysDown",
   "[",
   "6",
   "]",
   ")",
   "{",
   "// Pan up",
   "config",
   ".",
   "pitch",
   "+=",
   "(",
   "speed",
   ".",
   "pitch",
   "*",
   "0.8",
   "+",
   "0.2",
   ")",
   "*",
   "diff",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "// If down arrow or \"s\" is down",
   "if",
   "(",
   "keysDown",
   "[",
   "3",
   "]",
   "||",
   "keysDown",
   "[",
   "7",
   "]",
   ")",
   "{",
   "// Pan down",
   "config",
   ".",
   "pitch",
   "+=",
   "(",
   "speed",
   ".",
   "pitch",
   "*",
   "0.8",
   "-",
   "0.2",
   ")",
   "*",
   "diff",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "// If left arrow or \"a\" is down",
   "if",
   "(",
   "keysDown",
   "[",
   "4",
   "]",
   "||",
   "keysDown",
   "[",
   "8",
   "]",
   ")",
   "{",
   "// Pan left",
   "config",
   ".",
   "yaw",
   "+=",
   "(",
   "speed",
   ".",
   "yaw",
   "*",
   "0.8",
   "-",
   "0.2",
   ")",
   "*",
   "diff",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "// If right arrow or \"d\" is down",
   "if",
   "(",
   "keysDown",
   "[",
   "5",
   "]",
   "||",
   "keysDown",
   "[",
   "9",
   "]",
   ")",
   "{",
   "// Pan right",
   "config",
   ".",
   "yaw",
   "+=",
   "(",
   "speed",
   ".",
   "yaw",
   "*",
   "0.8",
   "+",
   "0.2",
   ")",
   "*",
   "diff",
   ";",
   "isKeyDown",
   "=",
   "true",
   ";",
   "}",
   "if",
   "(",
   "isKeyDown",
   ")",
   "latestInteraction",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   ";",
   "// If auto-rotate",
   "var",
   "inactivityInterval",
   "=",
   "Date",
   ".",
   "now",
   "(",
   ")",
   "-",
   "latestInteraction",
   ";",
   "if",
   "(",
   "config",
   ".",
   "autoRotate",
   ")",
   "{",
   "// Pan",
   "if",
   "(",
   "newTime",
   "-",
   "prevTime",
   ">",
   "0.001",
   ")",
   "{",
   "var",
   "timeDiff",
   "=",
   "(",
   "newTime",
   "-",
   "prevTime",
   ")",
   "/",
   "1000",
   ";",
   "var",
   "yawDiff",
   "=",
   "(",
   "speed",
   ".",
   "yaw",
   "/",
   "timeDiff",
   "*",
   "diff",
   "-",
   "config",
   ".",
   "autoRotate",
   "*",
   "0.2",
   ")",
   "*",
   "timeDiff",
   "yawDiff",
   "=",
   "(",
   "-",
   "config",
   ".",
   "autoRotate",
   ">",
   "0",
   "?",
   "1",
   ":",
   "-",
   "1",
   ")",
   "*",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "config",
   ".",
   "autoRotate",
   "*",
   "timeDiff",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "yawDiff",
   ")",
   ")",
   ";",
   "config",
   ".",
   "yaw",
   "+=",
   "yawDiff",
   ";",
   "}",
   "// Deal with stopping auto rotation after a set delay",
   "if",
   "(",
   "config",
   ".",
   "autoRotateStopDelay",
   ")",
   "{",
   "config",
   ".",
   "autoRotateStopDelay",
   "-=",
   "newTime",
   "-",
   "prevTime",
   ";",
   "if",
   "(",
   "config",
   ".",
   "autoRotateStopDelay",
   "<=",
   "0",
   ")",
   "{",
   "config",
   ".",
   "autoRotateStopDelay",
   "=",
   "false",
   ";",
   "autoRotateSpeed",
   "=",
   "config",
   ".",
   "autoRotate",
   ";",
   "config",
   ".",
   "autoRotate",
   "=",
   "0",
   ";",
   "}",
   "}",
   "}",
   "// Animated moves",
   "if",
   "(",
   "animatedMove",
   ".",
   "pitch",
   ")",
   "{",
   "animateMove",
   "(",
   "'pitch'",
   ")",
   ";",
   "prevPitch",
   "=",
   "config",
   ".",
   "pitch",
   ";",
   "}",
   "if",
   "(",
   "animatedMove",
   ".",
   "yaw",
   ")",
   "{",
   "animateMove",
   "(",
   "'yaw'",
   ")",
   ";",
   "prevYaw",
   "=",
   "config",
   ".",
   "yaw",
   ";",
   "}",
   "if",
   "(",
   "animatedMove",
   ".",
   "hfov",
   ")",
   "{",
   "animateMove",
   "(",
   "'hfov'",
   ")",
   ";",
   "prevZoom",
   "=",
   "config",
   ".",
   "hfov",
   ";",
   "}",
   "// \"Inertia\"",
   "if",
   "(",
   "diff",
   ">",
   "0",
   "&&",
   "!",
   "config",
   ".",
   "autoRotate",
   ")",
   "{",
   "// \"Friction\"",
   "var",
   "slowDownFactor",
   "=",
   "1",
   "-",
   "config",
   ".",
   "friction",
   ";",
   "// Yaw",
   "if",
   "(",
   "!",
   "keysDown",
   "[",
   "4",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "5",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "8",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "9",
   "]",
   "&&",
   "!",
   "animatedMove",
   ".",
   "yaw",
   ")",
   "{",
   "config",
   ".",
   "yaw",
   "+=",
   "speed",
   ".",
   "yaw",
   "*",
   "diff",
   "*",
   "slowDownFactor",
   ";",
   "}",
   "// Pitch",
   "if",
   "(",
   "!",
   "keysDown",
   "[",
   "2",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "3",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "6",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "7",
   "]",
   "&&",
   "!",
   "animatedMove",
   ".",
   "pitch",
   ")",
   "{",
   "config",
   ".",
   "pitch",
   "+=",
   "speed",
   ".",
   "pitch",
   "*",
   "diff",
   "*",
   "slowDownFactor",
   ";",
   "}",
   "// Zoom",
   "if",
   "(",
   "!",
   "keysDown",
   "[",
   "0",
   "]",
   "&&",
   "!",
   "keysDown",
   "[",
   "1",
   "]",
   "&&",
   "!",
   "animatedMove",
   ".",
   "hfov",
   ")",
   "{",
   "setHfov",
   "(",
   "config",
   ".",
   "hfov",
   "+",
   "speed",
   ".",
   "hfov",
   "*",
   "diff",
   "*",
   "slowDownFactor",
   ")",
   ";",
   "}",
   "}",
   "prevTime",
   "=",
   "newTime",
   ";",
   "if",
   "(",
   "diff",
   ">",
   "0",
   ")",
   "{",
   "speed",
   ".",
   "yaw",
   "=",
   "speed",
   ".",
   "yaw",
   "*",
   "0.8",
   "+",
   "(",
   "config",
   ".",
   "yaw",
   "-",
   "prevYaw",
   ")",
   "/",
   "diff",
   "*",
   "0.2",
   ";",
   "speed",
   ".",
   "pitch",
   "=",
   "speed",
   ".",
   "pitch",
   "*",
   "0.8",
   "+",
   "(",
   "config",
   ".",
   "pitch",
   "-",
   "prevPitch",
   ")",
   "/",
   "diff",
   "*",
   "0.2",
   ";",
   "speed",
   ".",
   "hfov",
   "=",
   "speed",
   ".",
   "hfov",
   "*",
   "0.8",
   "+",
   "(",
   "config",
   ".",
   "hfov",
   "-",
   "prevZoom",
   ")",
   "/",
   "diff",
   "*",
   "0.2",
   ";",
   "// Limit speed",
   "var",
   "maxSpeed",
   "=",
   "config",
   ".",
   "autoRotate",
   "?",
   "Math",
   ".",
   "abs",
   "(",
   "config",
   ".",
   "autoRotate",
   ")",
   ":",
   "5",
   ";",
   "speed",
   ".",
   "yaw",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxSpeed",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "speed",
   ".",
   "yaw",
   ",",
   "-",
   "maxSpeed",
   ")",
   ")",
   ";",
   "speed",
   ".",
   "pitch",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxSpeed",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "speed",
   ".",
   "pitch",
   ",",
   "-",
   "maxSpeed",
   ")",
   ")",
   ";",
   "speed",
   ".",
   "hfov",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxSpeed",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "speed",
   ".",
   "hfov",
   ",",
   "-",
   "maxSpeed",
   ")",
   ")",
   ";",
   "}",
   "// Stop movement if opposite controls are pressed",
   "if",
   "(",
   "keysDown",
   "[",
   "0",
   "]",
   "&&",
   "keysDown",
   "[",
   "1",
   "]",
   ")",
   "{",
   "speed",
   ".",
   "hfov",
   "=",
   "0",
   ";",
   "}",
   "if",
   "(",
   "(",
   "keysDown",
   "[",
   "2",
   "]",
   "||",
   "keysDown",
   "[",
   "6",
   "]",
   ")",
   "&&",
   "(",
   "keysDown",
   "[",
   "3",
   "]",
   "||",
   "keysDown",
   "[",
   "7",
   "]",
   ")",
   ")",
   "{",
   "speed",
   ".",
   "pitch",
   "=",
   "0",
   ";",
   "}",
   "if",
   "(",
   "(",
   "keysDown",
   "[",
   "4",
   "]",
   "||",
   "keysDown",
   "[",
   "8",
   "]",
   ")",
   "&&",
   "(",
   "keysDown",
   "[",
   "5",
   "]",
   "||",
   "keysDown",
   "[",
   "9",
   "]",
   ")",
   ")",
   "{",
   "speed",
   ".",
   "yaw",
   "=",
   "0",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-212",
  "nl_tokens": [
   "Clear",
   "current",
   "chunks",
   "and",
   "slice",
   "file",
   "again"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "this",
   ".",
   "flowObj",
   ".",
   "opts",
   ".",
   "initFileFn",
   "===",
   "\"function\"",
   ")",
   "{",
   "this",
   ".",
   "flowObj",
   ".",
   "opts",
   ".",
   "initFileFn",
   "(",
   "this",
   ")",
   ";",
   "}",
   "this",
   ".",
   "abort",
   "(",
   "true",
   ")",
   ";",
   "this",
   ".",
   "error",
   "=",
   "false",
   ";",
   "// Rebuild stack of chunks from file",
   "this",
   ".",
   "_prevProgress",
   "=",
   "0",
   ";",
   "var",
   "round",
   "=",
   "this",
   ".",
   "flowObj",
   ".",
   "opts",
   ".",
   "forceChunkSize",
   "?",
   "Math",
   ".",
   "ceil",
   ":",
   "Math",
   ".",
   "floor",
   ";",
   "var",
   "chunks",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "round",
   "(",
   "this",
   ".",
   "size",
   "/",
   "this",
   ".",
   "flowObj",
   ".",
   "opts",
   ".",
   "chunkSize",
   ")",
   ",",
   "1",
   ")",
   ";",
   "for",
   "(",
   "var",
   "offset",
   "=",
   "0",
   ";",
   "offset",
   "<",
   "chunks",
   ";",
   "offset",
   "++",
   ")",
   "{",
   "this",
   ".",
   "chunks",
   ".",
   "push",
   "(",
   "new",
   "FlowChunk",
   "(",
   "this",
   ".",
   "flowObj",
   ",",
   "this",
   ",",
   "offset",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-213",
  "nl_tokens": [
   "Defined",
   "as",
   "a",
   "function",
   "rather",
   "than",
   "a",
   "plain",
   "object",
   "because",
   "it",
   "contains",
   "lazy",
   "references",
   "that",
   "result",
   "in",
   "recursive",
   "references",
   "between",
   "the",
   "complex",
   "types",
   "(",
   "e",
   ".",
   "g",
   ".",
   "array",
   "object",
   "hashtable",
   ")",
   "and",
   "the",
   "main",
   "propertyValidators",
   "schema"
  ],
  "pl_tokens": [
   "function",
   "typeSpecificConstraintSchemas",
   "(",
   ")",
   "{",
   "return",
   "{",
   "any",
   ":",
   "{",
   "}",
   ",",
   "string",
   ":",
   "{",
   "mustNotBeEmpty",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "boolean",
   "(",
   ")",
   ")",
   ",",
   "mustBeTrimmed",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "boolean",
   "(",
   ")",
   ")",
   ",",
   "regexPattern",
   ":",
   "dynamicConstraintSchema",
   "(",
   "regexSchema",
   ")",
   ",",
   "minimumLength",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ".",
   "<mask>",
   "(",
   "0",
   ")",
   ")",
   ",",
   "maximumLength",
   ":",
   "maximumSizeConstraintSchema",
   "(",
   "'minimumLength'",
   ")",
   ",",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   ",",
   "mustEqualIgnoreCase",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   "}",
   ",",
   "integer",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "maximumValueInclusiveNumberConstraintSchema",
   "(",
   "integerSchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "maximumValueExclusiveNumberConstraintSchema",
   "(",
   "integerSchema",
   ")",
   "}",
   ",",
   "float",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "number",
   "(",
   ")",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "number",
   "(",
   ")",
   ")",
   ",",
   "maximumValue",
   ":",
   "maximumValueInclusiveNumberConstraintSchema",
   "(",
   "joi",
   ".",
   "number",
   "(",
   ")",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "maximumValueExclusiveNumberConstraintSchema",
   "(",
   "joi",
   ".",
   "number",
   "(",
   ")",
   ")",
   "}",
   ",",
   "boolean",
   ":",
   "{",
   "}",
   ",",
   "datetime",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "datetimeSchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "datetimeSchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "datetimeSchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "datetimeSchema",
   ")",
   "}",
   ",",
   "date",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "dateOnlySchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "dateOnlySchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "dateOnlySchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "dateOnlySchema",
   ")",
   "}",
   ",",
   "time",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timeOnlySchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timeOnlySchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timeOnlySchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timeOnlySchema",
   ")",
   "}",
   ",",
   "timezone",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timezoneSchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timezoneSchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timezoneSchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "timezoneSchema",
   ")",
   "}",
   ",",
   "enum",
   ":",
   "{",
   "predefinedValues",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "array",
   "(",
   ")",
   ".",
   "required",
   "(",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "items",
   "(",
   "[",
   "integerSchema",
   ",",
   "joi",
   ".",
   "string",
   "(",
   ")",
   "]",
   ")",
   ")",
   "}",
   ",",
   "uuid",
   ":",
   "{",
   "minimumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "uuidSchema",
   ")",
   ",",
   "minimumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "uuidSchema",
   ")",
   ",",
   "maximumValue",
   ":",
   "dynamicConstraintSchema",
   "(",
   "uuidSchema",
   ")",
   ",",
   "maximumValueExclusive",
   ":",
   "dynamicConstraintSchema",
   "(",
   "uuidSchema",
   ")",
   "}",
   ",",
   "attachmentReference",
   ":",
   "{",
   "maximumSize",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "max",
   "(",
   "20971520",
   ")",
   ")",
   ",",
   "supportedExtensions",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "array",
   "(",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "items",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ")",
   ")",
   ",",
   "supportedContentTypes",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "array",
   "(",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "items",
   "(",
   "joi",
   ".",
   "string",
   "(",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ")",
   ")",
   ",",
   "regexPattern",
   ":",
   "dynamicConstraintSchema",
   "(",
   "regexSchema",
   ")",
   "}",
   ",",
   "array",
   ":",
   "{",
   "mustNotBeEmpty",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "boolean",
   "(",
   ")",
   ")",
   ",",
   "minimumLength",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ".",
   "min",
   "(",
   "0",
   ")",
   ")",
   ",",
   "maximumLength",
   ":",
   "maximumSizeConstraintSchema",
   "(",
   "'minimumLength'",
   ")",
   ",",
   "arrayElementsValidator",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "lazy",
   "(",
   "(",
   ")",
   "=>",
   "schema",
   ")",
   ")",
   "}",
   ",",
   "object",
   ":",
   "{",
   "allowUnknownProperties",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "boolean",
   "(",
   ")",
   ")",
   ",",
   "propertyValidators",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "object",
   "(",
   ")",
   ".",
   "min",
   "(",
   "1",
   ")",
   ".",
   "pattern",
   "(",
   "/",
   "^.+$",
   "/",
   ",",
   "joi",
   ".",
   "lazy",
   "(",
   "(",
   ")",
   "=>",
   "schema",
   ")",
   ")",
   ")",
   "}",
   ",",
   "hashtable",
   ":",
   "{",
   "minimumSize",
   ":",
   "dynamicConstraintSchema",
   "(",
   "integerSchema",
   ".",
   "min",
   "(",
   "0",
   ")",
   ")",
   ",",
   "maximumSize",
   ":",
   "maximumSizeConstraintSchema",
   "(",
   "'minimumSize'",
   ")",
   ",",
   "hashtableKeysValidator",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "object",
   "(",
   ")",
   ".",
   "keys",
   "(",
   "{",
   "mustNotBeEmpty",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "boolean",
   "(",
   ")",
   ")",
   ",",
   "regexPattern",
   ":",
   "dynamicConstraintSchema",
   "(",
   "regexSchema",
   ")",
   "}",
   ")",
   ")",
   ",",
   "hashtableValuesValidator",
   ":",
   "dynamicConstraintSchema",
   "(",
   "joi",
   ".",
   "lazy",
   "(",
   "(",
   ")",
   "=>",
   "schema",
   ")",
   ")",
   "}",
   ",",
   "conditional",
   ":",
   "{",
   "validationCandidates",
   ":",
   "dynamicConstraintSchema",
   "(",
   "conditionalValidationCandidatesSchema",
   "(",
   ")",
   ")",
   ".",
   "required",
   "(",
   ")",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-214",
  "nl_tokens": [
   "x",
   "and",
   "y",
   "coordinates",
   "for",
   "a",
   "dom",
   "element",
   "or",
   "mouse",
   "pointer"
  ],
  "pl_tokens": [
   "function",
   "getPointerPosition",
   "(",
   "el",
   ",",
   "event",
   ")",
   "{",
   "var",
   "position",
   "=",
   "{",
   "}",
   ";",
   "var",
   "box",
   "=",
   "findPosition",
   "(",
   "el",
   ")",
   ";",
   "var",
   "boxW",
   "=",
   "el",
   ".",
   "offsetWidth",
   ";",
   "var",
   "boxH",
   "=",
   "el",
   ".",
   "offsetHeight",
   ";",
   "var",
   "boxY",
   "=",
   "box",
   ".",
   "top",
   ";",
   "var",
   "boxX",
   "=",
   "box",
   ".",
   "left",
   ";",
   "var",
   "pageY",
   "=",
   "event",
   ".",
   "pageY",
   ";",
   "var",
   "pageX",
   "=",
   "event",
   ".",
   "pageX",
   ";",
   "if",
   "(",
   "event",
   ".",
   "changedTouches",
   ")",
   "{",
   "pageX",
   "=",
   "event",
   ".",
   "changedTouches",
   "[",
   "0",
   "]",
   ".",
   "pageX",
   ";",
   "pageY",
   "=",
   "event",
   ".",
   "changedTouches",
   "[",
   "0",
   "]",
   ".",
   "pageY",
   ";",
   "}",
   "position",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "1",
   ",",
   "(",
   "boxY",
   "-",
   "pageY",
   "+",
   "boxH",
   ")",
   "/",
   "boxH",
   ")",
   ")",
   ";",
   "position",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "1",
   ",",
   "(",
   "pageX",
   "-",
   "boxX",
   ")",
   "/",
   "boxW",
   ")",
   ")",
   ";",
   "return",
   "position",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-215",
  "nl_tokens": [
   "Recurse",
   "to",
   "find",
   "directories",
   "we",
   "can",
   "watch",
   "."
  ],
  "pl_tokens": [
   "function",
   "watch",
   "(",
   "dir",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ignoreDir",
   ".",
   "test",
   "(",
   "dir",
   ")",
   "&&",
   "!",
   "map",
   "[",
   "dir",
   "]",
   ")",
   "{",
   "fs",
   ".",
   "lstat",
   "(",
   "dir",
   ",",
   "function",
   "(",
   "e",
   ",",
   "stat",
   ")",
   "{",
   "if",
   "(",
   "!",
   "e",
   ")",
   "{",
   "if",
   "(",
   "stat",
   ".",
   "isSymbolicLink",
   "(",
   ")",
   ")",
   "{",
   "var",
   "source",
   "=",
   "dir",
   "fs",
   ".",
   "readlink",
   "(",
   "source",
   ",",
   "function",
   "(",
   "e",
   ",",
   "link",
   ")",
   "{",
   "if",
   "(",
   "!",
   "e",
   ")",
   "{",
   "var",
   "dest",
   "=",
   "link",
   "if",
   "(",
   "dest",
   "[",
   "0",
   "]",
   "!==",
   "'/'",
   ")",
   "{",
   "while",
   "(",
   "dest",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "3",
   ")",
   "===",
   "'../'",
   ")",
   "{",
   "dest",
   "=",
   "dest",
   ".",
   "substr",
   "(",
   "3",
   ")",
   "source",
   "=",
   "source",
   ".",
   "replace",
   "(",
   "/",
   "\\/[^\\/]+$",
   "/",
   ",",
   "''",
   ")",
   "}",
   "if",
   "(",
   "dest",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "2",
   ")",
   "===",
   "'./'",
   ")",
   "{",
   "dest",
   "=",
   "dest",
   ".",
   "substr",
   "(",
   "2",
   ")",
   "}",
   "dest",
   "=",
   "source",
   "+",
   "'/'",
   "+",
   "dest",
   "}",
   "watch",
   "(",
   "dest",
   ")",
   "}",
   "}",
   ")",
   "}",
   "else",
   "if",
   "(",
   "stat",
   ".",
   "isDirectory",
   "(",
   ")",
   ")",
   "{",
   "addDir",
   "(",
   "dir",
   ",",
   "stat",
   ")",
   "}",
   "else",
   "{",
   "dir",
   "=",
   "dirname",
   "(",
   "dir",
   ")",
   "map",
   "[",
   "dir",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "map",
   "[",
   "dir",
   "]",
   ",",
   "stat",
   ".",
   "mtime",
   ".",
   "getTime",
   "(",
   ")",
   ")",
   "}",
   "}",
   "}",
   ")",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-216",
  "nl_tokens": [
   "/",
   "*",
   "\u2584\u2588\u2588\u2588\u2588\u2584",
   "\u2584\u2588\u2588\u2588\u2588\u2584",
   "\u2584\u2588\u2588\u2588\u2588\u2584",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2588",
   "\u2588\u2588",
   "\u2580\u2580",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2588\u2588",
   "\u2580\u2580",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2588\u2588\u2584\u2584",
   "\u2588\u2588",
   "\u2584\u2584",
   "\u2588\u2588\u2580\u2580\u2588\u2588",
   "\u2588\u2588",
   "\u2584\u2584",
   "\u2588\u2588\u2580\u2580\u2588\u2588",
   "\u2588\u2588\u2580\u2580",
   "\u2580\u2588\u2588\u2588\u2588\u2580",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2580\u2588\u2588\u2588\u2588\u2580",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2588"
  ],
  "pl_tokens": [
   "function",
   "(",
   "c",
   ",",
   "callback",
   ",",
   "$tbodies",
   ")",
   "{",
   "var",
   "cache",
   ",",
   "val",
   ",",
   "txt",
   ",",
   "rowIndex",
   ",",
   "colIndex",
   ",",
   "tbodyIndex",
   ",",
   "$tbody",
   ",",
   "$row",
   ",",
   "cols",
   ",",
   "$cells",
   ",",
   "cell",
   ",",
   "cacheTime",
   ",",
   "totalRows",
   ",",
   "rowData",
   ",",
   "prevRowData",
   ",",
   "colMax",
   ",",
   "span",
   ",",
   "cacheIndex",
   ",",
   "hasParser",
   ",",
   "<mask>",
   ",",
   "len",
   ",",
   "index",
   ",",
   "table",
   "=",
   "c",
   ".",
   "table",
   ",",
   "parsers",
   "=",
   "c",
   ".",
   "parsers",
   ";",
   "// update tbody variable",
   "c",
   ".",
   "$tbodies",
   "=",
   "c",
   ".",
   "$table",
   ".",
   "children",
   "(",
   "'tbody:not(.'",
   "+",
   "c",
   ".",
   "cssInfoBlock",
   "+",
   "')'",
   ")",
   ";",
   "$tbody",
   "=",
   "typeof",
   "$tbodies",
   "===",
   "'undefined'",
   "?",
   "c",
   ".",
   "$tbodies",
   ":",
   "$tbodies",
   ",",
   "c",
   ".",
   "cache",
   "=",
   "{",
   "}",
   ";",
   "c",
   ".",
   "totalRows",
   "=",
   "0",
   ";",
   "// if no parsers found, return - it's an empty table.",
   "if",
   "(",
   "!",
   "parsers",
   ")",
   "{",
   "return",
   "c",
   ".",
   "debug",
   "?",
   "console",
   ".",
   "warn",
   "(",
   "'Warning: *Empty table!* Not building a cache'",
   ")",
   ":",
   "''",
   ";",
   "}",
   "if",
   "(",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "cacheTime",
   "=",
   "new",
   "Date",
   "(",
   ")",
   ";",
   "}",
   "// processing icon",
   "if",
   "(",
   "c",
   ".",
   "showProcessing",
   ")",
   "{",
   "ts",
   ".",
   "isProcessing",
   "(",
   "table",
   ",",
   "true",
   ")",
   ";",
   "}",
   "for",
   "(",
   "tbodyIndex",
   "=",
   "0",
   ";",
   "tbodyIndex",
   "<",
   "$tbody",
   ".",
   "length",
   ";",
   "tbodyIndex",
   "++",
   ")",
   "{",
   "colMax",
   "=",
   "[",
   "]",
   ";",
   "// column max value per tbody",
   "cache",
   "=",
   "c",
   ".",
   "cache",
   "[",
   "tbodyIndex",
   "]",
   "=",
   "{",
   "normalized",
   ":",
   "[",
   "]",
   "// array of normalized row data; last entry contains 'rowData' above",
   "// colMax: #   // added at the end",
   "}",
   ";",
   "totalRows",
   "=",
   "(",
   "$tbody",
   "[",
   "tbodyIndex",
   "]",
   "&&",
   "$tbody",
   "[",
   "tbodyIndex",
   "]",
   ".",
   "rows",
   ".",
   "length",
   ")",
   "||",
   "0",
   ";",
   "for",
   "(",
   "rowIndex",
   "=",
   "0",
   ";",
   "rowIndex",
   "<",
   "totalRows",
   ";",
   "++",
   "rowIndex",
   ")",
   "{",
   "rowData",
   "=",
   "{",
   "// order: original row order #",
   "// $row : jQuery Object[]",
   "child",
   ":",
   "[",
   "]",
   ",",
   "// child row text (filter widget)",
   "raw",
   ":",
   "[",
   "]",
   "// original row text",
   "}",
   ";",
   "/** Add the table data to main data array */",
   "$row",
   "=",
   "$",
   "(",
   "$tbody",
   "[",
   "tbodyIndex",
   "]",
   ".",
   "rows",
   "[",
   "rowIndex",
   "]",
   ")",
   ";",
   "cols",
   "=",
   "[",
   "]",
   ";",
   "// if this is a child row, add it to the last row's children and continue to the next row",
   "// ignore child row class, if it is the first row",
   "if",
   "(",
   "$row",
   ".",
   "hasClass",
   "(",
   "c",
   ".",
   "cssChildRow",
   ")",
   "&&",
   "rowIndex",
   "!==",
   "0",
   ")",
   "{",
   "len",
   "=",
   "cache",
   ".",
   "normalized",
   ".",
   "length",
   "-",
   "1",
   ";",
   "prevRowData",
   "=",
   "cache",
   ".",
   "normalized",
   "[",
   "len",
   "]",
   "[",
   "c",
   ".",
   "columns",
   "]",
   ";",
   "prevRowData",
   ".",
   "$row",
   "=",
   "prevRowData",
   ".",
   "$row",
   ".",
   "add",
   "(",
   "$row",
   ")",
   ";",
   "// add 'hasChild' class name to parent row",
   "if",
   "(",
   "!",
   "$row",
   ".",
   "prev",
   "(",
   ")",
   ".",
   "hasClass",
   "(",
   "c",
   ".",
   "cssChildRow",
   ")",
   ")",
   "{",
   "$row",
   ".",
   "prev",
   "(",
   ")",
   ".",
   "addClass",
   "(",
   "ts",
   ".",
   "css",
   ".",
   "cssHasChild",
   ")",
   ";",
   "}",
   "// save child row content (un-parsed!)",
   "$cells",
   "=",
   "$row",
   ".",
   "children",
   "(",
   "'th, td'",
   ")",
   ";",
   "len",
   "=",
   "prevRowData",
   ".",
   "child",
   ".",
   "length",
   ";",
   "prevRowData",
   ".",
   "child",
   "[",
   "len",
   "]",
   "=",
   "[",
   "]",
   ";",
   "// child row content does not account for colspans/rowspans; so indexing may be off",
   "cacheIndex",
   "=",
   "0",
   ";",
   "max",
   "=",
   "c",
   ".",
   "columns",
   ";",
   "for",
   "(",
   "colIndex",
   "=",
   "0",
   ";",
   "colIndex",
   "<",
   "max",
   ";",
   "colIndex",
   "++",
   ")",
   "{",
   "cell",
   "=",
   "$cells",
   "[",
   "colIndex",
   "]",
   ";",
   "if",
   "(",
   "cell",
   ")",
   "{",
   "prevRowData",
   ".",
   "child",
   "[",
   "len",
   "]",
   "[",
   "colIndex",
   "]",
   "=",
   "ts",
   ".",
   "getParsedText",
   "(",
   "c",
   ",",
   "cell",
   ",",
   "colIndex",
   ")",
   ";",
   "span",
   "=",
   "$cells",
   "[",
   "colIndex",
   "]",
   ".",
   "colSpan",
   "-",
   "1",
   ";",
   "if",
   "(",
   "span",
   ">",
   "0",
   ")",
   "{",
   "cacheIndex",
   "+=",
   "span",
   ";",
   "max",
   "+=",
   "span",
   ";",
   "}",
   "}",
   "cacheIndex",
   "++",
   ";",
   "}",
   "// go to the next for loop",
   "continue",
   ";",
   "}",
   "rowData",
   ".",
   "$row",
   "=",
   "$row",
   ";",
   "rowData",
   ".",
   "order",
   "=",
   "rowIndex",
   ";",
   "// add original row position to rowCache",
   "cacheIndex",
   "=",
   "0",
   ";",
   "max",
   "=",
   "c",
   ".",
   "columns",
   ";",
   "for",
   "(",
   "colIndex",
   "=",
   "0",
   ";",
   "colIndex",
   "<",
   "max",
   ";",
   "++",
   "colIndex",
   ")",
   "{",
   "cell",
   "=",
   "$row",
   "[",
   "0",
   "]",
   ".",
   "cells",
   "[",
   "colIndex",
   "]",
   ";",
   "if",
   "(",
   "cell",
   "&&",
   "cacheIndex",
   "<",
   "c",
   ".",
   "columns",
   ")",
   "{",
   "hasParser",
   "=",
   "typeof",
   "parsers",
   "[",
   "cacheIndex",
   "]",
   "!==",
   "'undefined'",
   ";",
   "if",
   "(",
   "!",
   "hasParser",
   "&&",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "console",
   ".",
   "warn",
   "(",
   "'No parser found for row: '",
   "+",
   "rowIndex",
   "+",
   "', column: '",
   "+",
   "colIndex",
   "+",
   "'; cell containing: \"'",
   "+",
   "$",
   "(",
   "cell",
   ")",
   ".",
   "text",
   "(",
   ")",
   "+",
   "'\"; does it have a header?'",
   ")",
   ";",
   "}",
   "val",
   "=",
   "ts",
   ".",
   "getElementText",
   "(",
   "c",
   ",",
   "cell",
   ",",
   "cacheIndex",
   ")",
   ";",
   "rowData",
   ".",
   "raw",
   "[",
   "cacheIndex",
   "]",
   "=",
   "val",
   ";",
   "// save original row text",
   "// save raw column text even if there is no parser set",
   "txt",
   "=",
   "ts",
   ".",
   "getParsedText",
   "(",
   "c",
   ",",
   "cell",
   ",",
   "cacheIndex",
   ",",
   "val",
   ")",
   ";",
   "cols",
   "[",
   "cacheIndex",
   "]",
   "=",
   "txt",
   ";",
   "if",
   "(",
   "hasParser",
   "&&",
   "(",
   "parsers",
   "[",
   "cacheIndex",
   "]",
   ".",
   "type",
   "||",
   "''",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   "===",
   "'numeric'",
   ")",
   "{",
   "// determine column max value (ignore sign)",
   "colMax",
   "[",
   "cacheIndex",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "txt",
   ")",
   "||",
   "0",
   ",",
   "colMax",
   "[",
   "cacheIndex",
   "]",
   "||",
   "0",
   ")",
   ";",
   "}",
   "// allow colSpan in tbody",
   "span",
   "=",
   "cell",
   ".",
   "colSpan",
   "-",
   "1",
   ";",
   "if",
   "(",
   "span",
   ">",
   "0",
   ")",
   "{",
   "index",
   "=",
   "0",
   ";",
   "while",
   "(",
   "index",
   "<=",
   "span",
   ")",
   "{",
   "// duplicate text (or not) to spanned columns",
   "// instead of setting duplicate span to empty string, use textExtraction to try to get a value",
   "// see http://stackoverflow.com/q/36449711/145346",
   "txt",
   "=",
   "c",
   ".",
   "duplicateSpan",
   "||",
   "index",
   "===",
   "0",
   "?",
   "val",
   ":",
   "typeof",
   "c",
   ".",
   "textExtraction",
   "!==",
   "'string'",
   "?",
   "ts",
   ".",
   "getElementText",
   "(",
   "c",
   ",",
   "cell",
   ",",
   "cacheIndex",
   "+",
   "index",
   ")",
   "||",
   "''",
   ":",
   "''",
   ";",
   "rowData",
   ".",
   "raw",
   "[",
   "cacheIndex",
   "+",
   "index",
   "]",
   "=",
   "txt",
   ";",
   "cols",
   "[",
   "cacheIndex",
   "+",
   "index",
   "]",
   "=",
   "txt",
   ";",
   "index",
   "++",
   ";",
   "}",
   "cacheIndex",
   "+=",
   "span",
   ";",
   "max",
   "+=",
   "span",
   ";",
   "}",
   "}",
   "cacheIndex",
   "++",
   ";",
   "}",
   "// ensure rowData is always in the same location (after the last column)",
   "cols",
   "[",
   "c",
   ".",
   "columns",
   "]",
   "=",
   "rowData",
   ";",
   "cache",
   ".",
   "normalized",
   "[",
   "cache",
   ".",
   "normalized",
   ".",
   "length",
   "]",
   "=",
   "cols",
   ";",
   "}",
   "cache",
   ".",
   "colMax",
   "=",
   "colMax",
   ";",
   "// total up rows, not including child rows",
   "c",
   ".",
   "totalRows",
   "+=",
   "cache",
   ".",
   "normalized",
   ".",
   "length",
   ";",
   "}",
   "if",
   "(",
   "c",
   ".",
   "showProcessing",
   ")",
   "{",
   "ts",
   ".",
   "isProcessing",
   "(",
   "table",
   ")",
   ";",
   "// remove processing icon",
   "}",
   "if",
   "(",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "len",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "5",
   ",",
   "c",
   ".",
   "cache",
   "[",
   "0",
   "]",
   ".",
   "normalized",
   ".",
   "length",
   ")",
   ";",
   "console",
   "[",
   "console",
   ".",
   "group",
   "?",
   "'group'",
   ":",
   "'log'",
   "]",
   "(",
   "'Building cache for '",
   "+",
   "c",
   ".",
   "totalRows",
   "+",
   "' rows (showing '",
   "+",
   "len",
   "+",
   "' rows in log)'",
   "+",
   "ts",
   ".",
   "benchmark",
   "(",
   "cacheTime",
   ")",
   ")",
   ";",
   "val",
   "=",
   "{",
   "}",
   ";",
   "for",
   "(",
   "colIndex",
   "=",
   "0",
   ";",
   "colIndex",
   "<",
   "c",
   ".",
   "columns",
   ";",
   "colIndex",
   "++",
   ")",
   "{",
   "for",
   "(",
   "cacheIndex",
   "=",
   "0",
   ";",
   "cacheIndex",
   "<",
   "len",
   ";",
   "cacheIndex",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "val",
   "[",
   "'row: '",
   "+",
   "cacheIndex",
   "]",
   ")",
   "{",
   "val",
   "[",
   "'row: '",
   "+",
   "cacheIndex",
   "]",
   "=",
   "{",
   "}",
   ";",
   "}",
   "val",
   "[",
   "'row: '",
   "+",
   "cacheIndex",
   "]",
   "[",
   "c",
   ".",
   "$headerIndexed",
   "[",
   "colIndex",
   "]",
   ".",
   "text",
   "(",
   ")",
   "]",
   "=",
   "c",
   ".",
   "cache",
   "[",
   "0",
   "]",
   ".",
   "normalized",
   "[",
   "cacheIndex",
   "]",
   "[",
   "colIndex",
   "]",
   ";",
   "}",
   "}",
   "console",
   "[",
   "console",
   ".",
   "table",
   "?",
   "'table'",
   ":",
   "'log'",
   "]",
   "(",
   "val",
   ")",
   ";",
   "if",
   "(",
   "console",
   ".",
   "groupEnd",
   ")",
   "{",
   "console",
   ".",
   "groupEnd",
   "(",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "$",
   ".",
   "isFunction",
   "(",
   "callback",
   ")",
   ")",
   "{",
   "callback",
   "(",
   "table",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-217",
  "nl_tokens": [
   "When",
   "mock",
   ".",
   "time",
   ".",
   "add",
   "is",
   "called",
   "run",
   "schedules",
   "whose",
   "time",
   "has",
   "come",
   "."
  ],
  "pl_tokens": [
   "function",
   "runSchedules",
   "(",
   ")",
   "{",
   "// Sort by descending time order.",
   "schedules",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "b",
   ".",
   "time",
   "-",
   "a",
   ".",
   "time",
   "}",
   ")",
   "// Track the soonest interval run time, in case we're already there.",
   "var",
   "minNewTime",
   "=",
   "Number",
   ".",
   "MAX_VALUE",
   "// Iterate, from the end until we reach the current mock time.",
   "var",
   "i",
   "=",
   "schedules",
   ".",
   "length",
   "-",
   "1",
   "var",
   "schedule",
   "=",
   "schedules",
   "[",
   "i",
   "]",
   "while",
   "(",
   "schedule",
   "&&",
   "(",
   "schedule",
   ".",
   "time",
   "<=",
   "mock",
   ".",
   "time",
   ".",
   "_CURRENT_TIME",
   ")",
   ")",
   "{",
   "schedule",
   ".",
   "fn",
   "(",
   ")",
   "// setTimeout schedules can be deleted.",
   "if",
   "(",
   "!",
   "schedule",
   ".",
   "interval",
   ")",
   "{",
   "schedules",
   ".",
   "splice",
   "(",
   "i",
   ",",
   "1",
   ")",
   "// setInterval schedules should schedule the next run.",
   "}",
   "else",
   "{",
   "schedule",
   ".",
   "time",
   "+=",
   "schedule",
   ".",
   "interval",
   "minNewTime",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minNewTime",
   ",",
   "schedule",
   ".",
   "time",
   ")",
   "}",
   "schedule",
   "=",
   "schedules",
   "[",
   "--",
   "i",
   "]",
   "}",
   "// If an interval schedule is in the past, catch it up.",
   "if",
   "(",
   "minNewTime",
   "<=",
   "mock",
   ".",
   "time",
   ".",
   "_CURRENT_TIME",
   ")",
   "{",
   "process",
   ".",
   "nextTick",
   "(",
   "runSchedules",
   ")",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-218",
  "nl_tokens": [
   "We",
   "create",
   "DB",
   "constructors",
   "dynamically",
   "to",
   "avoid",
   "assigning",
   "the",
   "db",
   "or",
   "collections",
   "directly",
   "to",
   "the",
   "database",
   "instance",
   "thereby",
   "avoiding",
   "them",
   "displaying",
   "in",
   "autocomplete",
   "mixed",
   "together",
   "with",
   "the",
   "collection",
   "names",
   "."
  ],
  "pl_tokens": [
   "function",
   "createConstructor",
   "(",
   "db",
   ")",
   "{",
   "var",
   "collections",
   "=",
   "[",
   "]",
   ";",
   "function",
   "DB",
   "(",
   ")",
   "{",
   "this",
   ".",
   "cols",
   "(",
   "false",
   ",",
   "noop",
   ")",
   ";",
   "}",
   "/**\n   * Logs help text for all db methods\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "help",
   "=",
   "function",
   "(",
   ")",
   "{",
   "var",
   "proto",
   "=",
   "this",
   ".",
   "constructor",
   ".",
   "prototype",
   ";",
   "var",
   "len",
   "=",
   "0",
   ";",
   "var",
   "msgs",
   "=",
   "[",
   "]",
   ";",
   "Object",
   ".",
   "keys",
   "(",
   "proto",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "method",
   ")",
   "{",
   "if",
   "(",
   "proto",
   "[",
   "method",
   "]",
   ".",
   "help",
   ")",
   "{",
   "var",
   "msg",
   "=",
   "proto",
   "[",
   "method",
   "]",
   ".",
   "help",
   "(",
   "true",
   ")",
   ";",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "method",
   ".",
   "length",
   ")",
   ";",
   "msgs",
   ".",
   "push",
   "(",
   "{",
   "method",
   ":",
   "method",
   ",",
   "text",
   ":",
   "msg",
   "}",
   ")",
   "}",
   "}",
   ")",
   "msgs",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "a",
   ".",
   "method",
   ">",
   "b",
   ".",
   "method",
   "?",
   "1",
   ":",
   "a",
   ".",
   "method",
   "<",
   "b",
   ".",
   "method",
   "?",
   "-",
   "1",
   ":",
   "0",
   "}",
   ")",
   "msgs",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "msg",
   ")",
   "{",
   "var",
   "space",
   "=",
   "Array",
   "(",
   "len",
   "-",
   "msg",
   ".",
   "method",
   ".",
   "length",
   "+",
   "1",
   ")",
   ".",
   "join",
   "(",
   "' '",
   ")",
   ";",
   "log",
   "(",
   "\"db.\"",
   "+",
   "msg",
   ".",
   "method",
   "+",
   "\"() \"",
   "+",
   "space",
   "+",
   "msg",
   ".",
   "text",
   ")",
   ";",
   "}",
   ")",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Logs help text for all db methods\"",
   ")",
   ";",
   "/**\n   * Drop this database\n   *\n   * @param {Function} [cb]\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "drop",
   "=",
   "function",
   "(",
   "cb",
   ")",
   "{",
   "var",
   "name",
   "=",
   "db",
   ".",
   "databaseName",
   ";",
   "db",
   ".",
   "dropDatabase",
   "(",
   "cb",
   "||",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "console",
   ".",
   "error",
   "(",
   "err",
   ")",
   ";",
   "}",
   "db",
   ".",
   "collections",
   "(",
   "function",
   "(",
   ")",
   "{",
   "log",
   "(",
   "'database \"%s\" was dropped'",
   ",",
   "name",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Drops the database\"",
   ")",
   ";",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'drop'",
   ")",
   ";",
   "/**\n   * Close this database connection\n   *\n   * @param {Function} [cb]\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "close",
   "=",
   "function",
   "(",
   "cb",
   ")",
   "{",
   "if",
   "(",
   "'function'",
   "!=",
   "typeof",
   "cb",
   ")",
   "{",
   "cb",
   "=",
   "handleError",
   ";",
   "}",
   "db",
   ".",
   "close",
   "(",
   "true",
   ",",
   "cb",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Closes the database connection\"",
   ")",
   ";",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'close'",
   ")",
   ";",
   "/**\n   * Open the database connection\n   *\n   * @param {Function} [cb]\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "open",
   "=",
   "function",
   "(",
   "cb",
   ")",
   "{",
   "db",
   ".",
   "open",
   "(",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "handleError",
   "(",
   "err",
   ",",
   "cb",
   ")",
   ";",
   "}",
   "if",
   "(",
   "'function'",
   "==",
   "typeof",
   "cb",
   ")",
   "{",
   "cb",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Opens the database connection\"",
   ")",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'open'",
   ")",
   ";",
   "/**\n   * Use a different database\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "use",
   "=",
   "function",
   "(",
   "name",
   ")",
   "{",
   "return",
   "create",
   "(",
   "db",
   ".",
   "db",
   "(",
   "name",
   ")",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Changes to a different database\"",
   ")",
   "/**\n   * Access a collection\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "col",
   "=",
   "function",
   "(",
   "name",
   ",",
   "opts",
   ")",
   "{",
   "if",
   "(",
   "this",
   "[",
   "name",
   "]",
   ")",
   "{",
   "return",
   "this",
   "[",
   "name",
   "]",
   ";",
   "}",
   "// accessor management",
   "collections",
   ".",
   "push",
   "(",
   "name",
   ")",
   ";",
   "return",
   "this",
   "[",
   "name",
   "]",
   "=",
   "db",
   ".",
   "collection",
   "(",
   "name",
   ",",
   "opts",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Accesses a collection\"",
   ")",
   "/**\n   * Creates a collection\n   *\n   * @param {String} name\n   * @param {Object} [options]\n   * @param {Function} [cb]\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "createCol",
   "=",
   "function",
   "(",
   "name",
   ",",
   "opts",
   ",",
   "cb",
   ")",
   "{",
   "if",
   "(",
   "'function'",
   "==",
   "typeof",
   "opts",
   ")",
   "{",
   "cb",
   "=",
   "opts",
   ";",
   "opts",
   "=",
   "{",
   "}",
   ";",
   "}",
   "if",
   "(",
   "'string'",
   "!=",
   "typeof",
   "name",
   ")",
   "{",
   "error",
   "(",
   "new",
   "TypeError",
   "(",
   "'collection name must be a string'",
   ")",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "!",
   "opts",
   ")",
   "opts",
   "=",
   "{",
   "}",
   ";",
   "// force error if collection exists",
   "if",
   "(",
   "!",
   "(",
   "'strict'",
   "in",
   "opts",
   ")",
   ")",
   "opts",
   ".",
   "strict",
   "=",
   "true",
   ";",
   "var",
   "self",
   "=",
   "this",
   ";",
   "db",
   ".",
   "createCollection",
   "(",
   "name",
   ",",
   "opts",
   ",",
   "function",
   "(",
   "err",
   ",",
   "col",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "/",
   "already exists",
   "/",
   ".",
   "test",
   "(",
   "err",
   ")",
   ")",
   "{",
   "// remove the \"safe mode\" message",
   "err",
   ".",
   "message",
   "=",
   "'collection \"'",
   "+",
   "name",
   "+",
   "'\" already exists'",
   ";",
   "}",
   "return",
   "handleError",
   "(",
   "err",
   ")",
   ";",
   "}",
   "// register name for accessor management",
   "collections",
   ".",
   "push",
   "(",
   "name",
   ")",
   ";",
   "return",
   "self",
   "[",
   "name",
   "]",
   "=",
   "col",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Creates a collection\"",
   ")",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'createCol'",
   ")",
   ";",
   "/**\n   * Refresh and return the list of collections on this database\n   *\n   * @param {Boolean} [print] if the collection names should be printed\n   * @param {Function} [cb] passed any error and the result array\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "cols",
   "=",
   "function",
   "(",
   "print",
   ",",
   "cb",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   ";",
   "if",
   "(",
   "'function'",
   "==",
   "typeof",
   "print",
   ")",
   "{",
   "cb",
   "=",
   "print",
   ";",
   "print",
   "=",
   "false",
   ";",
   "}",
   "if",
   "(",
   "undefined",
   "==",
   "print",
   ")",
   "print",
   "=",
   "true",
   "db",
   ".",
   "collectionNames",
   "(",
   "{",
   "namesOnly",
   ":",
   "true",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "names",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "cb",
   ")",
   "return",
   "cb",
   "(",
   "err",
   ")",
   ";",
   "console",
   ".",
   "error",
   "(",
   "err",
   ".",
   "stack",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "!",
   "Array",
   ".",
   "isArray",
   "(",
   "names",
   ")",
   ")",
   "{",
   "names",
   "=",
   "[",
   "]",
   ";",
   "}",
   "// remove cached collections",
   "collections",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "name",
   ")",
   "{",
   "delete",
   "self",
   "[",
   "name",
   "]",
   ";",
   "}",
   ")",
   ";",
   "// strip db from name",
   "var",
   "ns",
   "=",
   "db",
   ".",
   "databaseName",
   ";",
   "var",
   "len",
   "=",
   "ns",
   ".",
   "length",
   "+",
   "1",
   ";",
   "names",
   "=",
   "names",
   ".",
   "map",
   "(",
   "function",
   "(",
   "name",
   ")",
   "{",
   "return",
   "name",
   ".",
   "substring",
   "(",
   "len",
   ")",
   ";",
   "}",
   ")",
   ";",
   "collections",
   "=",
   "names",
   ";",
   "// expose collection access from `db`",
   "// TODO abstract collection",
   "names",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "name",
   ")",
   "{",
   "self",
   "[",
   "name",
   "]",
   "=",
   "db",
   ".",
   "collection",
   "(",
   "name",
   ")",
   ";",
   "// handle system.indexes etc",
   "if",
   "(",
   "/",
   "\\.",
   "/",
   ".",
   "test",
   "(",
   "name",
   ")",
   ")",
   "{",
   "var",
   "parts",
   "=",
   "name",
   ".",
   "split",
   "(",
   "'.'",
   ")",
   ";",
   "parts",
   ".",
   "reduce",
   "(",
   "function",
   "(",
   "out",
   ",",
   "part",
   ",",
   "i",
   ")",
   "{",
   "if",
   "(",
   "i",
   "==",
   "parts",
   ".",
   "length",
   "-",
   "1",
   ")",
   "{",
   "out",
   "[",
   "part",
   "]",
   "=",
   "self",
   "[",
   "name",
   "]",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "!",
   "out",
   "[",
   "part",
   "]",
   ")",
   "{",
   "out",
   "[",
   "part",
   "]",
   "=",
   "{",
   "}",
   ";",
   "}",
   "}",
   "return",
   "out",
   "[",
   "part",
   "]",
   ";",
   "}",
   ",",
   "self",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "if",
   "(",
   "cb",
   ")",
   "return",
   "cb",
   "(",
   "err",
   ",",
   "names",
   ")",
   ";",
   "if",
   "(",
   "print",
   ")",
   "{",
   "console",
   ".",
   "log",
   "(",
   ")",
   ";",
   "names",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "name",
   ")",
   "{",
   "log",
   "(",
   "name",
   ")",
   ";",
   "}",
   ")",
   "global",
   ".",
   "repl",
   ".",
   "displayPrompt",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Retreives an array of collection names in the db\"",
   ")",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'cols'",
   ")",
   ";",
   "/**\n   * Execute a command on the database\n   *\n   * @param {Object} cmd\n   * @param {Object} [opts]\n   * @param {Function} [cb]\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "runCommand",
   "=",
   "function",
   "(",
   "cmd",
   ",",
   "opts",
   ",",
   "cb",
   ")",
   "{",
   "if",
   "(",
   "'function'",
   "==",
   "typeof",
   "opts",
   ")",
   "{",
   "cb",
   "=",
   "opts",
   ";",
   "opts",
   "=",
   "{",
   "}",
   ";",
   "}",
   "if",
   "(",
   "!",
   "cmd",
   ")",
   "{",
   "var",
   "err",
   "=",
   "new",
   "Error",
   "(",
   "'missing command'",
   ")",
   ";",
   "if",
   "(",
   "cb",
   ")",
   "return",
   "cb",
   "(",
   "err",
   ")",
   ";",
   "console",
   ".",
   "error",
   "(",
   "err",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "!",
   "cb",
   ")",
   "cb",
   "=",
   "p",
   ";",
   "if",
   "(",
   "!",
   "opts",
   ")",
   "opts",
   "=",
   "{",
   "}",
   ";",
   "var",
   "admin",
   "=",
   "!",
   "!",
   "opts",
   ".",
   "admin",
   ";",
   "delete",
   "opts",
   ".",
   "admin",
   ";",
   "var",
   "method",
   "=",
   "admin",
   "?",
   "'executeDbAdminCommand'",
   ":",
   "'executeDbCommand'",
   "db",
   "[",
   "method",
   "]",
   "(",
   "cmd",
   ",",
   "opts",
   ",",
   "cb",
   ")",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Runs a command on the database\"",
   ")",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'runCommand'",
   ")",
   ";",
   "/**\n   * Retreive database stats\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "stats",
   "=",
   "function",
   "(",
   "scale",
   ",",
   "cb",
   ")",
   "{",
   "if",
   "(",
   "'function'",
   "==",
   "typeof",
   "scale",
   ")",
   "cb",
   "=",
   "scale",
   ";",
   "scale",
   "|=",
   "0",
   ";",
   "db",
   ".",
   "stats",
   "(",
   "function",
   "(",
   "err",
   ",",
   "stats",
   ")",
   "{",
   "cb",
   "(",
   "err",
   ",",
   "stats",
   ")",
   ";",
   "}",
   ")",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "'Retreive database stats'",
   ")",
   ";",
   "wrap",
   "(",
   "DB",
   ".",
   "prototype",
   ",",
   "'stats'",
   ")",
   ";",
   "/**\n   * console.log helper\n   */",
   ";",
   "(",
   "DB",
   ".",
   "prototype",
   ".",
   "inspect",
   "=",
   "function",
   "(",
   ")",
   "{",
   "return",
   "db",
   ".",
   "databaseName",
   ";",
   "}",
   ")",
   ".",
   "help",
   "=",
   "help",
   "(",
   "\"Returns the name of the database\"",
   ")",
   ";",
   "return",
   "DB",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-219",
  "nl_tokens": [
   "This",
   "is",
   "an",
   "example",
   "of",
   "custom",
   "transform",
   "function"
  ],
  "pl_tokens": [
   "function",
   "(",
   "element",
   ",",
   "transform",
   ",",
   "touch",
   ")",
   "{",
   "//",
   "// use translate both as basis for the new transform:",
   "//",
   "var",
   "t",
   "=",
   "$drag",
   ".",
   "TRANSLATE_BOTH",
   "(",
   "element",
   ",",
   "transform",
   ",",
   "touch",
   ")",
   ";",
   "//",
   "// Add rotation:",
   "//",
   "var",
   "Dx",
   "=",
   "touch",
   ".",
   "distanceX",
   ";",
   "var",
   "t0",
   "=",
   "touch",
   ".",
   "startTransform",
   ";",
   "var",
   "sign",
   "=",
   "Dx",
   "<",
   "0",
   "?",
   "-",
   "1",
   ":",
   "1",
   ";",
   "var",
   "angle",
   "=",
   "sign",
   "*",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "Dx",
   ")",
   "/",
   "700",
   ")",
   "*",
   "30",
   ",",
   "30",
   ")",
   ";",
   "t",
   ".",
   "rotateZ",
   "=",
   "angle",
   "+",
   "(",
   "Math",
   ".",
   "round",
   "(",
   "t0",
   ".",
   "rotateZ",
   ")",
   ")",
   ";",
   "return",
   "t",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-220",
  "nl_tokens": [
   "TODO",
   ":",
   "have",
   "to",
   "restrict",
   "max",
   "count",
   "to",
   "improve",
   "response",
   "Append",
   "more",
   "to",
   "word",
   "list",
   "according",
   "to",
   "a",
   "filter",
   "or",
   "expected",
   "size",
   "."
  ],
  "pl_tokens": [
   "function",
   "appendMore",
   "(",
   "word",
   ",",
   "list",
   ",",
   "nextKdx",
   ",",
   "expectedSize",
   ",",
   "filter",
   ",",
   "ticket",
   ")",
   "{",
   "if",
   "(",
   "ticket",
   "!==",
   "mutual_ticket",
   ")",
   "{",
   "throw",
   "'force terminated'",
   ";",
   "}",
   "if",
   "(",
   "filter",
   ")",
   "{",
   "if",
   "(",
   "_trail",
   ".",
   "count",
   "<",
   "expectedSize",
   "&&",
   "nextKdx",
   "&&",
   "nextKdx",
   ".",
   "first_word",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "word",
   ".",
   "length",
   ")",
   "===",
   "word",
   ")",
   "{",
   "return",
   "loadKeys",
   "(",
   "nextKdx",
   ")",
   ".",
   "delay",
   "(",
   "30",
   ")",
   ".",
   "then",
   "(",
   "function",
   "(",
   "more",
   ")",
   "{",
   "_trail",
   ".",
   "offset",
   "=",
   "0",
   ";",
   "_trail",
   ".",
   "block",
   "=",
   "nextKdx",
   ".",
   "index",
   ";",
   "Array",
   ".",
   "prototype",
   ".",
   "push",
   ".",
   "apply",
   "(",
   "list",
   ",",
   "more",
   ".",
   "filter",
   "(",
   "filter",
   ",",
   "_trail",
   ")",
   ")",
   ";",
   "return",
   "appendMore",
   "(",
   "word",
   ",",
   "list",
   ",",
   "KEY_INDEX",
   "[",
   "nextKdx",
   ".",
   "index",
   "+",
   "1",
   "]",
   ",",
   "expectedSize",
   ",",
   "filter",
   ",",
   "ticket",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "list",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "_trail",
   ".",
   "exhausted",
   "=",
   "true",
   ";",
   "}",
   "return",
   "resolve",
   "(",
   "list",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "var",
   "shortage",
   "=",
   "expectedSize",
   "-",
   "list",
   ".",
   "length",
   ";",
   "if",
   "(",
   "shortage",
   ">",
   "0",
   "&&",
   "nextKdx",
   ")",
   "{",
   "_trail",
   ".",
   "block",
   "=",
   "nextKdx",
   ".",
   "index",
   ";",
   "return",
   "loadKeys",
   "(",
   "nextKdx",
   ")",
   ".",
   "then",
   "(",
   "function",
   "(",
   "more",
   ")",
   "{",
   "_trail",
   ".",
   "offset",
   "=",
   "0",
   ";",
   "_trail",
   ".",
   "pos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "shortage",
   ",",
   "more",
   ".",
   "length",
   ")",
   ";",
   "Array",
   ".",
   "prototype",
   ".",
   "push",
   ".",
   "apply",
   "(",
   "list",
   ",",
   "more",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "shortage",
   ")",
   ")",
   ";",
   "return",
   "appendMore",
   "(",
   "word",
   ",",
   "list",
   ",",
   "KEY_INDEX",
   "[",
   "nextKdx",
   ".",
   "index",
   "+",
   "1",
   "]",
   ",",
   "expectedSize",
   ",",
   "filter",
   ",",
   "ticket",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "_trail",
   ".",
   "pos",
   ">",
   "expectedSize",
   ")",
   "{",
   "_trail",
   ".",
   "pos",
   "=",
   "expectedSize",
   ";",
   "}",
   "list",
   "=",
   "list",
   ".",
   "slice",
   "(",
   "0",
   ",",
   "expectedSize",
   ")",
   ";",
   "_trail",
   ".",
   "count",
   "=",
   "list",
   ".",
   "length",
   ";",
   "_trail",
   ".",
   "total",
   "+=",
   "_trail",
   ".",
   "count",
   ";",
   "return",
   "resolve",
   "(",
   "list",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-221",
  "nl_tokens": [
   "Initialize",
   "backoff",
   "timer",
   "with",
   "opts",
   "."
  ],
  "pl_tokens": [
   "function",
   "Backoff$1",
   "(",
   "opts",
   ")",
   "{",
   "opts",
   "=",
   "opts",
   "||",
   "{",
   "}",
   ";",
   "this",
   ".",
   "ms",
   "=",
   "opts",
   ".",
   "<mask>",
   "||",
   "100",
   ";",
   "this",
   ".",
   "max",
   "=",
   "opts",
   ".",
   "max",
   "||",
   "10000",
   ";",
   "this",
   ".",
   "factor",
   "=",
   "opts",
   ".",
   "factor",
   "||",
   "2",
   ";",
   "this",
   ".",
   "jitter",
   "=",
   "opts",
   ".",
   "jitter",
   ">",
   "0",
   "&&",
   "opts",
   ".",
   "jitter",
   "<=",
   "1",
   "?",
   "opts",
   ".",
   "jitter",
   ":",
   "0",
   ";",
   "this",
   ".",
   "attempts",
   "=",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-222",
  "nl_tokens": [
   "Exporte",
   "la",
   "s\u00e9lection",
   "sous",
   "forme",
   "d",
   "objet",
   "Canvas"
  ],
  "pl_tokens": [
   "function",
   "(",
   "width",
   ",",
   "height",
   ")",
   "{",
   "var",
   "box",
   "=",
   "this",
   ".",
   "selection",
   ".",
   "getBBox",
   "(",
   ")",
   ";",
   "return",
   "JSYG",
   "(",
   "this",
   ".",
   "node",
   ")",
   ".",
   "toCanvas",
   "(",
   ")",
   ".",
   "then",
   "(",
   "function",
   "(",
   "canvas",
   ")",
   "{",
   "var",
   "maxWidth",
   "=",
   "canvas",
   ".",
   "getAttribute",
   "(",
   "\"width\"",
   ")",
   ",",
   "maxHeight",
   "=",
   "canvas",
   ".",
   "getAttribute",
   "(",
   "\"height\"",
   ")",
   ",",
   "x",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "box",
   ".",
   "x",
   ")",
   ",",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "box",
   ".",
   "y",
   ")",
   ",",
   "boxWidth",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxWidth",
   ",",
   "box",
   ".",
   "width",
   ")",
   ",",
   "boxHeight",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxHeight",
   ",",
   "box",
   ".",
   "height",
   ")",
   ";",
   "canvas",
   "=",
   "new",
   "Canvas",
   "(",
   "canvas",
   ")",
   ";",
   "canvas",
   "=",
   "canvas",
   ".",
   "crop",
   "(",
   "x",
   ",",
   "y",
   ",",
   "boxWidth",
   ",",
   "boxHeight",
   ")",
   ";",
   "if",
   "(",
   "width",
   "!=",
   "null",
   "||",
   "height",
   "!=",
   "null",
   ")",
   "canvas",
   "=",
   "canvas",
   ".",
   "resize",
   "(",
   "width",
   ",",
   "height",
   ")",
   ";",
   "return",
   "canvas",
   "[",
   "0",
   "]",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-223",
  "nl_tokens": [
   "Automatically",
   "calculate",
   "date",
   "frequency",
   "if",
   "not",
   "selected"
  ],
  "pl_tokens": [
   "function",
   "autoDateFormatAndFrequency",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "dateFormat",
   ",",
   "availableWidth",
   ")",
   "{",
   "var",
   "timespan",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "maxDate",
   "-",
   "minDate",
   ")",
   ";",
   "var",
   "years",
   "=",
   "timespan",
   "/",
   "31536000000",
   ";",
   "var",
   "months",
   "=",
   "timespan",
   "/",
   "2628000000",
   ";",
   "var",
   "days",
   "=",
   "timespan",
   "/",
   "86400000",
   ";",
   "var",
   "yearGap",
   ";",
   "var",
   "hourGap",
   ";",
   "var",
   "interval",
   ";",
   "var",
   "targetPixelGap",
   "=",
   "64",
   ";",
   "var",
   "maximum_ticks",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "availableWidth",
   "/",
   "targetPixelGap",
   ")",
   ",",
   "1",
   ")",
   ";",
   "var",
   "time_gap",
   "=",
   "timespan",
   "/",
   "maximum_ticks",
   ";",
   "if",
   "(",
   "dateFormat",
   "==",
   "\"auto\"",
   ")",
   "{",
   "//lets go small to large",
   "if",
   "(",
   "days",
   "<=",
   "2",
   ")",
   "{",
   "dateFormat",
   "=",
   "\"h\"",
   ";",
   "}",
   "else",
   "if",
   "(",
   "days",
   "<=",
   "91",
   ")",
   "{",
   "dateFormat",
   "=",
   "\"M1d\"",
   ";",
   "}",
   "else",
   "if",
   "(",
   "months",
   "<",
   "36",
   ")",
   "{",
   "dateFormat",
   "=",
   "\"M\"",
   ";",
   "}",
   "else",
   "{",
   "dateFormat",
   "=",
   "\"yy\"",
   ";",
   "}",
   "}",
   "var",
   "gapInYears",
   "=",
   "humanReadableNumber",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "time_gap",
   "/",
   "31536000000",
   ")",
   ")",
   ";",
   "var",
   "gapInMonths",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "time_gap",
   "/",
   "2628000000",
   ")",
   ";",
   "var",
   "gapInDays",
   "=",
   "humanReadableNumber",
   "(",
   "time_gap",
   "/",
   "86400000",
   ")",
   ";",
   "var",
   "gapInHours",
   "=",
   "humanReadableNumber",
   "(",
   "time_gap",
   "/",
   "3600000",
   ")",
   ";",
   "//make sure that the interval include the maxDate in the interval list",
   "maxDate",
   ".",
   "addMilliseconds",
   "(",
   "0.1",
   ")",
   ";",
   "switch",
   "(",
   "dateFormat",
   ")",
   "{",
   "case",
   "\"yy\"",
   ":",
   "// Add a day to the max date for years to make inclusive of max date",
   "// irrespective of time zone / DST",
   "maxDate",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "day",
   ".",
   "offset",
   "(",
   "maxDate",
   ",",
   "1",
   ")",
   ";",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "year",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInYears",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"yyyy\"",
   ":",
   "// See above",
   "maxDate",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "day",
   ".",
   "offset",
   "(",
   "maxDate",
   ",",
   "1",
   ")",
   ";",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "year",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInYears",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"MM\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "month",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInMonths",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"M\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "month",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInMonths",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"Mdd\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "day",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInDays",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"M1d\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "day",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInDays",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"YY\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "year",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInYears",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"QJan\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "month",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "4",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"QJul\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "month",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "4",
   ")",
   ";",
   "break",
   ";",
   "case",
   "\"h\"",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "hour",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "gapInHours",
   ")",
   ";",
   "break",
   ";",
   "default",
   ":",
   "interval",
   "=",
   "d3",
   ".",
   "time",
   ".",
   "year",
   ".",
   "range",
   "(",
   "minDate",
   ",",
   "maxDate",
   ",",
   "1",
   ")",
   ";",
   "}",
   "interval",
   "=",
   "cleanInterval",
   "(",
   "interval",
   ")",
   ";",
   "return",
   "{",
   "\"format\"",
   ":",
   "dateFormat",
   ",",
   "\"frequency\"",
   ":",
   "interval",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-224",
  "nl_tokens": [
   "compute_scale_domain"
  ],
  "pl_tokens": [
   "function",
   "compute_scale_domain",
   "(",
   "scaleObj",
   ",",
   "data",
   ",",
   "opts",
   ")",
   "{",
   "// Compute the domain (`[min, max]`) of a scale based on its data points.",
   "// `data` is a flat array of all values used in this scale, and is",
   "// created by `input-parsers/parse-<chart>.js`",
   "opts",
   "=",
   "opts",
   "||",
   "{",
   "}",
   ";",
   "var",
   "scaleDomain",
   "=",
   "scaleObj",
   ".",
   "domain",
   "||",
   "[",
   "]",
   ";",
   "var",
   "_domain",
   ";",
   "var",
   "defaultMin",
   ";",
   "var",
   "defaultMax",
   ";",
   "if",
   "(",
   "!",
   "isArray",
   "(",
   "data",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "\"data passed to compute_scale_domain must be an array\"",
   ")",
   ";",
   "}",
   "var",
   "extent",
   "=",
   "d3",
   ".",
   "extent",
   "(",
   "data",
   ")",
   ";",
   "var",
   "niced",
   "=",
   "d3",
   ".",
   "scale",
   ".",
   "linear",
   "(",
   ")",
   ".",
   "domain",
   "(",
   "extent",
   ")",
   ".",
   "nice",
   "(",
   ")",
   ".",
   "domain",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "scaleObj",
   ".",
   "domain",
   "||",
   "!",
   "scaleObj",
   ".",
   "custom",
   ")",
   "{",
   "if",
   "(",
   "opts",
   ".",
   "nice",
   ")",
   "{",
   "_domain",
   "=",
   "niced",
   ";",
   "}",
   "else",
   "{",
   "_domain",
   "=",
   "extent",
   ";",
   "}",
   "defaultMin",
   "=",
   "true",
   ";",
   "defaultMax",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "_domain",
   "=",
   "(",
   "opts",
   ".",
   "nice",
   ")",
   "?",
   "niced",
   ":",
   "extent",
   ";",
   "defaultMin",
   "=",
   "(",
   "_domain",
   "[",
   "0",
   "]",
   "===",
   "scaleDomain",
   "[",
   "0",
   "]",
   "||",
   "isUndefined",
   "(",
   "scaleDomain",
   "[",
   "0",
   "]",
   ")",
   ")",
   ";",
   "defaultMax",
   "=",
   "(",
   "_domain",
   "[",
   "1",
   "]",
   "===",
   "scaleDomain",
   "[",
   "1",
   "]",
   "||",
   "isUndefined",
   "(",
   "scaleDomain",
   "[",
   "1",
   "]",
   ")",
   ")",
   ";",
   "_domain",
   "=",
   "scaleDomain",
   ";",
   "}",
   "if",
   "(",
   "opts",
   ".",
   "minZero",
   ")",
   "{",
   "_domain",
   "[",
   "0",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "_domain",
   "[",
   "0",
   "]",
   ",",
   "0",
   ")",
   ";",
   "}",
   "return",
   "{",
   "domain",
   ":",
   "_domain",
   ",",
   "custom",
   ":",
   "(",
   "!",
   "defaultMin",
   "||",
   "!",
   "defaultMax",
   ")",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-225",
  "nl_tokens": [
   "Transform",
   "a",
   "given",
   "input",
   "value",
   "using",
   "a",
   "property",
   "spec",
   "object",
   ".",
   "propSpec",
   ":",
   "an",
   "object",
   "that",
   "defines",
   "a",
   "Backprop",
   "property",
   ".",
   "Supported",
   "keys",
   "(",
   "see",
   "the",
   "README",
   "for",
   "explanations",
   ")",
   "include",
   ":",
   "coerce",
   "choices",
   "trim",
   "max",
   "min",
   "inputVal",
   ":",
   "the",
   "value",
   "that",
   "the",
   "caller",
   "has",
   "assigned",
   "to",
   "the",
   "property",
   "fallbackValue",
   "(",
   "optional",
   ")",
   ":",
   "a",
   "default",
   "value",
   "to",
   "use",
   "if",
   "the",
   "input",
   "is",
   "invalid"
  ],
  "pl_tokens": [
   "function",
   "transformValue",
   "(",
   "propSpec",
   ",",
   "inputVal",
   ",",
   "fallbackValue",
   ")",
   "{",
   "var",
   "value",
   "=",
   "inputVal",
   ";",
   "if",
   "(",
   "typeof",
   "propSpec",
   ".",
   "coerce",
   "===",
   "'function'",
   ")",
   "value",
   "=",
   "propSpec",
   ".",
   "coerce",
   "(",
   "value",
   ")",
   ";",
   "// If an array of choices was passed in, validate that the input is one of",
   "// the valid choices:",
   "var",
   "choices",
   "=",
   "propSpec",
   ".",
   "choices",
   ";",
   "if",
   "(",
   "choices",
   "&&",
   "choices",
   ".",
   "constructor",
   "&&",
   "choices",
   ".",
   "constructor",
   ".",
   "name",
   "===",
   "'Array'",
   ")",
   "{",
   "if",
   "(",
   "choices",
   ".",
   "indexOf",
   "(",
   "value",
   ")",
   "===",
   "-",
   "1",
   ")",
   "{",
   "if",
   "(",
   "fallbackValue",
   "!==",
   "undefined",
   ")",
   "value",
   "=",
   "fallbackValue",
   ";",
   "else",
   "return",
   "undefined",
   ";",
   "}",
   "}",
   "if",
   "(",
   "propSpec",
   ".",
   "trim",
   "&&",
   "(",
   "typeof",
   "value",
   ".",
   "trim",
   "===",
   "'function'",
   ")",
   ")",
   "value",
   "=",
   "value",
   ".",
   "trim",
   "(",
   ")",
   ";",
   "if",
   "(",
   "propSpec",
   ".",
   "<mask>",
   "&&",
   "(",
   "value",
   ">",
   "propSpec",
   ".",
   "max",
   ")",
   ")",
   "value",
   "=",
   "propSpec",
   ".",
   "max",
   ";",
   "if",
   "(",
   "propSpec",
   ".",
   "min",
   "&&",
   "(",
   "value",
   "<",
   "propSpec",
   ".",
   "min",
   ")",
   ")",
   "value",
   "=",
   "propSpec",
   ".",
   "min",
   ";",
   "return",
   "value",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-226",
  "nl_tokens": [
   "/",
   "*",
   "This",
   "one",
   "is",
   "the",
   "public",
   "method",
   "called",
   "externally",
   ".",
   "It",
   "sets",
   "the",
   "position",
   "and",
   "notifies",
   "in",
   "fact",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "var",
   "$this",
   "=",
   "this",
   ";",
   "var",
   "prev_min",
   "=",
   "$this",
   ".",
   "data",
   "(",
   "'cur_min'",
   ")",
   ",",
   "prev_max",
   "=",
   "$this",
   ".",
   "data",
   "(",
   "'cur_max'",
   ")",
   ";",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "{",
   "_methods",
   ".",
   "set_position_from_val",
   ".",
   "call",
   "(",
   "$this",
   ",",
   "max",
   ",",
   "min",
   ")",
   ";",
   "}",
   "else",
   "{",
   "_methods",
   ".",
   "set_position_from_val",
   ".",
   "call",
   "(",
   "$this",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "// set the style of the grips according to the highlighted range",
   "_methods",
   ".",
   "refresh_grips_style",
   ".",
   "call",
   "(",
   "$this",
   ")",
   ";",
   "_methods",
   ".",
   "notify_changed_implicit",
   ".",
   "call",
   "(",
   "$this",
   ",",
   "'set_position'",
   ",",
   "prev_min",
   ",",
   "prev_max",
   ")",
   ";",
   "// this is for the future, therefore \"before the next",
   "// interaction starts\"",
   "$this",
   ".",
   "data",
   "(",
   "'beforestart_min'",
   ",",
   "min",
   ")",
   ";",
   "$this",
   ".",
   "data",
   "(",
   "'beforestart_max'",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-227",
  "nl_tokens": [
   "Create",
   "a",
   "get",
   "pages",
   "utility",
   "for",
   "people",
   "to",
   "use",
   "when",
   "rendering",
   "."
  ],
  "pl_tokens": [
   "function",
   "createPagesUtility",
   "(",
   "pages",
   ",",
   "index",
   ")",
   "{",
   "return",
   "function",
   "getPages",
   "(",
   "number",
   ")",
   "{",
   "var",
   "offset",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "number",
   "/",
   "2",
   ")",
   "var",
   "start",
   ",",
   "end",
   "if",
   "(",
   "index",
   "+",
   "offset",
   ">=",
   "pages",
   ".",
   "length",
   ")",
   "{",
   "start",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "pages",
   ".",
   "length",
   "-",
   "number",
   ")",
   "end",
   "=",
   "pages",
   ".",
   "length",
   "}",
   "else",
   "{",
   "start",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "index",
   "-",
   "offset",
   ")",
   "end",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "start",
   "+",
   "number",
   ",",
   "pages",
   ".",
   "length",
   ")",
   "}",
   "return",
   "pages",
   ".",
   "slice",
   "(",
   "start",
   ",",
   "end",
   ")",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-228",
  "nl_tokens": [
   "Determines",
   "a",
   "new",
   "scale",
   "that",
   "fits",
   "the",
   "entire",
   "graph",
   "into",
   "view",
   "."
  ],
  "pl_tokens": [
   "function",
   "zoomFit",
   "(",
   ")",
   "{",
   "var",
   "bounds",
   "=",
   "graph",
   ".",
   "node",
   "(",
   ")",
   ".",
   "getBBox",
   "(",
   ")",
   ";",
   "var",
   "parent",
   "=",
   "graph",
   ".",
   "node",
   "(",
   ")",
   ".",
   "parentElement",
   ";",
   "var",
   "fullWidth",
   "=",
   "parent",
   ".",
   "clientWidth",
   ",",
   "fullHeight",
   "=",
   "parent",
   ".",
   "clientHeight",
   ";",
   "var",
   "width",
   "=",
   "bounds",
   ".",
   "width",
   ",",
   "height",
   "=",
   "bounds",
   ".",
   "height",
   ";",
   "if",
   "(",
   "width",
   "===",
   "0",
   "||",
   "height",
   "===",
   "0",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "// nothing to fit",
   "var",
   "scale",
   "=",
   "0.75",
   "/",
   "Math",
   ".",
   "<mask>",
   "(",
   "width",
   "/",
   "fullWidth",
   ",",
   "height",
   "/",
   "fullHeight",
   ")",
   ";",
   "scale",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "scale",
   ",",
   "maxScaleExtent",
   ")",
   ",",
   "minScaleExtent",
   ")",
   ";",
   "return",
   "scale",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-229",
  "nl_tokens": [
   "Calculate",
   "the",
   "slopes",
   "of",
   "the",
   "tangents",
   "(",
   "Hermite",
   "-",
   "type",
   "interpolation",
   ")",
   "based",
   "on",
   "the",
   "following",
   "paper",
   ":",
   "Steffen",
   "M",
   ".",
   "1990",
   ".",
   "A",
   "Simple",
   "Method",
   "for",
   "Monotonic",
   "Interpolation",
   "in",
   "One",
   "Dimension",
   ".",
   "Astronomy",
   "and",
   "Astrophysics",
   "Vol",
   ".",
   "239",
   "NO",
   ".",
   "NOV",
   "(",
   "II",
   ")",
   "P",
   ".",
   "443",
   "1990",
   "."
  ],
  "pl_tokens": [
   "function",
   "slope3",
   "(",
   "that",
   ",",
   "x2",
   ",",
   "y2",
   ")",
   "{",
   "var",
   "h0",
   "=",
   "that",
   ".",
   "_x1",
   "-",
   "that",
   ".",
   "_x0",
   ",",
   "h1",
   "=",
   "x2",
   "-",
   "that",
   ".",
   "_x1",
   ",",
   "s0",
   "=",
   "(",
   "that",
   ".",
   "_y1",
   "-",
   "that",
   ".",
   "_y0",
   ")",
   "/",
   "(",
   "h0",
   "||",
   "h1",
   "<",
   "0",
   "&&",
   "-",
   "0",
   ")",
   ",",
   "s1",
   "=",
   "(",
   "y2",
   "-",
   "that",
   ".",
   "_y1",
   ")",
   "/",
   "(",
   "h1",
   "||",
   "h0",
   "<",
   "0",
   "&&",
   "-",
   "0",
   ")",
   ",",
   "p",
   "=",
   "(",
   "s0",
   "*",
   "h1",
   "+",
   "s1",
   "*",
   "h0",
   ")",
   "/",
   "(",
   "h0",
   "+",
   "h1",
   ")",
   ";",
   "return",
   "(",
   "sign",
   "(",
   "s0",
   ")",
   "+",
   "sign",
   "(",
   "s1",
   ")",
   ")",
   "*",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "s0",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "s1",
   ")",
   ",",
   "0.5",
   "*",
   "Math",
   ".",
   "abs",
   "(",
   "p",
   ")",
   ")",
   "||",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-230",
  "nl_tokens": [
   "~\u221e%\u00b0"
  ],
  "pl_tokens": [
   "function",
   "_beginBatchMaybe",
   "(",
   "next",
   ")",
   "{",
   "// 0   => 15",
   "// 15  => 15",
   "// 30  => 15",
   "// 45  => 5",
   "// 50",
   "var",
   "numRecordsLeftUntilAbsLimit",
   "=",
   "query",
   ".",
   "criteria",
   ".",
   "limit",
   "-",
   "(",
   "i",
   "*",
   "BATCH_SIZE",
   ")",
   ";",
   "var",
   "limitForThisBatch",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "numRecordsLeftUntilAbsLimit",
   ",",
   "BATCH_SIZE",
   ")",
   ";",
   "var",
   "skipForThisBatch",
   "=",
   "query",
   ".",
   "criteria",
   ".",
   "skip",
   "+",
   "(",
   "i",
   "*",
   "BATCH_SIZE",
   ")",
   ";",
   "//                     |_initial offset    +  |_relative offset from end of previous batch",
   "// If we've exceeded the absolute limit, then we go ahead and stop.",
   "if",
   "(",
   "limitForThisBatch",
   "<=",
   "0",
   ")",
   "{",
   "reachedLastBatch",
   "=",
   "true",
   ";",
   "return",
   "next",
   "(",
   ")",
   ";",
   "}",
   "//-\u2022",
   "// Build the criteria + deferred object to do a `.find()` for this batch.",
   "var",
   "criteriaForThisBatch",
   "=",
   "{",
   "skip",
   ":",
   "skipForThisBatch",
   ",",
   "limit",
   ":",
   "limitForThisBatch",
   ",",
   "sort",
   ":",
   "query",
   ".",
   "criteria",
   ".",
   "sort",
   ",",
   "select",
   ":",
   "query",
   ".",
   "criteria",
   ".",
   "select",
   ",",
   "omit",
   ":",
   "query",
   ".",
   "criteria",
   ".",
   "omit",
   ",",
   "where",
   ":",
   "query",
   ".",
   "criteria",
   ".",
   "where",
   "}",
   ";",
   "// console.log('---iterating---');",
   "// console.log('i:',i);",
   "// console.log('   BATCH_SIZE:',BATCH_SIZE);",
   "// console.log('   query.criteria.limit:',query.criteria.limit);",
   "// console.log('   query.criteria.skip:',query.criteria.skip);",
   "// console.log('   query.criteria.sort:',query.criteria.sort);",
   "// console.log('   query.criteria.where:',query.criteria.where);",
   "// console.log('   query.criteria.select:',query.criteria.select);",
   "// console.log('   query.criteria.omit:',query.criteria.omit);",
   "// console.log('   --');",
   "// console.log('   criteriaForThisBatch.limit:',criteriaForThisBatch.limit);",
   "// console.log('   criteriaForThisBatch.skip:',criteriaForThisBatch.skip);",
   "// console.log('   criteriaForThisBatch.sort:',criteriaForThisBatch.sort);",
   "// console.log('   criteriaForThisBatch.where:',criteriaForThisBatch.where);",
   "// console.log('   criteriaForThisBatch.select:',criteriaForThisBatch.select);",
   "// console.log('   criteriaForThisBatch.omit:',criteriaForThisBatch.omit);",
   "// console.log('---\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022---');",
   "var",
   "deferredForThisBatch",
   "=",
   "WLModel",
   ".",
   "find",
   "(",
   "criteriaForThisBatch",
   ")",
   ";",
   "_",
   ".",
   "each",
   "(",
   "query",
   ".",
   "populates",
   ",",
   "function",
   "(",
   "assocCriteria",
   ",",
   "assocName",
   ")",
   "{",
   "deferredForThisBatch",
   "=",
   "deferredForThisBatch",
   ".",
   "populate",
   "(",
   "assocName",
   ",",
   "assocCriteria",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// Pass through `meta` so we're sure to use the same db connection",
   "// and settings (i.e. esp. relevant if we happen to be inside a transaction)",
   "deferredForThisBatch",
   ".",
   "meta",
   "(",
   "query",
   ".",
   "meta",
   ")",
   ";",
   "deferredForThisBatch",
   ".",
   "exec",
   "(",
   "function",
   "(",
   "err",
   ",",
   "batchOfRecords",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   "// If there were no records returned, then we have already reached the last batch of results.",
   "// (i.e. it was the previous batch-- since this batch was empty)",
   "// In this case, we'll set the `reachedLastBatch` flag and trigger our callback,",
   "// allowing `async.whilst()` to call _its_ callback, which will pass control back",
   "// to userland.",
   "if",
   "(",
   "batchOfRecords",
   ".",
   "length",
   "===",
   "0",
   ")",
   "{",
   "reachedLastBatch",
   "=",
   "true",
   ";",
   "return",
   "next",
   "(",
   ")",
   ";",
   "}",
   "// --\u2022",
   "// But otherwise, we need to go ahead and call the appropriate",
   "// iteratee for this batch.  If it's eachBatchFn, we'll call it",
   "// once.  If it's eachRecordFn, we'll call it once per record.",
   "(",
   "function",
   "_makeCallOrCallsToAppropriateIteratee",
   "(",
   "proceed",
   ")",
   "{",
   "// If an `eachBatchFn` iteratee was provided, we'll call it.",
   "// > At this point we already know it's a function, because",
   "// > we validated usage at the very beginning.",
   "if",
   "(",
   "query",
   ".",
   "eachBatchFn",
   ")",
   "{",
   "// Note that, if you try to call next() more than once in the iteratee, Waterline",
   "// logs a warning explaining what's up, ignoring all subsequent calls to next()",
   "// that occur after the first.",
   "var",
   "didIterateeAlreadyHalt",
   ";",
   "try",
   "{",
   "var",
   "promiseMaybe",
   "=",
   "query",
   ".",
   "eachBatchFn",
   "(",
   "batchOfRecords",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "proceed",
   "(",
   "err",
   ")",
   ";",
   "}",
   "if",
   "(",
   "didIterateeAlreadyHalt",
   ")",
   "{",
   "console",
   ".",
   "warn",
   "(",
   "'Warning: The per-batch iteratee provided to `.stream()` triggered its callback \\n'",
   "+",
   "'again-- after already triggering it once!  Please carefully check your iteratee\\'s \\n'",
   "+",
   "'code to figure out why this is happening.  (Ignoring this subsequent invocation...)'",
   ")",
   ";",
   "return",
   ";",
   "}",
   "//-\u2022",
   "didIterateeAlreadyHalt",
   "=",
   "true",
   ";",
   "return",
   "proceed",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//_\u220f_  </ invoked per-batch iteratee >",
   "// Take care of unhandled promise rejections from `await`.",
   "if",
   "(",
   "query",
   ".",
   "eachBatchFn",
   ".",
   "constructor",
   ".",
   "name",
   "===",
   "'AsyncFunction'",
   ")",
   "{",
   "promiseMaybe",
   ".",
   "catch",
   "(",
   "function",
   "(",
   "e",
   ")",
   "{",
   "proceed",
   "(",
   "e",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//_\u220f_",
   "}",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "return",
   "proceed",
   "(",
   "e",
   ")",
   ";",
   "}",
   "//>-\u2022",
   "return",
   ";",
   "}",
   "//_\u220f_.",
   "// Otherwise `eachRecordFn` iteratee must have been provided.",
   "// We'll call it once per record in this batch.",
   "// > We validated usage at the very beginning, so we know that",
   "// > one or the other iteratee must have been provided as a",
   "// > valid function if we made it here.",
   "async",
   ".",
   "eachSeries",
   "(",
   "batchOfRecords",
   ",",
   "function",
   "_eachRecordInBatch",
   "(",
   "record",
   ",",
   "next",
   ")",
   "{",
   "// Note that, if you try to call next() more than once in the iteratee, Waterline",
   "// logs a warning explaining what's up, ignoring all subsequent calls to next()",
   "// that occur after the first.",
   "var",
   "didIterateeAlreadyHalt",
   ";",
   "try",
   "{",
   "var",
   "promiseMaybe",
   "=",
   "query",
   ".",
   "eachRecordFn",
   "(",
   "record",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   "if",
   "(",
   "didIterateeAlreadyHalt",
   ")",
   "{",
   "console",
   ".",
   "warn",
   "(",
   "'Warning: The per-record iteratee provided to `.stream()` triggered its callback\\n'",
   "+",
   "'again-- after already triggering it once!  Please carefully check your iteratee\\'s\\n'",
   "+",
   "'code to figure out why this is happening.  (Ignoring this subsequent invocation...)'",
   ")",
   ";",
   "return",
   ";",
   "}",
   "//-\u2022",
   "didIterateeAlreadyHalt",
   "=",
   "true",
   ";",
   "return",
   "next",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//_\u220f_  </ invoked per-record iteratee >",
   "// Take care of unhandled promise rejections from `await`.",
   "if",
   "(",
   "query",
   ".",
   "eachRecordFn",
   ".",
   "constructor",
   ".",
   "name",
   "===",
   "'AsyncFunction'",
   ")",
   "{",
   "promiseMaybe",
   ".",
   "catch",
   "(",
   "function",
   "(",
   "e",
   ")",
   "{",
   "next",
   "(",
   "e",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//_\u220f_",
   "}",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "return",
   "next",
   "(",
   "e",
   ")",
   ";",
   "}",
   "}",
   ",",
   "// ~\u221e%\u00b0",
   "function",
   "_afterIteratingOverRecordsInBatch",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "proceed",
   "(",
   "err",
   ")",
   ";",
   "}",
   "return",
   "proceed",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//</async.eachSeries()>",
   "}",
   ")",
   "(",
   "function",
   "_afterCallingIteratee",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "next",
   "(",
   "err",
   ")",
   ";",
   "}",
   "// Increment the batch counter.",
   "i",
   "++",
   ";",
   "// On to the next batch!",
   "return",
   "next",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "//</self-calling function :: process this batch by making either one call or multiple calls to the appropriate iteratee>",
   "}",
   ")",
   ";",
   "//</deferredForThisBatch.exec()>",
   "}"
  ]
 },
 {
  "idx": "maxmin-231",
  "nl_tokens": [
   "Calculate",
   "how",
   "many",
   "units",
   "are",
   "there",
   "between",
   "two",
   "time",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "<mask>",
   ",",
   "max",
   ",",
   "unit",
   ")",
   "{",
   "var",
   "ExtDate",
   "=",
   "Ext",
   ".",
   "Date",
   ",",
   "est",
   ",",
   "diff",
   "=",
   "+",
   "max",
   "-",
   "min",
   ";",
   "switch",
   "(",
   "unit",
   ")",
   "{",
   "case",
   "ExtDate",
   ".",
   "MILLI",
   ":",
   "return",
   "diff",
   ";",
   "case",
   "ExtDate",
   ".",
   "SECOND",
   ":",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "diff",
   "/",
   "1000",
   ")",
   ";",
   "case",
   "ExtDate",
   ".",
   "MINUTE",
   ":",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "diff",
   "/",
   "60000",
   ")",
   ";",
   "case",
   "ExtDate",
   ".",
   "HOUR",
   ":",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "diff",
   "/",
   "3600000",
   ")",
   ";",
   "case",
   "ExtDate",
   ".",
   "DAY",
   ":",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "diff",
   "/",
   "86400000",
   ")",
   ";",
   "case",
   "'w'",
   ":",
   "return",
   "Math",
   ".",
   "floor",
   "(",
   "diff",
   "/",
   "604800000",
   ")",
   ";",
   "case",
   "ExtDate",
   ".",
   "MONTH",
   ":",
   "est",
   "=",
   "(",
   "max",
   ".",
   "getFullYear",
   "(",
   ")",
   "*",
   "12",
   "+",
   "max",
   ".",
   "getMonth",
   "(",
   ")",
   ")",
   "-",
   "(",
   "min",
   ".",
   "getFullYear",
   "(",
   ")",
   "*",
   "12",
   "+",
   "min",
   ".",
   "getMonth",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "Ext",
   ".",
   "Date",
   ".",
   "add",
   "(",
   "min",
   ",",
   "unit",
   ",",
   "est",
   ")",
   ">",
   "max",
   ")",
   "{",
   "return",
   "est",
   "-",
   "1",
   ";",
   "}",
   "else",
   "{",
   "return",
   "est",
   ";",
   "}",
   "case",
   "ExtDate",
   ".",
   "YEAR",
   ":",
   "est",
   "=",
   "max",
   ".",
   "getFullYear",
   "(",
   ")",
   "-",
   "min",
   ".",
   "getFullYear",
   "(",
   ")",
   ";",
   "if",
   "(",
   "Ext",
   ".",
   "Date",
   ".",
   "add",
   "(",
   "min",
   ",",
   "unit",
   ",",
   "est",
   ")",
   ">",
   "max",
   ")",
   "{",
   "return",
   "est",
   "-",
   "1",
   ";",
   "}",
   "else",
   "{",
   "return",
   "est",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-232",
  "nl_tokens": [
   "Adapted",
   "from",
   "https",
   ":",
   "//",
   "github",
   ".",
   "com",
   "/",
   "polvo",
   "-",
   "labs",
   "/",
   "card",
   "-",
   "type",
   "/",
   "blob",
   "/",
   "aaab11f80fa1939bccc8f24905a06ae3cd864356",
   "/",
   "src",
   "/",
   "cardType",
   ".",
   "js#L37",
   "-",
   "L42"
  ],
  "pl_tokens": [
   "function",
   "matchesRange",
   "(",
   "cardNumber",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   "{",
   "var",
   "maxLengthToCheck",
   "=",
   "String",
   "(",
   "min",
   ")",
   ".",
   "length",
   ";",
   "var",
   "substr",
   "=",
   "cardNumber",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "maxLengthToCheck",
   ")",
   ";",
   "var",
   "integerRepresentationOfCardNumber",
   "=",
   "parseInt",
   "(",
   "substr",
   ",",
   "10",
   ")",
   ";",
   "min",
   "=",
   "parseInt",
   "(",
   "String",
   "(",
   "min",
   ")",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "substr",
   ".",
   "length",
   ")",
   ",",
   "10",
   ")",
   ";",
   "max",
   "=",
   "parseInt",
   "(",
   "String",
   "(",
   "max",
   ")",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "substr",
   ".",
   "length",
   ")",
   ",",
   "10",
   ")",
   ";",
   "return",
   "integerRepresentationOfCardNumber",
   ">=",
   "min",
   "&&",
   "integerRepresentationOfCardNumber",
   "<=",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-233",
  "nl_tokens": [
   "\u83b7\u53d6\u4e0a\u4f20\u4efb\u52a1\u7684",
   "UploadId"
  ],
  "pl_tokens": [
   "function",
   "getUploadIdAndPartList",
   "(",
   "params",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "TaskId",
   "=",
   "params",
   ".",
   "TaskId",
   ";",
   "var",
   "Bucket",
   "=",
   "params",
   ".",
   "Bucket",
   ";",
   "var",
   "Region",
   "=",
   "params",
   ".",
   "Region",
   ";",
   "var",
   "Key",
   "=",
   "params",
   ".",
   "Key",
   ";",
   "var",
   "StorageClass",
   "=",
   "params",
   ".",
   "StorageClass",
   ";",
   "var",
   "self",
   "=",
   "this",
   ";",
   "// \u8ba1\u7b97 ETag",
   "var",
   "ETagMap",
   "=",
   "{",
   "}",
   ";",
   "var",
   "FileSize",
   "=",
   "params",
   ".",
   "FileSize",
   ";",
   "var",
   "SliceSize",
   "=",
   "params",
   ".",
   "SliceSize",
   ";",
   "var",
   "SliceCount",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "FileSize",
   "/",
   "SliceSize",
   ")",
   ";",
   "var",
   "FinishSliceCount",
   "=",
   "0",
   ";",
   "var",
   "FinishSize",
   "=",
   "0",
   ";",
   "var",
   "onHashProgress",
   "=",
   "util",
   ".",
   "throttleOnProgress",
   ".",
   "call",
   "(",
   "self",
   ",",
   "FileSize",
   ",",
   "params",
   ".",
   "onHashProgress",
   ")",
   ";",
   "var",
   "getChunkETag",
   "=",
   "function",
   "(",
   "PartNumber",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "start",
   "=",
   "SliceSize",
   "*",
   "(",
   "PartNumber",
   "-",
   "1",
   ")",
   ";",
   "var",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "start",
   "+",
   "SliceSize",
   ",",
   "FileSize",
   ")",
   ";",
   "var",
   "ChunkSize",
   "=",
   "end",
   "-",
   "start",
   ";",
   "if",
   "(",
   "ETagMap",
   "[",
   "PartNumber",
   "]",
   ")",
   "{",
   "callback",
   "(",
   "null",
   ",",
   "{",
   "PartNumber",
   ":",
   "PartNumber",
   ",",
   "ETag",
   ":",
   "ETagMap",
   "[",
   "PartNumber",
   "]",
   ",",
   "Size",
   ":",
   "ChunkSize",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "util",
   ".",
   "fileSlice",
   "(",
   "params",
   ".",
   "Body",
   ",",
   "start",
   ",",
   "end",
   ",",
   "false",
   ",",
   "function",
   "(",
   "chunkItem",
   ")",
   "{",
   "util",
   ".",
   "getFileMd5",
   "(",
   "chunkItem",
   ",",
   "function",
   "(",
   "err",
   ",",
   "md5",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "return",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "var",
   "ETag",
   "=",
   "'\"'",
   "+",
   "md5",
   "+",
   "'\"'",
   ";",
   "ETagMap",
   "[",
   "PartNumber",
   "]",
   "=",
   "ETag",
   ";",
   "FinishSliceCount",
   "+=",
   "1",
   ";",
   "FinishSize",
   "+=",
   "ChunkSize",
   ";",
   "callback",
   "(",
   "err",
   ",",
   "{",
   "PartNumber",
   ":",
   "PartNumber",
   ",",
   "ETag",
   ":",
   "ETag",
   ",",
   "Size",
   ":",
   "ChunkSize",
   "}",
   ")",
   ";",
   "onHashProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FinishSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "}",
   ";",
   "// \u901a\u8fc7\u548c\u6587\u4ef6\u7684 md5 \u5bf9\u6bd4\uff0c\u5224\u65ad UploadId \u662f\u5426\u53ef\u7528",
   "var",
   "isAvailableUploadList",
   "=",
   "function",
   "(",
   "PartList",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "PartCount",
   "=",
   "PartList",
   ".",
   "length",
   ";",
   "// \u5982\u679c\u6ca1\u6709\u5206\u7247\uff0c\u901a\u8fc7",
   "if",
   "(",
   "PartCount",
   "===",
   "0",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "}",
   "// \u68c0\u67e5\u5206\u7247\u6570\u91cf",
   "if",
   "(",
   "PartCount",
   ">",
   "SliceCount",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "// \u68c0\u67e5\u5206\u7247\u5927\u5c0f",
   "if",
   "(",
   "PartCount",
   ">",
   "1",
   ")",
   "{",
   "var",
   "PartSliceSize",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "PartList",
   "[",
   "0",
   "]",
   ".",
   "Size",
   ",",
   "PartList",
   "[",
   "1",
   "]",
   ".",
   "Size",
   ")",
   ";",
   "if",
   "(",
   "PartSliceSize",
   "!==",
   "SliceSize",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "}",
   "// \u9010\u4e2a\u5206\u7247\u8ba1\u7b97\u5e76\u68c0\u67e5 ETag \u662f\u5426\u4e00\u81f4",
   "var",
   "next",
   "=",
   "function",
   "(",
   "index",
   ")",
   "{",
   "if",
   "(",
   "index",
   "<",
   "PartCount",
   ")",
   "{",
   "var",
   "Part",
   "=",
   "PartList",
   "[",
   "index",
   "]",
   ";",
   "getChunkETag",
   "(",
   "Part",
   ".",
   "PartNumber",
   ",",
   "function",
   "(",
   "err",
   ",",
   "chunk",
   ")",
   "{",
   "if",
   "(",
   "chunk",
   "&&",
   "chunk",
   ".",
   "ETag",
   "===",
   "Part",
   ".",
   "ETag",
   "&&",
   "chunk",
   ".",
   "Size",
   "===",
   "Part",
   ".",
   "Size",
   ")",
   "{",
   "next",
   "(",
   "index",
   "+",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "callback",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "}",
   "}",
   ";",
   "next",
   "(",
   "0",
   ")",
   ";",
   "}",
   ";",
   "var",
   "ep",
   "=",
   "new",
   "EventProxy",
   "(",
   ")",
   ";",
   "ep",
   ".",
   "on",
   "(",
   "'error'",
   ",",
   "function",
   "(",
   "errData",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "return",
   "callback",
   "(",
   "errData",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u5b58\u5728 UploadId",
   "ep",
   ".",
   "on",
   "(",
   "'upload_id_ready'",
   ",",
   "function",
   "(",
   "UploadData",
   ")",
   "{",
   "// \u8f6c\u6362\u6210 map",
   "var",
   "map",
   "=",
   "{",
   "}",
   ";",
   "var",
   "list",
   "=",
   "[",
   "]",
   ";",
   "util",
   ".",
   "each",
   "(",
   "UploadData",
   ".",
   "PartList",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "map",
   "[",
   "item",
   ".",
   "PartNumber",
   "]",
   "=",
   "item",
   ";",
   "}",
   ")",
   ";",
   "for",
   "(",
   "var",
   "PartNumber",
   "=",
   "1",
   ";",
   "PartNumber",
   "<=",
   "SliceCount",
   ";",
   "PartNumber",
   "++",
   ")",
   "{",
   "var",
   "item",
   "=",
   "map",
   "[",
   "PartNumber",
   "]",
   ";",
   "if",
   "(",
   "item",
   ")",
   "{",
   "item",
   ".",
   "PartNumber",
   "=",
   "PartNumber",
   ";",
   "item",
   ".",
   "Uploaded",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "item",
   "=",
   "{",
   "PartNumber",
   ":",
   "PartNumber",
   ",",
   "ETag",
   ":",
   "null",
   ",",
   "Uploaded",
   ":",
   "false",
   "}",
   ";",
   "}",
   "list",
   ".",
   "push",
   "(",
   "item",
   ")",
   ";",
   "}",
   "UploadData",
   ".",
   "PartList",
   "=",
   "list",
   ";",
   "callback",
   "(",
   "null",
   ",",
   "UploadData",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u4e0d\u5b58\u5728 UploadId, \u521d\u59cb\u5316\u751f\u6210 UploadId",
   "ep",
   ".",
   "on",
   "(",
   "'no_available_upload_id'",
   ",",
   "function",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "var",
   "_params",
   "=",
   "util",
   ".",
   "extend",
   "(",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "Headers",
   ":",
   "util",
   ".",
   "clone",
   "(",
   "params",
   ".",
   "Headers",
   ")",
   ",",
   "StorageClass",
   ":",
   "StorageClass",
   ",",
   "Body",
   ":",
   "params",
   ".",
   "Body",
   ",",
   "}",
   ",",
   "params",
   ")",
   ";",
   "// \u83b7\u53d6 File \u6216 Blob \u7684 type \u5c5e\u6027\uff0c\u5982\u679c\u6709\uff0c\u4f5c\u4e3a\u6587\u4ef6 Content-Type",
   "var",
   "ContentType",
   "=",
   "params",
   ".",
   "Headers",
   "[",
   "'Content-Type'",
   "]",
   "||",
   "(",
   "params",
   ".",
   "Body",
   "&&",
   "params",
   ".",
   "Body",
   ".",
   "type",
   ")",
   ";",
   "if",
   "(",
   "ContentType",
   ")",
   "{",
   "_params",
   ".",
   "Headers",
   "[",
   "'Content-Type'",
   "]",
   "=",
   "ContentType",
   ";",
   "}",
   "self",
   ".",
   "multipartInit",
   "(",
   "_params",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "return",
   "ep",
   ".",
   "emit",
   "(",
   "'error'",
   ",",
   "err",
   ")",
   ";",
   "var",
   "UploadId",
   "=",
   "data",
   ".",
   "UploadId",
   ";",
   "if",
   "(",
   "!",
   "UploadId",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "{",
   "Message",
   ":",
   "'no upload id'",
   "}",
   ")",
   ";",
   "}",
   "ep",
   ".",
   "emit",
   "(",
   "'upload_id_ready'",
   ",",
   "{",
   "UploadId",
   ":",
   "UploadId",
   ",",
   "PartList",
   ":",
   "[",
   "]",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u5982\u679c\u5df2\u5b58\u5728 UploadId\uff0c\u627e\u4e00\u4e2a\u53ef\u4ee5\u7528\u7684 UploadId",
   "ep",
   ".",
   "on",
   "(",
   "'has_upload_id'",
   ",",
   "function",
   "(",
   "UploadIdList",
   ")",
   "{",
   "// \u4e32\u884c\u5730\uff0c\u627e\u4e00\u4e2a\u5185\u5bb9\u4e00\u81f4\u7684 UploadId",
   "UploadIdList",
   "=",
   "UploadIdList",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "Async",
   ".",
   "eachLimit",
   "(",
   "UploadIdList",
   ",",
   "1",
   ",",
   "function",
   "(",
   "UploadId",
   ",",
   "asyncCallback",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "// \u5982\u679c\u6b63\u5728\u4e0a\u4f20\uff0c\u8df3\u8fc7",
   "if",
   "(",
   "uploadIdUsing",
   "[",
   "UploadId",
   "]",
   ")",
   "{",
   "asyncCallback",
   "(",
   ")",
   ";",
   "// \u68c0\u67e5\u4e0b\u4e00\u4e2a UploadId",
   "return",
   ";",
   "}",
   "// \u5224\u65ad UploadId \u662f\u5426\u53ef\u7528",
   "wholeMultipartListPart",
   ".",
   "call",
   "(",
   "self",
   ",",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "UploadId",
   ":",
   "UploadId",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "PartListData",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "{",
   "removeUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "UploadId",
   ")",
   ";",
   "return",
   "ep",
   ".",
   "emit",
   "(",
   "'error'",
   ",",
   "err",
   ")",
   ";",
   "}",
   "var",
   "PartList",
   "=",
   "PartListData",
   ".",
   "PartList",
   ";",
   "PartList",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "item",
   ")",
   "{",
   "item",
   ".",
   "PartNumber",
   "*=",
   "1",
   ";",
   "item",
   ".",
   "Size",
   "*=",
   "1",
   ";",
   "item",
   ".",
   "ETag",
   "=",
   "item",
   ".",
   "ETag",
   "||",
   "''",
   ";",
   "}",
   ")",
   ";",
   "isAvailableUploadList",
   "(",
   "PartList",
   ",",
   "function",
   "(",
   "err",
   ",",
   "isAvailable",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "return",
   "ep",
   ".",
   "emit",
   "(",
   "'error'",
   ",",
   "err",
   ")",
   ";",
   "if",
   "(",
   "isAvailable",
   ")",
   "{",
   "asyncCallback",
   "(",
   "{",
   "UploadId",
   ":",
   "UploadId",
   ",",
   "PartList",
   ":",
   "PartList",
   "}",
   ")",
   ";",
   "// \u9a6c\u4e0a\u7ed3\u675f",
   "}",
   "else",
   "{",
   "asyncCallback",
   "(",
   ")",
   ";",
   "// \u68c0\u67e5\u4e0b\u4e00\u4e2a UploadId",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ",",
   "function",
   "(",
   "AvailableUploadData",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "onHashProgress",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "if",
   "(",
   "AvailableUploadData",
   "&&",
   "AvailableUploadData",
   ".",
   "UploadId",
   ")",
   "{",
   "ep",
   ".",
   "emit",
   "(",
   "'upload_id_ready'",
   ",",
   "AvailableUploadData",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ep",
   ".",
   "emit",
   "(",
   "'no_available_upload_id'",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u5728\u672c\u5730\u7f13\u5b58\u627e\u53ef\u7528\u7684 UploadId",
   "ep",
   ".",
   "on",
   "(",
   "'seek_local_avail_upload_id'",
   ",",
   "function",
   "(",
   "RemoteUploadIdList",
   ")",
   "{",
   "// \u5728\u672c\u5730\u627e\u53ef\u7528\u7684 UploadId",
   "var",
   "uuid",
   "=",
   "util",
   ".",
   "getFileUUID",
   "(",
   "params",
   ".",
   "Body",
   ",",
   "params",
   ".",
   "ChunkSize",
   ")",
   ",",
   "LocalUploadIdList",
   ";",
   "if",
   "(",
   "uuid",
   "&&",
   "(",
   "LocalUploadIdList",
   "=",
   "getUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "uuid",
   ")",
   ")",
   ")",
   "{",
   "var",
   "next",
   "=",
   "function",
   "(",
   "index",
   ")",
   "{",
   "// \u5982\u679c\u672c\u5730\u627e\u4e0d\u5230\u53ef\u7528 UploadId\uff0c\u518d\u4e00\u4e2a\u4e2a\u904d\u5386\u6821\u9a8c\u8fdc\u7aef",
   "if",
   "(",
   "index",
   ">=",
   "LocalUploadIdList",
   ".",
   "length",
   ")",
   "{",
   "ep",
   ".",
   "emit",
   "(",
   "'has_upload_id'",
   ",",
   "RemoteUploadIdList",
   ")",
   ";",
   "return",
   ";",
   "}",
   "var",
   "UploadId",
   "=",
   "LocalUploadIdList",
   "[",
   "index",
   "]",
   ";",
   "// \u5982\u679c\u4e0d\u5728\u8fdc\u7aef UploadId \u5217\u8868\u91cc\uff0c\u8df3\u8fc7\u5e76\u5220\u9664",
   "if",
   "(",
   "!",
   "util",
   ".",
   "isInArray",
   "(",
   "RemoteUploadIdList",
   ",",
   "UploadId",
   ")",
   ")",
   "{",
   "removeUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "UploadId",
   ")",
   ";",
   "next",
   "(",
   "index",
   "+",
   "1",
   ")",
   ";",
   "return",
   ";",
   "}",
   "// \u5982\u679c\u6b63\u5728\u4e0a\u4f20\uff0c\u8df3\u8fc7",
   "if",
   "(",
   "uploadIdUsing",
   "[",
   "UploadId",
   "]",
   ")",
   "{",
   "next",
   "(",
   "index",
   "+",
   "1",
   ")",
   ";",
   "return",
   ";",
   "}",
   "// \u5224\u65ad UploadId \u662f\u5426\u5b58\u5728\u7ebf\u4e0a",
   "wholeMultipartListPart",
   ".",
   "call",
   "(",
   "self",
   ",",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "UploadId",
   ":",
   "UploadId",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "PartListData",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "{",
   "removeUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "UploadId",
   ")",
   ";",
   "next",
   "(",
   "index",
   "+",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// \u627e\u5230\u53ef\u7528 UploadId",
   "ep",
   ".",
   "emit",
   "(",
   "'upload_id_ready'",
   ",",
   "{",
   "UploadId",
   ":",
   "UploadId",
   ",",
   "PartList",
   ":",
   "PartListData",
   ".",
   "PartList",
   ",",
   "}",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ";",
   "next",
   "(",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ep",
   ".",
   "emit",
   "(",
   "'has_upload_id'",
   ",",
   "RemoteUploadIdList",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "// \u83b7\u53d6\u7ebf\u4e0a UploadId \u5217\u8868",
   "ep",
   ".",
   "on",
   "(",
   "'get_remote_upload_id_list'",
   ",",
   "function",
   "(",
   "RemoteUploadIdList",
   ")",
   "{",
   "// \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684 UploadId \u5217\u8868\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0a\u4f20\u4efb\u52a1\u3002",
   "wholeMultipartList",
   ".",
   "call",
   "(",
   "self",
   ",",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "ep",
   ".",
   "emit",
   "(",
   "'error'",
   ",",
   "err",
   ")",
   ";",
   "}",
   "// \u6574\u7406\u8fdc\u7aef UploadId \u5217\u8868",
   "var",
   "RemoteUploadIdList",
   "=",
   "util",
   ".",
   "filter",
   "(",
   "data",
   ".",
   "UploadList",
   ",",
   "function",
   "(",
   "item",
   ")",
   "{",
   "return",
   "item",
   ".",
   "Key",
   "===",
   "Key",
   "&&",
   "(",
   "!",
   "StorageClass",
   "||",
   "item",
   ".",
   "StorageClass",
   ".",
   "toUpperCase",
   "(",
   ")",
   "===",
   "StorageClass",
   ".",
   "toUpperCase",
   "(",
   ")",
   ")",
   ";",
   "}",
   ")",
   ".",
   "reverse",
   "(",
   ")",
   ".",
   "map",
   "(",
   "function",
   "(",
   "item",
   ")",
   "{",
   "return",
   "item",
   ".",
   "UploadId",
   "||",
   "item",
   ".",
   "UploadID",
   ";",
   "}",
   ")",
   ";",
   "if",
   "(",
   "RemoteUploadIdList",
   ".",
   "length",
   ")",
   "{",
   "ep",
   ".",
   "emit",
   "(",
   "'seek_local_avail_upload_id'",
   ",",
   "RemoteUploadIdList",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "uuid",
   "=",
   "util",
   ".",
   "getFileUUID",
   "(",
   "params",
   ".",
   "Body",
   ",",
   "params",
   ".",
   "ChunkSize",
   ")",
   ",",
   "LocalUploadIdList",
   ";",
   "if",
   "(",
   "uuid",
   "&&",
   "(",
   "LocalUploadIdList",
   "=",
   "getUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "uuid",
   ")",
   ")",
   ")",
   "{",
   "util",
   ".",
   "each",
   "(",
   "LocalUploadIdList",
   ",",
   "function",
   "(",
   "UploadId",
   ")",
   "{",
   "removeUploadId",
   ".",
   "call",
   "(",
   "self",
   ",",
   "UploadId",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "ep",
   ".",
   "emit",
   "(",
   "'no_available_upload_id'",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u5f00\u59cb\u627e\u53ef\u7528 UploadId",
   "ep",
   ".",
   "emit",
   "(",
   "'get_remote_upload_id_list'",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-234",
  "nl_tokens": [
   "Handles",
   "clicks",
   "on",
   "zoom",
   "control",
   "buttons",
   "and",
   "invokes",
   "centerGraph",
   "with",
   "new",
   "scale",
   "value",
   "."
  ],
  "pl_tokens": [
   "function",
   "onControlZoomClicked",
   "(",
   ")",
   "{",
   "var",
   "newScale",
   "=",
   "1",
   ";",
   "var",
   "scalePercentile",
   "=",
   "0.20",
   ";",
   "// Add or subtract scale percentile from current scale value.",
   "switch",
   "(",
   "$",
   "(",
   "this",
   ")",
   ".",
   "data",
   "(",
   "'action'",
   ")",
   ")",
   "{",
   "case",
   "'zoom_in'",
   ":",
   "newScale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "zoom",
   ".",
   "scale",
   "(",
   ")",
   "*",
   "(",
   "1",
   "+",
   "scalePercentile",
   ")",
   ",",
   "maxScaleExtent",
   ")",
   ",",
   "minScaleExtent",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'zoom_out'",
   ":",
   "newScale",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "zoom",
   ".",
   "scale",
   "(",
   ")",
   "*",
   "(",
   "1",
   "-",
   "scalePercentile",
   ")",
   ",",
   "minScaleExtent",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'zoom_all_out'",
   ":",
   "newScale",
   "=",
   "zoomFit",
   "(",
   ")",
   ";",
   "break",
   ";",
   "}",
   "centerGraph",
   "(",
   "newScale",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-235",
  "nl_tokens": [
   "\u901a\u8fc7\u548c\u6587\u4ef6\u7684",
   "md5",
   "\u5bf9\u6bd4\uff0c\u5224\u65ad",
   "UploadId",
   "\u662f\u5426\u53ef\u7528"
  ],
  "pl_tokens": [
   "function",
   "(",
   "PartList",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "PartCount",
   "=",
   "PartList",
   ".",
   "length",
   ";",
   "// \u5982\u679c\u6ca1\u6709\u5206\u7247\uff0c\u901a\u8fc7",
   "if",
   "(",
   "PartCount",
   "===",
   "0",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "}",
   "// \u68c0\u67e5\u5206\u7247\u6570\u91cf",
   "if",
   "(",
   "PartCount",
   ">",
   "SliceCount",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "// \u68c0\u67e5\u5206\u7247\u5927\u5c0f",
   "if",
   "(",
   "PartCount",
   ">",
   "1",
   ")",
   "{",
   "var",
   "PartSliceSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "PartList",
   "[",
   "0",
   "]",
   ".",
   "Size",
   ",",
   "PartList",
   "[",
   "1",
   "]",
   ".",
   "Size",
   ")",
   ";",
   "if",
   "(",
   "PartSliceSize",
   "!==",
   "SliceSize",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "}",
   "// \u9010\u4e2a\u5206\u7247\u8ba1\u7b97\u5e76\u68c0\u67e5 ETag \u662f\u5426\u4e00\u81f4",
   "var",
   "next",
   "=",
   "function",
   "(",
   "index",
   ")",
   "{",
   "if",
   "(",
   "index",
   "<",
   "PartCount",
   ")",
   "{",
   "var",
   "Part",
   "=",
   "PartList",
   "[",
   "index",
   "]",
   ";",
   "getChunkETag",
   "(",
   "Part",
   ".",
   "PartNumber",
   ",",
   "function",
   "(",
   "err",
   ",",
   "chunk",
   ")",
   "{",
   "if",
   "(",
   "chunk",
   "&&",
   "chunk",
   ".",
   "ETag",
   "===",
   "Part",
   ".",
   "ETag",
   "&&",
   "chunk",
   ".",
   "Size",
   "===",
   "Part",
   ".",
   "Size",
   ")",
   "{",
   "next",
   "(",
   "index",
   "+",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "callback",
   "(",
   "null",
   ",",
   "false",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "callback",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "}",
   "}",
   ";",
   "next",
   "(",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-236",
  "nl_tokens": [
   "Splices",
   "insert",
   "into",
   "array",
   "at",
   "index",
   "at",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "array",
   ",",
   "insert",
   ",",
   "at",
   ")",
   "{",
   "at",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "at",
   ",",
   "0",
   ")",
   ",",
   "array",
   ".",
   "length",
   ")",
   ";",
   "var",
   "tail",
   "=",
   "Array",
   "(",
   "array",
   ".",
   "length",
   "-",
   "at",
   ")",
   ";",
   "var",
   "length",
   "=",
   "insert",
   ".",
   "length",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "tail",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "tail",
   "[",
   "i",
   "]",
   "=",
   "array",
   "[",
   "i",
   "+",
   "at",
   "]",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "array",
   "[",
   "i",
   "+",
   "at",
   "]",
   "=",
   "insert",
   "[",
   "i",
   "]",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "tail",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "array",
   "[",
   "i",
   "+",
   "length",
   "+",
   "at",
   "]",
   "=",
   "tail",
   "[",
   "i",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-237",
  "nl_tokens": [
   "\u4e0a\u4f20\u6587\u4ef6\u5206\u5757\uff0c\u5305\u62ec",
   "/",
   "*",
   "UploadId",
   "(",
   "\u4e0a\u4f20\u4efb\u52a1\u7f16\u53f7",
   ")",
   "AsyncLimit",
   "(",
   "\u5e76\u53d1\u91cf",
   ")",
   "\uff0c",
   "SliceList",
   "(",
   "\u4e0a\u4f20\u7684\u5206\u5757\u6570\u7ec4",
   ")",
   "\uff0c",
   "FilePath",
   "(",
   "\u672c\u5730\u6587\u4ef6\u7684\u4f4d\u7f6e",
   ")",
   "\uff0c",
   "SliceSize",
   "(",
   "\u6587\u4ef6\u5206\u5757\u5927\u5c0f",
   ")",
   "FileSize",
   "(",
   "\u6587\u4ef6\u5927\u5c0f",
   ")",
   "onProgress",
   "(",
   "\u4e0a\u4f20\u6210\u529f\u4e4b\u540e\u7684\u56de\u8c03\u51fd\u6570",
   ")"
  ],
  "pl_tokens": [
   "function",
   "uploadSliceList",
   "(",
   "params",
   ",",
   "cb",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   ";",
   "var",
   "TaskId",
   "=",
   "params",
   ".",
   "TaskId",
   ";",
   "var",
   "Bucket",
   "=",
   "params",
   ".",
   "Bucket",
   ";",
   "var",
   "Region",
   "=",
   "params",
   ".",
   "Region",
   ";",
   "var",
   "Key",
   "=",
   "params",
   ".",
   "Key",
   ";",
   "var",
   "UploadData",
   "=",
   "params",
   ".",
   "UploadData",
   ";",
   "var",
   "FileSize",
   "=",
   "params",
   ".",
   "FileSize",
   ";",
   "var",
   "SliceSize",
   "=",
   "params",
   ".",
   "SliceSize",
   ";",
   "var",
   "ChunkParallel",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "params",
   ".",
   "AsyncLimit",
   "||",
   "self",
   ".",
   "options",
   ".",
   "ChunkParallelLimit",
   "||",
   "1",
   ",",
   "256",
   ")",
   ";",
   "var",
   "Body",
   "=",
   "params",
   ".",
   "Body",
   ";",
   "var",
   "SliceCount",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "FileSize",
   "/",
   "SliceSize",
   ")",
   ";",
   "var",
   "FinishSize",
   "=",
   "0",
   ";",
   "var",
   "ServerSideEncryption",
   "=",
   "params",
   ".",
   "ServerSideEncryption",
   ";",
   "var",
   "needUploadSlices",
   "=",
   "util",
   ".",
   "filter",
   "(",
   "UploadData",
   ".",
   "PartList",
   ",",
   "function",
   "(",
   "SliceItem",
   ")",
   "{",
   "if",
   "(",
   "SliceItem",
   "[",
   "'Uploaded'",
   "]",
   ")",
   "{",
   "FinishSize",
   "+=",
   "SliceItem",
   "[",
   "'PartNumber'",
   "]",
   ">=",
   "SliceCount",
   "?",
   "(",
   "FileSize",
   "%",
   "SliceSize",
   "||",
   "SliceSize",
   ")",
   ":",
   "SliceSize",
   ";",
   "}",
   "return",
   "!",
   "SliceItem",
   "[",
   "'Uploaded'",
   "]",
   ";",
   "}",
   ")",
   ";",
   "var",
   "onProgress",
   "=",
   "params",
   ".",
   "onProgress",
   ";",
   "Async",
   ".",
   "eachLimit",
   "(",
   "needUploadSlices",
   ",",
   "ChunkParallel",
   ",",
   "function",
   "(",
   "SliceItem",
   ",",
   "asyncCallback",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "var",
   "PartNumber",
   "=",
   "SliceItem",
   "[",
   "'PartNumber'",
   "]",
   ";",
   "var",
   "currentSize",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "FileSize",
   ",",
   "SliceItem",
   "[",
   "'PartNumber'",
   "]",
   "*",
   "SliceSize",
   ")",
   "-",
   "(",
   "SliceItem",
   "[",
   "'PartNumber'",
   "]",
   "-",
   "1",
   ")",
   "*",
   "SliceSize",
   ";",
   "var",
   "preAddSize",
   "=",
   "0",
   ";",
   "uploadSliceItem",
   ".",
   "call",
   "(",
   "self",
   ",",
   "{",
   "TaskId",
   ":",
   "TaskId",
   ",",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "SliceSize",
   ":",
   "SliceSize",
   ",",
   "FileSize",
   ":",
   "FileSize",
   ",",
   "PartNumber",
   ":",
   "PartNumber",
   ",",
   "ServerSideEncryption",
   ":",
   "ServerSideEncryption",
   ",",
   "Body",
   ":",
   "Body",
   ",",
   "UploadData",
   ":",
   "UploadData",
   ",",
   "onProgress",
   ":",
   "function",
   "(",
   "data",
   ")",
   "{",
   "FinishSize",
   "+=",
   "data",
   ".",
   "loaded",
   "-",
   "preAddSize",
   ";",
   "preAddSize",
   "=",
   "data",
   ".",
   "loaded",
   ";",
   "onProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FinishSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ")",
   ";",
   "}",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "util",
   ".",
   "isBrowser",
   "&&",
   "!",
   "err",
   "&&",
   "!",
   "data",
   ".",
   "ETag",
   ")",
   "{",
   "err",
   "=",
   "'get ETag error, please add \"ETag\" to CORS ExposeHeader setting.'",
   ";",
   "}",
   "if",
   "(",
   "err",
   ")",
   "{",
   "FinishSize",
   "-=",
   "preAddSize",
   ";",
   "}",
   "else",
   "{",
   "FinishSize",
   "+=",
   "currentSize",
   "-",
   "preAddSize",
   ";",
   "SliceItem",
   ".",
   "ETag",
   "=",
   "data",
   ".",
   "ETag",
   ";",
   "}",
   "asyncCallback",
   "(",
   "err",
   "||",
   "null",
   ",",
   "data",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "_isRunningTask",
   "(",
   "TaskId",
   ")",
   ")",
   "return",
   ";",
   "if",
   "(",
   "err",
   ")",
   "return",
   "cb",
   "(",
   "err",
   ")",
   ";",
   "cb",
   "(",
   "null",
   ",",
   "{",
   "UploadId",
   ":",
   "UploadData",
   ".",
   "UploadId",
   ",",
   "SliceList",
   ":",
   "UploadData",
   ".",
   "PartList",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-238",
  "nl_tokens": [
   "return",
   "text",
   "string",
   "value",
   "by",
   "adding",
   "up",
   "ascii",
   "value",
   "so",
   "the",
   "text",
   "is",
   "somewhat",
   "sorted",
   "when",
   "using",
   "a",
   "digital",
   "sort",
   "this",
   "is",
   "NOT",
   "an",
   "alphanumeric",
   "sort"
  ],
  "pl_tokens": [
   "function",
   "(",
   "val",
   ",",
   "num",
   ",",
   "<mask>",
   ")",
   "{",
   "if",
   "(",
   "max",
   ")",
   "{",
   "// make sure the text value is greater than the max numerical value (max)",
   "var",
   "indx",
   ",",
   "len",
   "=",
   "val",
   "?",
   "val",
   ".",
   "length",
   ":",
   "0",
   ",",
   "n",
   "=",
   "max",
   "+",
   "num",
   ";",
   "for",
   "(",
   "indx",
   "=",
   "0",
   ";",
   "indx",
   "<",
   "len",
   ";",
   "indx",
   "++",
   ")",
   "{",
   "n",
   "+=",
   "val",
   ".",
   "charCodeAt",
   "(",
   "indx",
   ")",
   ";",
   "}",
   "return",
   "num",
   "*",
   "n",
   ";",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-239",
  "nl_tokens": [
   "Run",
   "an",
   "array",
   "/",
   "object",
   "though",
   "a",
   "function",
   "This",
   "is",
   "similar",
   "to",
   "the",
   "async",
   "native",
   ".",
   "each",
   "()",
   "function",
   "but",
   "chainable"
  ],
  "pl_tokens": [
   "function",
   "forEach",
   "(",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   ";",
   "argy",
   "(",
   "arguments",
   ")",
   ".",
   "ifForm",
   "(",
   "''",
   ",",
   "function",
   "(",
   ")",
   "{",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'array function'",
   ",",
   "function",
   "(",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'forEachArray'",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'object function'",
   ",",
   "function",
   "(",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'forEachObject'",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'string function'",
   ",",
   "function",
   "(",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'forEachLateBound'",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'number function'",
   ",",
   "function",
   "(",
   "<mask>",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'forEachRange'",
   ",",
   "min",
   ":",
   "1",
   ",",
   "max",
   ":",
   "max",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'number number function'",
   ",",
   "function",
   "(",
   "min",
   ",",
   "max",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'forEachRange'",
   ",",
   "min",
   ":",
   "min",
   ",",
   "max",
   ":",
   "max",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'string array function'",
   ",",
   "function",
   "(",
   "output",
   ",",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'mapArray'",
   ",",
   "output",
   ":",
   "output",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'string object function'",
   ",",
   "function",
   "(",
   "output",
   ",",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'mapObject'",
   ",",
   "output",
   ":",
   "output",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifForm",
   "(",
   "'string string function'",
   ",",
   "function",
   "(",
   "output",
   ",",
   "tasks",
   ",",
   "callback",
   ")",
   "{",
   "self",
   ".",
   "_struct",
   ".",
   "push",
   "(",
   "{",
   "type",
   ":",
   "'mapLateBound'",
   ",",
   "output",
   ":",
   "output",
   ",",
   "payload",
   ":",
   "tasks",
   ",",
   "callback",
   ":",
   "callback",
   "}",
   ")",
   ";",
   "}",
   ")",
   ".",
   "ifFormElse",
   "(",
   "function",
   "(",
   "form",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "'Unknown call style for .forEach(): '",
   "+",
   "form",
   ")",
   ";",
   "}",
   ")",
   ";",
   "return",
   "self",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-240",
  "nl_tokens": [
   "find"
  ],
  "pl_tokens": [
   "function",
   "find",
   "(",
   "array",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "index",
   "=",
   "0",
   ",",
   "<mask>",
   "=",
   "array",
   ".",
   "length",
   ",",
   "match",
   ";",
   "if",
   "(",
   "typeof",
   "callback",
   "!==",
   "\"function\"",
   ")",
   "{",
   "match",
   "=",
   "callback",
   ";",
   "callback",
   "=",
   "function",
   "(",
   "item",
   ")",
   "{",
   "return",
   "item",
   "===",
   "match",
   ";",
   "}",
   ";",
   "}",
   "while",
   "(",
   "index",
   "<",
   "max",
   ")",
   "{",
   "if",
   "(",
   "callback",
   "(",
   "array",
   "[",
   "index",
   "]",
   ")",
   ")",
   "{",
   "return",
   "array",
   "[",
   "index",
   "]",
   ";",
   "}",
   "index",
   "+=",
   "1",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-241",
  "nl_tokens": [
   "Re",
   "-",
   "synchronize",
   "the",
   "fake",
   "scrollbars",
   "with",
   "the",
   "actual",
   "size",
   "of",
   "the",
   "content",
   ".",
   "Optionally",
   "force",
   "a",
   "scrollTop",
   "."
  ],
  "pl_tokens": [
   "function",
   "updateScrollbars",
   "(",
   "d",
   "/* display */",
   ",",
   "docHeight",
   ")",
   "{",
   "var",
   "totalHeight",
   "=",
   "docHeight",
   "+",
   "2",
   "*",
   "paddingTop",
   "(",
   "d",
   ")",
   ";",
   "d",
   ".",
   "sizer",
   ".",
   "style",
   ".",
   "minHeight",
   "=",
   "d",
   ".",
   "heightForcer",
   ".",
   "style",
   ".",
   "top",
   "=",
   "totalHeight",
   "+",
   "\"px\"",
   ";",
   "var",
   "scrollHeight",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "totalHeight",
   ",",
   "d",
   ".",
   "scroller",
   ".",
   "scrollHeight",
   ")",
   ";",
   "var",
   "needsH",
   "=",
   "d",
   ".",
   "scroller",
   ".",
   "scrollWidth",
   ">",
   "d",
   ".",
   "scroller",
   ".",
   "clientWidth",
   ";",
   "var",
   "needsV",
   "=",
   "scrollHeight",
   ">",
   "d",
   ".",
   "scroller",
   ".",
   "clientHeight",
   ";",
   "if",
   "(",
   "needsV",
   ")",
   "{",
   "d",
   ".",
   "scrollbarV",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"block\"",
   ";",
   "d",
   ".",
   "scrollbarV",
   ".",
   "style",
   ".",
   "bottom",
   "=",
   "needsH",
   "?",
   "scrollbarWidth",
   "(",
   "d",
   ".",
   "measure",
   ")",
   "+",
   "\"px\"",
   ":",
   "\"0\"",
   ";",
   "d",
   ".",
   "scrollbarV",
   ".",
   "firstChild",
   ".",
   "style",
   ".",
   "height",
   "=",
   "(",
   "scrollHeight",
   "-",
   "d",
   ".",
   "scroller",
   ".",
   "clientHeight",
   "+",
   "d",
   ".",
   "scrollbarV",
   ".",
   "clientHeight",
   ")",
   "+",
   "\"px\"",
   ";",
   "}",
   "else",
   "d",
   ".",
   "scrollbarV",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"\"",
   ";",
   "if",
   "(",
   "needsH",
   ")",
   "{",
   "d",
   ".",
   "scrollbarH",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"block\"",
   ";",
   "d",
   ".",
   "scrollbarH",
   ".",
   "style",
   ".",
   "right",
   "=",
   "needsV",
   "?",
   "scrollbarWidth",
   "(",
   "d",
   ".",
   "measure",
   ")",
   "+",
   "\"px\"",
   ":",
   "\"0\"",
   ";",
   "d",
   ".",
   "scrollbarH",
   ".",
   "firstChild",
   ".",
   "style",
   ".",
   "width",
   "=",
   "(",
   "d",
   ".",
   "scroller",
   ".",
   "scrollWidth",
   "-",
   "d",
   ".",
   "scroller",
   ".",
   "clientWidth",
   "+",
   "d",
   ".",
   "scrollbarH",
   ".",
   "clientWidth",
   ")",
   "+",
   "\"px\"",
   ";",
   "}",
   "else",
   "d",
   ".",
   "scrollbarH",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"\"",
   ";",
   "if",
   "(",
   "needsH",
   "&&",
   "needsV",
   ")",
   "{",
   "d",
   ".",
   "scrollbarFiller",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"block\"",
   ";",
   "d",
   ".",
   "scrollbarFiller",
   ".",
   "style",
   ".",
   "height",
   "=",
   "d",
   ".",
   "scrollbarFiller",
   ".",
   "style",
   ".",
   "width",
   "=",
   "scrollbarWidth",
   "(",
   "d",
   ".",
   "measure",
   ")",
   "+",
   "\"px\"",
   ";",
   "}",
   "else",
   "d",
   ".",
   "scrollbarFiller",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"\"",
   ";",
   "if",
   "(",
   "mac_geLion",
   "&&",
   "scrollbarWidth",
   "(",
   "d",
   ".",
   "measure",
   ")",
   "===",
   "0",
   ")",
   "d",
   ".",
   "scrollbarV",
   ".",
   "style",
   ".",
   "minWidth",
   "=",
   "d",
   ".",
   "scrollbarH",
   ".",
   "style",
   ".",
   "minHeight",
   "=",
   "mac_geMountainLion",
   "?",
   "\"18px\"",
   ":",
   "\"12px\"",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-242",
  "nl_tokens": [
   "Is",
   "set",
   "by",
   "the",
   "task",
   "_read_overrides_and_resolutions"
  ],
  "pl_tokens": [
   "function",
   "(",
   "mainFiles",
   "/*, component*/",
   ")",
   "{",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "mainFiles",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "//Use no-minified version if available",
   "var",
   "parts",
   "=",
   "mainFiles",
   "[",
   "i",
   "]",
   ".",
   "split",
   "(",
   "'.'",
   ")",
   ",",
   "ext",
   "=",
   "parts",
   ".",
   "pop",
   "(",
   ")",
   ",",
   "<mask>",
   "=",
   "parts",
   ".",
   "pop",
   "(",
   ")",
   ",",
   "fName",
   ";",
   "if",
   "(",
   "min",
   "==",
   "'min'",
   ")",
   "{",
   "parts",
   ".",
   "push",
   "(",
   "ext",
   ")",
   ";",
   "fName",
   "=",
   "parts",
   ".",
   "join",
   "(",
   "'.'",
   ")",
   ";",
   "if",
   "(",
   "grunt",
   ".",
   "file",
   ".",
   "exists",
   "(",
   "fName",
   ")",
   ")",
   "mainFiles",
   "[",
   "i",
   "]",
   "=",
   "fName",
   ";",
   "}",
   "}",
   "return",
   "mainFiles",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-243",
  "nl_tokens": [
   "Search",
   "for",
   "the",
   "first",
   "keyword",
   "match",
   "given",
   "phrase",
   "."
  ],
  "pl_tokens": [
   "function",
   "seekVanguard",
   "(",
   "phrase",
   ")",
   "{",
   "phrase",
   "=",
   "_adaptKey",
   "(",
   "phrase",
   ")",
   ";",
   "var",
   "kdx",
   "=",
   "reduce",
   "(",
   "KEY_INDEX",
   ",",
   "phrase",
   ")",
   ";",
   "// look back for the first record block containing keyword for the specified phrase",
   "if",
   "(",
   "phrase",
   "<=",
   "_adaptKey",
   "(",
   "kdx",
   ".",
   "last_word",
   ")",
   ")",
   "{",
   "var",
   "index",
   "=",
   "kdx",
   ".",
   "index",
   "-",
   "1",
   ",",
   "prev",
   ";",
   "while",
   "(",
   "prev",
   "=",
   "KEY_INDEX",
   "[",
   "index",
   "]",
   ")",
   "{",
   "if",
   "(",
   "_adaptKey",
   "(",
   "prev",
   ".",
   "last_word",
   ")",
   "!==",
   "_adaptKey",
   "(",
   "kdx",
   ".",
   "last_word",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "kdx",
   "=",
   "prev",
   ";",
   "index",
   "--",
   ";",
   "}",
   "}",
   "return",
   "loadKeys",
   "(",
   "kdx",
   ")",
   ".",
   "then",
   "(",
   "function",
   "(",
   "list",
   ")",
   "{",
   "var",
   "idx",
   "=",
   "shrink",
   "(",
   "list",
   ",",
   "phrase",
   ")",
   ";",
   "// look back for the first matched keyword position",
   "while",
   "(",
   "idx",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "_adaptKey",
   "(",
   "list",
   "[",
   "--",
   "idx",
   "]",
   ")",
   "!==",
   "_adaptKey",
   "(",
   "phrase",
   ")",
   ")",
   "{",
   "idx",
   "++",
   ";",
   "break",
   ";",
   "}",
   "}",
   "return",
   "[",
   "kdx",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "idx",
   ",",
   "list",
   ".",
   "length",
   "-",
   "1",
   ")",
   ",",
   "list",
   "]",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-244",
  "nl_tokens": [
   "/",
   "*",
   "\u2588\u2588\u2588\u2588\u2588\u2584",
   "\u2584\u2588\u2588\u2588\u2588\u2584",
   "\u2588\u2588\u2588\u2588\u2588\u2584",
   "\u2584\u2588\u2588\u2588\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2584",
   "\u2584\u2588\u2588\u2588\u2588\u2588",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2580\u2588\u2584",
   "\u2588\u2588\u2584\u2584",
   "\u2588\u2588\u2584\u2584\u2588\u2588",
   "\u2580\u2588\u2584",
   "\u2588\u2588\u2580\u2580\u2580",
   "\u2588\u2588\u2580\u2580\u2588\u2588",
   "\u2588\u2588\u2580\u2588\u2588",
   "\u2580\u2588\u2584",
   "\u2588\u2588\u2580\u2580",
   "\u2588\u2588\u2580\u2588\u2588",
   "\u2580\u2588\u2584",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2580",
   "\u2588\u2588\u2588\u2588\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588",
   "\u2588\u2588\u2588\u2588\u2588\u2580"
  ],
  "pl_tokens": [
   "function",
   "(",
   "c",
   ",",
   "$tbodies",
   ")",
   "{",
   "var",
   "rows",
   ",",
   "list",
   ",",
   "span",
   ",",
   "<mask>",
   ",",
   "colIndex",
   ",",
   "indx",
   ",",
   "header",
   ",",
   "configHeaders",
   ",",
   "noParser",
   ",",
   "parser",
   ",",
   "extractor",
   ",",
   "time",
   ",",
   "tbody",
   ",",
   "len",
   ",",
   "table",
   "=",
   "c",
   ".",
   "table",
   ",",
   "tbodyIndex",
   "=",
   "0",
   ",",
   "debug",
   "=",
   "{",
   "}",
   ";",
   "// update table bodies in case we start with an empty table",
   "c",
   ".",
   "$tbodies",
   "=",
   "c",
   ".",
   "$table",
   ".",
   "children",
   "(",
   "'tbody:not(.'",
   "+",
   "c",
   ".",
   "cssInfoBlock",
   "+",
   "')'",
   ")",
   ";",
   "tbody",
   "=",
   "typeof",
   "$tbodies",
   "===",
   "'undefined'",
   "?",
   "c",
   ".",
   "$tbodies",
   ":",
   "$tbodies",
   ";",
   "len",
   "=",
   "tbody",
   ".",
   "length",
   ";",
   "if",
   "(",
   "len",
   "===",
   "0",
   ")",
   "{",
   "return",
   "c",
   ".",
   "debug",
   "?",
   "console",
   ".",
   "warn",
   "(",
   "'Warning: *Empty table!* Not building a parser cache'",
   ")",
   ":",
   "''",
   ";",
   "}",
   "else",
   "if",
   "(",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "time",
   "=",
   "new",
   "Date",
   "(",
   ")",
   ";",
   "console",
   "[",
   "console",
   ".",
   "group",
   "?",
   "'group'",
   ":",
   "'log'",
   "]",
   "(",
   "'Detecting parsers for each column'",
   ")",
   ";",
   "}",
   "list",
   "=",
   "{",
   "extractors",
   ":",
   "[",
   "]",
   ",",
   "parsers",
   ":",
   "[",
   "]",
   "}",
   ";",
   "while",
   "(",
   "tbodyIndex",
   "<",
   "len",
   ")",
   "{",
   "rows",
   "=",
   "tbody",
   "[",
   "tbodyIndex",
   "]",
   ".",
   "rows",
   ";",
   "if",
   "(",
   "rows",
   ".",
   "length",
   ")",
   "{",
   "colIndex",
   "=",
   "0",
   ";",
   "max",
   "=",
   "c",
   ".",
   "columns",
   ";",
   "for",
   "(",
   "indx",
   "=",
   "0",
   ";",
   "indx",
   "<",
   "max",
   ";",
   "indx",
   "++",
   ")",
   "{",
   "header",
   "=",
   "c",
   ".",
   "$headerIndexed",
   "[",
   "colIndex",
   "]",
   ";",
   "if",
   "(",
   "header",
   "&&",
   "header",
   ".",
   "length",
   ")",
   "{",
   "// get column indexed table cell",
   "configHeaders",
   "=",
   "ts",
   ".",
   "getColumnData",
   "(",
   "table",
   ",",
   "c",
   ".",
   "headers",
   ",",
   "colIndex",
   ")",
   ";",
   "// get column parser/extractor",
   "extractor",
   "=",
   "ts",
   ".",
   "getParserById",
   "(",
   "ts",
   ".",
   "getData",
   "(",
   "header",
   ",",
   "configHeaders",
   ",",
   "'extractor'",
   ")",
   ")",
   ";",
   "parser",
   "=",
   "ts",
   ".",
   "getParserById",
   "(",
   "ts",
   ".",
   "getData",
   "(",
   "header",
   ",",
   "configHeaders",
   ",",
   "'sorter'",
   ")",
   ")",
   ";",
   "noParser",
   "=",
   "ts",
   ".",
   "getData",
   "(",
   "header",
   ",",
   "configHeaders",
   ",",
   "'parser'",
   ")",
   "===",
   "'false'",
   ";",
   "// empty cells behaviour - keeping emptyToBottom for backwards compatibility",
   "c",
   ".",
   "empties",
   "[",
   "colIndex",
   "]",
   "=",
   "(",
   "ts",
   ".",
   "getData",
   "(",
   "header",
   ",",
   "configHeaders",
   ",",
   "'empty'",
   ")",
   "||",
   "c",
   ".",
   "emptyTo",
   "||",
   "(",
   "c",
   ".",
   "emptyToBottom",
   "?",
   "'bottom'",
   ":",
   "'top'",
   ")",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ";",
   "// text strings behaviour in numerical sorts",
   "c",
   ".",
   "strings",
   "[",
   "colIndex",
   "]",
   "=",
   "(",
   "ts",
   ".",
   "getData",
   "(",
   "header",
   ",",
   "configHeaders",
   ",",
   "'string'",
   ")",
   "||",
   "c",
   ".",
   "stringTo",
   "||",
   "'max'",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ";",
   "if",
   "(",
   "noParser",
   ")",
   "{",
   "parser",
   "=",
   "ts",
   ".",
   "getParserById",
   "(",
   "'no-parser'",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "extractor",
   ")",
   "{",
   "// For now, maybe detect someday",
   "extractor",
   "=",
   "false",
   ";",
   "}",
   "if",
   "(",
   "!",
   "parser",
   ")",
   "{",
   "parser",
   "=",
   "ts",
   ".",
   "detectParserForColumn",
   "(",
   "c",
   ",",
   "rows",
   ",",
   "-",
   "1",
   ",",
   "colIndex",
   ")",
   ";",
   "}",
   "if",
   "(",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "debug",
   "[",
   "'('",
   "+",
   "colIndex",
   "+",
   "') '",
   "+",
   "header",
   ".",
   "text",
   "(",
   ")",
   "]",
   "=",
   "{",
   "parser",
   ":",
   "parser",
   ".",
   "id",
   ",",
   "extractor",
   ":",
   "extractor",
   "?",
   "extractor",
   ".",
   "id",
   ":",
   "'none'",
   ",",
   "string",
   ":",
   "c",
   ".",
   "strings",
   "[",
   "colIndex",
   "]",
   ",",
   "empty",
   ":",
   "c",
   ".",
   "empties",
   "[",
   "colIndex",
   "]",
   "}",
   ";",
   "}",
   "list",
   ".",
   "parsers",
   "[",
   "colIndex",
   "]",
   "=",
   "parser",
   ";",
   "list",
   ".",
   "extractors",
   "[",
   "colIndex",
   "]",
   "=",
   "extractor",
   ";",
   "span",
   "=",
   "header",
   "[",
   "0",
   "]",
   ".",
   "colSpan",
   "-",
   "1",
   ";",
   "if",
   "(",
   "span",
   ">",
   "0",
   ")",
   "{",
   "colIndex",
   "+=",
   "span",
   ";",
   "max",
   "+=",
   "span",
   ";",
   "while",
   "(",
   "span",
   "+",
   "1",
   ">",
   "0",
   ")",
   "{",
   "// set colspan columns to use the same parsers & extractors",
   "list",
   ".",
   "parsers",
   "[",
   "colIndex",
   "-",
   "span",
   "]",
   "=",
   "parser",
   ";",
   "list",
   ".",
   "extractors",
   "[",
   "colIndex",
   "-",
   "span",
   "]",
   "=",
   "extractor",
   ";",
   "span",
   "--",
   ";",
   "}",
   "}",
   "}",
   "colIndex",
   "++",
   ";",
   "}",
   "}",
   "tbodyIndex",
   "+=",
   "(",
   "list",
   ".",
   "parsers",
   ".",
   "length",
   ")",
   "?",
   "len",
   ":",
   "1",
   ";",
   "}",
   "if",
   "(",
   "c",
   ".",
   "debug",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ts",
   ".",
   "isEmptyObject",
   "(",
   "debug",
   ")",
   ")",
   "{",
   "console",
   "[",
   "console",
   ".",
   "table",
   "?",
   "'table'",
   ":",
   "'log'",
   "]",
   "(",
   "debug",
   ")",
   ";",
   "}",
   "else",
   "{",
   "console",
   ".",
   "warn",
   "(",
   "'  No parsers detected!'",
   ")",
   ";",
   "}",
   "console",
   ".",
   "log",
   "(",
   "'Completed detecting parsers'",
   "+",
   "ts",
   ".",
   "benchmark",
   "(",
   "time",
   ")",
   ")",
   ";",
   "if",
   "(",
   "console",
   ".",
   "groupEnd",
   ")",
   "{",
   "console",
   ".",
   "groupEnd",
   "(",
   ")",
   ";",
   "}",
   "}",
   "c",
   ".",
   "parsers",
   "=",
   "list",
   ".",
   "parsers",
   ";",
   "c",
   ".",
   "extractors",
   "=",
   "list",
   ".",
   "extractors",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-245",
  "nl_tokens": [
   "This",
   "function",
   "is",
   "made",
   "by",
   "the",
   "following",
   "requirements",
   ":",
   ":",
   "x",
   "<",
   "0",
   ".",
   "01",
   "y",
   "=",
   "0",
   ".",
   "5",
   ":",
   "x",
   ">",
   "0",
   ".",
   "1",
   "y",
   "=",
   "1",
   ":",
   "f",
   "(",
   "x",
   ")",
   "otherwise",
   "The",
   "f",
   "(",
   "x",
   ")",
   "polynomium",
   "is",
   "made",
   "so",
   "it",
   "follows",
   ":",
   ":",
   "f",
   "(",
   "0",
   ".",
   "01",
   ")",
   "=",
   "0",
   ".",
   "5",
   ":",
   "f",
   "(",
   "0",
   ".",
   "01",
   ")",
   "=",
   "0",
   ":",
   "f",
   "(",
   "0",
   ".",
   "1",
   ")",
   "=",
   "1",
   ":",
   "f",
   "(",
   "0",
   ".",
   "1",
   ")",
   "=",
   "0"
  ],
  "pl_tokens": [
   "function",
   "adjustLiklihood",
   "(",
   "x",
   ")",
   "{",
   "if",
   "(",
   "x",
   "<",
   "0.01",
   ")",
   "return",
   "0.5",
   ";",
   "else",
   "if",
   "(",
   "x",
   ">",
   "0.1",
   ")",
   "return",
   "1",
   ";",
   "else",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "-",
   "1371",
   "*",
   "Math",
   ".",
   "pow",
   "(",
   "x",
   ",",
   "3",
   ")",
   "+",
   "226",
   "*",
   "Math",
   ".",
   "pow",
   "(",
   "x",
   ",",
   "2",
   ")",
   "-",
   "4.11",
   "*",
   "x",
   "+",
   "0.52",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-246",
  "nl_tokens": [
   "/",
   "*",
   "This",
   "is",
   "a",
   "temporary",
   "function",
   "to",
   "be",
   "removed",
   "once",
   "generation",
   "of",
   "all",
   "functions",
   "has",
   "been",
   "achieved",
   "."
  ],
  "pl_tokens": [
   "function",
   "known",
   "(",
   "parsed",
   ")",
   "{",
   "return",
   "parsed",
   ".",
   "every",
   "(",
   "node",
   "=>",
   "{",
   "return",
   "node",
   ".",
   "type",
   "===",
   "'keyword'",
   "||",
   "node",
   ".",
   "type",
   "===",
   "'string'",
   "||",
   "node",
   ".",
   "type",
   "===",
   "'group'",
   "&&",
   "!",
   "node",
   ".",
   "order",
   "&&",
   "!",
   "node",
   ".",
   "<mask>",
   "&&",
   "node",
   ".",
   "values",
   ".",
   "every",
   "(",
   "n",
   "=>",
   "n",
   ".",
   "type",
   "===",
   "'keyword'",
   ")",
   "||",
   "(",
   "node",
   ".",
   "type",
   "===",
   "'data'",
   "&&",
   "validators",
   "[",
   "dataValidator",
   "(",
   "node",
   ".",
   "value",
   ")",
   "]",
   ")",
   ";",
   "// eslint-disable-line",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-247",
  "nl_tokens": [
   "Ported",
   "from",
   ":",
   "https",
   ":",
   "//",
   "github",
   ".",
   "com",
   "/",
   "Shopify",
   "/",
   "sarama",
   "/",
   "blob",
   "/",
   "a3e2437d6d26cda6b2dc501dbdab4d3f6befa295",
   "/",
   "snappy",
   ".",
   "go"
  ],
  "pl_tokens": [
   "function",
   "decodeSnappy",
   "(",
   "buffer",
   ",",
   "cb",
   ")",
   "{",
   "if",
   "(",
   "isChunked",
   "(",
   "buffer",
   ")",
   ")",
   "{",
   "var",
   "pos",
   "=",
   "16",
   ";",
   "var",
   "<mask>",
   "=",
   "buffer",
   ".",
   "length",
   ";",
   "var",
   "encoded",
   "=",
   "[",
   "]",
   ";",
   "var",
   "size",
   ";",
   "while",
   "(",
   "pos",
   "<",
   "max",
   ")",
   "{",
   "size",
   "=",
   "buffer",
   ".",
   "readUInt32BE",
   "(",
   "pos",
   ")",
   ";",
   "pos",
   "+=",
   "4",
   ";",
   "encoded",
   ".",
   "push",
   "(",
   "buffer",
   ".",
   "slice",
   "(",
   "pos",
   ",",
   "pos",
   "+",
   "size",
   ")",
   ")",
   ";",
   "pos",
   "+=",
   "size",
   ";",
   "}",
   "return",
   "async",
   ".",
   "mapSeries",
   "(",
   "encoded",
   ",",
   "snappy",
   ".",
   "uncompress",
   ",",
   "function",
   "(",
   "err",
   ",",
   "decodedChunks",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "return",
   "cb",
   "(",
   "err",
   ")",
   ";",
   "return",
   "cb",
   "(",
   "null",
   ",",
   "Buffer",
   ".",
   "concat",
   "(",
   "decodedChunks",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "return",
   "snappy",
   ".",
   "uncompress",
   "(",
   "buffer",
   ",",
   "cb",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-248",
  "nl_tokens": [
   "map"
  ],
  "pl_tokens": [
   "function",
   "map",
   "(",
   "array",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "index",
   "=",
   "0",
   ",",
   "<mask>",
   "=",
   "array",
   ".",
   "length",
   ",",
   "ret",
   "=",
   "[",
   "]",
   ";",
   "if",
   "(",
   "!",
   "array",
   "||",
   "!",
   "max",
   ")",
   "{",
   "return",
   "ret",
   ";",
   "}",
   "while",
   "(",
   "index",
   "<",
   "max",
   ")",
   "{",
   "ret",
   "[",
   "index",
   "]",
   "=",
   "callback",
   "(",
   "array",
   "[",
   "index",
   "]",
   ",",
   "index",
   ")",
   ";",
   "index",
   "+=",
   "1",
   ";",
   "}",
   "return",
   "ret",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-249",
  "nl_tokens": [
   "Clamps",
   "horzontal",
   "field",
   "of",
   "view",
   "to",
   "viewer",
   "s",
   "limits",
   "."
  ],
  "pl_tokens": [
   "function",
   "constrainHfov",
   "(",
   "hfov",
   ")",
   "{",
   "// Keep field of view within bounds",
   "var",
   "minHfov",
   "=",
   "config",
   ".",
   "minHfov",
   ";",
   "if",
   "(",
   "config",
   ".",
   "type",
   "==",
   "'multires'",
   "&&",
   "renderer",
   "&&",
   "config",
   ".",
   "multiResMinHfov",
   ")",
   "{",
   "minHfov",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minHfov",
   ",",
   "renderer",
   ".",
   "getCanvas",
   "(",
   ")",
   ".",
   "width",
   "/",
   "(",
   "config",
   ".",
   "multiRes",
   ".",
   "cubeResolution",
   "/",
   "90",
   "*",
   "0.9",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "minHfov",
   ">",
   "config",
   ".",
   "maxHfov",
   ")",
   "{",
   "// Don't change view if bounds don't make sense",
   "console",
   ".",
   "log",
   "(",
   "'HFOV bounds do not make sense (minHfov > maxHfov).'",
   ")",
   "return",
   "config",
   ".",
   "hfov",
   ";",
   "}",
   "var",
   "newHfov",
   "=",
   "config",
   ".",
   "hfov",
   ";",
   "if",
   "(",
   "hfov",
   "<",
   "minHfov",
   ")",
   "{",
   "newHfov",
   "=",
   "minHfov",
   ";",
   "}",
   "else",
   "if",
   "(",
   "hfov",
   ">",
   "config",
   ".",
   "maxHfov",
   ")",
   "{",
   "newHfov",
   "=",
   "config",
   ".",
   "maxHfov",
   ";",
   "}",
   "else",
   "{",
   "newHfov",
   "=",
   "hfov",
   ";",
   "}",
   "// Optionally avoid showing background (empty space) on top or bottom by adapting newHfov",
   "if",
   "(",
   "config",
   ".",
   "avoidShowingBackground",
   "&&",
   "renderer",
   ")",
   "{",
   "var",
   "canvas",
   "=",
   "renderer",
   ".",
   "getCanvas",
   "(",
   ")",
   ";",
   "newHfov",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "newHfov",
   ",",
   "Math",
   ".",
   "atan",
   "(",
   "Math",
   ".",
   "tan",
   "(",
   "(",
   "config",
   ".",
   "maxPitch",
   "-",
   "config",
   ".",
   "minPitch",
   ")",
   "/",
   "360",
   "*",
   "Math",
   ".",
   "PI",
   ")",
   "/",
   "canvas",
   ".",
   "height",
   "*",
   "canvas",
   ".",
   "width",
   ")",
   "*",
   "360",
   "/",
   "Math",
   ".",
   "PI",
   ")",
   ";",
   "}",
   "return",
   "newHfov",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-250",
  "nl_tokens": [
   "Returns",
   "the",
   "name",
   "of",
   "the",
   "bundle",
   "to",
   "which",
   "the",
   "path",
   "belongs",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "findPath",
   ")",
   "{",
   "// FUTURE OPTIMIZATION:  use a more complicated datastructure for faster lookups",
   "var",
   "found",
   "=",
   "{",
   "}",
   ",",
   "// length: path",
   "longest",
   ";",
   "// expands path in case of symlinks",
   "findPath",
   "=",
   "libfs",
   ".",
   "realpathSync",
   "(",
   "findPath",
   ")",
   ";",
   "// searchs based on expanded path",
   "Object",
   ".",
   "keys",
   "(",
   "this",
   ".",
   "_bundlePaths",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "bundlePath",
   ")",
   "{",
   "if",
   "(",
   "0",
   "===",
   "findPath",
   ".",
   "indexOf",
   "(",
   "bundlePath",
   ")",
   "&&",
   "(",
   "findPath",
   ".",
   "length",
   "===",
   "bundlePath",
   ".",
   "length",
   "||",
   "libpath",
   ".",
   "sep",
   "===",
   "findPath",
   ".",
   "charAt",
   "(",
   "bundlePath",
   ".",
   "length",
   ")",
   ")",
   ")",
   "{",
   "found",
   "[",
   "bundlePath",
   ".",
   "length",
   "]",
   "=",
   "bundlePath",
   ";",
   "}",
   "}",
   ")",
   ";",
   "longest",
   "=",
   "Math",
   ".",
   "<mask>",
   ".",
   "apply",
   "(",
   "Math",
   ",",
   "Object",
   ".",
   "keys",
   "(",
   "found",
   ")",
   ")",
   ";",
   "return",
   "this",
   ".",
   "_bundlePaths",
   "[",
   "found",
   "[",
   "longest",
   "]",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-251",
  "nl_tokens": [
   "Handles",
   "responding",
   "to",
   "the",
   "dependencies",
   "radio",
   "group",
   "."
  ],
  "pl_tokens": [
   "function",
   "onControlDepsClicked",
   "(",
   ")",
   "{",
   "// Do nothing if scope has not changed",
   "if",
   "(",
   "this",
   ".",
   "value",
   "===",
   "appOptions",
   ".",
   "currentScope",
   ")",
   "{",
   "return",
   ";",
   "}",
   "// If max depth is set to sticky and current level is equal max level of old scope then set max level for",
   "// the new scope.",
   "if",
   "(",
   "appOptions",
   ".",
   "maxDepthSticky",
   "&&",
   "appOptions",
   ".",
   "currentLevel",
   "===",
   "dataPackageMap",
   "[",
   "appOptions",
   ".",
   "currentScope",
   "]",
   ".",
   "maxLevel",
   ")",
   "{",
   "appOptions",
   ".",
   "currentLevel",
   "=",
   "dataPackageMap",
   "[",
   "this",
   ".",
   "value",
   "]",
   ".",
   "maxLevel",
   "}",
   "appOptions",
   ".",
   "currentScope",
   "=",
   "this",
   ".",
   "value",
   ";",
   "var",
   "maxLevel",
   "=",
   "dataPackageMap",
   "[",
   "appOptions",
   ".",
   "currentScope",
   "]",
   ".",
   "maxLevel",
   ";",
   "// Adjust current level if it is greater than max level for current scope.",
   "if",
   "(",
   "appOptions",
   ".",
   "currentLevel",
   ">",
   "maxLevel",
   ")",
   "{",
   "appOptions",
   ".",
   "currentLevel",
   "=",
   "maxLevel",
   ";",
   "}",
   "// Update control level UI based on current and max level for given scope.",
   "$",
   "(",
   "'.control-level input'",
   ")",
   ".",
   "attr",
   "(",
   "{",
   "<mask>",
   ":",
   "maxLevel",
   "}",
   ")",
   ";",
   "$",
   "(",
   "'.control-level input'",
   ")",
   ".",
   "val",
   "(",
   "appOptions",
   ".",
   "currentLevel",
   ")",
   ";",
   "$",
   "(",
   "'.control-level label'",
   ")",
   ".",
   "html",
   "(",
   "appOptions",
   ".",
   "currentLevel",
   ")",
   ";",
   "// Redraw graph data",
   "updateAll",
   "(",
   "{",
   "redrawOnly",
   ":",
   "true",
   "}",
   ")",
   ";",
   "// Center graph w/ zoom fit w/ 1 second transition applied after a potential 2 seconds delay for debounce.",
   "centerGraph",
   "(",
   "zoomFit",
   ",",
   "1000",
   ",",
   "data",
   ".",
   "allNodesFixed",
   "?",
   "0",
   ":",
   "2000",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-252",
  "nl_tokens": [
   "Figures",
   "out",
   "which",
   "seed",
   "to",
   "use",
   "from",
   "the",
   "list",
   "of",
   "available",
   "packages",
   ".",
   "Select",
   "by",
   "depth",
   "then",
   "by",
   "semver",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "pkgDepths",
   ")",
   "{",
   "// pkgDepths -> depth: [metas]",
   "var",
   "depths",
   ",",
   "minDepth",
   ",",
   "maxDepth",
   ",",
   "seeds",
   ";",
   "depths",
   "=",
   "Object",
   ".",
   "keys",
   "(",
   "pkgDepths",
   ")",
   ";",
   "minDepth",
   "=",
   "Math",
   ".",
   "<mask>",
   ".",
   "apply",
   "(",
   "Math",
   ",",
   "depths",
   ")",
   ";",
   "maxDepth",
   "=",
   "Math",
   ".",
   "max",
   ".",
   "apply",
   "(",
   "Math",
   ",",
   "depths",
   ")",
   ";",
   "seeds",
   "=",
   "pkgDepths",
   "[",
   "minDepth",
   "]",
   ";",
   "if",
   "(",
   "1",
   "===",
   "seeds",
   ".",
   "length",
   ")",
   "{",
   "if",
   "(",
   "minDepth",
   "!==",
   "maxDepth",
   ")",
   "{",
   "debug",
   "(",
   "'multiple \"'",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "name",
   "+",
   "'\" packages found, using version '",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "version",
   "+",
   "' from '",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "baseDirectory",
   ")",
   ";",
   "}",
   "return",
   "seeds",
   "[",
   "0",
   "]",
   ";",
   "}",
   "seeds",
   ".",
   "sort",
   "(",
   "function",
   "(",
   "a",
   ",",
   "b",
   ")",
   "{",
   "return",
   "libsemver",
   ".",
   "rcompare",
   "(",
   "a",
   ".",
   "version",
   ",",
   "b",
   ".",
   "version",
   ")",
   ";",
   "}",
   ")",
   ";",
   "debug",
   "(",
   "'multiple \"'",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "name",
   "+",
   "'\" packages found, using version '",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "version",
   "+",
   "' from '",
   "+",
   "seeds",
   "[",
   "0",
   "]",
   ".",
   "baseDirectory",
   ")",
   ";",
   "return",
   "seeds",
   "[",
   "0",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-253",
  "nl_tokens": [
   "Is",
   "(",
   "comp",
   ">",
   "=",
   "ref",
   ")",
   "according",
   "to",
   "sliding",
   "window"
  ],
  "pl_tokens": [
   "function",
   "geWindow",
   "(",
   "ref",
   ",",
   "comp",
   ")",
   "{",
   "var",
   "<mask>",
   "=",
   "ref",
   "+",
   "(",
   "MAX_MSGID",
   "/",
   "2",
   ")",
   ";",
   "var",
   "min",
   "=",
   "ref",
   ";",
   "if",
   "(",
   "max",
   ">=",
   "MAX_MSGID",
   ")",
   "{",
   "// Handle roll-over",
   "max",
   "=",
   "max",
   "-",
   "MAX_MSGID",
   "-",
   "1",
   ";",
   "return",
   "(",
   "(",
   "comp",
   "<=",
   "max",
   ")",
   "||",
   "(",
   "comp",
   ">=",
   "min",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "(",
   "(",
   "comp",
   "<=",
   "max",
   ")",
   "&&",
   "(",
   "comp",
   ">=",
   "min",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-254",
  "nl_tokens": [
   "/",
   "*",
   "Notice",
   ":",
   "It",
   "s",
   "a",
   "Scrollable",
   "best",
   "practice",
   "to",
   "use",
   "plain",
   "functions",
   "instead",
   "of",
   "React",
   "bound",
   "methods",
   ".",
   "Read",
   "more",
   "about",
   "why",
   "on",
   "the",
   "minimal",
   "example",
   "."
  ],
  "pl_tokens": [
   "function",
   "consumptionBars",
   "(",
   "x",
   ",",
   "y",
   ",",
   "self",
   ",",
   "items",
   ",",
   "scroller",
   ")",
   "{",
   "// All calculations are made for top handler, then inverted in the end",
   "// if this call refers to the bottom handler",
   "// If we are in the middle of the content and scrolled past the swipe origin",
   "// keeps reseting origin until user scrolls down. Effectively this means the",
   "// first time user scrolls down starts hiding the bars again.",
   "if",
   "(",
   "y",
   ">",
   "0",
   "&&",
   "y",
   "<",
   "scroller",
   ".",
   "origin",
   "&&",
   "scroller",
   ".",
   "consuming",
   ")",
   "{",
   "scroller",
   ".",
   "origin",
   "=",
   "y",
   ";",
   "}",
   "// if we are near the top, force topBar to show",
   "if",
   "(",
   "y",
   "<=",
   "self",
   ".",
   "rect",
   ".",
   "height",
   "&&",
   "!",
   "scroller",
   ".",
   "consuming",
   ")",
   "{",
   "scroller",
   ".",
   "consuming",
   "=",
   "true",
   ";",
   "scroller",
   ".",
   "origin",
   "=",
   "0",
   ";",
   "}",
   "var",
   "pos",
   ";",
   "if",
   "(",
   "scroller",
   ".",
   "consuming",
   ")",
   "{",
   "pos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "scroller",
   ".",
   "origin",
   "-",
   "y",
   ",",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "pos",
   "=",
   "-",
   "self",
   ".",
   "rect",
   ".",
   "height",
   ";",
   "// offscreen",
   "}",
   "// As the top bar moves offscreen, it should be locked offscreen",
   "if",
   "(",
   "pos",
   "<=",
   "-",
   "self",
   ".",
   "rect",
   ".",
   "height",
   ")",
   "{",
   "scroller",
   ".",
   "consuming",
   "=",
   "false",
   ";",
   "}",
   "// If this was called from botbar, make it work from bottom of the viewport.",
   "if",
   "(",
   "self",
   "===",
   "items",
   ".",
   "botbar",
   ")",
   "{",
   "pos",
   "=",
   "scroller",
   ".",
   "rect",
   ".",
   "height",
   "-",
   "self",
   ".",
   "rect",
   ".",
   "height",
   "-",
   "pos",
   ";",
   "}",
   "return",
   "{",
   "y",
   ":",
   "pos",
   ",",
   "zIndex",
   ":",
   "5",
   ",",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-255",
  "nl_tokens": [
   "Get",
   "a",
   "random",
   "value",
   "from",
   "an",
   "array"
  ],
  "pl_tokens": [
   "function",
   "getRandomArrValue",
   "(",
   "arr",
   ",",
   "<mask>",
   "=",
   "0",
   ",",
   "max",
   "=",
   "arr",
   ".",
   "length",
   "-",
   "1",
   ")",
   "{",
   "return",
   "arr",
   "[",
   "getRandomInt",
   "(",
   "min",
   ",",
   "max",
   ")",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-256",
  "nl_tokens": [
   "prevInput",
   "is",
   "a",
   "hack",
   "to",
   "work",
   "with",
   "IME",
   ".",
   "If",
   "we",
   "reset",
   "the",
   "textarea",
   "on",
   "every",
   "change",
   "that",
   "breaks",
   "IME",
   ".",
   "So",
   "we",
   "look",
   "for",
   "changes",
   "compared",
   "to",
   "the",
   "previous",
   "content",
   "instead",
   ".",
   "(",
   "Modern",
   "browsers",
   "have",
   "events",
   "that",
   "indicate",
   "IME",
   "taking",
   "place",
   "but",
   "these",
   "are",
   "not",
   "widely",
   "supported",
   "or",
   "compatible",
   "enough",
   "yet",
   "to",
   "rely",
   "on",
   ".",
   ")"
  ],
  "pl_tokens": [
   "function",
   "readInput",
   "(",
   "cm",
   ")",
   "{",
   "var",
   "input",
   "=",
   "cm",
   ".",
   "display",
   ".",
   "input",
   ",",
   "prevInput",
   "=",
   "cm",
   ".",
   "display",
   ".",
   "prevInput",
   ",",
   "view",
   "=",
   "cm",
   ".",
   "view",
   ",",
   "sel",
   "=",
   "view",
   ".",
   "sel",
   ";",
   "if",
   "(",
   "!",
   "view",
   ".",
   "focused",
   "||",
   "hasSelection",
   "(",
   "input",
   ")",
   "||",
   "isReadOnly",
   "(",
   "cm",
   ")",
   ")",
   "return",
   "false",
   ";",
   "var",
   "text",
   "=",
   "input",
   ".",
   "value",
   ";",
   "if",
   "(",
   "text",
   "==",
   "prevInput",
   "&&",
   "posEq",
   "(",
   "sel",
   ".",
   "from",
   ",",
   "sel",
   ".",
   "to",
   ")",
   ")",
   "return",
   "false",
   ";",
   "startOperation",
   "(",
   "cm",
   ")",
   ";",
   "view",
   ".",
   "sel",
   ".",
   "shift",
   "=",
   "false",
   ";",
   "var",
   "same",
   "=",
   "0",
   ",",
   "l",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "prevInput",
   ".",
   "length",
   ",",
   "text",
   ".",
   "length",
   ")",
   ";",
   "while",
   "(",
   "same",
   "<",
   "l",
   "&&",
   "prevInput",
   "[",
   "same",
   "]",
   "==",
   "text",
   "[",
   "same",
   "]",
   ")",
   "++",
   "same",
   ";",
   "var",
   "from",
   "=",
   "sel",
   ".",
   "from",
   ",",
   "to",
   "=",
   "sel",
   ".",
   "to",
   ";",
   "if",
   "(",
   "same",
   "<",
   "prevInput",
   ".",
   "length",
   ")",
   "from",
   "=",
   "{",
   "line",
   ":",
   "from",
   ".",
   "line",
   ",",
   "ch",
   ":",
   "from",
   ".",
   "ch",
   "-",
   "(",
   "prevInput",
   ".",
   "length",
   "-",
   "same",
   ")",
   "}",
   ";",
   "else",
   "if",
   "(",
   "view",
   ".",
   "overwrite",
   "&&",
   "posEq",
   "(",
   "from",
   ",",
   "to",
   ")",
   "&&",
   "!",
   "cm",
   ".",
   "display",
   ".",
   "pasteIncoming",
   ")",
   "to",
   "=",
   "{",
   "line",
   ":",
   "to",
   ".",
   "line",
   ",",
   "ch",
   ":",
   "Math",
   ".",
   "min",
   "(",
   "getLine",
   "(",
   "cm",
   ".",
   "view",
   ".",
   "doc",
   ",",
   "to",
   ".",
   "line",
   ")",
   ".",
   "text",
   ".",
   "length",
   ",",
   "to",
   ".",
   "ch",
   "+",
   "(",
   "text",
   ".",
   "length",
   "-",
   "same",
   ")",
   ")",
   "}",
   ";",
   "var",
   "updateInput",
   "=",
   "cm",
   ".",
   "curOp",
   ".",
   "updateInput",
   ";",
   "updateDoc",
   "(",
   "cm",
   ",",
   "from",
   ",",
   "to",
   ",",
   "splitLines",
   "(",
   "text",
   ".",
   "slice",
   "(",
   "same",
   ")",
   ")",
   ",",
   "\"end\"",
   ",",
   "cm",
   ".",
   "display",
   ".",
   "pasteIncoming",
   "?",
   "\"paste\"",
   ":",
   "\"input\"",
   ",",
   "{",
   "from",
   ":",
   "from",
   ",",
   "to",
   ":",
   "to",
   "}",
   ")",
   ";",
   "cm",
   ".",
   "curOp",
   ".",
   "updateInput",
   "=",
   "updateInput",
   ";",
   "if",
   "(",
   "text",
   ".",
   "length",
   ">",
   "1000",
   ")",
   "input",
   ".",
   "value",
   "=",
   "cm",
   ".",
   "display",
   ".",
   "prevInput",
   "=",
   "\"\"",
   ";",
   "else",
   "cm",
   ".",
   "display",
   ".",
   "prevInput",
   "=",
   "text",
   ";",
   "endOperation",
   "(",
   "cm",
   ")",
   ";",
   "cm",
   ".",
   "display",
   ".",
   "pasteIncoming",
   "=",
   "false",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-257",
  "nl_tokens": [
   "This",
   "function",
   "is",
   "made",
   "by",
   "the",
   "following",
   "requirements",
   ":",
   "x",
   ">",
   "5",
   "y",
   "=",
   "1",
   "f",
   "(",
   "x",
   ")",
   "=",
   "a",
   "*",
   "sqrt",
   "(",
   "x",
   ")",
   "+",
   "b",
   "*",
   "x^2",
   "+",
   "c",
   "f",
   "(",
   "2",
   ")",
   "=",
   "0",
   ".",
   "2",
   "f",
   "(",
   "5",
   ")",
   "=",
   "1",
   "f",
   "(",
   "5",
   ")",
   "=",
   "0"
  ],
  "pl_tokens": [
   "function",
   "wordcountScore",
   "(",
   "x",
   ")",
   "{",
   "if",
   "(",
   "x",
   ">",
   "5",
   ")",
   "return",
   "1",
   ";",
   "else",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "2.27",
   "*",
   "Math",
   ".",
   "sqrt",
   "(",
   "x",
   ")",
   "-",
   "0.0507",
   "*",
   "Math",
   ".",
   "pow",
   "(",
   "x",
   ",",
   "2",
   ")",
   "-",
   "2.808",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-258",
  "nl_tokens": [
   "Return",
   "a",
   "range",
   "of",
   "numbers",
   "or",
   "letters",
   "."
  ],
  "pl_tokens": [
   "function",
   "fillRange",
   "(",
   "start",
   ",",
   "stop",
   ",",
   "step",
   ",",
   "options",
   ")",
   "{",
   "if",
   "(",
   "typeof",
   "start",
   "===",
   "'undefined'",
   ")",
   "{",
   "return",
   "[",
   "]",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "stop",
   "===",
   "'undefined'",
   "||",
   "start",
   "===",
   "stop",
   ")",
   "{",
   "// special case, for handling negative zero",
   "var",
   "isString",
   "=",
   "typeof",
   "start",
   "===",
   "'string'",
   ";",
   "if",
   "(",
   "isNumber",
   "(",
   "start",
   ")",
   "&&",
   "!",
   "toNumber",
   "(",
   "start",
   ")",
   ")",
   "{",
   "return",
   "[",
   "isString",
   "?",
   "'0'",
   ":",
   "0",
   "]",
   ";",
   "}",
   "return",
   "[",
   "start",
   "]",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "step",
   "!==",
   "'number'",
   "&&",
   "typeof",
   "step",
   "!==",
   "'string'",
   ")",
   "{",
   "options",
   "=",
   "step",
   ";",
   "step",
   "=",
   "undefined",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "options",
   "===",
   "'function'",
   ")",
   "{",
   "options",
   "=",
   "{",
   "transform",
   ":",
   "options",
   "}",
   ";",
   "}",
   "var",
   "opts",
   "=",
   "extend",
   "(",
   "{",
   "step",
   ":",
   "step",
   "}",
   ",",
   "options",
   ")",
   ";",
   "if",
   "(",
   "opts",
   ".",
   "step",
   "&&",
   "!",
   "isValidNumber",
   "(",
   "opts",
   ".",
   "step",
   ")",
   ")",
   "{",
   "if",
   "(",
   "opts",
   ".",
   "strictRanges",
   "===",
   "true",
   ")",
   "{",
   "throw",
   "new",
   "TypeError",
   "(",
   "'expected options.step to be a number'",
   ")",
   ";",
   "}",
   "return",
   "[",
   "]",
   ";",
   "}",
   "opts",
   ".",
   "isNumber",
   "=",
   "isValidNumber",
   "(",
   "start",
   ")",
   "&&",
   "isValidNumber",
   "(",
   "stop",
   ")",
   ";",
   "if",
   "(",
   "!",
   "opts",
   ".",
   "isNumber",
   "&&",
   "!",
   "isValid",
   "(",
   "start",
   ",",
   "stop",
   ")",
   ")",
   "{",
   "if",
   "(",
   "opts",
   ".",
   "strictRanges",
   "===",
   "true",
   ")",
   "{",
   "throw",
   "new",
   "RangeError",
   "(",
   "'invalid range arguments: '",
   "+",
   "util",
   ".",
   "inspect",
   "(",
   "[",
   "start",
   ",",
   "stop",
   "]",
   ")",
   ")",
   ";",
   "}",
   "return",
   "[",
   "]",
   ";",
   "}",
   "opts",
   ".",
   "isPadded",
   "=",
   "isPadded",
   "(",
   "start",
   ")",
   "||",
   "isPadded",
   "(",
   "stop",
   ")",
   ";",
   "opts",
   ".",
   "toString",
   "=",
   "opts",
   ".",
   "stringify",
   "||",
   "typeof",
   "opts",
   ".",
   "step",
   "===",
   "'string'",
   "||",
   "typeof",
   "start",
   "===",
   "'string'",
   "||",
   "typeof",
   "stop",
   "===",
   "'string'",
   "||",
   "!",
   "opts",
   ".",
   "isNumber",
   ";",
   "if",
   "(",
   "opts",
   ".",
   "isPadded",
   ")",
   "{",
   "opts",
   ".",
   "maxLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "String",
   "(",
   "start",
   ")",
   ".",
   "length",
   ",",
   "String",
   "(",
   "stop",
   ")",
   ".",
   "length",
   ")",
   ";",
   "}",
   "// support legacy minimatch/fill-range options",
   "if",
   "(",
   "typeof",
   "opts",
   ".",
   "optimize",
   "===",
   "'boolean'",
   ")",
   "opts",
   ".",
   "toRegex",
   "=",
   "opts",
   ".",
   "optimize",
   ";",
   "if",
   "(",
   "typeof",
   "opts",
   ".",
   "makeRe",
   "===",
   "'boolean'",
   ")",
   "opts",
   ".",
   "toRegex",
   "=",
   "opts",
   ".",
   "makeRe",
   ";",
   "return",
   "expand",
   "(",
   "start",
   ",",
   "stop",
   ",",
   "opts",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-259",
  "nl_tokens": [
   "Resizes",
   "the",
   "image",
   "to",
   "fit",
   "the",
   "specified",
   "width",
   "/",
   "height",
   ".",
   "If",
   "crop",
   "is",
   "specified",
   "image",
   "will",
   "also",
   "be",
   "cropped",
   "to",
   "the",
   "exact",
   "dimensions",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "options",
   ")",
   "{",
   "var",
   "self",
   "=",
   "this",
   ";",
   "var",
   "orientation",
   ";",
   "var",
   "scale",
   ";",
   "var",
   "srcRect",
   "=",
   "{",
   "x",
   ":",
   "0",
   ",",
   "y",
   ":",
   "0",
   ",",
   "width",
   ":",
   "self",
   ".",
   "width",
   ",",
   "height",
   ":",
   "self",
   ".",
   "height",
   "}",
   ";",
   "var",
   "opts",
   "=",
   "Basic",
   ".",
   "extendIf",
   "(",
   "{",
   "width",
   ":",
   "self",
   ".",
   "width",
   ",",
   "height",
   ":",
   "self",
   ".",
   "height",
   ",",
   "type",
   ":",
   "self",
   ".",
   "type",
   "||",
   "'image/jpeg'",
   ",",
   "quality",
   ":",
   "90",
   ",",
   "crop",
   ":",
   "false",
   ",",
   "fit",
   ":",
   "true",
   ",",
   "preserveHeaders",
   ":",
   "true",
   ",",
   "resample",
   ":",
   "'default'",
   ",",
   "multipass",
   ":",
   "true",
   "}",
   ",",
   "options",
   ")",
   ";",
   "try",
   "{",
   "if",
   "(",
   "!",
   "self",
   ".",
   "size",
   ")",
   "{",
   "// only preloaded image objects can be used as source",
   "throw",
   "new",
   "x",
   ".",
   "DOMException",
   "(",
   "x",
   ".",
   "DOMException",
   ".",
   "INVALID_STATE_ERR",
   ")",
   ";",
   "}",
   "// no way to reliably intercept the crash due to high resolution, so we simply avoid it",
   "if",
   "(",
   "self",
   ".",
   "width",
   ">",
   "Image",
   ".",
   "MAX_RESIZE_WIDTH",
   "||",
   "self",
   ".",
   "height",
   ">",
   "Image",
   ".",
   "MAX_RESIZE_HEIGHT",
   ")",
   "{",
   "throw",
   "new",
   "x",
   ".",
   "ImageError",
   "(",
   "x",
   ".",
   "ImageError",
   ".",
   "MAX_RESOLUTION_ERR",
   ")",
   ";",
   "}",
   "// take into account orientation tag",
   "orientation",
   "=",
   "(",
   "self",
   ".",
   "meta",
   "&&",
   "self",
   ".",
   "meta",
   ".",
   "tiff",
   "&&",
   "self",
   ".",
   "meta",
   ".",
   "tiff",
   ".",
   "Orientation",
   ")",
   "||",
   "1",
   ";",
   "if",
   "(",
   "Basic",
   ".",
   "inArray",
   "(",
   "orientation",
   ",",
   "[",
   "5",
   ",",
   "6",
   ",",
   "7",
   ",",
   "8",
   "]",
   ")",
   "!==",
   "-",
   "1",
   ")",
   "{",
   "// values that require 90 degree rotation",
   "var",
   "tmp",
   "=",
   "opts",
   ".",
   "width",
   ";",
   "opts",
   ".",
   "width",
   "=",
   "opts",
   ".",
   "height",
   ";",
   "opts",
   ".",
   "height",
   "=",
   "tmp",
   ";",
   "}",
   "if",
   "(",
   "opts",
   ".",
   "crop",
   ")",
   "{",
   "scale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "opts",
   ".",
   "width",
   "/",
   "self",
   ".",
   "width",
   ",",
   "opts",
   ".",
   "height",
   "/",
   "self",
   ".",
   "height",
   ")",
   ";",
   "if",
   "(",
   "options",
   ".",
   "fit",
   ")",
   "{",
   "// first scale it up or down to fit the original image",
   "srcRect",
   ".",
   "width",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "ceil",
   "(",
   "opts",
   ".",
   "width",
   "/",
   "scale",
   ")",
   ",",
   "self",
   ".",
   "width",
   ")",
   ";",
   "srcRect",
   ".",
   "height",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "ceil",
   "(",
   "opts",
   ".",
   "height",
   "/",
   "scale",
   ")",
   ",",
   "self",
   ".",
   "height",
   ")",
   ";",
   "// recalculate the scale for adapted dimensions",
   "scale",
   "=",
   "opts",
   ".",
   "width",
   "/",
   "srcRect",
   ".",
   "width",
   ";",
   "}",
   "else",
   "{",
   "srcRect",
   ".",
   "width",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "opts",
   ".",
   "width",
   ",",
   "self",
   ".",
   "width",
   ")",
   ";",
   "srcRect",
   ".",
   "height",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "opts",
   ".",
   "height",
   ",",
   "self",
   ".",
   "height",
   ")",
   ";",
   "// now we do not need to scale it any further",
   "scale",
   "=",
   "1",
   ";",
   "}",
   "if",
   "(",
   "typeof",
   "(",
   "opts",
   ".",
   "crop",
   ")",
   "===",
   "'boolean'",
   ")",
   "{",
   "opts",
   ".",
   "crop",
   "=",
   "'cc'",
   ";",
   "}",
   "switch",
   "(",
   "opts",
   ".",
   "crop",
   ".",
   "toLowerCase",
   "(",
   ")",
   ".",
   "replace",
   "(",
   "/",
   "_",
   "/",
   ",",
   "'-'",
   ")",
   ")",
   "{",
   "case",
   "'rb'",
   ":",
   "case",
   "'right-bottom'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ";",
   "break",
   ";",
   "case",
   "'cb'",
   ":",
   "case",
   "'center-bottom'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ")",
   "/",
   "2",
   ")",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ";",
   "break",
   ";",
   "case",
   "'lb'",
   ":",
   "case",
   "'left-bottom'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "0",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ";",
   "break",
   ";",
   "case",
   "'lt'",
   ":",
   "case",
   "'left-top'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "0",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "0",
   ";",
   "break",
   ";",
   "case",
   "'ct'",
   ":",
   "case",
   "'center-top'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ")",
   "/",
   "2",
   ")",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "0",
   ";",
   "break",
   ";",
   "case",
   "'rt'",
   ":",
   "case",
   "'right-top'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "0",
   ";",
   "break",
   ";",
   "case",
   "'rc'",
   ":",
   "case",
   "'right-center'",
   ":",
   "case",
   "'right-middle'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ")",
   "/",
   "2",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'lc'",
   ":",
   "case",
   "'left-center'",
   ":",
   "case",
   "'left-middle'",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "0",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ")",
   "/",
   "2",
   ")",
   ";",
   "break",
   ";",
   "case",
   "'cc'",
   ":",
   "case",
   "'center-center'",
   ":",
   "case",
   "'center-middle'",
   ":",
   "default",
   ":",
   "srcRect",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "width",
   "-",
   "srcRect",
   ".",
   "width",
   ")",
   "/",
   "2",
   ")",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "floor",
   "(",
   "(",
   "self",
   ".",
   "height",
   "-",
   "srcRect",
   ".",
   "height",
   ")",
   "/",
   "2",
   ")",
   ";",
   "}",
   "// original image might be smaller than requested crop, so - avoid negative values",
   "srcRect",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "srcRect",
   ".",
   "x",
   ",",
   "0",
   ")",
   ";",
   "srcRect",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "srcRect",
   ".",
   "y",
   ",",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "scale",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "opts",
   ".",
   "width",
   "/",
   "self",
   ".",
   "width",
   ",",
   "opts",
   ".",
   "height",
   "/",
   "self",
   ".",
   "height",
   ")",
   ";",
   "// do not upscale if we were asked to not fit it",
   "if",
   "(",
   "scale",
   ">",
   "1",
   "&&",
   "!",
   "opts",
   ".",
   "fit",
   ")",
   "{",
   "scale",
   "=",
   "1",
   ";",
   "}",
   "}",
   "this",
   ".",
   "exec",
   "(",
   "'Image'",
   ",",
   "'resize'",
   ",",
   "srcRect",
   ",",
   "scale",
   ",",
   "opts",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "ex",
   ")",
   "{",
   "// for now simply trigger error event",
   "self",
   ".",
   "trigger",
   "(",
   "'error'",
   ",",
   "ex",
   ".",
   "code",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-260",
  "nl_tokens": [
   "\u5206\u7247\u590d\u5236\u6587\u4ef6"
  ],
  "pl_tokens": [
   "function",
   "sliceCopyFile",
   "(",
   "params",
   ",",
   "callback",
   ")",
   "{",
   "var",
   "ep",
   "=",
   "new",
   "EventProxy",
   "(",
   ")",
   ";",
   "var",
   "self",
   "=",
   "this",
   ";",
   "var",
   "Bucket",
   "=",
   "params",
   ".",
   "Bucket",
   ";",
   "var",
   "Region",
   "=",
   "params",
   ".",
   "Region",
   ";",
   "var",
   "Key",
   "=",
   "params",
   ".",
   "Key",
   ";",
   "var",
   "CopySource",
   "=",
   "params",
   ".",
   "CopySource",
   ";",
   "var",
   "m",
   "=",
   "CopySource",
   ".",
   "match",
   "(",
   "/",
   "^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$",
   "/",
   ")",
   ";",
   "if",
   "(",
   "!",
   "m",
   ")",
   "{",
   "callback",
   "(",
   "{",
   "error",
   ":",
   "'CopySource format error'",
   "}",
   ")",
   ";",
   "return",
   ";",
   "}",
   "var",
   "SourceBucket",
   "=",
   "m",
   "[",
   "1",
   "]",
   ";",
   "var",
   "SourceRegion",
   "=",
   "m",
   "[",
   "3",
   "]",
   ";",
   "var",
   "SourceKey",
   "=",
   "decodeURIComponent",
   "(",
   "m",
   "[",
   "4",
   "]",
   ")",
   ";",
   "var",
   "CopySliceSize",
   "=",
   "params",
   ".",
   "SliceSize",
   "===",
   "undefined",
   "?",
   "self",
   ".",
   "options",
   ".",
   "CopySliceSize",
   ":",
   "params",
   ".",
   "SliceSize",
   ";",
   "CopySliceSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "CopySliceSize",
   ",",
   "5",
   "*",
   "1024",
   "*",
   "1024",
   "*",
   "1024",
   ")",
   ")",
   ";",
   "var",
   "ChunkSize",
   "=",
   "params",
   ".",
   "ChunkSize",
   "||",
   "this",
   ".",
   "options",
   ".",
   "CopyChunkSize",
   ";",
   "var",
   "ChunkParallel",
   "=",
   "this",
   ".",
   "options",
   ".",
   "CopyChunkParallelLimit",
   ";",
   "var",
   "FinishSize",
   "=",
   "0",
   ";",
   "var",
   "FileSize",
   ";",
   "var",
   "onProgress",
   ";",
   "// \u5206\u7247\u590d\u5236\u5b8c\u6210\uff0c\u5f00\u59cb multipartComplete \u64cd\u4f5c",
   "ep",
   ".",
   "on",
   "(",
   "'copy_slice_complete'",
   ",",
   "function",
   "(",
   "UploadData",
   ")",
   "{",
   "self",
   ".",
   "multipartComplete",
   "(",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "UploadId",
   ":",
   "UploadData",
   ".",
   "UploadId",
   ",",
   "Parts",
   ":",
   "UploadData",
   ".",
   "PartList",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "onProgress",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "return",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "onProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FileSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ",",
   "true",
   ")",
   ";",
   "callback",
   "(",
   "null",
   ",",
   "data",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "ep",
   ".",
   "on",
   "(",
   "'get_copy_data_finish'",
   ",",
   "function",
   "(",
   "UploadData",
   ")",
   "{",
   "Async",
   ".",
   "eachLimit",
   "(",
   "UploadData",
   ".",
   "PartList",
   ",",
   "ChunkParallel",
   ",",
   "function",
   "(",
   "SliceItem",
   ",",
   "asyncCallback",
   ")",
   "{",
   "var",
   "PartNumber",
   "=",
   "SliceItem",
   ".",
   "PartNumber",
   ";",
   "var",
   "CopySourceRange",
   "=",
   "SliceItem",
   ".",
   "CopySourceRange",
   ";",
   "var",
   "currentSize",
   "=",
   "SliceItem",
   ".",
   "end",
   "-",
   "SliceItem",
   ".",
   "start",
   ";",
   "var",
   "preAddSize",
   "=",
   "0",
   ";",
   "copySliceItem",
   ".",
   "call",
   "(",
   "self",
   ",",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "CopySource",
   ":",
   "CopySource",
   ",",
   "UploadId",
   ":",
   "UploadData",
   ".",
   "UploadId",
   ",",
   "PartNumber",
   ":",
   "PartNumber",
   ",",
   "CopySourceRange",
   ":",
   "CopySourceRange",
   ",",
   "onProgress",
   ":",
   "function",
   "(",
   "data",
   ")",
   "{",
   "FinishSize",
   "+=",
   "data",
   ".",
   "loaded",
   "-",
   "preAddSize",
   ";",
   "preAddSize",
   "=",
   "data",
   ".",
   "loaded",
   ";",
   "onProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FinishSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ")",
   ";",
   "}",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "asyncCallback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "onProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FinishSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ")",
   ";",
   "FinishSize",
   "+=",
   "currentSize",
   "-",
   "preAddSize",
   ";",
   "SliceItem",
   ".",
   "ETag",
   "=",
   "data",
   ".",
   "ETag",
   ";",
   "asyncCallback",
   "(",
   "err",
   "||",
   "null",
   ",",
   "data",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ",",
   "function",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "onProgress",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "return",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "ep",
   ".",
   "emit",
   "(",
   "'copy_slice_complete'",
   ",",
   "UploadData",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "ep",
   ".",
   "on",
   "(",
   "'get_file_size_finish'",
   ",",
   "function",
   "(",
   "SourceHeaders",
   ")",
   "{",
   "// \u63a7\u5236\u5206\u7247\u5927\u5c0f",
   "(",
   "function",
   "(",
   ")",
   "{",
   "var",
   "SIZE",
   "=",
   "[",
   "1",
   ",",
   "2",
   ",",
   "4",
   ",",
   "8",
   ",",
   "16",
   ",",
   "32",
   ",",
   "64",
   ",",
   "128",
   ",",
   "256",
   ",",
   "512",
   ",",
   "1024",
   ",",
   "1024",
   "*",
   "2",
   ",",
   "1024",
   "*",
   "4",
   ",",
   "1024",
   "*",
   "5",
   "]",
   ";",
   "var",
   "AutoChunkSize",
   "=",
   "1024",
   "*",
   "1024",
   ";",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "SIZE",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "AutoChunkSize",
   "=",
   "SIZE",
   "[",
   "i",
   "]",
   "*",
   "1024",
   "*",
   "1024",
   ";",
   "if",
   "(",
   "FileSize",
   "/",
   "AutoChunkSize",
   "<=",
   "self",
   ".",
   "options",
   ".",
   "MaxPartNumber",
   ")",
   "break",
   ";",
   "}",
   "params",
   ".",
   "ChunkSize",
   "=",
   "ChunkSize",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ChunkSize",
   ",",
   "AutoChunkSize",
   ")",
   ";",
   "var",
   "ChunkCount",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "FileSize",
   "/",
   "ChunkSize",
   ")",
   ";",
   "var",
   "list",
   "=",
   "[",
   "]",
   ";",
   "for",
   "(",
   "var",
   "partNumber",
   "=",
   "1",
   ";",
   "partNumber",
   "<=",
   "ChunkCount",
   ";",
   "partNumber",
   "++",
   ")",
   "{",
   "var",
   "start",
   "=",
   "(",
   "partNumber",
   "-",
   "1",
   ")",
   "*",
   "ChunkSize",
   ";",
   "var",
   "end",
   "=",
   "partNumber",
   "*",
   "ChunkSize",
   "<",
   "FileSize",
   "?",
   "(",
   "partNumber",
   "*",
   "ChunkSize",
   "-",
   "1",
   ")",
   ":",
   "FileSize",
   "-",
   "1",
   ";",
   "var",
   "item",
   "=",
   "{",
   "PartNumber",
   ":",
   "partNumber",
   ",",
   "start",
   ":",
   "start",
   ",",
   "end",
   ":",
   "end",
   ",",
   "CopySourceRange",
   ":",
   "\"bytes=\"",
   "+",
   "start",
   "+",
   "\"-\"",
   "+",
   "end",
   ",",
   "}",
   ";",
   "list",
   ".",
   "push",
   "(",
   "item",
   ")",
   ";",
   "}",
   "params",
   ".",
   "PartList",
   "=",
   "list",
   ";",
   "}",
   ")",
   "(",
   ")",
   ";",
   "var",
   "TargetHeader",
   ";",
   "if",
   "(",
   "params",
   ".",
   "Headers",
   "[",
   "'x-cos-metadata-directive'",
   "]",
   "===",
   "'Replaced'",
   ")",
   "{",
   "TargetHeader",
   "=",
   "params",
   ".",
   "Headers",
   ";",
   "}",
   "else",
   "{",
   "TargetHeader",
   "=",
   "SourceHeaders",
   ";",
   "}",
   "TargetHeader",
   "[",
   "'x-cos-storage-class'",
   "]",
   "=",
   "params",
   ".",
   "Headers",
   "[",
   "'x-cos-storage-class'",
   "]",
   "||",
   "SourceHeaders",
   "[",
   "'x-cos-storage-class'",
   "]",
   ";",
   "TargetHeader",
   "=",
   "util",
   ".",
   "clearKey",
   "(",
   "TargetHeader",
   ")",
   ";",
   "self",
   ".",
   "multipartInit",
   "(",
   "{",
   "Bucket",
   ":",
   "Bucket",
   ",",
   "Region",
   ":",
   "Region",
   ",",
   "Key",
   ":",
   "Key",
   ",",
   "Headers",
   ":",
   "TargetHeader",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "return",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "params",
   ".",
   "UploadId",
   "=",
   "data",
   ".",
   "UploadId",
   ";",
   "ep",
   ".",
   "emit",
   "(",
   "'get_copy_data_finish'",
   ",",
   "params",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// \u83b7\u53d6\u8fdc\u7aef\u590d\u5236\u6e90\u6587\u4ef6\u7684\u5927\u5c0f",
   "self",
   ".",
   "headObject",
   "(",
   "{",
   "Bucket",
   ":",
   "SourceBucket",
   ",",
   "Region",
   ":",
   "SourceRegion",
   ",",
   "Key",
   ":",
   "SourceKey",
   ",",
   "}",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "if",
   "(",
   "err",
   ".",
   "statusCode",
   "&&",
   "err",
   ".",
   "statusCode",
   "===",
   "404",
   ")",
   "{",
   "callback",
   "(",
   "{",
   "ErrorStatus",
   ":",
   "SourceKey",
   "+",
   "' Not Exist'",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "return",
   ";",
   "}",
   "FileSize",
   "=",
   "params",
   ".",
   "FileSize",
   "=",
   "data",
   ".",
   "headers",
   "[",
   "'content-length'",
   "]",
   ";",
   "if",
   "(",
   "FileSize",
   "===",
   "undefined",
   "||",
   "!",
   "FileSize",
   ")",
   "{",
   "callback",
   "(",
   "{",
   "error",
   ":",
   "'get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.'",
   "}",
   ")",
   ";",
   "return",
   ";",
   "}",
   "onProgress",
   "=",
   "util",
   ".",
   "throttleOnProgress",
   ".",
   "call",
   "(",
   "self",
   ",",
   "FileSize",
   ",",
   "params",
   ".",
   "onProgress",
   ")",
   ";",
   "// \u5f00\u59cb\u4e0a\u4f20",
   "if",
   "(",
   "FileSize",
   "<=",
   "CopySliceSize",
   ")",
   "{",
   "if",
   "(",
   "!",
   "params",
   ".",
   "Headers",
   "[",
   "'x-cos-metadata-directive'",
   "]",
   ")",
   "{",
   "params",
   ".",
   "Headers",
   "[",
   "'x-cos-metadata-directive'",
   "]",
   "=",
   "'Copy'",
   ";",
   "}",
   "self",
   ".",
   "putObjectCopy",
   "(",
   "params",
   ",",
   "function",
   "(",
   "err",
   ",",
   "data",
   ")",
   "{",
   "if",
   "(",
   "err",
   ")",
   "{",
   "onProgress",
   "(",
   "null",
   ",",
   "true",
   ")",
   ";",
   "return",
   "callback",
   "(",
   "err",
   ")",
   ";",
   "}",
   "onProgress",
   "(",
   "{",
   "loaded",
   ":",
   "FileSize",
   ",",
   "total",
   ":",
   "FileSize",
   "}",
   ",",
   "true",
   ")",
   ";",
   "callback",
   "(",
   "err",
   ",",
   "data",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "resHeaders",
   "=",
   "data",
   ".",
   "headers",
   ";",
   "var",
   "SourceHeaders",
   "=",
   "{",
   "'Cache-Control'",
   ":",
   "resHeaders",
   "[",
   "'cache-control'",
   "]",
   ",",
   "'Content-Disposition'",
   ":",
   "resHeaders",
   "[",
   "'content-disposition'",
   "]",
   ",",
   "'Content-Encoding'",
   ":",
   "resHeaders",
   "[",
   "'content-encoding'",
   "]",
   ",",
   "'Content-Type'",
   ":",
   "resHeaders",
   "[",
   "'content-type'",
   "]",
   ",",
   "'Expires'",
   ":",
   "resHeaders",
   "[",
   "'expires'",
   "]",
   ",",
   "'x-cos-storage-class'",
   ":",
   "resHeaders",
   "[",
   "'x-cos-storage-class'",
   "]",
   ",",
   "}",
   ";",
   "util",
   ".",
   "each",
   "(",
   "resHeaders",
   ",",
   "function",
   "(",
   "v",
   ",",
   "k",
   ")",
   "{",
   "var",
   "metaPrefix",
   "=",
   "'x-cos-meta-'",
   ";",
   "if",
   "(",
   "k",
   ".",
   "indexOf",
   "(",
   "metaPrefix",
   ")",
   "===",
   "0",
   "&&",
   "k",
   ".",
   "length",
   ">",
   "metaPrefix",
   ".",
   "length",
   ")",
   "{",
   "SourceHeaders",
   "[",
   "k",
   "]",
   "=",
   "v",
   ";",
   "}",
   "}",
   ")",
   ";",
   "ep",
   ".",
   "emit",
   "(",
   "'get_file_size_finish'",
   ",",
   "SourceHeaders",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-261",
  "nl_tokens": [
   "trims",
   "end",
   "of",
   "string",
   "can",
   "trimmed",
   "back",
   "to",
   "next",
   "clean",
   "word",
   "or",
   "add",
   "suffix",
   "to",
   "end",
   "of",
   "trimmed",
   "string"
  ],
  "pl_tokens": [
   "function",
   "prune",
   "(",
   "str",
   ",",
   "<mask>",
   ",",
   "nice",
   ",",
   "suf",
   ")",
   "{",
   "max",
   "=",
   "max",
   "||",
   "140",
   "nice",
   "=",
   "_",
   ".",
   "isBoolean",
   "(",
   "nice",
   ")",
   "?",
   "nice",
   ":",
   "false",
   "if",
   "(",
   "!",
   "str",
   "||",
   "max",
   "<=",
   "0",
   "||",
   "str",
   ".",
   "length",
   "<=",
   "max",
   ")",
   "return",
   "str",
   "suf",
   "=",
   "suf",
   "||",
   "\"...\"",
   "str",
   "=",
   "str",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "max",
   ")",
   "return",
   "nice",
   "?",
   "str",
   ".",
   "substr",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "str",
   ".",
   "length",
   ",",
   "str",
   ".",
   "lastIndexOf",
   "(",
   "\" \"",
   ")",
   ")",
   ")",
   "+",
   "suf",
   ":",
   "str",
   "}"
  ]
 },
 {
  "idx": "maxmin-262",
  "nl_tokens": [
   "Apply",
   "fixes",
   "to",
   "source",
   "code",
   "depending",
   "on",
   "whichever",
   "errors",
   "can",
   "be",
   "fixed",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "sourceCode",
   ",",
   "errorMessages",
   ")",
   "{",
   "let",
   "fixedSourceCode",
   "=",
   "\"\"",
   ",",
   "fixes",
   "=",
   "[",
   "]",
   ",",
   "fixesApplied",
   "=",
   "[",
   "]",
   ",",
   "remainingMessages",
   "=",
   "[",
   "]",
   ";",
   "let",
   "cursor",
   "=",
   "Number",
   ".",
   "NEGATIVE_INFINITY",
   ";",
   "function",
   "attemptFix",
   "(",
   "fix",
   ")",
   "{",
   "let",
   "start",
   "=",
   "fix",
   ".",
   "range",
   "[",
   "0",
   "]",
   ",",
   "end",
   "=",
   "fix",
   ".",
   "range",
   "[",
   "1",
   "]",
   ";",
   "// If this fix overlaps with the previous one or has negaive range, return.",
   "// Note that when cursor === start, its NOT an overlap since when source code in range",
   "// [i, j] is being edited, the code covered is actually from i to j-1.",
   "if",
   "(",
   "cursor",
   ">",
   "start",
   "||",
   "start",
   ">",
   "end",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "fixedSourceCode",
   "+=",
   "sourceCode",
   ".",
   "slice",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "cursor",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "start",
   ")",
   ")",
   ";",
   "fixedSourceCode",
   "+=",
   "fix",
   ".",
   "text",
   ";",
   "cursor",
   "=",
   "end",
   ";",
   "return",
   "true",
   ";",
   "}",
   "// Segregate errors that can be fixed from those that can't for sure.",
   "errorMessages",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "msg",
   ")",
   "{",
   "if",
   "(",
   "msg",
   ".",
   "fix",
   ")",
   "{",
   "// If msg.fix is an Array of fix packets, merge them into a single fix packet.",
   "try",
   "{",
   "msg",
   ".",
   "fix",
   "=",
   "mergeFixes",
   "(",
   "msg",
   ".",
   "fix",
   ",",
   "sourceCode",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "Error",
   "(",
   "\"An error occured while applying fix of rule \\\"\"",
   "+",
   "msg",
   ".",
   "ruleName",
   "+",
   "\"\\\" for error \\\"\"",
   "+",
   "msg",
   ".",
   "message",
   "+",
   "\"\\\": \"",
   "+",
   "e",
   ".",
   "message",
   ")",
   ";",
   "}",
   "return",
   "fixes",
   ".",
   "push",
   "(",
   "msg",
   ")",
   ";",
   "}",
   "remainingMessages",
   ".",
   "push",
   "(",
   "msg",
   ")",
   ";",
   "}",
   ")",
   ";",
   "// Fixes will be applied in top-down approach. The fix that arrives first (line-wise, followed by column-wise)",
   "// gets applied first. But if current fix is applied successfully & the next one overlaps the current one,",
   "// then the next one is simply skipped. Hence, it is NOT guranteed that all fixes will be applied.",
   "fixes",
   ".",
   "sort",
   "(",
   "compareMessagesByFixRange",
   ")",
   ".",
   "forEach",
   "(",
   "function",
   "(",
   "msg",
   ")",
   "{",
   "if",
   "(",
   "attemptFix",
   "(",
   "msg",
   ".",
   "fix",
   ")",
   ")",
   "{",
   "return",
   "fixesApplied",
   ".",
   "push",
   "(",
   "msg",
   ")",
   ";",
   "}",
   "remainingMessages",
   ".",
   "push",
   "(",
   "msg",
   ")",
   ";",
   "}",
   ")",
   ";",
   "fixedSourceCode",
   "+=",
   "sourceCode",
   ".",
   "slice",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "cursor",
   ")",
   ")",
   ";",
   "remainingMessages",
   ".",
   "sort",
   "(",
   "compareMessagesByLocation",
   ")",
   ";",
   "return",
   "{",
   "fixesApplied",
   ":",
   "fixesApplied",
   ",",
   "fixedSourceCode",
   ":",
   "fixedSourceCode",
   ",",
   "remainingErrorMessages",
   ":",
   "remainingMessages",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-263",
  "nl_tokens": [
   "gG"
  ],
  "pl_tokens": [
   "function",
   "(",
   "val",
   ",",
   "upper",
   ",",
   "flags",
   ")",
   "{",
   "val",
   "=",
   "_float_helper",
   "(",
   "val",
   ",",
   "flags",
   ")",
   ",",
   "v",
   "=",
   "val",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "v_len",
   "=",
   "v",
   ".",
   "length",
   ",",
   "dot_idx",
   "=",
   "v",
   ".",
   "indexOf",
   "(",
   "'.'",
   ")",
   "if",
   "(",
   "dot_idx",
   "<",
   "0",
   ")",
   "{",
   "dot_idx",
   "=",
   "v_len",
   "}",
   "if",
   "(",
   "val",
   "<",
   "1",
   "&&",
   "val",
   ">",
   "-",
   "1",
   ")",
   "{",
   "var",
   "zeros",
   "=",
   "leading_zeros",
   ".",
   "exec",
   "(",
   "v",
   ")",
   ",",
   "numzeros",
   "if",
   "(",
   "zeros",
   ")",
   "{",
   "numzeros",
   "=",
   "zeros",
   "[",
   "1",
   "]",
   ".",
   "length",
   "}",
   "else",
   "{",
   "numzeros",
   "=",
   "0",
   "}",
   "if",
   "(",
   "numzeros",
   ">=",
   "4",
   ")",
   "{",
   "val",
   "=",
   "format_sign",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "+",
   "format_float_precision",
   "(",
   "val",
   ",",
   "upper",
   ",",
   "flags",
   ",",
   "_floating_g_exp_helper",
   ")",
   "if",
   "(",
   "!",
   "flags",
   ".",
   "alternate",
   ")",
   "{",
   "var",
   "trl",
   "=",
   "trailing_zeros",
   ".",
   "exec",
   "(",
   "val",
   ")",
   "if",
   "(",
   "trl",
   ")",
   "{",
   "val",
   "=",
   "trl",
   "[",
   "1",
   "]",
   ".",
   "replace",
   "(",
   "trailing_dot",
   ",",
   "\"\"",
   ")",
   "+",
   "trl",
   "[",
   "3",
   "]",
   "// remove trailing",
   "}",
   "}",
   "else",
   "{",
   "if",
   "(",
   "flags",
   ".",
   "precision",
   "<=",
   "1",
   ")",
   "{",
   "val",
   "=",
   "val",
   "[",
   "0",
   "]",
   "+",
   "\".\"",
   "+",
   "val",
   ".",
   "substring",
   "(",
   "1",
   ")",
   "}",
   "}",
   "return",
   "format_padding",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "}",
   "flags",
   ".",
   "precision",
   "=",
   "(",
   "flags",
   ".",
   "precision",
   "||",
   "0",
   ")",
   "+",
   "numzeros",
   "return",
   "format_padding",
   "(",
   "format_sign",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "+",
   "format_float_precision",
   "(",
   "val",
   ",",
   "upper",
   ",",
   "flags",
   ",",
   "function",
   "(",
   "val",
   ",",
   "precision",
   ")",
   "{",
   "return",
   "val",
   ".",
   "toFixed",
   "(",
   "<mask>",
   "(",
   "precision",
   ",",
   "v_len",
   "-",
   "dot_idx",
   ")",
   "+",
   "numzeros",
   ")",
   "}",
   ")",
   ",",
   "flags",
   ")",
   "}",
   "if",
   "(",
   "dot_idx",
   ">",
   "flags",
   ".",
   "precision",
   ")",
   "{",
   "val",
   "=",
   "format_sign",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "+",
   "format_float_precision",
   "(",
   "val",
   ",",
   "upper",
   ",",
   "flags",
   ",",
   "_floating_g_exp_helper",
   ")",
   "if",
   "(",
   "!",
   "flags",
   ".",
   "alternate",
   ")",
   "{",
   "var",
   "trl",
   "=",
   "trailing_zeros",
   ".",
   "exec",
   "(",
   "val",
   ")",
   "if",
   "(",
   "trl",
   ")",
   "{",
   "val",
   "=",
   "trl",
   "[",
   "1",
   "]",
   ".",
   "replace",
   "(",
   "trailing_dot",
   ",",
   "\"\"",
   ")",
   "+",
   "trl",
   "[",
   "3",
   "]",
   "// remove trailing",
   "}",
   "}",
   "else",
   "{",
   "if",
   "(",
   "flags",
   ".",
   "precision",
   "<=",
   "1",
   ")",
   "{",
   "val",
   "=",
   "val",
   "[",
   "0",
   "]",
   "+",
   "\".\"",
   "+",
   "val",
   ".",
   "substring",
   "(",
   "1",
   ")",
   "}",
   "}",
   "return",
   "format_padding",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "}",
   "return",
   "format_padding",
   "(",
   "format_sign",
   "(",
   "val",
   ",",
   "flags",
   ")",
   "+",
   "format_float_precision",
   "(",
   "val",
   ",",
   "upper",
   ",",
   "flags",
   ",",
   "function",
   "(",
   "val",
   ",",
   "precision",
   ")",
   "{",
   "if",
   "(",
   "!",
   "flags",
   ".",
   "decimal_point",
   ")",
   "{",
   "precision",
   "=",
   "min",
   "(",
   "v_len",
   "-",
   "1",
   ",",
   "6",
   ")",
   "}",
   "else",
   "if",
   "(",
   "precision",
   ">",
   "v_len",
   ")",
   "{",
   "if",
   "(",
   "!",
   "flags",
   ".",
   "alternate",
   ")",
   "{",
   "precision",
   "=",
   "v_len",
   "}",
   "}",
   "if",
   "(",
   "precision",
   "<",
   "dot_idx",
   ")",
   "{",
   "precision",
   "=",
   "dot_idx",
   "}",
   "return",
   "val",
   ".",
   "toFixed",
   "(",
   "precision",
   "-",
   "dot_idx",
   ")",
   "}",
   ")",
   ",",
   "flags",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-264",
  "nl_tokens": [
   "Calculates",
   "the",
   "area",
   "for",
   "a",
   "given",
   "pattern",
   "and",
   "distances",
   "to",
   "the",
   "left",
   "and",
   "to",
   "the",
   "right",
   "biased",
   "by",
   "an",
   "offset",
   "."
  ],
  "pl_tokens": [
   "function",
   "calculateDiagonalAreaForPattern",
   "(",
   "pattern",
   ",",
   "left",
   ",",
   "right",
   ",",
   "offset",
   ",",
   "result",
   ")",
   "{",
   "const",
   "p1",
   "=",
   "b0",
   ".",
   "<mask>",
   ";",
   "const",
   "p2",
   "=",
   "b0",
   ".",
   "max",
   ";",
   "const",
   "a1",
   "=",
   "b1",
   ".",
   "min",
   ";",
   "const",
   "a2",
   "=",
   "b1",
   ".",
   "max",
   ";",
   "const",
   "d",
   "=",
   "left",
   "+",
   "right",
   "+",
   "1",
   ";",
   "/* There is some Black Magic involved in the diagonal area calculations.\n\t *\n\t * Unlike orthogonal patterns, the \"null\" pattern (one without crossing edges)\n\t * must be filtered, and the ends of both the \"null\" and L patterns are not\n\t * known: L and U patterns have different endings, and the adjacent pattern is\n\t * unknown. Therefore, a blend of both possibilites is computed.\n\t */",
   "switch",
   "(",
   "pattern",
   ")",
   "{",
   "case",
   "0",
   ":",
   "{",
   "/*         .-\u00b4\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   \u00b4\n\t\t\t */",
   "// First possibility.",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "// Second possibility.",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "// Blend both possibilities together.",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "1",
   ":",
   "{",
   "/*         .-\u00b4\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "0.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "2",
   ":",
   "{",
   "/*         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   \u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "0.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "3",
   ":",
   "{",
   "/*\n\t\t\t *         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "result",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "4",
   ":",
   "{",
   "/*         .-\u00b4\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * ----\u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "0.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "5",
   ":",
   "{",
   "/*         .-\u00b4\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * --.-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "0.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "6",
   ":",
   "{",
   "/*         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * ----\u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "result",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "7",
   ":",
   "{",
   "/*         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * --.-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "8",
   ":",
   "{",
   "/*         |\n\t\t\t *         |\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   \u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "0.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "9",
   ":",
   "{",
   "/*         |\n\t\t\t *         |\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "result",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "10",
   ":",
   "{",
   "/*         |\n\t\t\t *         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   \u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "0.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "11",
   ":",
   "{",
   "/*         |\n\t\t\t *         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t *   .-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "12",
   ":",
   "{",
   "/*         |\n\t\t\t *         |\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * ----\u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "result",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "13",
   ":",
   "{",
   "/*         |\n\t\t\t *         |\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * --.-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "14",
   ":",
   "{",
   "/*         |\n\t\t\t *         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * ----\u00b4\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "15",
   ":",
   "{",
   "/*         |\n\t\t\t *         .----\n\t\t\t *       .-\u00b4\n\t\t\t *     .-\u00b4\n\t\t\t * --.-\u00b4\n\t\t\t *   |\n\t\t\t *   |\n\t\t\t */",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "1.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "1.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a1",
   ")",
   ";",
   "calculateDiagonalArea",
   "(",
   "pattern",
   ",",
   "p1",
   ".",
   "set",
   "(",
   "1.0",
   ",",
   "0.0",
   ")",
   ",",
   "p2",
   ".",
   "set",
   "(",
   "1.0",
   "+",
   "d",
   ",",
   "0.0",
   "+",
   "d",
   ")",
   ",",
   "left",
   ",",
   "offset",
   ",",
   "a2",
   ")",
   ";",
   "result",
   ".",
   "addVectors",
   "(",
   "a1",
   ",",
   "a2",
   ")",
   ".",
   "divideScalar",
   "(",
   "2.0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-265",
  "nl_tokens": [
   "Handles",
   "the",
   "D3",
   "zoom",
   "/",
   "scale",
   "event",
   "."
  ],
  "pl_tokens": [
   "function",
   "onZoomChanged",
   "(",
   ")",
   "{",
   "var",
   "newScale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "d3",
   ".",
   "event",
   ".",
   "scale",
   ",",
   "minScaleExtent",
   ")",
   ";",
   "zoom",
   ".",
   "scale",
   "(",
   "newScale",
   ")",
   ";",
   "graph",
   ".",
   "attr",
   "(",
   "'transform'",
   ",",
   "'translate('",
   "+",
   "d3",
   ".",
   "event",
   ".",
   "translate",
   "+",
   "')'",
   "+",
   "' scale('",
   "+",
   "newScale",
   "+",
   "')'",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-266",
  "nl_tokens": [
   "konstructor",
   ":",
   "The",
   "redis",
   "client",
   "constructor",
   "method",
   ".",
   "All",
   "redis",
   "methods",
   "must",
   "be",
   "promises",
   "args",
   ":",
   "The",
   "arguments",
   "to",
   "pass",
   "to",
   "the",
   "constructor",
   "buildNew",
   ":",
   "is",
   "it",
   "new",
   "konstructor",
   "()",
   "or",
   "just",
   "konstructor",
   "()",
   "?"
  ],
  "pl_tokens": [
   "function",
   "retryStrategy",
   "(",
   "times",
   ")",
   "{",
   "if",
   "(",
   "times",
   "===",
   "1",
   ")",
   "{",
   "const",
   "error",
   "=",
   "'Unable to connect to Redis - please check your Redis config!'",
   "if",
   "(",
   "process",
   ".",
   "env",
   ".",
   "NODE_ENV",
   "===",
   "'test'",
   ")",
   "{",
   "console",
   ".",
   "error",
   "(",
   "error",
   ")",
   "}",
   "else",
   "{",
   "api",
   ".",
   "log",
   "(",
   "error",
   ",",
   "'error'",
   ")",
   "}",
   "return",
   "5000",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "times",
   "*",
   "50",
   ",",
   "maxBackoff",
   ")",
   "}"
  ]
 },
 {
  "idx": "maxmin-267",
  "nl_tokens": [
   "Highlight",
   "selection"
  ],
  "pl_tokens": [
   "function",
   "updateSelectionRange",
   "(",
   "cm",
   ")",
   "{",
   "var",
   "display",
   "=",
   "cm",
   ".",
   "display",
   ",",
   "doc",
   "=",
   "cm",
   ".",
   "view",
   ".",
   "doc",
   ",",
   "sel",
   "=",
   "cm",
   ".",
   "view",
   ".",
   "sel",
   ";",
   "var",
   "fragment",
   "=",
   "document",
   ".",
   "createDocumentFragment",
   "(",
   ")",
   ";",
   "var",
   "clientWidth",
   "=",
   "display",
   ".",
   "lineSpace",
   ".",
   "offsetWidth",
   ",",
   "pl",
   "=",
   "paddingLeft",
   "(",
   "cm",
   ".",
   "display",
   ")",
   ";",
   "function",
   "add",
   "(",
   "left",
   ",",
   "top",
   ",",
   "width",
   ",",
   "bottom",
   ")",
   "{",
   "if",
   "(",
   "top",
   "<",
   "0",
   ")",
   "top",
   "=",
   "0",
   ";",
   "fragment",
   ".",
   "appendChild",
   "(",
   "elt",
   "(",
   "\"div\"",
   ",",
   "null",
   ",",
   "\"CodeMirror-selected\"",
   ",",
   "\"position: absolute; left: \"",
   "+",
   "left",
   "+",
   "\"px; top: \"",
   "+",
   "top",
   "+",
   "\"px; width: \"",
   "+",
   "(",
   "width",
   "==",
   "null",
   "?",
   "clientWidth",
   "-",
   "left",
   ":",
   "width",
   ")",
   "+",
   "\"px; height: \"",
   "+",
   "(",
   "bottom",
   "-",
   "top",
   ")",
   "+",
   "\"px\"",
   ")",
   ")",
   ";",
   "}",
   "function",
   "drawForLine",
   "(",
   "line",
   ",",
   "fromArg",
   ",",
   "toArg",
   ",",
   "retTop",
   ")",
   "{",
   "var",
   "lineObj",
   "=",
   "getLine",
   "(",
   "doc",
   ",",
   "line",
   ")",
   ";",
   "var",
   "lineLen",
   "=",
   "lineObj",
   ".",
   "text",
   ".",
   "length",
   ",",
   "rVal",
   "=",
   "retTop",
   "?",
   "Infinity",
   ":",
   "-",
   "Infinity",
   ";",
   "function",
   "coords",
   "(",
   "ch",
   ")",
   "{",
   "return",
   "charCoords",
   "(",
   "cm",
   ",",
   "{",
   "line",
   ":",
   "line",
   ",",
   "ch",
   ":",
   "ch",
   "}",
   ",",
   "\"div\"",
   ",",
   "lineObj",
   ")",
   ";",
   "}",
   "iterateBidiSections",
   "(",
   "getOrder",
   "(",
   "lineObj",
   ")",
   ",",
   "fromArg",
   "||",
   "0",
   ",",
   "toArg",
   "==",
   "null",
   "?",
   "lineLen",
   ":",
   "toArg",
   ",",
   "function",
   "(",
   "from",
   ",",
   "to",
   ",",
   "dir",
   ")",
   "{",
   "var",
   "leftPos",
   "=",
   "coords",
   "(",
   "dir",
   "==",
   "\"rtl\"",
   "?",
   "to",
   "-",
   "1",
   ":",
   "from",
   ")",
   ";",
   "var",
   "rightPos",
   "=",
   "coords",
   "(",
   "dir",
   "==",
   "\"rtl\"",
   "?",
   "from",
   ":",
   "to",
   "-",
   "1",
   ")",
   ";",
   "var",
   "left",
   "=",
   "leftPos",
   ".",
   "left",
   ",",
   "right",
   "=",
   "rightPos",
   ".",
   "right",
   ";",
   "if",
   "(",
   "rightPos",
   ".",
   "top",
   "-",
   "leftPos",
   ".",
   "top",
   ">",
   "3",
   ")",
   "{",
   "// Different lines, draw top part",
   "add",
   "(",
   "left",
   ",",
   "leftPos",
   ".",
   "top",
   ",",
   "null",
   ",",
   "leftPos",
   ".",
   "bottom",
   ")",
   ";",
   "left",
   "=",
   "pl",
   ";",
   "if",
   "(",
   "leftPos",
   ".",
   "bottom",
   "<",
   "rightPos",
   ".",
   "top",
   ")",
   "add",
   "(",
   "left",
   ",",
   "leftPos",
   ".",
   "bottom",
   ",",
   "null",
   ",",
   "rightPos",
   ".",
   "top",
   ")",
   ";",
   "}",
   "if",
   "(",
   "toArg",
   "==",
   "null",
   "&&",
   "to",
   "==",
   "lineLen",
   ")",
   "right",
   "=",
   "clientWidth",
   ";",
   "if",
   "(",
   "fromArg",
   "==",
   "null",
   "&&",
   "from",
   "==",
   "0",
   ")",
   "left",
   "=",
   "pl",
   ";",
   "rVal",
   "=",
   "retTop",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "rightPos",
   ".",
   "top",
   ",",
   "rVal",
   ")",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "rightPos",
   ".",
   "bottom",
   ",",
   "rVal",
   ")",
   ";",
   "if",
   "(",
   "left",
   "<",
   "pl",
   "+",
   "1",
   ")",
   "left",
   "=",
   "pl",
   ";",
   "add",
   "(",
   "left",
   ",",
   "rightPos",
   ".",
   "top",
   ",",
   "right",
   "-",
   "left",
   ",",
   "rightPos",
   ".",
   "bottom",
   ")",
   ";",
   "}",
   ")",
   ";",
   "return",
   "rVal",
   ";",
   "}",
   "if",
   "(",
   "sel",
   ".",
   "from",
   ".",
   "line",
   "==",
   "sel",
   ".",
   "to",
   ".",
   "line",
   ")",
   "{",
   "drawForLine",
   "(",
   "sel",
   ".",
   "from",
   ".",
   "line",
   ",",
   "sel",
   ".",
   "from",
   ".",
   "ch",
   ",",
   "sel",
   ".",
   "to",
   ".",
   "ch",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "fromObj",
   "=",
   "getLine",
   "(",
   "doc",
   ",",
   "sel",
   ".",
   "from",
   ".",
   "line",
   ")",
   ";",
   "var",
   "cur",
   "=",
   "fromObj",
   ",",
   "merged",
   ",",
   "path",
   "=",
   "[",
   "sel",
   ".",
   "from",
   ".",
   "line",
   ",",
   "sel",
   ".",
   "from",
   ".",
   "ch",
   "]",
   ",",
   "singleLine",
   ";",
   "while",
   "(",
   "merged",
   "=",
   "collapsedSpanAtEnd",
   "(",
   "cur",
   ")",
   ")",
   "{",
   "var",
   "found",
   "=",
   "merged",
   ".",
   "find",
   "(",
   ")",
   ";",
   "path",
   ".",
   "push",
   "(",
   "found",
   ".",
   "from",
   ".",
   "ch",
   ",",
   "found",
   ".",
   "to",
   ".",
   "line",
   ",",
   "found",
   ".",
   "to",
   ".",
   "ch",
   ")",
   ";",
   "if",
   "(",
   "found",
   ".",
   "to",
   ".",
   "line",
   "==",
   "sel",
   ".",
   "to",
   ".",
   "line",
   ")",
   "{",
   "path",
   ".",
   "push",
   "(",
   "sel",
   ".",
   "to",
   ".",
   "ch",
   ")",
   ";",
   "singleLine",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "cur",
   "=",
   "getLine",
   "(",
   "doc",
   ",",
   "found",
   ".",
   "to",
   ".",
   "line",
   ")",
   ";",
   "}",
   "// This is a single, merged line",
   "if",
   "(",
   "singleLine",
   ")",
   "{",
   "for",
   "(",
   "var",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "path",
   ".",
   "length",
   ";",
   "i",
   "+=",
   "3",
   ")",
   "drawForLine",
   "(",
   "path",
   "[",
   "i",
   "]",
   ",",
   "path",
   "[",
   "i",
   "+",
   "1",
   "]",
   ",",
   "path",
   "[",
   "i",
   "+",
   "2",
   "]",
   ")",
   ";",
   "}",
   "else",
   "{",
   "var",
   "middleTop",
   ",",
   "middleBot",
   ",",
   "toObj",
   "=",
   "getLine",
   "(",
   "doc",
   ",",
   "sel",
   ".",
   "to",
   ".",
   "line",
   ")",
   ";",
   "if",
   "(",
   "sel",
   ".",
   "from",
   ".",
   "ch",
   ")",
   "// Draw the first line of selection.",
   "middleTop",
   "=",
   "drawForLine",
   "(",
   "sel",
   ".",
   "from",
   ".",
   "line",
   ",",
   "sel",
   ".",
   "from",
   ".",
   "ch",
   ",",
   "null",
   ",",
   "false",
   ")",
   ";",
   "else",
   "// Simply include it in the middle block.",
   "middleTop",
   "=",
   "heightAtLine",
   "(",
   "cm",
   ",",
   "fromObj",
   ")",
   "-",
   "display",
   ".",
   "viewOffset",
   ";",
   "if",
   "(",
   "!",
   "sel",
   ".",
   "to",
   ".",
   "ch",
   ")",
   "middleBot",
   "=",
   "heightAtLine",
   "(",
   "cm",
   ",",
   "toObj",
   ")",
   "-",
   "display",
   ".",
   "viewOffset",
   ";",
   "else",
   "middleBot",
   "=",
   "drawForLine",
   "(",
   "sel",
   ".",
   "to",
   ".",
   "line",
   ",",
   "collapsedSpanAtStart",
   "(",
   "toObj",
   ")",
   "?",
   "null",
   ":",
   "0",
   ",",
   "sel",
   ".",
   "to",
   ".",
   "ch",
   ",",
   "true",
   ")",
   ";",
   "if",
   "(",
   "middleTop",
   "<",
   "middleBot",
   ")",
   "add",
   "(",
   "pl",
   ",",
   "middleTop",
   ",",
   "null",
   ",",
   "middleBot",
   ")",
   ";",
   "}",
   "}",
   "removeChildrenAndAdd",
   "(",
   "display",
   ".",
   "selectionDiv",
   ",",
   "fragment",
   ")",
   ";",
   "display",
   ".",
   "selectionDiv",
   ".",
   "style",
   ".",
   "display",
   "=",
   "\"\"",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-268",
  "nl_tokens": [
   "=============",
   "Validators",
   "============="
  ],
  "pl_tokens": [
   "function",
   "arrayValidation",
   "(",
   "typeDef",
   ",",
   "index",
   ",",
   "value",
   ",",
   "previous",
   ",",
   "attributeName",
   ",",
   "validator",
   ")",
   "{",
   "var",
   "indexInc",
   ";",
   "var",
   "i",
   ";",
   "var",
   "ilen",
   ";",
   "if",
   "(",
   "value",
   "===",
   "null",
   "||",
   "value",
   "===",
   "undefined",
   "||",
   "typeDef",
   ".",
   "indexes",
   ".",
   "length",
   "<=",
   "index",
   ")",
   "{",
   "//console.log(\"Validating\", value, index, typeDef);",
   "return",
   "validator",
   "(",
   "value",
   ",",
   "previous",
   ",",
   "attributeName",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "typeDef",
   ".",
   "indexes",
   ".",
   "length",
   ">",
   "index",
   ")",
   "{",
   "//console.log(\"Checking array\", value, index, typeDef);",
   "if",
   "(",
   "value",
   "instanceof",
   "Array",
   ")",
   "{",
   "if",
   "(",
   "value",
   ".",
   "length",
   ")",
   "{",
   "indexInc",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "value",
   ".",
   "length",
   "/",
   "VALIDATE_MAX_ARR_INDEX",
   ")",
   ",",
   "1",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "ilen",
   "=",
   "value",
   ".",
   "length",
   ";",
   "i",
   "<",
   "ilen",
   ";",
   "i",
   "+=",
   "indexInc",
   ")",
   "{",
   "arrayValidation",
   "(",
   "typeDef",
   ",",
   "index",
   "+",
   "1",
   ",",
   "value",
   "[",
   "i",
   "]",
   ",",
   "previous",
   "instanceof",
   "Array",
   "?",
   "previous",
   "[",
   "i",
   "]",
   ":",
   "undefined",
   ",",
   "attributeName",
   ",",
   "validator",
   ")",
   ";",
   "}",
   "return",
   "value",
   ";",
   "}",
   "else",
   "if",
   "(",
   "previous",
   "instanceof",
   "Array",
   "&&",
   "previous",
   ".",
   "length",
   ")",
   "{",
   "indexInc",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "floor",
   "(",
   "value",
   ".",
   "length",
   "/",
   "VALIDATE_MAX_ARR_INDEX",
   ")",
   ",",
   "1",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ",",
   "ilen",
   "=",
   "value",
   ".",
   "length",
   ";",
   "i",
   "<",
   "ilen",
   ";",
   "i",
   "+=",
   "indexInc",
   ")",
   "{",
   "arrayValidation",
   "(",
   "typeDef",
   ",",
   "index",
   "+",
   "1",
   ",",
   "null",
   ",",
   "previous",
   "[",
   "i",
   "]",
   ",",
   "attributeName",
   ",",
   "validator",
   ")",
   "}",
   "return",
   "value",
   ";",
   "}",
   "else",
   "{",
   "return",
   "arrayValidation",
   "(",
   "typeDef",
   ",",
   "index",
   "+",
   "1",
   ",",
   "undefined",
   ",",
   "undefined",
   ",",
   "attributeName",
   ",",
   "validator",
   ")",
   "}",
   "}",
   "}",
   "throw",
   "TypeException",
   "(",
   "'Invalid array for `{{type}}`'",
   ",",
   "null",
   ",",
   "[",
   "attributeName",
   "]",
   ",",
   "{",
   "type",
   ":",
   "typeDef",
   ".",
   "name",
   ",",
   "indexes",
   ":",
   "typeDef",
   ".",
   "indexes",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-269",
  "nl_tokens": [
   "Animates",
   "moves",
   "."
  ],
  "pl_tokens": [
   "function",
   "animateMove",
   "(",
   "axis",
   ")",
   "{",
   "var",
   "t",
   "=",
   "animatedMove",
   "[",
   "axis",
   "]",
   ";",
   "var",
   "normTime",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "(",
   "Date",
   ".",
   "now",
   "(",
   ")",
   "-",
   "t",
   ".",
   "startTime",
   ")",
   "/",
   "1000",
   "/",
   "(",
   "t",
   ".",
   "duration",
   "/",
   "1000",
   ")",
   ",",
   "0",
   ")",
   ")",
   ";",
   "var",
   "result",
   "=",
   "t",
   ".",
   "startPosition",
   "+",
   "config",
   ".",
   "animationTimingFunction",
   "(",
   "normTime",
   ")",
   "*",
   "(",
   "t",
   ".",
   "endPosition",
   "-",
   "t",
   ".",
   "startPosition",
   ")",
   ";",
   "if",
   "(",
   "(",
   "t",
   ".",
   "endPosition",
   ">",
   "t",
   ".",
   "startPosition",
   "&&",
   "result",
   ">=",
   "t",
   ".",
   "endPosition",
   ")",
   "||",
   "(",
   "t",
   ".",
   "endPosition",
   "<",
   "t",
   ".",
   "startPosition",
   "&&",
   "result",
   "<=",
   "t",
   ".",
   "endPosition",
   ")",
   "||",
   "t",
   ".",
   "endPosition",
   "===",
   "t",
   ".",
   "startPosition",
   ")",
   "{",
   "result",
   "=",
   "t",
   ".",
   "endPosition",
   ";",
   "speed",
   "[",
   "axis",
   "]",
   "=",
   "0",
   ";",
   "delete",
   "animatedMove",
   "[",
   "axis",
   "]",
   ";",
   "}",
   "config",
   "[",
   "axis",
   "]",
   "=",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-270",
  "nl_tokens": [
   "Calculates",
   "and",
   "returns",
   "the",
   "position",
   "values",
   "needed",
   "for",
   "the",
   "back",
   "button",
   "when",
   "you",
   "are",
   "pushing",
   "a",
   "title",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "oldLeft",
   ",",
   "oldTitle",
   ",",
   "reverse",
   ")",
   "{",
   "var",
   "me",
   "=",
   "this",
   ",",
   "barElement",
   "=",
   "me",
   ".",
   "element",
   ",",
   "newLeftElement",
   "=",
   "me",
   ".",
   "leftBox",
   ".",
   "element",
   ",",
   "titleElement",
   "=",
   "me",
   ".",
   "titleComponent",
   ".",
   "element",
   ",",
   "minOffset",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "barElement",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "3",
   ",",
   "200",
   ")",
   ",",
   "newLeftWidth",
   "=",
   "newLeftElement",
   ".",
   "getWidth",
   "(",
   ")",
   ",",
   "barX",
   "=",
   "barElement",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "barWidth",
   "=",
   "barElement",
   ".",
   "getWidth",
   "(",
   ")",
   ",",
   "titleX",
   "=",
   "titleElement",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "titleLeft",
   "=",
   "titleElement",
   ".",
   "getLeft",
   "(",
   ")",
   ",",
   "titleWidth",
   "=",
   "titleElement",
   ".",
   "getWidth",
   "(",
   ")",
   ",",
   "oldLeftX",
   "=",
   "oldLeft",
   ".",
   "x",
   ",",
   "oldLeftWidth",
   "=",
   "oldLeft",
   ".",
   "width",
   ",",
   "oldLeftLeft",
   "=",
   "oldLeft",
   ".",
   "left",
   ",",
   "useLeft",
   "=",
   "Ext",
   ".",
   "browser",
   ".",
   "is",
   ".",
   "AndroidStock2",
   "&&",
   "!",
   "this",
   ".",
   "getAndroid2Transforms",
   "(",
   ")",
   ",",
   "newOffset",
   ",",
   "oldOffset",
   ",",
   "leftAnims",
   ",",
   "titleAnims",
   ",",
   "omega",
   ",",
   "theta",
   ";",
   "theta",
   "=",
   "barX",
   "-",
   "oldLeftX",
   "-",
   "oldLeftWidth",
   ";",
   "if",
   "(",
   "reverse",
   ")",
   "{",
   "newOffset",
   "=",
   "theta",
   ";",
   "oldOffset",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "titleX",
   "-",
   "oldLeftWidth",
   ",",
   "minOffset",
   ")",
   ";",
   "}",
   "else",
   "{",
   "oldOffset",
   "=",
   "theta",
   ";",
   "newOffset",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "titleX",
   "-",
   "barX",
   ",",
   "minOffset",
   ")",
   ";",
   "}",
   "if",
   "(",
   "useLeft",
   ")",
   "{",
   "leftAnims",
   "=",
   "{",
   "element",
   ":",
   "{",
   "from",
   ":",
   "{",
   "left",
   ":",
   "newOffset",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   ",",
   "to",
   ":",
   "{",
   "left",
   ":",
   "0",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   "}",
   "}",
   ";",
   "}",
   "else",
   "{",
   "leftAnims",
   "=",
   "{",
   "element",
   ":",
   "{",
   "from",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "newOffset",
   "}",
   ",",
   "opacity",
   ":",
   "0",
   "}",
   ",",
   "to",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "0",
   "}",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   "}",
   ",",
   "ghost",
   ":",
   "{",
   "to",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "oldOffset",
   "}",
   ",",
   "opacity",
   ":",
   "0",
   "}",
   "}",
   "}",
   ";",
   "}",
   "theta",
   "=",
   "barX",
   "-",
   "titleX",
   "+",
   "newLeftWidth",
   ";",
   "if",
   "(",
   "(",
   "oldLeftLeft",
   "+",
   "titleWidth",
   ")",
   ">",
   "titleX",
   ")",
   "{",
   "omega",
   "=",
   "barX",
   "-",
   "titleX",
   "-",
   "titleWidth",
   ";",
   "}",
   "if",
   "(",
   "reverse",
   ")",
   "{",
   "titleElement",
   ".",
   "setLeft",
   "(",
   "0",
   ")",
   ";",
   "oldOffset",
   "=",
   "barX",
   "+",
   "barWidth",
   "-",
   "titleX",
   "-",
   "titleWidth",
   ";",
   "if",
   "(",
   "omega",
   "!==",
   "undefined",
   ")",
   "{",
   "newOffset",
   "=",
   "omega",
   ";",
   "}",
   "else",
   "{",
   "newOffset",
   "=",
   "theta",
   ";",
   "}",
   "}",
   "else",
   "{",
   "newOffset",
   "=",
   "barX",
   "+",
   "barWidth",
   "-",
   "titleX",
   "-",
   "titleWidth",
   ";",
   "if",
   "(",
   "omega",
   "!==",
   "undefined",
   ")",
   "{",
   "oldOffset",
   "=",
   "omega",
   ";",
   "}",
   "else",
   "{",
   "oldOffset",
   "=",
   "theta",
   ";",
   "}",
   "newOffset",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "titleLeft",
   ",",
   "newOffset",
   ")",
   ";",
   "}",
   "if",
   "(",
   "useLeft",
   ")",
   "{",
   "titleAnims",
   "=",
   "{",
   "element",
   ":",
   "{",
   "from",
   ":",
   "{",
   "left",
   ":",
   "newOffset",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   ",",
   "to",
   ":",
   "{",
   "left",
   ":",
   "titleLeft",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   "}",
   "}",
   ";",
   "}",
   "else",
   "{",
   "titleAnims",
   "=",
   "{",
   "element",
   ":",
   "{",
   "from",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "newOffset",
   "}",
   ",",
   "opacity",
   ":",
   "0",
   "}",
   ",",
   "to",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "titleLeft",
   "}",
   ",",
   "opacity",
   ":",
   "1",
   "}",
   "}",
   ",",
   "ghost",
   ":",
   "{",
   "to",
   ":",
   "{",
   "transform",
   ":",
   "{",
   "translateX",
   ":",
   "oldOffset",
   "}",
   ",",
   "opacity",
   ":",
   "0",
   "}",
   "}",
   "}",
   ";",
   "}",
   "return",
   "{",
   "left",
   ":",
   "leftAnims",
   ",",
   "title",
   ":",
   "titleAnims",
   ",",
   "titleLeft",
   ":",
   "titleLeft",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-271",
  "nl_tokens": [
   "Returns",
   "the",
   "point",
   "where",
   "two",
   "lines",
   "intersect",
   "."
  ],
  "pl_tokens": [
   "function",
   "(",
   "lineSegment",
   ")",
   "{",
   "var",
   "point1",
   "=",
   "this",
   ".",
   "point1",
   ",",
   "point2",
   "=",
   "this",
   ".",
   "point2",
   ",",
   "point3",
   "=",
   "lineSegment",
   ".",
   "point1",
   ",",
   "point4",
   "=",
   "lineSegment",
   ".",
   "point2",
   ",",
   "x1",
   "=",
   "point1",
   ".",
   "x",
   ",",
   "x2",
   "=",
   "point2",
   ".",
   "x",
   ",",
   "x3",
   "=",
   "point3",
   ".",
   "x",
   ",",
   "x4",
   "=",
   "point4",
   ".",
   "x",
   ",",
   "y1",
   "=",
   "point1",
   ".",
   "y",
   ",",
   "y2",
   "=",
   "point2",
   ".",
   "y",
   ",",
   "y3",
   "=",
   "point3",
   ".",
   "y",
   ",",
   "y4",
   "=",
   "point4",
   ".",
   "y",
   ",",
   "d",
   "=",
   "(",
   "x1",
   "-",
   "x2",
   ")",
   "*",
   "(",
   "y3",
   "-",
   "y4",
   ")",
   "-",
   "(",
   "y1",
   "-",
   "y2",
   ")",
   "*",
   "(",
   "x3",
   "-",
   "x4",
   ")",
   ",",
   "xi",
   ",",
   "yi",
   ";",
   "if",
   "(",
   "d",
   "==",
   "0",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "xi",
   "=",
   "(",
   "(",
   "x3",
   "-",
   "x4",
   ")",
   "*",
   "(",
   "x1",
   "*",
   "y2",
   "-",
   "y1",
   "*",
   "x2",
   ")",
   "-",
   "(",
   "x1",
   "-",
   "x2",
   ")",
   "*",
   "(",
   "x3",
   "*",
   "y4",
   "-",
   "y3",
   "*",
   "x4",
   ")",
   ")",
   "/",
   "d",
   ";",
   "yi",
   "=",
   "(",
   "(",
   "y3",
   "-",
   "y4",
   ")",
   "*",
   "(",
   "x1",
   "*",
   "y2",
   "-",
   "y1",
   "*",
   "x2",
   ")",
   "-",
   "(",
   "y1",
   "-",
   "y2",
   ")",
   "*",
   "(",
   "x3",
   "*",
   "y4",
   "-",
   "y3",
   "*",
   "x4",
   ")",
   ")",
   "/",
   "d",
   ";",
   "if",
   "(",
   "xi",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "x1",
   ",",
   "x2",
   ")",
   "||",
   "xi",
   ">",
   "Math",
   ".",
   "max",
   "(",
   "x1",
   ",",
   "x2",
   ")",
   "||",
   "xi",
   "<",
   "Math",
   ".",
   "min",
   "(",
   "x3",
   ",",
   "x4",
   ")",
   "||",
   "xi",
   ">",
   "Math",
   ".",
   "max",
   "(",
   "x3",
   ",",
   "x4",
   ")",
   "||",
   "yi",
   "<",
   "Math",
   ".",
   "min",
   "(",
   "y1",
   ",",
   "y2",
   ")",
   "||",
   "yi",
   ">",
   "Math",
   ".",
   "max",
   "(",
   "y1",
   ",",
   "y2",
   ")",
   "||",
   "yi",
   "<",
   "Math",
   ".",
   "min",
   "(",
   "y3",
   ",",
   "y4",
   ")",
   "||",
   "yi",
   ">",
   "Math",
   ".",
   "max",
   "(",
   "y3",
   ",",
   "y4",
   ")",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "return",
   "new",
   "Ext",
   ".",
   "util",
   ".",
   "Point",
   "(",
   "xi",
   ",",
   "yi",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-272",
  "nl_tokens": [
   "Retrieves",
   "the",
   "document",
   "width"
  ],
  "pl_tokens": [
   "function",
   "(",
   ")",
   "{",
   "//<debug warn>",
   "Ext",
   ".",
   "Logger",
   ".",
   "deprecate",
   "(",
   "\"Ext.Element.getDocumentWidth() is no longer supported. \"",
   "+",
   "\"Please use Ext.Viewport#getWindowWidth() instead\"",
   ",",
   "this",
   ")",
   ";",
   "//</debug>",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "!",
   "Ext",
   ".",
   "isStrict",
   "?",
   "document",
   ".",
   "body",
   ".",
   "scrollWidth",
   ":",
   "document",
   ".",
   "documentElement",
   ".",
   "scrollWidth",
   ",",
   "this",
   ".",
   "getViewportWidth",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 }
]