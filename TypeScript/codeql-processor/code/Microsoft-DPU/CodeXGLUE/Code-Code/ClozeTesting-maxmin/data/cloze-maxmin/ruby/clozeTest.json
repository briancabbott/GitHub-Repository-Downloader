[
 {
  "idx": "maxmin-1",
  "nl_tokens": [
   "Delete",
   "all",
   "copies",
   "that",
   "are",
   "older",
   "than",
   "the",
   "max",
   "age",
   "provided",
   "in",
   "seconds",
   "."
  ],
  "pl_tokens": [
   "def",
   "clean",
   "(",
   "<mask>",
   ":",
   "24",
   "*",
   "60",
   "*",
   "60",
   ")",
   "Futex",
   ".",
   "new",
   "(",
   "file",
   ",",
   "log",
   ":",
   "@log",
   ")",
   ".",
   "open",
   "do",
   "list",
   "=",
   "load",
   "list",
   ".",
   "reject!",
   "do",
   "|",
   "s",
   "|",
   "if",
   "s",
   "[",
   ":time",
   "]",
   ">=",
   "Time",
   ".",
   "now",
   "-",
   "max",
   "false",
   "else",
   "@log",
   ".",
   "debug",
   "(",
   "\"Copy ##{s[:name]}/#{s[:host]}:#{s[:port]} is too old, over #{Age.new(s[:time])}\"",
   ")",
   "true",
   "end",
   "end",
   "save",
   "(",
   "list",
   ")",
   "deleted",
   "=",
   "0",
   "files",
   ".",
   "each",
   "do",
   "|",
   "f",
   "|",
   "next",
   "unless",
   "list",
   ".",
   "find",
   "{",
   "|",
   "s",
   "|",
   "s",
   "[",
   ":name",
   "]",
   "==",
   "File",
   ".",
   "basename",
   "(",
   "f",
   ",",
   "Copies",
   "::",
   "EXT",
   ")",
   "}",
   ".",
   "nil?",
   "file",
   "=",
   "File",
   ".",
   "join",
   "(",
   "@dir",
   ",",
   "f",
   ")",
   "size",
   "=",
   "File",
   ".",
   "size",
   "(",
   "file",
   ")",
   "File",
   ".",
   "delete",
   "(",
   "file",
   ")",
   "@log",
   ".",
   "debug",
   "(",
   "\"Copy at #{f} deleted: #{Size.new(size)}\"",
   ")",
   "deleted",
   "+=",
   "1",
   "end",
   "list",
   ".",
   "select!",
   "do",
   "|",
   "s",
   "|",
   "cp",
   "=",
   "File",
   ".",
   "join",
   "(",
   "@dir",
   ",",
   "\"#{s[:name]}#{Copies::EXT}\"",
   ")",
   "wallet",
   "=",
   "Wallet",
   ".",
   "new",
   "(",
   "cp",
   ")",
   "begin",
   "wallet",
   ".",
   "refurbish",
   "raise",
   "\"Invalid protocol #{wallet.protocol} in #{cp}\"",
   "unless",
   "wallet",
   ".",
   "protocol",
   "==",
   "Zold",
   "::",
   "PROTOCOL",
   "true",
   "rescue",
   "StandardError",
   "=>",
   "e",
   "FileUtils",
   ".",
   "rm_rf",
   "(",
   "cp",
   ")",
   "@log",
   ".",
   "debug",
   "(",
   "\"Copy at #{cp} deleted: #{Backtrace.new(e)}\"",
   ")",
   "deleted",
   "+=",
   "1",
   "false",
   "end",
   "end",
   "save",
   "(",
   "list",
   ")",
   "deleted",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-2",
  "nl_tokens": [
   "@return",
   "[",
   "Array<RPM",
   "::",
   "Dependency",
   ">",
   "]",
   "Dependencies",
   "for",
   "+",
   "klass",
   "+",
   "@example",
   "dependencies",
   "(",
   "RPM",
   "::",
   "Provide",
   ":",
   "providename",
   ":",
   "provideversion",
   ":",
   "provideflags",
   ")"
  ],
  "pl_tokens": [
   "def",
   "dependencies",
   "(",
   "klass",
   ",",
   "nametag",
   ",",
   "versiontag",
   ",",
   "flagtag",
   ")",
   "deps",
   "=",
   "[",
   "]",
   "nametd",
   "=",
   "::",
   "FFI",
   "::",
   "AutoPointer",
   ".",
   "new",
   "(",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNew",
   ",",
   "Package",
   ".",
   "method",
   "(",
   ":release_td",
   ")",
   ")",
   "versiontd",
   "=",
   "::",
   "FFI",
   "::",
   "AutoPointer",
   ".",
   "new",
   "(",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNew",
   ",",
   "Package",
   ".",
   "method",
   "(",
   ":release_td",
   ")",
   ")",
   "flagtd",
   "=",
   "::",
   "FFI",
   "::",
   "AutoPointer",
   ".",
   "new",
   "(",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNew",
   ",",
   "Package",
   ".",
   "method",
   "(",
   ":release_td",
   ")",
   ")",
   "<mask>",
   "=",
   "RPM",
   "::",
   "C",
   "::",
   "HEADERGET_MINMEM",
   "return",
   "deps",
   "if",
   "RPM",
   "::",
   "C",
   ".",
   "headerGet",
   "(",
   "@hdr",
   ",",
   "nametag",
   ",",
   "nametd",
   ",",
   "min",
   ")",
   "!=",
   "1",
   "return",
   "deps",
   "if",
   "RPM",
   "::",
   "C",
   ".",
   "headerGet",
   "(",
   "@hdr",
   ",",
   "versiontag",
   ",",
   "versiontd",
   ",",
   "min",
   ")",
   "!=",
   "1",
   "return",
   "deps",
   "if",
   "RPM",
   "::",
   "C",
   ".",
   "headerGet",
   "(",
   "@hdr",
   ",",
   "flagtag",
   ",",
   "flagtd",
   ",",
   "min",
   ")",
   "!=",
   "1",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdInit",
   "(",
   "nametd",
   ")",
   "while",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNext",
   "(",
   "nametd",
   ")",
   "!=",
   "-",
   "1",
   "deps",
   "<<",
   "klass",
   ".",
   "new",
   "(",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdGetString",
   "(",
   "nametd",
   ")",
   ",",
   "RPM",
   "::",
   "Version",
   ".",
   "new",
   "(",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNextString",
   "(",
   "versiontd",
   ")",
   ")",
   ",",
   "RPM",
   "::",
   "C",
   ".",
   "rpmtdNextUint32",
   "(",
   "flagtd",
   ")",
   ".",
   "read_uint",
   ",",
   "self",
   ")",
   "end",
   "deps",
   "end"
  ]
 },
 {
  "idx": "maxmin-3",
  "nl_tokens": [
   "Used",
   "primarily",
   "to",
   "preallocate",
   "buckets",
   "that",
   "need",
   "an",
   "alternate",
   "configuration",
   "from",
   "the",
   "default",
   "so",
   "that",
   "they",
   "aren",
   "t",
   "automatically",
   "created",
   "with",
   "default",
   "configurations",
   "<tt",
   ">",
   "name<",
   "/",
   "tt",
   ">",
   "::",
   "the",
   "name",
   "of",
   "the",
   "item",
   "to",
   "track",
   "<tt",
   ">",
   "config_name<",
   "/",
   "tt",
   ">",
   "::",
   "the",
   "name",
   "of",
   "the",
   "config",
   "to",
   "use",
   "as",
   "a",
   "template",
   "for",
   "creating",
   "the",
   "bucket",
   "The",
   "new",
   "bucket",
   "will",
   "be",
   "saved",
   "into",
   "the",
   "storage",
   "for",
   "this",
   "instance",
   "of",
   "RateLimiter"
  ],
  "pl_tokens": [
   "def",
   "create_bucket",
   "(",
   "name",
   ",",
   "config_name",
   "=",
   "@default_bucket_config",
   ")",
   "config",
   "=",
   "@bucket_configs",
   "[",
   "config_name",
   "]",
   "raise",
   "\"Config is nil\"",
   "unless",
   "config",
   "bucket",
   "=",
   "Bucket",
   ".",
   "new",
   "(",
   "name",
   ",",
   "config",
   ".",
   "start",
   ",",
   "config",
   ".",
   "<mask>",
   ",",
   "config",
   ".",
   "min",
   ",",
   "config",
   ".",
   "cost",
   ",",
   "config",
   ".",
   "refill_amount",
   ",",
   "config",
   ".",
   "refill_epoch",
   ",",
   "Time",
   ".",
   "now",
   ".",
   "to_f",
   ",",
   "0.0",
   ")",
   "@storage",
   ".",
   "set",
   "(",
   "bucket",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-4",
  "nl_tokens": [
   "----------------",
   "Date",
   "intervals",
   "and",
   "patterns",
   "-----------------"
  ],
  "pl_tokens": [
   "def",
   "pattern",
   "ranges",
   "=",
   "dates",
   ".",
   "group_by",
   "(",
   ":wday",
   ")",
   ".",
   "values",
   ".",
   "map",
   "{",
   "|",
   "weekdates",
   "|",
   "(",
   "weekdates",
   ".",
   "<mask>",
   "..",
   "weekdates",
   ".",
   "max",
   ")",
   "}",
   "TemporalPatterns",
   "::",
   "Pattern",
   ".",
   "new",
   "(",
   "ranges",
   ",",
   "1",
   ".",
   "week",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-5",
  "nl_tokens": [
   "Find",
   "out",
   "which",
   "schedule",
   "to",
   "run"
  ],
  "pl_tokens": [
   "def",
   "find_schedule",
   "minutes",
   "=",
   "{",
   "# If a cron job is run hourly it can be off by a couple of seconds",
   "# from the last run. Set hourly to 58 minutes",
   "hourly",
   ":",
   "58",
   ",",
   "daily",
   ":",
   "24",
   "*",
   "60",
   ",",
   "weekly",
   ":",
   "7",
   "*",
   "24",
   "*",
   "60",
   ",",
   "monthly",
   ":",
   "30",
   "*",
   "24",
   "*",
   "60",
   ",",
   "yearly",
   ":",
   "365",
   "*",
   "24",
   "*",
   "60",
   "}",
   "now",
   "=",
   "DateTime",
   ".",
   "now",
   "[",
   ":yearly",
   ",",
   ":monthly",
   ",",
   ":weekly",
   ",",
   ":daily",
   ",",
   ":hourly",
   "]",
   ".",
   "each",
   "do",
   "|",
   "schedule",
   "|",
   "next",
   "if",
   "backups_to_keep",
   "(",
   "schedule",
   ")",
   "<=",
   "0",
   "list",
   "=",
   "list_backup_dir",
   "schedule",
   "date",
   "=",
   "list",
   ".",
   "map",
   "{",
   "|",
   "path",
   "|",
   "parse_backup_dir_name",
   "path",
   ",",
   "now",
   ".",
   "offset",
   "}",
   ".",
   "<mask>",
   "return",
   "schedule",
   "if",
   "!",
   "date",
   "||",
   "(",
   "now",
   "-",
   "date",
   ")",
   "*",
   "24",
   "*",
   "60",
   ">=",
   "minutes",
   "[",
   "schedule",
   "]",
   "end",
   "nil",
   "end"
  ]
 },
 {
  "idx": "maxmin-6",
  "nl_tokens": [
   "Process",
   "the",
   "aggregation",
   "of",
   "the",
   "key",
   "values",
   ".",
   "The",
   "result",
   "will",
   "be",
   "written",
   "to",
   "_outfile_"
  ],
  "pl_tokens": [
   "def",
   "process_aggregation",
   "File",
   ".",
   "new",
   "(",
   "infile",
   ")",
   ".",
   "each_with_index",
   "do",
   "|",
   "line",
   ",",
   "index",
   "|",
   "result",
   "=",
   "col_filter",
   ".",
   "process",
   "(",
   "row_filter",
   ".",
   "process",
   "(",
   "line",
   ".",
   "chomp",
   ",",
   "row",
   ":",
   "index",
   ")",
   ")",
   "unless",
   "result",
   ".",
   "nil?",
   "or",
   "result",
   ".",
   "empty?",
   "if",
   "heading",
   ".",
   "empty?",
   "and",
   "not",
   "headerless",
   "heading",
   "<<",
   "result",
   ".",
   "split",
   "(",
   "';'",
   ")",
   "next",
   "else",
   "@sum_col",
   "=",
   "[",
   "result",
   ".",
   "split",
   "(",
   "';'",
   ")",
   ".",
   "size",
   ",",
   "sum_col",
   "]",
   ".",
   "<mask>",
   "end",
   "key_values",
   "[",
   "result",
   "]",
   "+=",
   "1",
   "sums",
   "[",
   "sum_col_title",
   "]",
   "+=",
   "1",
   "end",
   "end",
   "heading",
   ".",
   "flatten!",
   "heading",
   "[",
   "sum_col",
   "]",
   "=",
   "sum_col_title",
   "end"
  ]
 },
 {
  "idx": "maxmin-7",
  "nl_tokens": [
   "primarily",
   "for",
   "removing",
   "leading",
   "whitespace",
   "in",
   "<pre",
   ">",
   "tags"
  ],
  "pl_tokens": [
   "def",
   "sanitize_code_blocks",
   "(",
   "text",
   ")",
   "text",
   ".",
   "gsub",
   "(",
   "/",
   "\\/",
   "/m",
   ")",
   "do",
   "code",
   "=",
   "$1",
   ".",
   "sub",
   "(",
   "/",
   "\\s",
   "\\n",
   "/",
   ",",
   "''",
   ")",
   "indent",
   "=",
   "code",
   ".",
   "gsub",
   "(",
   "/",
   "\\n",
   "\\t",
   "\\n",
   "/",
   ",",
   "\"\\n\"",
   ")",
   ".",
   "scan",
   "(",
   "/",
   "/",
   ")",
   ".",
   "map",
   "{",
   "|",
   "i",
   "|",
   "i",
   ".",
   "size",
   "}",
   ".",
   "<mask>",
   "code",
   ".",
   "gsub!",
   "(",
   "/",
   "#{",
   "' '",
   "*",
   "indent",
   "}",
   "/",
   ",",
   "''",
   ")",
   "if",
   "indent",
   ">",
   "0",
   "\"<pre>#{code}</pre>\"",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-8",
  "nl_tokens": [
   "Conducts",
   "the",
   "calculation",
   "of",
   "this",
   "spread",
   "sheet",
   "with",
   "the",
   "provided",
   "value",
   "based",
   "on",
   "the",
   "operator",
   ".",
   "It",
   "s",
   "is",
   "a",
   "number",
   "or",
   "an",
   "array",
   "it",
   "is",
   "coerced",
   "into",
   "a",
   "spread",
   "sheet"
  ],
  "pl_tokens": [
   "def",
   "process",
   "(",
   "operator",
   ",",
   "s",
   ")",
   "s",
   "=",
   "coerce",
   "(",
   "s",
   ")",
   "||",
   "s",
   "raise",
   "\"operand needs to be a SpreadSheet, \"",
   "+",
   "\"Numeric or Array\"",
   "unless",
   "s",
   ".",
   "is_a?",
   "(",
   "SpreadSheet",
   ")",
   "result",
   "=",
   "[",
   "]",
   "rlabel",
   "=",
   "[",
   "]",
   "clabel",
   "=",
   "[",
   "]",
   "s1_row_count",
   ",",
   "s1_col_count",
   "=",
   "dim",
   "s2_row_count",
   ",",
   "s2_col_count",
   "=",
   "s",
   ".",
   "dim",
   "row_count",
   "=",
   "[",
   "s1_row_count",
   ",",
   "s2_row_count",
   "]",
   ".",
   "<mask>",
   "col_count",
   "=",
   "[",
   "s1_col_count",
   ",",
   "s2_col_count",
   "]",
   ".",
   "max",
   "0",
   ".",
   "upto",
   "(",
   "row_count",
   "-",
   "1",
   ")",
   "do",
   "|",
   "r",
   "|",
   "r1",
   "=",
   "r",
   "%",
   "s1_row_count",
   "r2",
   "=",
   "r",
   "%",
   "s2_row_count",
   "rlabel",
   "<<",
   "\"#{row_labels[r1]}#{operator}#{s.row_labels[r2]}\"",
   "element",
   "=",
   "[",
   "]",
   "0",
   ".",
   "upto",
   "(",
   "col_count",
   "-",
   "1",
   ")",
   "do",
   "|",
   "c",
   "|",
   "c1",
   "=",
   "c",
   "%",
   "s1_col_count",
   "c2",
   "=",
   "c",
   "%",
   "s2_col_count",
   "clabel",
   "<<",
   "\"#{col_labels[c1]}#{operator}#{s.col_labels[c2]}\"",
   "element",
   "<<",
   "rows",
   "[",
   "r1",
   "]",
   "[",
   "c1",
   "]",
   ".",
   "send",
   "(",
   "operator",
   ",",
   "s",
   ".",
   "rows",
   "[",
   "r2",
   "]",
   "[",
   "c2",
   "]",
   ")",
   "end",
   "result",
   "<<",
   "element",
   "end",
   "SpreadSheet",
   ".",
   "new",
   "(",
   "result",
   ",",
   "row_labels",
   ":",
   "rlabel",
   ",",
   "col_labels",
   ":",
   "clabel",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-9",
  "nl_tokens": [
   "given",
   "an",
   "array",
   "or",
   "object",
   "return",
   "the",
   "highest",
   "id",
   "we",
   "can",
   "find"
  ],
  "pl_tokens": [
   "def",
   "max_id_from",
   "(",
   "s",
   ")",
   "if",
   "!",
   "s",
   ".",
   "respond_to?",
   "(",
   ":max",
   ")",
   "if",
   "s",
   ".",
   "respond_to?",
   "(",
   ":id",
   ")",
   "return",
   "s",
   ".",
   "id",
   "else",
   "return",
   "s",
   "end",
   "end",
   "sorted",
   "=",
   "s",
   ".",
   "<mask>",
   "{",
   "|",
   "a",
   ",",
   "b",
   "|",
   "a",
   ".",
   "id",
   ".",
   "to_i",
   "<=>",
   "b",
   ".",
   "id",
   ".",
   "to_i",
   "}",
   "sorted",
   "&&",
   "sorted",
   ".",
   "id",
   "end"
  ]
 },
 {
  "idx": "maxmin-10",
  "nl_tokens": [
   "Returns",
   "the",
   "command",
   "-",
   "line",
   "option",
   "parser",
   "."
  ],
  "pl_tokens": [
   "def",
   "opts",
   "@opts",
   "||=",
   "OptionParser",
   ".",
   "new",
   "do",
   "|",
   "opts",
   "|",
   "opts",
   ".",
   "program_name",
   "=",
   "File",
   ".",
   "basename",
   "(",
   "$PROGRAM_NAME",
   ")",
   "opts",
   ".",
   "banner",
   "=",
   "\"Usage: #{opts.program_name}\"",
   "opts",
   ".",
   "separator",
   "''",
   "opts",
   ".",
   "separator",
   "'Actions:'",
   "names",
   "=",
   "@actions",
   ".",
   "map",
   "(",
   ":name",
   ")",
   "padding",
   "=",
   "names",
   ".",
   "map",
   "(",
   ":size",
   ")",
   ".",
   "<mask>",
   "@actions",
   ".",
   "each",
   "do",
   "|",
   "action",
   "|",
   "opts",
   ".",
   "separator",
   "\"  #{action.name.ljust(padding)}  #{action.description}\\n\"",
   "end",
   "opts",
   ".",
   "separator",
   "''",
   "opts",
   ".",
   "separator",
   "'Tasks:'",
   "@processor_class",
   ".",
   "tasks",
   ".",
   "each",
   "do",
   "|",
   "task_name",
   "|",
   "opts",
   ".",
   "separator",
   "\"  #{task_name}\"",
   "end",
   "opts",
   ".",
   "separator",
   "''",
   "opts",
   ".",
   "separator",
   "'Specific options:'",
   "opts",
   ".",
   "on",
   "(",
   "'-a'",
   ",",
   "'--action ACTION'",
   ",",
   "names",
   ",",
   "'Select an action to run (you may give this switch multiple times)'",
   ",",
   "\"  (#{names.join(', ')})\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "actions",
   "<<",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-t'",
   ",",
   "'--task TASK'",
   ",",
   "@processor_class",
   ".",
   "tasks",
   ",",
   "'Select a scraping task to run (you may give this switch multiple times)'",
   ",",
   "\"  (#{@processor_class.tasks.join(', ')})\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "tasks",
   "<<",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-o'",
   ",",
   "'--output_dir PATH'",
   ",",
   "'The directory or Redis address (e.g. redis://localhost:6379/0) in which to dump JSON documents'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "output_dir",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--pipelined'",
   ",",
   "'Dump JSON documents all at once'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "pipelined",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-c'",
   ",",
   "'--cache_dir PATH'",
   ",",
   "'The directory or Memcached address (e.g. memcached://localhost:11211) in which to cache HTTP requests'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "cache_dir",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--no-cache'",
   ",",
   "'Disable HTTP request caching'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "cache_dir",
   "=",
   "nil",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-e'",
   ",",
   "'--expires_in SECONDS'",
   ",",
   "\"The cache's expiration time in seconds\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "expires_in",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--value_max_bytes BYTES'",
   ",",
   "\"The maximum Memcached item size\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "value_max_bytes",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--memcached_username USERNAME'",
   ",",
   "\"The Memcached username\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "memcached_username",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--memcached_password USERNAME'",
   ",",
   "\"The Memcached password\"",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "memcached_password",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-d'",
   ",",
   "'--database_url'",
   ",",
   "'The database URL (e.g. mongodb://USER:PASSWORD@localhost:27017/pupa or postgres://USER:PASSWORD@localhost:5432/pupa'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "database_url",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'--[no-]validate'",
   ",",
   "'Validate JSON documents'",
   ")",
   "do",
   "|",
   "v",
   "|",
   "options",
   ".",
   "validate",
   "=",
   "v",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-v'",
   ",",
   "'--verbose'",
   ",",
   "'Show all messages'",
   ")",
   "do",
   "options",
   ".",
   "level",
   "=",
   "'DEBUG'",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-q'",
   ",",
   "'--quiet'",
   ",",
   "'Show only warning and error messages'",
   ")",
   "do",
   "options",
   ".",
   "level",
   "=",
   "'WARN'",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-s'",
   ",",
   "'--silent'",
   ",",
   "'Show no messages'",
   ")",
   "do",
   "options",
   ".",
   "level",
   "=",
   "'UNKNOWN'",
   "end",
   "opts",
   ".",
   "on",
   "(",
   "'-n'",
   ",",
   "'--dry-run'",
   ",",
   "'Show the plan without running any actions'",
   ")",
   "do",
   "options",
   ".",
   "dry_run",
   "=",
   "true",
   "end",
   "opts",
   ".",
   "separator",
   "''",
   "opts",
   ".",
   "separator",
   "'Common options:'",
   "opts",
   ".",
   "on_tail",
   "(",
   "'-h'",
   ",",
   "'--help'",
   ",",
   "'Show this message'",
   ")",
   "do",
   "puts",
   "opts",
   "exit",
   "end",
   "opts",
   ".",
   "on_tail",
   "(",
   "'-v'",
   ",",
   "'--version'",
   ",",
   "'Show version'",
   ")",
   "do",
   "puts",
   "Pupa",
   "::",
   "VERSION",
   "exit",
   "end",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-11",
  "nl_tokens": [
   "Reset",
   "configuration",
   "options",
   "to",
   "their",
   "defaults"
  ],
  "pl_tokens": [
   "def",
   "reset!",
   "self",
   ".",
   "api_key",
   "=",
   "DEFAULT_API_KEY",
   "self",
   ".",
   "api_secret",
   "=",
   "DEFAULT_API_SECRET",
   "self",
   ".",
   "adapter",
   "=",
   "DEFAULT_ADAPTER",
   "self",
   ".",
   "endpoint",
   "=",
   "DEFAULT_ENDPOINT",
   "self",
   ".",
   "user_agent",
   "=",
   "DEFAULT_USER_AGENT",
   "self",
   ".",
   "format",
   "=",
   "DEFAULT_FORMAT",
   "self",
   ".",
   "<mask>",
   "=",
   "DEFAULT_MAX",
   "self",
   ".",
   "related_entities",
   "=",
   "DEFAULT_RELATED_ENTITIES",
   "self",
   ".",
   "show_metadata",
   "=",
   "DEFAULT_SHOW_METADATA",
   "self",
   ".",
   "enable_categorizer",
   "=",
   "DEFAULT_ENABLE_CATEGORIZER",
   "self",
   ".",
   "unique",
   "=",
   "DEFAULT_UNIQUE",
   "self",
   "end"
  ]
 },
 {
  "idx": "maxmin-12",
  "nl_tokens": [
   "Set",
   "the",
   "views",
   "center",
   "coordinates",
   "with",
   "a",
   "given",
   "zoom",
   "level"
  ],
  "pl_tokens": [
   "def",
   "set_center_coordinates",
   "(",
   "center_coordinate",
   ",",
   "zoom_level",
   ",",
   "animated",
   "=",
   "false",
   ")",
   "# clamp large numbers to 18",
   "zoom_level",
   "=",
   "[",
   "zoom_level",
   ",",
   "18",
   "]",
   ".",
   "<mask>",
   "# use the zoom level to compute the region",
   "span",
   "=",
   "self",
   ".",
   "class",
   ".",
   "coordinate_span_with_map_view",
   "(",
   "self",
   ",",
   "center_coordinate",
   ",",
   "zoom_level",
   ")",
   "region",
   "=",
   "CoordinateRegion",
   ".",
   "new",
   "(",
   "center_coordinate",
   ",",
   "span",
   ")",
   "# set the region like normal",
   "self",
   ".",
   "setRegion",
   "(",
   "region",
   ".",
   "api",
   ",",
   "animated",
   ":",
   "animated",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-13",
  "nl_tokens": [
   "Prints",
   "the",
   "spread",
   "sheet",
   "in",
   "a",
   "matrix",
   "with",
   "column",
   "labels",
   "and",
   "row",
   "labels",
   ".",
   "If",
   "no",
   "labels",
   "are",
   "available",
   "the",
   "column",
   "number",
   "and",
   "row",
   "number",
   "is",
   "printed"
  ],
  "pl_tokens": [
   "def",
   "to_s",
   "col_label_sizes",
   "=",
   "col_labels",
   ".",
   "collect",
   "{",
   "|",
   "c",
   "|",
   "c",
   ".",
   "to_s",
   ".",
   "size",
   "+",
   "2",
   "}",
   "row_label_size",
   "=",
   "row_labels",
   ".",
   "collect",
   "{",
   "|",
   "r",
   "|",
   "r",
   ".",
   "to_s",
   ".",
   "size",
   "+",
   "2",
   "}",
   ".",
   "<mask>",
   "row_col_sizes",
   "=",
   "rows",
   ".",
   "transpose",
   ".",
   "collect",
   "{",
   "|",
   "r",
   "|",
   "r",
   ".",
   "collect",
   "{",
   "|",
   "c",
   "|",
   "c",
   ".",
   "to_s",
   ".",
   "size",
   "}",
   "}",
   "i",
   "=",
   "-",
   "1",
   "col_sizes",
   "=",
   "col_label_sizes",
   ".",
   "collect",
   "do",
   "|",
   "s",
   "|",
   "i",
   "+=",
   "1",
   "[",
   "row_col_sizes",
   "[",
   "i",
   "]",
   ",",
   "s",
   "]",
   ".",
   "flatten",
   ".",
   "max",
   "+",
   "1",
   "end",
   "s",
   "=",
   "(",
   "sprintf",
   "(",
   "\"%#{row_label_size}s\"",
   ",",
   "\" \"",
   ")",
   ")",
   "col_labels",
   ".",
   "each_with_index",
   "{",
   "|",
   "l",
   ",",
   "i",
   "|",
   "s",
   "<<",
   "(",
   "sprintf",
   "(",
   "\"%#{col_sizes[i]}s\"",
   ",",
   "\"[#{l}]\"",
   ")",
   ")",
   "}",
   "s",
   "<<",
   "\"\\n\"",
   "rows",
   ".",
   "each_with_index",
   "do",
   "|",
   "row",
   ",",
   "i",
   "|",
   "s",
   "<<",
   "(",
   "sprintf",
   "(",
   "\"%#{row_label_size}s\"",
   ",",
   "\"[#{row_labels[i]}]\"",
   ")",
   ")",
   "row",
   ".",
   "each_with_index",
   "{",
   "|",
   "c",
   ",",
   "j",
   "|",
   "s",
   "<<",
   "(",
   "sprintf",
   "(",
   "\"%#{col_sizes[j]}s\"",
   ",",
   "c",
   ")",
   ")",
   "}",
   "s",
   "<<",
   "\"\\n\"",
   "end",
   "s",
   "end"
  ]
 },
 {
  "idx": "maxmin-14",
  "nl_tokens": [
   "on",
   "creation",
   "set",
   "automatically",
   "lft",
   "and",
   "rgt",
   "to",
   "the",
   "end",
   "of",
   "the",
   "tree"
  ],
  "pl_tokens": [
   "def",
   "set_default_left_and_right",
   "maxright",
   "=",
   "nested_set_scope",
   ".",
   "remove_order_by",
   ".",
   "<mask>",
   "(",
   "right_field_name",
   ")",
   "||",
   "0",
   "self",
   "[",
   "left_field_name",
   "]",
   "=",
   "maxright",
   "+",
   "1",
   "self",
   "[",
   "right_field_name",
   "]",
   "=",
   "maxright",
   "+",
   "2",
   "self",
   "[",
   ":depth",
   "]",
   "=",
   "0",
   "end"
  ]
 },
 {
  "idx": "maxmin-15",
  "nl_tokens": [
   "Sets",
   "the",
   "attributes",
   "for",
   "object",
   "."
  ],
  "pl_tokens": [
   "def",
   "load",
   "(",
   "attributes",
   "=",
   "{",
   "}",
   ")",
   "attributes",
   ".",
   "each",
   "do",
   "|",
   "key",
   ",",
   "val",
   "|",
   "if",
   "key",
   "=~",
   "/",
   "/",
   "and",
   "val",
   "# if this is a date/time key and it's not nil, try to parse it first",
   "# as DateTime, then as Date only",
   "begin",
   "dt",
   "=",
   "DateTime",
   ".",
   "strptime",
   "(",
   "val",
   ",",
   "\"%Y-%m-%dT%H:%M:%SZ\"",
   ")",
   "newval",
   "=",
   "Time",
   ".",
   "utc",
   "(",
   "dt",
   ".",
   "year",
   ",",
   "dt",
   ".",
   "month",
   ",",
   "dt",
   ".",
   "day",
   ",",
   "dt",
   ".",
   "hour",
   ",",
   "dt",
   ".",
   "<mask>",
   ",",
   "dt",
   ".",
   "sec",
   ")",
   "rescue",
   "ArgumentError",
   "=>",
   "ex",
   "newval",
   "=",
   "DateTime",
   ".",
   "strptime",
   "(",
   "val",
   ",",
   "\"%Y-%m-%d\"",
   ")",
   "end",
   "self",
   ".",
   "instance_variable_set",
   "(",
   "\"@#{key}\"",
   ",",
   "newval",
   ")",
   "else",
   "self",
   ".",
   "instance_variable_set",
   "(",
   "\"@#{key}\"",
   ",",
   "val",
   ")",
   "end",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-16",
  "nl_tokens": [
   "Solve",
   "reCAPTCHA",
   "v2",
   "."
  ],
  "pl_tokens": [
   "def",
   "decode_recaptcha_v2!",
   "(",
   "options",
   "=",
   "{",
   "}",
   ")",
   "started_at",
   "=",
   "Time",
   ".",
   "now",
   "fail",
   "(",
   "TwoCaptcha",
   "::",
   "GoogleKey",
   ")",
   "if",
   "options",
   "[",
   ":googlekey",
   "]",
   ".",
   "empty?",
   "upload_options",
   "=",
   "{",
   "method",
   ":",
   "'userrecaptcha'",
   ",",
   "googlekey",
   ":",
   "options",
   "[",
   ":googlekey",
   "]",
   ",",
   "pageurl",
   ":",
   "options",
   "[",
   ":pageurl",
   "]",
   "}",
   "decoded_captcha",
   "=",
   "upload",
   "(",
   "upload_options",
   ")",
   "# pool untill the answer is ready",
   "while",
   "decoded_captcha",
   ".",
   "text",
   ".",
   "to_s",
   ".",
   "empty?",
   "sleep",
   "(",
   "[",
   "polling",
   ",",
   "10",
   "]",
   ".",
   "<mask>",
   ")",
   "# sleep at least 10 seconds",
   "decoded_captcha",
   "=",
   "captcha",
   "(",
   "decoded_captcha",
   ".",
   "id",
   ")",
   "fail",
   "TwoCaptcha",
   "::",
   "Timeout",
   "if",
   "(",
   "Time",
   ".",
   "now",
   "-",
   "started_at",
   ")",
   ">",
   "timeout",
   "end",
   "decoded_captcha",
   "end"
  ]
 },
 {
  "idx": "maxmin-17",
  "nl_tokens": [
   "Calculate",
   "the",
   "maximum",
   "transaction",
   "ID",
   "visible",
   "currently",
   "in",
   "the",
   "wallet",
   ".",
   "We",
   "go",
   "through",
   "them",
   "all",
   "and",
   "find",
   "the",
   "largest",
   "number",
   ".",
   "If",
   "there",
   "are",
   "no",
   "transactions",
   "zero",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "def",
   "<mask>",
   "negative",
   "=",
   "txns",
   ".",
   "select",
   "{",
   "|",
   "t",
   "|",
   "t",
   ".",
   "amount",
   ".",
   "negative?",
   "}",
   "negative",
   ".",
   "empty?",
   "?",
   "0",
   ":",
   "negative",
   ".",
   "max_by",
   "(",
   ":id",
   ")",
   ".",
   "id",
   "end"
  ]
 },
 {
  "idx": "maxmin-18",
  "nl_tokens": [
   "If",
   "rows",
   "are",
   "of",
   "different",
   "column",
   "size",
   "the",
   "rows",
   "are",
   "equalized",
   "in",
   "column",
   "size",
   "by",
   "filling",
   "missing",
   "columns",
   "with",
   "NA"
  ],
  "pl_tokens": [
   "def",
   "equalize_rows",
   "(",
   "rows",
   ")",
   "column_sizes",
   "=",
   "rows",
   ".",
   "collect",
   "{",
   "|",
   "r",
   "|",
   "r",
   ".",
   "size",
   "}",
   "return",
   "rows",
   "if",
   "column_sizes",
   ".",
   "uniq",
   ".",
   "size",
   "==",
   "1",
   "max_size",
   "=",
   "column_sizes",
   ".",
   "<mask>",
   "small_rows",
   "=",
   "[",
   "]",
   "column_sizes",
   ".",
   "each_with_index",
   "{",
   "|",
   "c",
   ",",
   "i",
   "|",
   "small_rows",
   "<<",
   "i",
   "if",
   "c",
   "<",
   "max_size",
   "}",
   "small_rows",
   ".",
   "each",
   "do",
   "|",
   "i",
   "|",
   "rows",
   "[",
   "i",
   "]",
   "+=",
   "[",
   "NotAvailable",
   "]",
   "*",
   "(",
   "max_size",
   "-",
   "rows",
   "[",
   "i",
   "]",
   ".",
   "size",
   ")",
   "end",
   "rows",
   "end"
  ]
 },
 {
  "idx": "maxmin-19",
  "nl_tokens": [
   "Start",
   "up",
   "an",
   "instance",
   "of",
   "Jetty",
   "running",
   "a",
   "Rack",
   "application",
   ".",
   "Options",
   "can",
   "be",
   "any",
   "of",
   "the",
   "follwing",
   "and",
   "are",
   "not",
   "case",
   "-",
   "sensitive",
   ":"
  ],
  "pl_tokens": [
   "def",
   "run",
   "(",
   "app",
   ",",
   "options",
   "=",
   "{",
   "}",
   ")",
   "# Symbolize and downcase keys.",
   "@options",
   "=",
   "options",
   "=",
   "Hash",
   "[",
   "options",
   ".",
   "map",
   "{",
   "|",
   "k",
   ",",
   "v",
   "|",
   "[",
   "k",
   ".",
   "to_s",
   ".",
   "downcase",
   ".",
   "to_sym",
   ",",
   "v",
   "]",
   "}",
   "]",
   "options",
   "[",
   ":quiet",
   "]",
   "||=",
   "true",
   "if",
   "options",
   "[",
   ":embedded",
   "]",
   "# The Jetty server",
   "Logger",
   ".",
   "configure",
   "(",
   "options",
   ")",
   "@logger",
   "=",
   "Logger",
   ".",
   "logger",
   "@server",
   "=",
   "Java",
   ".",
   "org",
   ".",
   "eclipse",
   ".",
   "jetty",
   ".",
   "server",
   ".",
   "Server",
   ".",
   "new",
   "@server",
   ".",
   "setSendServerVersion",
   "(",
   "false",
   ")",
   "# Thread pool",
   "threads",
   "=",
   "options",
   "[",
   ":threads",
   "]",
   "||",
   "50",
   "thread_pool",
   "=",
   "QueuedThreadPool",
   ".",
   "new",
   "thread_pool",
   ".",
   "min_threads",
   "=",
   "options",
   ".",
   "fetch",
   "(",
   ":min_threads",
   ",",
   "[",
   "threads",
   ".",
   "to_i",
   "/",
   "10",
   ",",
   "5",
   "]",
   ".",
   "<mask>",
   ")",
   "thread_pool",
   ".",
   "max_threads",
   "=",
   "[",
   "threads",
   ".",
   "to_i",
   ",",
   "10",
   "]",
   ".",
   "max",
   "@server",
   ".",
   "set_thread_pool",
   "(",
   "thread_pool",
   ")",
   "# Connector",
   "connector",
   "=",
   "SelectChannelConnector",
   ".",
   "new",
   "connector",
   ".",
   "setReuseAddress",
   "(",
   "options",
   ".",
   "fetch",
   "(",
   ":reuse_address",
   ",",
   "false",
   ")",
   ")",
   "connector",
   ".",
   "setPort",
   "(",
   "options",
   "[",
   ":port",
   "]",
   ".",
   "to_i",
   ")",
   "connector",
   ".",
   "setHost",
   "(",
   "options",
   "[",
   ":host",
   "]",
   ")",
   "max_header_size",
   "=",
   "options",
   ".",
   "fetch",
   "(",
   ":max_header_size",
   ",",
   "32768",
   ")",
   "connector",
   ".",
   "setRequestHeaderSize",
   "(",
   "max_header_size",
   ")",
   "@server",
   ".",
   "addConnector",
   "(",
   "connector",
   ")",
   "# SSL Connector",
   "configure_https",
   "(",
   "options",
   ")",
   "if",
   "options",
   "[",
   ":ssl_port",
   "]",
   "# Switch to a different user or group if we were asked to.",
   "Runner",
   ".",
   "setgid",
   "(",
   "options",
   ")",
   "if",
   "options",
   "[",
   ":group",
   "]",
   "Runner",
   ".",
   "setuid",
   "(",
   "options",
   ")",
   "if",
   "options",
   "[",
   ":user",
   "]",
   "# Optionally wrap with Mizuno::Reloader.",
   "threshold",
   "=",
   "(",
   "ENV",
   "[",
   "'RACK_ENV'",
   "]",
   "==",
   "'production'",
   "?",
   "10",
   ":",
   "1",
   ")",
   "app",
   "=",
   "Mizuno",
   "::",
   "Reloader",
   ".",
   "new",
   "(",
   "app",
   ",",
   "threshold",
   ")",
   "if",
   "options",
   "[",
   ":reloadable",
   "]",
   "# The servlet itself.",
   "rack_handler",
   "=",
   "RackHandler",
   ".",
   "new",
   "(",
   "self",
   ")",
   "rack_handler",
   ".",
   "rackup",
   "(",
   "app",
   ")",
   "# Add the context to the server and start.",
   "@server",
   ".",
   "set_handler",
   "(",
   "rack_handler",
   ")",
   "@server",
   ".",
   "start",
   "$stderr",
   ".",
   "printf",
   "(",
   "\"%s listening on %s:%s\\n\"",
   ",",
   "version",
   ",",
   "connector",
   ".",
   "host",
   ",",
   "connector",
   ".",
   "port",
   ")",
   "unless",
   "options",
   "[",
   ":quiet",
   "]",
   "# If we're embedded, we're done.",
   "return",
   "if",
   "options",
   "[",
   ":embedded",
   "]",
   "# Stop the server when we get The Signal.",
   "trap",
   "(",
   "\"SIGTERM\"",
   ")",
   "{",
   "@server",
   ".",
   "stop",
   "and",
   "exit",
   "}",
   "# Join with the server thread, so that currently open file",
   "# descriptors don't get closed by accident.",
   "# http://www.ruby-forum.com/topic/209252",
   "@server",
   ".",
   "join",
   "end"
  ]
 },
 {
  "idx": "maxmin-20",
  "nl_tokens": [
   "Convert",
   "AdManagerDateTime",
   "into",
   "a",
   "hash",
   "representation",
   "which",
   "can",
   "be",
   "consumed",
   "by",
   "the",
   "Ad",
   "Manager",
   "API",
   ".",
   "E",
   ".",
   "g",
   ".",
   "a",
   "hash",
   "that",
   "can",
   "be",
   "passed",
   "as",
   "PQL",
   "DateTime",
   "variables",
   "."
  ],
  "pl_tokens": [
   "def",
   "to_h",
   "{",
   ":date",
   "=>",
   "AdManagerApi",
   "::",
   "AdManagerDate",
   ".",
   "new",
   "(",
   "@api",
   ",",
   "@time",
   ".",
   "year",
   ",",
   "@time",
   ".",
   "month",
   ",",
   "@time",
   ".",
   "day",
   ")",
   ".",
   "to_h",
   ",",
   ":hour",
   "=>",
   "@time",
   ".",
   "hour",
   ",",
   ":minute",
   "=>",
   "@time",
   ".",
   "<mask>",
   ",",
   ":second",
   "=>",
   "@time",
   ".",
   "sec",
   ",",
   ":time_zone_id",
   "=>",
   "@timezone",
   ".",
   "identifier",
   "}",
   "end"
  ]
 },
 {
  "idx": "maxmin-21",
  "nl_tokens": [
   "Add",
   "a",
   "payment",
   "transaction",
   "to",
   "the",
   "wallet",
   "."
  ],
  "pl_tokens": [
   "def",
   "sub",
   "(",
   "amount",
   ",",
   "invoice",
   ",",
   "pvt",
   ",",
   "details",
   "=",
   "'-'",
   ",",
   "time",
   ":",
   "Time",
   ".",
   "now",
   ")",
   "raise",
   "'The amount has to be of type Amount'",
   "unless",
   "amount",
   ".",
   "is_a?",
   "(",
   "Amount",
   ")",
   "raise",
   "\"The amount can't be negative: #{amount}\"",
   "if",
   "amount",
   ".",
   "negative?",
   "raise",
   "'The pvt has to be of type Key'",
   "unless",
   "pvt",
   ".",
   "is_a?",
   "(",
   "Key",
   ")",
   "prefix",
   ",",
   "target",
   "=",
   "invoice",
   ".",
   "split",
   "(",
   "'@'",
   ")",
   "tid",
   "=",
   "<mask>",
   "+",
   "1",
   "raise",
   "'Too many transactions already, can\\'t add more'",
   "if",
   "max",
   ">",
   "0xffff",
   "txn",
   "=",
   "Txn",
   ".",
   "new",
   "(",
   "tid",
   ",",
   "time",
   ",",
   "amount",
   "*",
   "-",
   "1",
   ",",
   "prefix",
   ",",
   "Id",
   ".",
   "new",
   "(",
   "target",
   ")",
   ",",
   "details",
   ")",
   "txn",
   "=",
   "txn",
   ".",
   "signed",
   "(",
   "pvt",
   ",",
   "id",
   ")",
   "raise",
   "\"Invalid private key for the wallet #{id}\"",
   "unless",
   "Signature",
   ".",
   "new",
   "(",
   "network",
   ")",
   ".",
   "valid?",
   "(",
   "key",
   ",",
   "id",
   ",",
   "txn",
   ")",
   "add",
   "(",
   "txn",
   ")",
   "txn",
   "end"
  ]
 },
 {
  "idx": "maxmin-22",
  "nl_tokens": [
   "saves",
   "a",
   "bucket",
   "into",
   "the",
   "storage",
   "*",
   "*",
   "Args",
   "*",
   ":",
   "-",
   "+",
   "bucket",
   "+",
   "-",
   ">",
   "the",
   "Bucket",
   "to",
   "set",
   ".",
   "The",
   "<tt",
   ">",
   "name<",
   "/",
   "tt",
   ">",
   "field",
   "in",
   "the",
   "Bucket",
   "option",
   "will",
   "be",
   "used",
   "as",
   "a",
   "key",
   ".",
   "*",
   "*",
   "Returns",
   "*",
   ":",
   "-",
   "an",
   "empty",
   "result",
   "set",
   "*",
   "*",
   "Raises",
   "*",
   ":",
   "-",
   "+",
   "Mysql",
   "::",
   "Error",
   "+",
   "-",
   ">",
   "any",
   "issue",
   "with",
   "the",
   "connection",
   "to",
   "the",
   "database",
   "or",
   "the",
   "SQL",
   "statements"
  ],
  "pl_tokens": [
   "def",
   "set",
   "(",
   "bucket",
   ")",
   "@queries",
   "[",
   "'set'",
   "]",
   ".",
   "execute",
   "(",
   "bucket",
   ".",
   "name",
   ",",
   "bucket",
   ".",
   "current",
   ",",
   "bucket",
   ".",
   "<mask>",
   ",",
   "bucket",
   ".",
   "min",
   ",",
   "bucket",
   ".",
   "cost",
   ",",
   "bucket",
   ".",
   "refill_amount",
   ",",
   "bucket",
   ".",
   "refill_epoch",
   ",",
   "bucket",
   ".",
   "last_refill",
   ",",
   "bucket",
   ".",
   "total_used",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-23",
  "nl_tokens": [
   "Returns",
   "the",
   "name",
   "of",
   "the",
   "copy"
  ],
  "pl_tokens": [
   "def",
   "add",
   "(",
   "content",
   ",",
   "host",
   ",",
   "port",
   ",",
   "score",
   ",",
   "time",
   ":",
   "Time",
   ".",
   "now",
   ",",
   "master",
   ":",
   "false",
   ")",
   "raise",
   "\"Content can't be empty\"",
   "if",
   "content",
   ".",
   "empty?",
   "raise",
   "'TCP port must be of type Integer'",
   "unless",
   "port",
   ".",
   "is_a?",
   "(",
   "Integer",
   ")",
   "raise",
   "\"TCP port can't be negative: #{port}\"",
   "if",
   "port",
   ".",
   "negative?",
   "raise",
   "'Time must be of type Time'",
   "unless",
   "time",
   ".",
   "is_a?",
   "(",
   "Time",
   ")",
   "raise",
   "\"Time must be in the past: #{time}\"",
   "if",
   "time",
   ">",
   "Time",
   ".",
   "now",
   "raise",
   "'Score must be Integer'",
   "unless",
   "score",
   ".",
   "is_a?",
   "(",
   "Integer",
   ")",
   "raise",
   "\"Score can't be negative: #{score}\"",
   "if",
   "score",
   ".",
   "negative?",
   "FileUtils",
   ".",
   "mkdir_p",
   "(",
   "@dir",
   ")",
   "Futex",
   ".",
   "new",
   "(",
   "file",
   ",",
   "log",
   ":",
   "@log",
   ")",
   ".",
   "open",
   "do",
   "list",
   "=",
   "load",
   "target",
   "=",
   "list",
   ".",
   "find",
   "do",
   "|",
   "s",
   "|",
   "f",
   "=",
   "File",
   ".",
   "join",
   "(",
   "@dir",
   ",",
   "\"#{s[:name]}#{Copies::EXT}\"",
   ")",
   "digest",
   "=",
   "OpenSSL",
   "::",
   "Digest",
   "::",
   "SHA256",
   ".",
   "new",
   "(",
   "content",
   ")",
   ".",
   "hexdigest",
   "File",
   ".",
   "exist?",
   "(",
   "f",
   ")",
   "&&",
   "OpenSSL",
   "::",
   "Digest",
   "::",
   "SHA256",
   ".",
   "file",
   "(",
   "f",
   ")",
   ".",
   "hexdigest",
   "==",
   "digest",
   "end",
   "if",
   "target",
   ".",
   "nil?",
   "<mask>",
   "=",
   "DirItems",
   ".",
   "new",
   "(",
   "@dir",
   ")",
   ".",
   "fetch",
   ".",
   "select",
   "{",
   "|",
   "f",
   "|",
   "File",
   ".",
   "basename",
   "(",
   "f",
   ",",
   "Copies",
   "::",
   "EXT",
   ")",
   "=~",
   "/",
   "/",
   "}",
   ".",
   "map",
   "(",
   ":to_i",
   ")",
   ".",
   "max",
   "max",
   "=",
   "0",
   "if",
   "max",
   ".",
   "nil?",
   "name",
   "=",
   "(",
   "max",
   "+",
   "1",
   ")",
   ".",
   "to_s",
   "IO",
   ".",
   "write",
   "(",
   "File",
   ".",
   "join",
   "(",
   "@dir",
   ",",
   "\"#{name}#{Copies::EXT}\"",
   ")",
   ",",
   "content",
   ")",
   "else",
   "name",
   "=",
   "target",
   "[",
   ":name",
   "]",
   "end",
   "list",
   ".",
   "reject!",
   "{",
   "|",
   "s",
   "|",
   "s",
   "[",
   ":host",
   "]",
   "==",
   "host",
   "&&",
   "s",
   "[",
   ":port",
   "]",
   "==",
   "port",
   "}",
   "list",
   "<<",
   "{",
   "name",
   ":",
   "name",
   ",",
   "host",
   ":",
   "host",
   ",",
   "port",
   ":",
   "port",
   ",",
   "score",
   ":",
   "score",
   ",",
   "time",
   ":",
   "time",
   ",",
   "master",
   ":",
   "master",
   "}",
   "save",
   "(",
   "list",
   ")",
   "name",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-24",
  "nl_tokens": [
   "Converts",
   "Time",
   "to",
   "a",
   "hash",
   "for",
   "XML",
   "marshalling",
   "."
  ],
  "pl_tokens": [
   "def",
   "time_to_xml_hash",
   "(",
   "time",
   ")",
   "return",
   "{",
   ":hour",
   "=>",
   "time",
   ".",
   "hour",
   ",",
   ":minute",
   "=>",
   "time",
   ".",
   "<mask>",
   ",",
   ":second",
   "=>",
   "time",
   ".",
   "sec",
   ",",
   ":date",
   "=>",
   "{",
   ":year",
   "=>",
   "time",
   ".",
   "year",
   ",",
   ":month",
   "=>",
   "time",
   ".",
   "month",
   ",",
   ":day",
   "=>",
   "time",
   ".",
   "day",
   "}",
   "}",
   "end"
  ]
 },
 {
  "idx": "maxmin-25",
  "nl_tokens": [
   "Pick",
   "a",
   "Minimum",
   "Peek",
   "Range",
   "Based",
   "on",
   "minumum",
   "ready",
   "jobs",
   "on",
   "all",
   "tubes"
  ],
  "pl_tokens": [
   "def",
   "guess_min_peek_range",
   "(",
   "tubes",
   ")",
   "<mask>",
   "=",
   "0",
   "tubes",
   ".",
   "each",
   "do",
   "|",
   "tube",
   "|",
   "response",
   "=",
   "tube",
   ".",
   "peek",
   "(",
   "'ready'",
   ")",
   "if",
   "response",
   "if",
   "min",
   "==",
   "0",
   "min",
   "=",
   "response",
   ".",
   "id",
   ".",
   "to_i",
   "else",
   "min",
   "=",
   "[",
   "min",
   ",",
   "response",
   ".",
   "id",
   ".",
   "to_i",
   "]",
   ".",
   "min",
   "end",
   "end",
   "end",
   "# Add some jitter in the opposite direction of 1/4 range",
   "jitter_min",
   "=",
   "(",
   "min",
   "-",
   "(",
   "GUESS_PEEK_RANGE",
   "0.25",
   ")",
   ")",
   ".",
   "to_i",
   "[",
   "1",
   ",",
   "jitter_min",
   "]",
   ".",
   "max",
   "end"
  ]
 },
 {
  "idx": "maxmin-26",
  "nl_tokens": [
   "Returns",
   "<i",
   ">",
   "true<",
   "/",
   "i",
   ">",
   "if",
   "the",
   "item",
   "<tt",
   ">",
   "name<",
   "/",
   "tt",
   ">",
   "has",
   "enough",
   "credits",
   "<i",
   ">",
   "false<",
   "/",
   "i",
   ">",
   "otherwise",
   "It",
   "will",
   "automatically",
   "create",
   "buckets",
   "for",
   "items",
   "that",
   "don",
   "t",
   "already",
   "have",
   "buckets",
   "and",
   "it",
   "will",
   "do",
   "all",
   "the",
   "bookkeeping",
   "to",
   "deduct",
   "credits",
   "regenerate",
   "credits",
   "and",
   "track",
   "all",
   "the",
   "credits",
   "used",
   ".",
   "<tt",
   ">",
   "name<",
   "/",
   "tt",
   ">",
   "::",
   "the",
   "name",
   "of",
   "the",
   "item",
   "to",
   "track",
   "<tt",
   ">",
   "cost<",
   "/",
   "tt",
   ">",
   "::",
   "the",
   "cost",
   "of",
   "the",
   "transaction",
   "(",
   "defaults",
   "to",
   "the",
   "cost",
   "set",
   "in",
   "the",
   "Bucket",
   "if",
   "nil",
   ")"
  ],
  "pl_tokens": [
   "def",
   "use",
   "(",
   "name",
   ",",
   "cost",
   "=",
   "nil",
   ")",
   "# create a bucket using the default config if it doesn't already exist",
   "bkt",
   "=",
   "@storage",
   ".",
   "get",
   "(",
   "name",
   ")",
   "unless",
   "bkt",
   "create_bucket",
   "(",
   "name",
   ")",
   "bkt",
   "=",
   "@storage",
   ".",
   "get",
   "(",
   "name",
   ")",
   "end",
   "unless",
   "bkt",
   "raise",
   "Exception",
   ",",
   "\"Could not find bucket\"",
   "end",
   "# first credit the bucket for the time that has elapsed",
   "epochs_elapsed",
   "=",
   "(",
   "(",
   "Time",
   ".",
   "now",
   ".",
   "to_f",
   "-",
   "bkt",
   ".",
   "last_refill",
   ")",
   "/",
   "bkt",
   ".",
   "refill_epoch",
   ")",
   ".",
   "to_i",
   "bkt",
   ".",
   "current",
   "+=",
   "epochs_elapsed",
   "*",
   "bkt",
   ".",
   "refill_amount",
   "bkt",
   ".",
   "current",
   "=",
   "bkt",
   ".",
   "<mask>",
   "if",
   "bkt",
   ".",
   "current",
   ">",
   "bkt",
   ".",
   "max",
   "bkt",
   ".",
   "last_refill",
   "+=",
   "epochs_elapsed",
   "bkt",
   ".",
   "refill_epoch",
   "# now see if the bkt has enough to provide service",
   "cost",
   "||=",
   "bkt",
   ".",
   "cost",
   "# if the cost isn't provided, use the default cost",
   "raise",
   "\"Invalid cost: #{cost}\"",
   "if",
   "cost",
   "<",
   "0",
   "enough",
   "=",
   "bkt",
   ".",
   "current",
   ">=",
   "cost",
   "# true if sufficient, false if insufficient",
   "# track the total costs, but only if service will be rendered",
   "bkt",
   ".",
   "total_used",
   "+=",
   "cost",
   "if",
   "enough",
   "# now deduct the cost, capping at the minimum",
   "bkt",
   ".",
   "current",
   "-=",
   "cost",
   "bkt",
   ".",
   "current",
   "=",
   "bkt",
   ".",
   "min",
   "if",
   "bkt",
   ".",
   "current",
   "<",
   "bkt",
   ".",
   "min",
   "# now save the changes into the storage (if memory, then no changes are needed, we updated the object in memory)",
   "@storage",
   ".",
   "update",
   "(",
   "bkt",
   ")",
   "# return the verdict, did they have enough credits to pay the toll?",
   "enough",
   "end"
  ]
 },
 {
  "idx": "maxmin-27",
  "nl_tokens": [
   "parse_int"
  ],
  "pl_tokens": [
   "def",
   "parse_attributes",
   "(",
   "e",
   ")",
   "throw",
   "Exception",
   ".",
   "new",
   "(",
   "\"No name attribute found for : #{e.inspect}\"",
   ")",
   "unless",
   "name",
   "=",
   "e",
   ".",
   "attributes",
   "[",
   "\"name\"",
   "]",
   "throw",
   "Exception",
   ".",
   "new",
   "(",
   "\"Cannot parse attribute 'min' for: #{e.inspect}\"",
   ")",
   "unless",
   "<mask>",
   "=",
   "parse_int",
   "(",
   "e",
   ".",
   "attributes",
   "[",
   "\"min\"",
   "]",
   ")",
   "throw",
   "Exception",
   ".",
   "new",
   "(",
   "\"Cannot parse attribute 'max' for: #{e.inspect}\"",
   ")",
   "unless",
   "max",
   "=",
   "parse_int",
   "(",
   "e",
   ".",
   "attributes",
   "[",
   "\"max\"",
   "]",
   ")",
   "throw",
   "Exception",
   ".",
   "new",
   "(",
   "\"Cannot parse attribute 'type' for: #{e.inspect}\"",
   ")",
   "unless",
   "type",
   "=",
   "parse_type",
   "(",
   "e",
   ".",
   "attributes",
   "[",
   "\"type\"",
   "]",
   ")",
   "throw",
   "Exception",
   ".",
   "new",
   "(",
   "\"Cannot parse attribute 'required' for: #{e.inspect}\"",
   ")",
   "if",
   "(",
   "required",
   "=",
   "parse_boolean",
   "(",
   "e",
   ".",
   "attributes",
   "[",
   "\"required\"",
   "]",
   ")",
   ")",
   ".",
   "nil?",
   "validation",
   "=",
   "e",
   ".",
   "attributes",
   "[",
   "\"validation\"",
   "]",
   "min",
   "=",
   "1",
   "if",
   "required",
   "and",
   "min",
   "<",
   "1",
   "max",
   "=",
   "999999",
   "if",
   "max",
   "==",
   "0",
   "return",
   "name",
   ",",
   "min",
   ",",
   "max",
   ",",
   "type",
   ",",
   "required",
   ",",
   "validation",
   "end"
  ]
 },
 {
  "idx": "maxmin-28",
  "nl_tokens": [
   "Returns",
   "the",
   "max",
   "of",
   "x",
   "and",
   "y",
   "(",
   "i",
   ".",
   "e",
   ".",
   "x",
   ">",
   "y",
   "?",
   "x",
   ":",
   "y",
   ")",
   "element",
   "-",
   "wise",
   "."
  ],
  "pl_tokens": [
   "def",
   "<mask>",
   "(",
   "input_a",
   ",",
   "input_b",
   ",",
   "name",
   ":",
   "nil",
   ")",
   "check_allowed_types",
   "(",
   "input_a",
   ",",
   "TensorStream",
   "::",
   "Ops",
   "::",
   "NUMERIC_TYPES",
   ")",
   "check_allowed_types",
   "(",
   "input_b",
   ",",
   "TensorStream",
   "::",
   "Ops",
   "::",
   "NUMERIC_TYPES",
   ")",
   "input_a",
   ",",
   "input_b",
   "=",
   "apply_data_type_coercion",
   "(",
   "input_a",
   ",",
   "input_b",
   ")",
   "_op",
   "(",
   ":max",
   ",",
   "input_a",
   ",",
   "input_b",
   ",",
   "name",
   ":",
   "name",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-29",
  "nl_tokens": [
   "Returns",
   "an",
   "array",
   "with",
   "all",
   "the",
   "keys",
   "in",
   "the",
   "databse"
  ],
  "pl_tokens": [
   "def",
   "keys",
   "(",
   "options",
   "=",
   "{",
   "}",
   ")",
   "if",
   "@type",
   "==",
   "\"tcf\"",
   "<mask>",
   ",",
   "max",
   "=",
   "\"min\"",
   ",",
   "\"max\"",
   "l",
   "=",
   "lib",
   ".",
   "tcfdbrange2",
   "(",
   "as_fixed",
   ",",
   "min",
   ",",
   "Rufus",
   "::",
   "Tokyo",
   ".",
   "blen",
   "(",
   "min",
   ")",
   ",",
   "max",
   ",",
   "Rufus",
   "::",
   "Tokyo",
   ".",
   "blen",
   "(",
   "max",
   ")",
   ",",
   "-",
   "1",
   ")",
   "else",
   "pre",
   "=",
   "options",
   ".",
   "fetch",
   "(",
   ":prefix",
   ",",
   "\"\"",
   ")",
   "l",
   "=",
   "lib",
   ".",
   "abs_fwmkeys",
   "(",
   "@db",
   ",",
   "pre",
   ",",
   "Rufus",
   "::",
   "Tokyo",
   ".",
   "blen",
   "(",
   "pre",
   ")",
   ",",
   "options",
   "[",
   ":limit",
   "]",
   "||",
   "-",
   "1",
   ")",
   "end",
   "l",
   "=",
   "Rufus",
   "::",
   "Tokyo",
   "::",
   "List",
   ".",
   "new",
   "(",
   "l",
   ")",
   "options",
   "[",
   ":native",
   "]",
   "?",
   "l",
   ":",
   "l",
   ".",
   "release",
   "end"
  ]
 },
 {
  "idx": "maxmin-30",
  "nl_tokens": [
   "Retry",
   "the",
   "supplied",
   "block",
   "with",
   "exponential",
   "backoff",
   "."
  ],
  "pl_tokens": [
   "def",
   "with_retries",
   "(",
   "&",
   "block",
   ")",
   "base_sleep_seconds",
   "=",
   "0.5",
   "max_sleep_seconds",
   "=",
   "300",
   "# 5 minutes",
   "# Let's do this thing",
   "attempts",
   "=",
   "0",
   "begin",
   "attempts",
   "+=",
   "1",
   "return",
   "block",
   ".",
   "call",
   "(",
   "attempts",
   ")",
   "rescue",
   "Errno",
   "::",
   "ECONNREFUSED",
   ",",
   "Errno",
   "::",
   "ECONNRESET",
   ",",
   "Errno",
   "::",
   "EHOSTUNREACH",
   ",",
   "Errno",
   "::",
   "ENETDOWN",
   ",",
   "Errno",
   "::",
   "ENETUNREACH",
   ",",
   "Errno",
   "::",
   "ETIMEDOUT",
   ",",
   "Timeout",
   "::",
   "Error",
   "=>",
   "ex",
   "raise",
   "ex",
   "if",
   "attempts",
   ">=",
   "100",
   "# The sleep time is an exponentially-increasing function of base_sleep_seconds.",
   "# But, it never exceeds max_sleep_seconds.",
   "sleep_seconds",
   "=",
   "[",
   "base_sleep_seconds",
   "*",
   "(",
   "2",
   "**",
   "(",
   "attempts",
   "-",
   "1",
   ")",
   ")",
   ",",
   "max_sleep_seconds",
   "]",
   ".",
   "<mask>",
   "# Randomize to a random value in the range sleep_seconds/2 .. sleep_seconds",
   "sleep_seconds",
   "=",
   "sleep_seconds",
   "*",
   "(",
   "0.5",
   "*",
   "(",
   "1",
   "+",
   "rand",
   "(",
   ")",
   ")",
   ")",
   "# But never sleep less than base_sleep_seconds",
   "sleep_seconds",
   "=",
   "[",
   "base_sleep_seconds",
   ",",
   "sleep_seconds",
   "]",
   ".",
   "max",
   "warn",
   "\"Failed to connect: #{ex}. Retrying in #{sleep_seconds.round(1)} seconds.\"",
   "snooze",
   "(",
   "sleep_seconds",
   ")",
   "retry",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-31",
  "nl_tokens": [
   "parse_field"
  ],
  "pl_tokens": [
   "def",
   "parse_table",
   "(",
   "e",
   ")",
   "name",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "type",
   ",",
   "required",
   ",",
   "validation",
   "=",
   "parse_attributes",
   "(",
   "e",
   ")",
   "content",
   "=",
   "e",
   ".",
   "find",
   "(",
   "\"Entry\"",
   ")",
   ".",
   "inject",
   "(",
   "{",
   "}",
   ")",
   "{",
   "|",
   "t",
   ",",
   "entry",
   "|",
   "t",
   "[",
   "entry",
   ".",
   "attributes",
   "[",
   "\"name\"",
   "]",
   "]",
   "=",
   "entry",
   ".",
   "attributes",
   "[",
   "\"value\"",
   "]",
   "t",
   "}",
   "Table",
   ".",
   "new",
   "(",
   "name",
   ",",
   "content",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-32",
  "nl_tokens": [
   "parse_attributes"
  ],
  "pl_tokens": [
   "def",
   "parse_field",
   "(",
   "e",
   ")",
   "name",
   ",",
   "<mask>",
   ",",
   "max",
   ",",
   "type",
   ",",
   "required",
   ",",
   "validation",
   "=",
   "parse_attributes",
   "(",
   "e",
   ")",
   "# FIXME - for compatibility with d12 - constants are stored in attribute 'type' and are enclosed in\r",
   "# double quotes\r",
   "const_field",
   "=",
   "e",
   ".",
   "attributes",
   "[",
   "\"const\"",
   "]",
   "if",
   "(",
   "const_field",
   ")",
   "type",
   "=",
   "\"\\\"#{const_field}\\\"\"",
   "end",
   "Field",
   ".",
   "new",
   "(",
   "name",
   ",",
   "type",
   ",",
   "required",
   ",",
   "min",
   ",",
   "max",
   ",",
   "validation",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-33",
  "nl_tokens": [
   "Make",
   "sure",
   "that",
   "a",
   "watcher",
   "/",
   "stargazer",
   "exists",
   "for",
   "a",
   "repository"
  ],
  "pl_tokens": [
   "def",
   "ensure_watcher",
   "(",
   "owner",
   ",",
   "repo",
   ",",
   "watcher",
   ",",
   "date_added",
   "=",
   "nil",
   ")",
   "project",
   "=",
   "ensure_repo",
   "(",
   "owner",
   ",",
   "repo",
   ")",
   "new_watcher",
   "=",
   "ensure_user",
   "(",
   "watcher",
   ",",
   "false",
   ",",
   "false",
   ")",
   "if",
   "new_watcher",
   ".",
   "nil?",
   "or",
   "project",
   ".",
   "nil?",
   "warn",
   "\"Could not find watcher #{watcher} or repo #{owner}/#{repo}\"",
   "return",
   "end",
   "watchers",
   "=",
   "db",
   "[",
   ":watchers",
   "]",
   "watcher_exist",
   "=",
   "watchers",
   ".",
   "first",
   "(",
   ":user_id",
   "=>",
   "new_watcher",
   "[",
   ":id",
   "]",
   ",",
   ":repo_id",
   "=>",
   "project",
   "[",
   ":id",
   "]",
   ")",
   "retrieved",
   "=",
   "retrieve_watcher",
   "(",
   "owner",
   ",",
   "repo",
   ",",
   "watcher",
   ")",
   "created_at",
   "=",
   "case",
   "when",
   "(",
   "not",
   "date_added",
   ".",
   "nil?",
   ")",
   "date",
   "(",
   "date_added",
   ")",
   "when",
   "(",
   "not",
   "retrieved",
   ".",
   "nil?",
   "and",
   "not",
   "retrieved",
   "[",
   "'created_at'",
   "]",
   ".",
   "nil?",
   ")",
   "date",
   "(",
   "retrieved",
   "[",
   "'created_at'",
   "]",
   ")",
   "else",
   "<mask>",
   "(",
   "date",
   "(",
   "project",
   "[",
   ":created_at",
   "]",
   ")",
   ",",
   "date",
   "(",
   "new_watcher",
   "[",
   ":created_at",
   "]",
   ")",
   ")",
   "end",
   "if",
   "watcher_exist",
   ".",
   "nil?",
   "if",
   "retrieved",
   ".",
   "nil?",
   "warn",
   "\"Could not retrieve watcher #{watcher} of repo #{owner}/#{repo}\"",
   "return",
   "end",
   "watchers",
   ".",
   "insert",
   "(",
   ":user_id",
   "=>",
   "new_watcher",
   "[",
   ":id",
   "]",
   ",",
   ":repo_id",
   "=>",
   "project",
   "[",
   ":id",
   "]",
   ",",
   ":created_at",
   "=>",
   "date",
   "(",
   "created_at",
   ")",
   ")",
   "info",
   "\"Added watcher #{owner}/#{repo} -> #{watcher}\"",
   "else",
   "debug",
   "\"Watcher #{owner}/#{repo} -> #{watcher} exists\"",
   "end",
   "w",
   "=",
   "watchers",
   ".",
   "first",
   "(",
   ":user_id",
   "=>",
   "new_watcher",
   "[",
   ":id",
   "]",
   ",",
   ":repo_id",
   "=>",
   "project",
   "[",
   ":id",
   "]",
   ")",
   "if",
   "w",
   "[",
   ":created_at",
   "]",
   "<",
   "created_at",
   "watchers",
   ".",
   "filter",
   "(",
   ":user_id",
   "=>",
   "new_watcher",
   "[",
   ":id",
   "]",
   ",",
   ":repo_id",
   "=>",
   "project",
   "[",
   ":id",
   "]",
   ")",
   ".",
   "update",
   "(",
   ":created_at",
   "=>",
   "date",
   "(",
   "created_at",
   ")",
   ")",
   "info",
   "\"Updated watcher #{owner}/#{repo} -> #{watcher}, created_at -> #{date_added}\"",
   "end",
   "w",
   "end"
  ]
 },
 {
  "idx": "maxmin-34",
  "nl_tokens": [
   "Works",
   "just",
   "like",
   "the",
   "standard",
   "rand",
   "()",
   "function",
   ".",
   "If",
   "called",
   "with",
   "an",
   "integer",
   "argument",
   "rand",
   "()",
   "will",
   "return",
   "positive",
   "random",
   "number",
   "in",
   "the",
   "range",
   "of",
   "0",
   "to",
   "(",
   "argument",
   "-",
   "1",
   ")",
   ".",
   "If",
   "called",
   "without",
   "an",
   "integer",
   "argument",
   "rand",
   "()",
   "returns",
   "a",
   "positive",
   "floating",
   "point",
   "number",
   "less",
   "than",
   "1",
   ".",
   "If",
   "called",
   "with",
   "a",
   "Range",
   "returns",
   "a",
   "number",
   "that",
   "is",
   "in",
   "the",
   "range",
   "."
  ],
  "pl_tokens": [
   "def",
   "rand",
   "(",
   "arg",
   "=",
   "nil",
   ")",
   "if",
   "@randcnt",
   "==",
   "1",
   "isaac",
   "@randcnt",
   "=",
   "256",
   "end",
   "@randcnt",
   "-=",
   "1",
   "if",
   "arg",
   ".",
   "nil?",
   "(",
   "@randrsl",
   "[",
   "@randcnt",
   "]",
   "/",
   "536_870_912.0",
   ")",
   "%",
   "1",
   "elsif",
   "arg",
   ".",
   "is_a?",
   "(",
   "Integer",
   ")",
   "@randrsl",
   "[",
   "@randcnt",
   "]",
   "%",
   "arg",
   "elsif",
   "arg",
   ".",
   "is_a?",
   "(",
   "Range",
   ")",
   "arg",
   ".",
   "<mask>",
   "+",
   "@randrsl",
   "[",
   "@randcnt",
   "]",
   "%",
   "(",
   "arg",
   ".",
   "max",
   "-",
   "arg",
   ".",
   "min",
   ")",
   "else",
   "@randrsl",
   "[",
   "@randcnt",
   "]",
   "%",
   "arg",
   ".",
   "to_i",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-35",
  "nl_tokens": [
   "Do",
   "the",
   "actual",
   "request",
   "and",
   "return",
   "the",
   "result",
   "object"
  ],
  "pl_tokens": [
   "def",
   "api_request_raw",
   "(",
   "url",
   ",",
   "media_type",
   "=",
   "''",
   ")",
   "begin",
   "start_time",
   "=",
   "Time",
   ".",
   "now",
   "contents",
   "=",
   "do_request",
   "(",
   "url",
   ",",
   "media_type",
   ")",
   "total",
   "=",
   "Time",
   ".",
   "now",
   ".",
   "to_ms",
   "-",
   "start_time",
   ".",
   "to_ms",
   "info",
   "\"Successful request. URL: #{url}, Remaining: #{@remaining}, Total: #{total} ms\"",
   "contents",
   "rescue",
   "OpenURI",
   "::",
   "HTTPError",
   "=>",
   "e",
   "@remaining",
   "=",
   "e",
   ".",
   "io",
   ".",
   "meta",
   "[",
   "'x-ratelimit-remaining'",
   "]",
   ".",
   "to_i",
   "@reset",
   "=",
   "e",
   ".",
   "io",
   ".",
   "meta",
   "[",
   "'x-ratelimit-reset'",
   "]",
   ".",
   "to_i",
   "case",
   "e",
   ".",
   "io",
   ".",
   "status",
   "[",
   "0",
   "]",
   ".",
   "to_i",
   "# The following indicate valid Github return codes",
   "when",
   "400",
   ",",
   "# Bad request",
   "403",
   ",",
   "# Forbidden",
   "404",
   ",",
   "# Not found",
   "409",
   ",",
   "# Conflict -- returned on gets of empty repos",
   "422",
   "then",
   "# Unprocessable entity",
   "warn",
   "request_error_msg",
   "(",
   "url",
   ",",
   "e",
   ")",
   "return",
   "nil",
   "when",
   "401",
   "# Unauthorized",
   "warn",
   "request_error_msg",
   "(",
   "url",
   ",",
   "e",
   ")",
   "warn",
   "\"Unauthorised request with token: #{@token}\"",
   "raise",
   "e",
   "when",
   "451",
   "# DMCA takedown",
   "warn",
   "request_error_msg",
   "(",
   "url",
   ",",
   "e",
   ")",
   "warn",
   "\"Repo was taken down (DMCA)\"",
   "return",
   "nil",
   "else",
   "# Server error or HTTP conditions that Github does not report",
   "warn",
   "request_error_msg",
   "(",
   "url",
   ",",
   "e",
   ")",
   "raise",
   "e",
   "end",
   "rescue",
   "StandardError",
   "=>",
   "e",
   "warn",
   "error_msg",
   "(",
   "url",
   ",",
   "e",
   ")",
   "raise",
   "e",
   "ensure",
   "# The exact limit is only enforced upon the first @reset",
   "# No idea how many requests are available on this key. Sleep if we have run out",
   "if",
   "@remaining",
   "<",
   "@req_limit",
   "to_sleep",
   "=",
   "@reset",
   "-",
   "Time",
   ".",
   "now",
   ".",
   "to_i",
   "+",
   "2",
   "warn",
   "\"Request limit reached, reset in: #{to_sleep} secs\"",
   "t",
   "=",
   "Thread",
   ".",
   "new",
   "do",
   "slept",
   "=",
   "0",
   "while",
   "true",
   "do",
   "debug",
   "\"Sleeping for #{to_sleep - slept} seconds\"",
   "sleep",
   "1",
   "slept",
   "+=",
   "1",
   "end",
   "end",
   "sleep",
   "(",
   "[",
   "0",
   ",",
   "to_sleep",
   "]",
   ".",
   "<mask>",
   ")",
   "t",
   ".",
   "exit",
   "end",
   "end",
   "end"
  ]
 },
 {
  "idx": "maxmin-36",
  "nl_tokens": [
   "Make",
   "sure",
   "that",
   "a",
   "user",
   "follows",
   "another",
   "one"
  ],
  "pl_tokens": [
   "def",
   "ensure_user_follower",
   "(",
   "followed",
   ",",
   "follower",
   ",",
   "date_added",
   "=",
   "nil",
   ")",
   "follower_user",
   "=",
   "ensure_user",
   "(",
   "follower",
   ",",
   "false",
   ",",
   "false",
   ")",
   "followed_user",
   "=",
   "ensure_user",
   "(",
   "followed",
   ",",
   "false",
   ",",
   "false",
   ")",
   "if",
   "followed_user",
   ".",
   "nil?",
   "or",
   "follower_user",
   ".",
   "nil?",
   "warn",
   "\"Could not find follower #{follower} or user #{followed}\"",
   "return",
   "end",
   "followers",
   "=",
   "db",
   "[",
   ":followers",
   "]",
   "follower_id",
   "=",
   "follower_user",
   "[",
   ":id",
   "]",
   "followed_id",
   "=",
   "followed_user",
   "[",
   ":id",
   "]",
   "follower_exists",
   "=",
   "followers",
   ".",
   "first",
   "(",
   ":user_id",
   "=>",
   "followed_id",
   ",",
   ":follower_id",
   "=>",
   "follower_id",
   ")",
   "if",
   "follower_exists",
   ".",
   "nil?",
   "added",
   "=",
   "if",
   "date_added",
   ".",
   "nil?",
   "<mask>",
   "(",
   "follower_user",
   "[",
   ":created_at",
   "]",
   ",",
   "followed_user",
   "[",
   ":created_at",
   "]",
   ")",
   "else",
   "date_added",
   "end",
   "retrieved",
   "=",
   "retrieve_user_follower",
   "(",
   "followed",
   ",",
   "follower",
   ")",
   "if",
   "retrieved",
   ".",
   "nil?",
   "warn",
   "\"Could not retrieve follower #{follower} for #{followed}\"",
   "return",
   "end",
   "followers",
   ".",
   "insert",
   "(",
   ":user_id",
   "=>",
   "followed_id",
   ",",
   ":follower_id",
   "=>",
   "follower_id",
   ",",
   ":created_at",
   "=>",
   "added",
   ")",
   "info",
   "\"Added follower #{follower} to #{followed}\"",
   "else",
   "debug",
   "\"Follower #{follower} for user #{followed} exists\"",
   "end",
   "unless",
   "date_added",
   ".",
   "nil?",
   "followers",
   ".",
   "filter",
   "(",
   ":user_id",
   "=>",
   "followed_id",
   ",",
   ":follower_id",
   "=>",
   "follower_id",
   ")",
   ".",
   "update",
   "(",
   ":created_at",
   "=>",
   "date",
   "(",
   "date_added",
   ")",
   ")",
   "info",
   "\"Updated follower #{followed} -> #{follower}, created_at -> #{date(date_added)}\"",
   "end",
   "followers",
   ".",
   "first",
   "(",
   ":user_id",
   "=>",
   "followed_id",
   ",",
   ":follower_id",
   "=>",
   "follower_id",
   ")",
   "end"
  ]
 },
 {
  "idx": "maxmin-37",
  "nl_tokens": [
   "@param",
   "[",
   "Array<Symbol",
   ">",
   "Hash<Symbol",
   "=",
   ">",
   "Integer",
   ">",
   "nil",
   "]",
   "accessors"
  ],
  "pl_tokens": [
   "def",
   "accessors",
   "=",
   "(",
   "accessors",
   ")",
   "@accessor_columns",
   "=",
   "{",
   "}",
   "case",
   "accessors",
   "when",
   "nil",
   "# nothing to do",
   "when",
   "Array",
   "accessors",
   ".",
   "each_with_index",
   "do",
   "|",
   "name",
   ",",
   "idx",
   "|",
   "@accessor_columns",
   "[",
   "name",
   ".",
   "to_sym",
   "]",
   "=",
   "idx",
   "if",
   "name",
   "end",
   "when",
   "Hash",
   "@accessor_columns",
   "=",
   "Hash",
   "[",
   "accessors",
   ".",
   "map",
   "{",
   "|",
   "name",
   ",",
   "index",
   "|",
   "[",
   "name",
   ".",
   "to_sym",
   ",",
   "index",
   "]",
   "}",
   "]",
   "else",
   "raise",
   "ArgumentError",
   ",",
   "\"Expected nil, an Array or a Hash, but got #{accessors.class}\"",
   "end",
   "@accessor_columns",
   ".",
   "freeze",
   "@column_accessors",
   "=",
   "@accessor_columns",
   ".",
   "invert",
   ".",
   "freeze",
   "@accessors",
   "=",
   "@column_accessors",
   ".",
   "values_at",
   "(",
   "0",
   "..",
   "(",
   "@column_accessors",
   ".",
   "keys",
   ".",
   "<mask>",
   "||",
   "-",
   "1",
   ")",
   ")",
   ".",
   "freeze",
   "end"
  ]
 },
 {
  "idx": "maxmin-38",
  "nl_tokens": [
   ":",
   "css_extend",
   "=",
   ">",
   ":",
   "root_path",
   "=",
   ">",
   ".",
   ":",
   "scope_name",
   "=",
   ">",
   "rails_xxx",
   ":",
   "recipe_path",
   "=",
   ">",
   "icons",
   "/",
   "16x16",
   ":",
   "file_extend",
   "=",
   ">",
   ".",
   "png",
   ":",
   "spacing",
   "=",
   ">",
   "10",
   ":",
   "image_to_folder",
   "=",
   ">",
   "app",
   "/",
   "assets",
   "/",
   "images",
   ":",
   "image_source_folder",
   "=",
   ">",
   "app",
   "/",
   "assets",
   "/",
   "images",
   "/",
   "rails_xxx",
   "/",
   "sprite_sources",
   ":",
   "stylesheet_to",
   "=",
   ">",
   "app",
   "/",
   "assets",
   "/",
   "stylesheets",
   "/",
   "rails_xxx",
   "/",
   "sprite",
   "/",
   "icons",
   "/",
   "16x16",
   ".",
   "css",
   ".",
   "scss",
   ".",
   "erb",
   ":",
   "image_to_file_path",
   "=",
   ">",
   "rails_xxx",
   "/",
   "sprite",
   "/",
   "icons",
   "/",
   "16x16",
   ".",
   "png"
  ],
  "pl_tokens": [
   "def",
   "perform",
   "file_infos",
   "=",
   "[",
   "]",
   "#  puts \"image_source_folder: #{image_source_folder}\"",
   "#  puts \"image_to_file_path: #{image_to_file_path}\"",
   "#  puts \"stylesheet_to: #{stylesheet_to}\"",
   "counter",
   "=",
   "0",
   "x",
   "=",
   "0",
   "y",
   "=",
   "0",
   "max_w",
   "=",
   "0",
   "max_h",
   "=",
   "0",
   "Dir",
   ".",
   "entries",
   "(",
   "image_source_folder",
   ")",
   ".",
   "each",
   "do",
   "|",
   "file_name",
   "|",
   "if",
   "file_name",
   "!=",
   "'.'",
   "&&",
   "file_name",
   "!=",
   "'..'",
   "&&",
   "file_name",
   ".",
   "end_with?",
   "(",
   "file_extend",
   ")",
   "file_path",
   "=",
   "\"#{image_source_folder}/#{file_name}\"",
   "if",
   "::",
   "File",
   ".",
   "file?",
   "(",
   "file_path",
   ")",
   "file_name_split",
   "=",
   "file_name",
   ".",
   "split",
   "(",
   "'.'",
   ")",
   "file_name_split",
   ".",
   "pop",
   "file_purename",
   "=",
   "file_name_split",
   ".",
   "join",
   "(",
   "'.'",
   ")",
   "file_info",
   "=",
   "{",
   ":filepath",
   "=>",
   "file_path",
   ",",
   ":filename",
   "=>",
   "file_name",
   ",",
   ":file_purename",
   "=>",
   "file_purename",
   ",",
   ":idx",
   "=>",
   "counter",
   "}",
   ".",
   "merge",
   "(",
   "_library",
   ".",
   "load",
   "(",
   "file_path",
   ")",
   ")",
   "file_info",
   "[",
   ":x",
   "]",
   "=",
   "x",
   "file_info",
   "[",
   ":y",
   "]",
   "=",
   "y",
   "y",
   "+=",
   "(",
   "spacing",
   "+",
   "file_info",
   "[",
   ":height",
   "]",
   ")",
   "max_w",
   "=",
   "[",
   "max_w",
   ",",
   "file_info",
   "[",
   ":width",
   "]",
   "]",
   ".",
   "<mask>",
   "max_h",
   "=",
   "y",
   "file_infos",
   "<<",
   "file_info",
   "counter",
   "+=",
   "1",
   "end",
   "end",
   "end",
   "_composite_images",
   "(",
   ":file_infos",
   "=>",
   "file_infos",
   ",",
   ":max_w",
   "=>",
   "max_w",
   ",",
   ":max_h",
   "=>",
   "max_h",
   ")",
   "_composite_css",
   "(",
   "file_infos",
   ",",
   ":max_w",
   "=>",
   "max_w",
   ",",
   ":max_h",
   "=>",
   "max_h",
   ")",
   "end"
  ]
 }
]