[
 {
  "idx": "maxmin-1",
  "nl_tokens": [
   "Test",
   "whether",
   "find",
   "can",
   "be",
   "found",
   "at",
   "position",
   "startPos",
   "in",
   "the",
   "string",
   "src",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "startsWith",
   "(",
   "char",
   "[",
   "]",
   "src",
   ",",
   "char",
   "[",
   "]",
   "find",
   ",",
   "int",
   "startAt",
   ")",
   "{",
   "int",
   "startPos",
   "=",
   "startAt",
   ";",
   "boolean",
   "result",
   "=",
   "true",
   ";",
   "// Check ranges",
   "if",
   "(",
   "src",
   ".",
   "length",
   "<",
   "startPos",
   "+",
   "find",
   ".",
   "length",
   ")",
   "{",
   "result",
   "=",
   "false",
   ";",
   "}",
   "else",
   "{",
   "final",
   "int",
   "<mask>",
   "=",
   "find",
   ".",
   "length",
   ";",
   "for",
   "(",
   "int",
   "a",
   "=",
   "0",
   ";",
   "a",
   "<",
   "max",
   "&&",
   "result",
   ";",
   "a",
   "++",
   ")",
   "{",
   "if",
   "(",
   "src",
   "[",
   "startPos",
   "]",
   "!=",
   "find",
   "[",
   "a",
   "]",
   ")",
   "{",
   "result",
   "=",
   "false",
   ";",
   "}",
   "startPos",
   "++",
   ";",
   "}",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-2",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "@",
   "Nullable",
   "public",
   "QueryToken",
   "getQueryTokenIfValid",
   "(",
   ")",
   "{",
   "if",
   "(",
   "mTokenizer",
   "==",
   "null",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "// Use current text to determine the start and end index of the token",
   "MentionsEditable",
   "text",
   "=",
   "getMentionsText",
   "(",
   ")",
   ";",
   "int",
   "cursor",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getSelectionStart",
   "(",
   ")",
   ",",
   "0",
   ")",
   ";",
   "int",
   "start",
   "=",
   "mTokenizer",
   ".",
   "findTokenStart",
   "(",
   "text",
   ",",
   "cursor",
   ")",
   ";",
   "int",
   "end",
   "=",
   "mTokenizer",
   ".",
   "findTokenEnd",
   "(",
   "text",
   ",",
   "cursor",
   ")",
   ";",
   "if",
   "(",
   "!",
   "mTokenizer",
   ".",
   "isValidMention",
   "(",
   "text",
   ",",
   "start",
   ",",
   "end",
   ")",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "String",
   "tokenString",
   "=",
   "text",
   ".",
   "subSequence",
   "(",
   "start",
   ",",
   "end",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "char",
   "firstChar",
   "=",
   "tokenString",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   ";",
   "boolean",
   "isExplicit",
   "=",
   "mTokenizer",
   ".",
   "isExplicitChar",
   "(",
   "tokenString",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   ")",
   ";",
   "return",
   "(",
   "isExplicit",
   "?",
   "new",
   "QueryToken",
   "(",
   "tokenString",
   ",",
   "firstChar",
   ")",
   ":",
   "new",
   "QueryToken",
   "(",
   "tokenString",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-3",
  "nl_tokens": [
   "customize",
   "cache"
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "customizeCache",
   "(",
   "Context",
   "context",
   ",",
   "int",
   "memoryCacheSizeInKB",
   ",",
   "String",
   "defaultDiskCachePath",
   ",",
   "int",
   "defaultDiskCacheSizeInKB",
   ",",
   "String",
   "stableDiskCachePath",
   ",",
   "int",
   "stableDiskCacheSizeInKB",
   ")",
   "{",
   "// init memory cache first",
   "if",
   "(",
   "memoryCacheSizeInKB",
   ">",
   "0",
   ")",
   "{",
   "int",
   "maxCacheSizeInKB",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "0.5f",
   "*",
   "Runtime",
   ".",
   "getRuntime",
   "(",
   ")",
   ".",
   "maxMemory",
   "(",
   ")",
   "/",
   "1024",
   ")",
   ";",
   "memoryCacheSizeInKB",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "memoryCacheSizeInKB",
   ",",
   "maxCacheSizeInKB",
   ")",
   ";",
   "sDefaultImageMemoryCache",
   "=",
   "new",
   "DefaultMemoryCache",
   "(",
   "memoryCacheSizeInKB",
   ")",
   ";",
   "}",
   "if",
   "(",
   "defaultDiskCacheSizeInKB",
   ">",
   "0",
   "&&",
   "!",
   "TextUtils",
   ".",
   "isEmpty",
   "(",
   "defaultDiskCachePath",
   ")",
   ")",
   "{",
   "ImageDiskCacheProvider",
   "imageFileProvider",
   "=",
   "getImageFileProvider",
   "(",
   "context",
   ",",
   "defaultDiskCachePath",
   ",",
   "defaultDiskCacheSizeInKB",
   ",",
   "DEFAULT_FILE_CACHE_DIR",
   ")",
   ";",
   "if",
   "(",
   "imageFileProvider",
   "!=",
   "null",
   ")",
   "{",
   "sDefaultImageProvider",
   "=",
   "new",
   "ImageProvider",
   "(",
   "context",
   ",",
   "getDefaultImageMemoryCache",
   "(",
   ")",
   ",",
   "imageFileProvider",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "stableDiskCacheSizeInKB",
   ">",
   "0",
   "&&",
   "!",
   "TextUtils",
   ".",
   "isEmpty",
   "(",
   "stableDiskCachePath",
   ")",
   ")",
   "{",
   "ImageDiskCacheProvider",
   "imageFileProvider",
   "=",
   "getImageFileProvider",
   "(",
   "context",
   ",",
   "stableDiskCachePath",
   ",",
   "stableDiskCacheSizeInKB",
   ",",
   "STABLE_FILE_CACHE_DIR",
   ")",
   ";",
   "if",
   "(",
   "imageFileProvider",
   "!=",
   "null",
   ")",
   "{",
   "sStableImageProvider",
   "=",
   "new",
   "ImageProvider",
   "(",
   "context",
   ",",
   "getDefaultImageMemoryCache",
   "(",
   ")",
   ",",
   "imageFileProvider",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-4",
  "nl_tokens": [
   "\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u5728\u73af\u4e2d\u4f5c\u6807\u8bb0\uff0c\u4ee5\u4fbf",
   "dump"
  ],
  "pl_tokens": [
   "private",
   "MarkMode",
   "mark",
   "(",
   "byte",
   "[",
   "]",
   "bs",
   ",",
   "int",
   "[",
   "]",
   "fails",
   ")",
   "throws",
   "IOException",
   "{",
   "RingItem",
   "ri",
   "=",
   "item",
   ";",
   "int",
   "re",
   ";",
   "while",
   "(",
   "(",
   "re",
   "=",
   "ri",
   ".",
   "mark",
   "(",
   "bs",
   ",",
   "fails",
   ")",
   ")",
   ">=",
   "0",
   "&&",
   "ri",
   ".",
   "isDone4Mark",
   "(",
   ")",
   ")",
   "{",
   "// \u7ed3\u5c3e\u5339\u914d bs \u7684\u5f00\u59cb\uff0c\u770b\u4e0d\u51fa\u8fd9\u662f\u5426\u662f\u4e00\u4e2a\u7ed3\u675f\uff0c\u6240\u4ee5\u6682\u65f6\u5f53\u4f5c\r",
   "// \u7ed3\u675f\u6807\u8bb0\uff0c\u5e76\u770b\u770b\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u4e0d\u662f\u7ed3\u675f\uff0c\u5219\u9700\u8981\u5c06 r \u7f6e\u5230 max\r",
   "if",
   "(",
   "re",
   ">",
   "0",
   ")",
   "{",
   "// \u4e0b\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u52a0\u8f7d\uff0c\u52a0\u8f7d\u4e00\u4e0b\r",
   "if",
   "(",
   "!",
   "ri",
   ".",
   "next",
   ".",
   "isLoaded",
   ")",
   "{",
   "ri",
   ".",
   "next",
   ".",
   "load",
   "(",
   "ins",
   ")",
   ";",
   "readed",
   "+=",
   "ri",
   ".",
   "next",
   ".",
   "<mask>",
   ";",
   "}",
   "// \u5982\u679c\u5f53\u524d\u7684\u73af\u8282\u70b9\u7684 next\u6307\u5411\u6700\u521d\u8282\u70b9\uff0c\u8bf4\u660e\u6574\u4e2a\u5f53\u524d\u7684\u73af\u5df2\u7ecf\u88ab\u8bfb\u6ee1\u4e86\uff0c\r",
   "// \u56e0\u6b64\u6240\u4ee5\u4e0d\u80fd\u5224\u65ad\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u4e0d\u662f\u8fb9\u754c\r",
   "// \u56e0\u6b64\u505a\u4e00\u4e0b\u8bb0\u5f55\uff0c\u4e0b\u6b21\u52a0\u8f7d\u65f6\uff0c\u672c\u8282\u70b9\u5e94\u8be5\u4e3a\u5934\u90e8\r",
   "else",
   "if",
   "(",
   "ri",
   ".",
   "next",
   "==",
   "this",
   ".",
   "item",
   ")",
   "{",
   "ri",
   ".",
   "nextmark",
   "=",
   "ri",
   ".",
   "r",
   ";",
   "return",
   "MarkMode",
   ".",
   "NOT_FOUND",
   ";",
   "}",
   "// \u5339\u914d\u5934\u90e8\r",
   "if",
   "(",
   "ri",
   ".",
   "next",
   ".",
   "matchHeadingWithRemain",
   "(",
   "bs",
   ",",
   "re",
   ")",
   ")",
   "{",
   "return",
   "MarkMode",
   ".",
   "FOUND",
   ";",
   "}",
   "// \u6ca1\u6709\u5339\u914d\u4e0a\uff0c\u91cd\u7f6e\u5f53\u524d\u8282\u70b9\r",
   "else",
   "{",
   "ri",
   ".",
   "r",
   "=",
   "ri",
   ".",
   "max",
   ";",
   "ri",
   ".",
   "nextmark",
   "=",
   "ri",
   ".",
   "max",
   ";",
   "}",
   "}",
   "if",
   "(",
   "ri",
   ".",
   "isStreamEnd",
   ")",
   "break",
   ";",
   "// \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\r",
   "ri",
   "=",
   "ri",
   ".",
   "next",
   ";",
   "// \u4fdd\u8bc1\u8be5\u8282\u70b9\u5df2\u7ecf\u52a0\u8f7d\u4e86\r",
   "if",
   "(",
   "!",
   "ri",
   ".",
   "isLoaded",
   ")",
   "{",
   "ri",
   ".",
   "load",
   "(",
   "ins",
   ")",
   ";",
   "readed",
   "+=",
   "ri",
   ".",
   "max",
   ";",
   "}",
   "// \u5982\u679c\u5df2\u7ecf\u5faa\u73af\u4e86\u4e00\u5708\uff0c\u9000\u51fa\r",
   "if",
   "(",
   "ri",
   "==",
   "item",
   ")",
   "break",
   ";",
   "}",
   "if",
   "(",
   "re",
   "==",
   "-",
   "1",
   ")",
   "return",
   "MarkMode",
   ".",
   "FOUND",
   ";",
   "return",
   "ri",
   ".",
   "isStreamEnd",
   "?",
   "MarkMode",
   ".",
   "STREAM_END",
   ":",
   "MarkMode",
   ".",
   "NOT_FOUND",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-5",
  "nl_tokens": [
   "Paste",
   "clipboard",
   "content",
   "between",
   "min",
   "and",
   "max",
   "positions",
   ".",
   "This",
   "method",
   "is",
   "supported",
   "for",
   "all",
   "the",
   "api",
   "above",
   "the",
   "10",
   ".",
   "If",
   "clipboard",
   "content",
   "contain",
   "the",
   "MentionSpan",
   "set",
   "the",
   "span",
   "in",
   "copied",
   "text",
   "."
  ],
  "pl_tokens": [
   "@",
   "TargetApi",
   "(",
   "Build",
   ".",
   "VERSION_CODES",
   ".",
   "HONEYCOMB",
   ")",
   "private",
   "void",
   "pasteHoneycombImpl",
   "(",
   "@",
   "IntRange",
   "(",
   "from",
   "=",
   "0",
   ")",
   "int",
   "<mask>",
   ",",
   "@",
   "IntRange",
   "(",
   "from",
   "=",
   "0",
   ")",
   "int",
   "max",
   ")",
   "{",
   "ClipboardManager",
   "clipboard",
   "=",
   "(",
   "ClipboardManager",
   ")",
   "getContext",
   "(",
   ")",
   ".",
   "getSystemService",
   "(",
   "Context",
   ".",
   "CLIPBOARD_SERVICE",
   ")",
   ";",
   "ClipData",
   "clip",
   "=",
   "clipboard",
   ".",
   "getPrimaryClip",
   "(",
   ")",
   ";",
   "if",
   "(",
   "clip",
   "!=",
   "null",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "clip",
   ".",
   "getItemCount",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ClipData",
   ".",
   "Item",
   "item",
   "=",
   "clip",
   ".",
   "getItemAt",
   "(",
   "i",
   ")",
   ";",
   "String",
   "selectedText",
   "=",
   "item",
   ".",
   "coerceToText",
   "(",
   "getContext",
   "(",
   ")",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "MentionsEditable",
   "text",
   "=",
   "getMentionsText",
   "(",
   ")",
   ";",
   "MentionSpan",
   "[",
   "]",
   "spans",
   "=",
   "text",
   ".",
   "getSpans",
   "(",
   "min",
   ",",
   "max",
   ",",
   "MentionSpan",
   ".",
   "class",
   ")",
   ";",
   "/*\n                 * We need to remove the span between min and max. This is required because in\n                 * {@link SpannableStringBuilder#replace(int, int, CharSequence)} existing spans within\n                 * the Editable that entirely cover the replaced range are retained, but any that\n                 * were strictly within the range that was replaced are removed. In our case the existing\n                 * spans are retained if the selection entirely covers the span. So, we just remove\n                 * the existing span and replace the new text with that span.\n                 */",
   "for",
   "(",
   "MentionSpan",
   "span",
   ":",
   "spans",
   ")",
   "{",
   "if",
   "(",
   "text",
   ".",
   "getSpanEnd",
   "(",
   "span",
   ")",
   "==",
   "min",
   ")",
   "{",
   "// We do not want to remove the span, when we want to paste anything just next",
   "// to the existing span. In this case \"text.getSpanEnd(span)\" will be equal",
   "// to min.",
   "continue",
   ";",
   "}",
   "text",
   ".",
   "removeSpan",
   "(",
   "span",
   ")",
   ";",
   "}",
   "Intent",
   "intent",
   "=",
   "item",
   ".",
   "getIntent",
   "(",
   ")",
   ";",
   "// Just set the plain text if we do not have mentions data in the intent/bundle",
   "if",
   "(",
   "intent",
   "==",
   "null",
   ")",
   "{",
   "text",
   ".",
   "replace",
   "(",
   "min",
   ",",
   "max",
   ",",
   "selectedText",
   ")",
   ";",
   "continue",
   ";",
   "}",
   "Bundle",
   "bundle",
   "=",
   "intent",
   ".",
   "getExtras",
   "(",
   ")",
   ";",
   "if",
   "(",
   "bundle",
   "==",
   "null",
   ")",
   "{",
   "text",
   ".",
   "replace",
   "(",
   "min",
   ",",
   "max",
   ",",
   "selectedText",
   ")",
   ";",
   "continue",
   ";",
   "}",
   "bundle",
   ".",
   "setClassLoader",
   "(",
   "getContext",
   "(",
   ")",
   ".",
   "getClassLoader",
   "(",
   ")",
   ")",
   ";",
   "int",
   "[",
   "]",
   "spanStart",
   "=",
   "bundle",
   ".",
   "getIntArray",
   "(",
   "KEY_MENTION_SPAN_STARTS",
   ")",
   ";",
   "Parcelable",
   "[",
   "]",
   "parcelables",
   "=",
   "bundle",
   ".",
   "getParcelableArray",
   "(",
   "KEY_MENTION_SPANS",
   ")",
   ";",
   "if",
   "(",
   "parcelables",
   "==",
   "null",
   "||",
   "parcelables",
   ".",
   "length",
   "<=",
   "0",
   "||",
   "spanStart",
   "==",
   "null",
   "||",
   "spanStart",
   ".",
   "length",
   "<=",
   "0",
   ")",
   "{",
   "text",
   ".",
   "replace",
   "(",
   "min",
   ",",
   "max",
   ",",
   "selectedText",
   ")",
   ";",
   "continue",
   ";",
   "}",
   "// Set the MentionSpan in text.",
   "SpannableStringBuilder",
   "s",
   "=",
   "new",
   "SpannableStringBuilder",
   "(",
   "selectedText",
   ")",
   ";",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "parcelables",
   ".",
   "length",
   ";",
   "j",
   "++",
   ")",
   "{",
   "MentionSpan",
   "mentionSpan",
   "=",
   "(",
   "MentionSpan",
   ")",
   "parcelables",
   "[",
   "j",
   "]",
   ";",
   "s",
   ".",
   "setSpan",
   "(",
   "mentionSpan",
   ",",
   "spanStart",
   "[",
   "j",
   "]",
   ",",
   "spanStart",
   "[",
   "j",
   "]",
   "+",
   "mentionSpan",
   ".",
   "getDisplayString",
   "(",
   ")",
   ".",
   "length",
   "(",
   ")",
   ",",
   "Spanned",
   ".",
   "SPAN_EXCLUSIVE_EXCLUSIVE",
   ")",
   ";",
   "}",
   "text",
   ".",
   "replace",
   "(",
   "min",
   ",",
   "max",
   ",",
   "s",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-6",
  "nl_tokens": [
   "Returns",
   "the",
   "index",
   "of",
   "the",
   "beginning",
   "of",
   "the",
   "first",
   "span",
   "after",
   "the",
   "cursor",
   "or",
   "length",
   "of",
   "the",
   "text",
   "if",
   "there",
   "are",
   "no",
   "spans",
   "after",
   "the",
   "cursor",
   "."
  ],
  "pl_tokens": [
   "protected",
   "int",
   "getSearchEndIndex",
   "(",
   "final",
   "@",
   "NonNull",
   "Spanned",
   "text",
   ",",
   "int",
   "cursor",
   ")",
   "{",
   "if",
   "(",
   "cursor",
   "<",
   "0",
   "||",
   "cursor",
   ">",
   "text",
   ".",
   "length",
   "(",
   ")",
   ")",
   "{",
   "cursor",
   "=",
   "0",
   ";",
   "}",
   "// Get index of the start of the first span after the cursor (or text.length() if does not exist)",
   "MentionSpan",
   "[",
   "]",
   "spans",
   "=",
   "text",
   ".",
   "getSpans",
   "(",
   "0",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "MentionSpan",
   ".",
   "class",
   ")",
   ";",
   "int",
   "closestAfterCursor",
   "=",
   "text",
   ".",
   "length",
   "(",
   ")",
   ";",
   "for",
   "(",
   "MentionSpan",
   "span",
   ":",
   "spans",
   ")",
   "{",
   "int",
   "start",
   "=",
   "text",
   ".",
   "getSpanStart",
   "(",
   "span",
   ")",
   ";",
   "if",
   "(",
   "start",
   "<",
   "closestAfterCursor",
   "&&",
   "start",
   ">=",
   "cursor",
   ")",
   "{",
   "closestAfterCursor",
   "=",
   "start",
   ";",
   "}",
   "}",
   "// Get the index of the end of the line",
   "String",
   "textString",
   "=",
   "text",
   ".",
   "toString",
   "(",
   ")",
   ".",
   "substring",
   "(",
   "cursor",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "int",
   "lineEndIndex",
   "=",
   "text",
   ".",
   "length",
   "(",
   ")",
   ";",
   "if",
   "(",
   "textString",
   ".",
   "contains",
   "(",
   "mConfig",
   ".",
   "LINE_SEPARATOR",
   ")",
   ")",
   "{",
   "lineEndIndex",
   "=",
   "cursor",
   "+",
   "textString",
   ".",
   "indexOf",
   "(",
   "mConfig",
   ".",
   "LINE_SEPARATOR",
   ")",
   ";",
   "}",
   "// Return whichever is closest after the cursor",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "closestAfterCursor",
   ",",
   "lineEndIndex",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-7",
  "nl_tokens": [
   "\u672c\u53f7\u6bd4\u8f83",
   "(",
   "\u4f8b\u59821",
   ".",
   "10",
   ".",
   "0\u4e0e1",
   ".",
   "2",
   ".",
   "0\u7248\u672c\u6bd4\u8f83",
   ")",
   "\u8fd4\u56de\u662f\u5426\u6709\u65b0\u7248\u672c"
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "hasNewVersion",
   "(",
   "String",
   "oldVersion",
   ",",
   "String",
   "newVersion",
   ")",
   "{",
   "//\u7248\u672c\u53f7\u6709\u4e00\u4e2a\u4e0d\u6b63\u5e38\u5c31\u8fd4\u56defalse",
   "if",
   "(",
   "CBStringUtil",
   ".",
   "isEmptyOrNull",
   "(",
   "oldVersion",
   ")",
   "||",
   "CBStringUtil",
   ".",
   "isEmptyOrNull",
   "(",
   "newVersion",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "boolean",
   "res",
   "=",
   "false",
   ";",
   "String",
   "[",
   "]",
   "oldVersionSnippet",
   "=",
   "oldVersion",
   ".",
   "split",
   "(",
   "\"\\\\.\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "newVersionSnippet",
   "=",
   "newVersion",
   ".",
   "split",
   "(",
   "\"\\\\.\"",
   ")",
   ";",
   "int",
   "maxComparePosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "oldVersionSnippet",
   ".",
   "length",
   ",",
   "newVersionSnippet",
   ".",
   "length",
   ")",
   ";",
   "int",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   ";",
   "i",
   "<",
   "maxComparePosition",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "newNumber",
   "=",
   "Integer",
   ".",
   "parseInt",
   "(",
   "newVersionSnippet",
   "[",
   "i",
   "]",
   ")",
   ";",
   "int",
   "oldNumber",
   "=",
   "Integer",
   ".",
   "parseInt",
   "(",
   "oldVersionSnippet",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "newNumber",
   "==",
   "oldNumber",
   ")",
   "{",
   "continue",
   ";",
   "}",
   "if",
   "(",
   "newNumber",
   ">",
   "oldNumber",
   ")",
   "{",
   "res",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "if",
   "(",
   "newNumber",
   "<",
   "oldNumber",
   ")",
   "{",
   "res",
   "=",
   "false",
   ";",
   "break",
   ";",
   "}",
   "}",
   "//\u524d\u9762\u7684\u90fd\u76f8\u7b49,\u6bd4\u8f83\u957f\u5ea6",
   "if",
   "(",
   "i",
   "==",
   "maxComparePosition",
   ")",
   "{",
   "res",
   "=",
   "newVersionSnippet",
   ".",
   "length",
   ">",
   "oldVersionSnippet",
   ".",
   "length",
   ";",
   "}",
   "return",
   "res",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-8",
  "nl_tokens": [
   "Zrevrange",
   "by",
   "score",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrevrangeByScore",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "min",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZREVRANGEBYSCORE",
   ",",
   "key",
   ",",
   "max",
   ",",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-9",
  "nl_tokens": [
   "Calculates",
   "the",
   "maximum",
   "timeGradient",
   "of",
   "all",
   "Terminations",
   ".",
   "Not",
   "supported",
   "timeGradients",
   "(",
   "-",
   "1",
   ".",
   "0",
   ")",
   "are",
   "ignored",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "double",
   "calculatePhaseTimeGradient",
   "(",
   "AbstractPhaseScope",
   "phaseScope",
   ")",
   "{",
   "double",
   "timeGradient",
   "=",
   "0.0",
   ";",
   "for",
   "(",
   "Termination",
   "termination",
   ":",
   "terminationList",
   ")",
   "{",
   "double",
   "nextTimeGradient",
   "=",
   "termination",
   ".",
   "calculatePhaseTimeGradient",
   "(",
   "phaseScope",
   ")",
   ";",
   "if",
   "(",
   "nextTimeGradient",
   ">=",
   "0.0",
   ")",
   "{",
   "timeGradient",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "timeGradient",
   ",",
   "nextTimeGradient",
   ")",
   ";",
   "}",
   "}",
   "return",
   "timeGradient",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-10",
  "nl_tokens": [
   "Ensures",
   "that",
   "the",
   "next",
   "sizeBytes",
   "are",
   "all",
   "the",
   "initial",
   "value",
   "we",
   "read",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "checkConsistentReadAndIncrementPosition",
   "(",
   "Class",
   "<",
   "?",
   ">",
   "clazz",
   ",",
   "FakeEncodedItem",
   "item",
   ")",
   "{",
   "int",
   "endPosition",
   "=",
   "dataPosition",
   "+",
   "item",
   ".",
   "sizeBytes",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "dataPosition",
   ";",
   "i",
   "<",
   "endPosition",
   ";",
   "i",
   "++",
   ")",
   "{",
   "FakeEncodedItem",
   "foundItemItem",
   "=",
   "i",
   "<",
   "dataSize",
   "?",
   "data",
   "[",
   "i",
   "]",
   ":",
   "null",
   ";",
   "if",
   "(",
   "foundItemItem",
   "!=",
   "item",
   ")",
   "{",
   "throw",
   "new",
   "UnreliableBehaviorError",
   "(",
   "clazz",
   ",",
   "dataPosition",
   ",",
   "item",
   ",",
   "String",
   ".",
   "format",
   "(",
   "Locale",
   ".",
   "US",
   ",",
   "\"but [%s] interrupts it at position %d\"",
   ",",
   "foundItemItem",
   "==",
   "null",
   "?",
   "\"uninitialized data or the end of the buffer\"",
   ":",
   "foundItemItem",
   ".",
   "value",
   ",",
   "i",
   ")",
   ")",
   ";",
   "}",
   "}",
   "dataPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dataSize",
   ",",
   "dataPosition",
   "+",
   "item",
   ".",
   "sizeBytes",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-11",
  "nl_tokens": [
   "Replaces",
   "any",
   "{",
   "@link",
   "com",
   ".",
   "linkedin",
   ".",
   "android",
   ".",
   "spyglass",
   ".",
   "ui",
   ".",
   "MentionsEditText",
   ".",
   "PlaceholderSpan",
   "}",
   "within",
   "the",
   "given",
   "text",
   "with",
   "the",
   "{",
   "@link",
   "MentionSpan",
   "}",
   "it",
   "contains",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "replacePlaceholdersWithCorrespondingMentionSpans",
   "(",
   "@",
   "NonNull",
   "Editable",
   "text",
   ")",
   "{",
   "PlaceholderSpan",
   "[",
   "]",
   "tempSpans",
   "=",
   "text",
   ".",
   "getSpans",
   "(",
   "0",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "PlaceholderSpan",
   ".",
   "class",
   ")",
   ";",
   "for",
   "(",
   "PlaceholderSpan",
   "span",
   ":",
   "tempSpans",
   ")",
   "{",
   "int",
   "spanStart",
   "=",
   "text",
   ".",
   "getSpanStart",
   "(",
   "span",
   ")",
   ";",
   "String",
   "mentionDisplayString",
   "=",
   "span",
   ".",
   "holder",
   ".",
   "getDisplayString",
   "(",
   ")",
   ";",
   "int",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "spanStart",
   "+",
   "mentionDisplayString",
   ".",
   "length",
   "(",
   ")",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "text",
   ".",
   "replace",
   "(",
   "spanStart",
   ",",
   "end",
   ",",
   "mentionDisplayString",
   ")",
   ";",
   "text",
   ".",
   "setSpan",
   "(",
   "span",
   ".",
   "holder",
   ",",
   "spanStart",
   ",",
   "spanStart",
   "+",
   "mentionDisplayString",
   ".",
   "length",
   "(",
   ")",
   ",",
   "Spanned",
   ".",
   "SPAN_EXCLUSIVE_EXCLUSIVE",
   ")",
   ";",
   "text",
   ".",
   "removeSpan",
   "(",
   "span",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-12",
  "nl_tokens": [
   "A",
   "handler",
   "for",
   "failed",
   "banner",
   "ads"
  ],
  "pl_tokens": [
   "private",
   "synchronized",
   "void",
   "onFailedToLoad",
   "(",
   "AdView",
   "adView",
   ",",
   "int",
   "errorCode",
   ")",
   "{",
   "Log",
   ".",
   "i",
   "(",
   "TAG",
   ",",
   "\"onAdFailedToLoad \"",
   "+",
   "errorCode",
   ")",
   ";",
   "mFetchFailCount",
   "++",
   ";",
   "mNoOfFetchedAds",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "mNoOfFetchedAds",
   "-",
   "1",
   ",",
   "0",
   ")",
   ";",
   "//Since Fetch Ad is only called once without retries",
   "//hide ad row / rollback its count if still not added to list",
   "mPrefetchedAds",
   ".",
   "remove",
   "(",
   "adView",
   ")",
   ";",
   "onAdFailed",
   "(",
   "mNoOfFetchedAds",
   "-",
   "1",
   ",",
   "errorCode",
   ",",
   "adView",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-13",
  "nl_tokens": [
   "Returns",
   "the",
   "delay",
   "in",
   "milliseconds",
   "after",
   "which",
   "animation",
   "for",
   "View",
   "with",
   "position",
   "mLastAnimatedPosition",
   "+",
   "1",
   "should",
   "start",
   "."
  ],
  "pl_tokens": [
   "@",
   "SuppressLint",
   "(",
   "\"NewApi\"",
   ")",
   "private",
   "int",
   "calculateAnimationDelay",
   "(",
   "final",
   "int",
   "position",
   ")",
   "{",
   "int",
   "delay",
   ";",
   "int",
   "lastVisiblePosition",
   "=",
   "mListViewWrapper",
   ".",
   "getLastVisiblePosition",
   "(",
   ")",
   ";",
   "int",
   "firstVisiblePosition",
   "=",
   "mListViewWrapper",
   ".",
   "getFirstVisiblePosition",
   "(",
   ")",
   ";",
   "int",
   "numberOfItemsOnScreen",
   "=",
   "lastVisiblePosition",
   "-",
   "firstVisiblePosition",
   ";",
   "int",
   "numberOfAnimatedItems",
   "=",
   "position",
   "-",
   "1",
   "-",
   "mFirstAnimatedPosition",
   ";",
   "if",
   "(",
   "numberOfItemsOnScreen",
   "+",
   "1",
   "<",
   "numberOfAnimatedItems",
   ")",
   "{",
   "delay",
   "=",
   "mAnimationDelayMillis",
   ";",
   "if",
   "(",
   "mListViewWrapper",
   ".",
   "getListView",
   "(",
   ")",
   "instanceof",
   "GridView",
   "&&",
   "Build",
   ".",
   "VERSION",
   ".",
   "SDK_INT",
   ">=",
   "Build",
   ".",
   "VERSION_CODES",
   ".",
   "HONEYCOMB",
   ")",
   "{",
   "int",
   "numColumns",
   "=",
   "(",
   "(",
   "GridView",
   ")",
   "mListViewWrapper",
   ".",
   "getListView",
   "(",
   ")",
   ")",
   ".",
   "getNumColumns",
   "(",
   ")",
   ";",
   "delay",
   "+=",
   "mAnimationDelayMillis",
   "*",
   "(",
   "position",
   "%",
   "numColumns",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "int",
   "delaySinceStart",
   "=",
   "(",
   "position",
   "-",
   "mFirstAnimatedPosition",
   ")",
   "*",
   "mAnimationDelayMillis",
   ";",
   "delay",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "(",
   "int",
   ")",
   "(",
   "-",
   "SystemClock",
   ".",
   "uptimeMillis",
   "(",
   ")",
   "+",
   "mAnimationStartMillis",
   "+",
   "mInitialDelayMillis",
   "+",
   "delaySinceStart",
   ")",
   ")",
   ";",
   "}",
   "return",
   "delay",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-14",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "Set",
   "<",
   "Tuple",
   ">",
   "zRevRangeByScoreWithScores",
   "(",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "try",
   "{",
   "if",
   "(",
   "isPipelined",
   "(",
   ")",
   ")",
   "{",
   "pipeline",
   "(",
   "new",
   "JedisResult",
   "(",
   "pipeline",
   ".",
   "zrevrangeByScoreWithScores",
   "(",
   "key",
   ",",
   "max",
   ",",
   "min",
   ")",
   ",",
   "JedisConverters",
   ".",
   "tupleSetToTupleSet",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "JedisConverters",
   ".",
   "toTupleSet",
   "(",
   "client",
   ".",
   "zrevrangeByScoreWithScores",
   "(",
   "key",
   ",",
   "max",
   ",",
   "min",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "ex",
   ")",
   "{",
   "throw",
   "convertException",
   "(",
   "ex",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-15",
  "nl_tokens": [
   "\u521d\u59cb\u5316\u6587\u4ef6\u6c60\uff0c\u5373\u4f7f\u521d\u59cb\u5316\u5931\u8d25",
   "\u4e5f\u7ee7\u7eed\u6267\u884c"
  ],
  "pl_tokens": [
   "private",
   "void",
   "initFilePool",
   "(",
   ")",
   "{",
   "String",
   "home",
   "=",
   "config",
   ".",
   "get",
   "(",
   "\"pool-home\"",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "try",
   "{",
   "home",
   "=",
   "Disks",
   ".",
   "normalize",
   "(",
   "home",
   ")",
   ";",
   "if",
   "(",
   "home",
   "==",
   "null",
   ")",
   "home",
   "=",
   "config",
   ".",
   "get",
   "(",
   "\"pool-home\"",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "long",
   "<mask>",
   "=",
   "config",
   ".",
   "containsKey",
   "(",
   "\"pool-max\"",
   ")",
   "?",
   "(",
   "(",
   "Number",
   ")",
   "config",
   ".",
   "get",
   "(",
   "\"pool-max\"",
   ")",
   ")",
   ".",
   "longValue",
   "(",
   ")",
   ":",
   "2000",
   ";",
   "if",
   "(",
   "home",
   ".",
   "contains",
   "(",
   "\"${app.home}\"",
   ")",
   ")",
   "{",
   "try",
   "{",
   "// \u8fd9\u91cc\u5f15\u7528\u4e86Mvcs\u7c7b, \u4e0d\u592a\u8212\u670d,\u4f46\u5e94\u8be5\u8fd8\u662f\u6709\u76ca\u5904\u7684",
   "home",
   "=",
   "home",
   ".",
   "replace",
   "(",
   "\"${app.home}\"",
   ",",
   "Mvcs",
   ".",
   "getServletContext",
   "(",
   ")",
   ".",
   "getRealPath",
   "(",
   "\"/\"",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Throwable",
   "e",
   ")",
   "{",
   "}",
   "}",
   "try",
   "{",
   "pool",
   "=",
   "NutFilePool",
   ".",
   "getOrCreatePool",
   "(",
   "home",
   ",",
   "max",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "// \u770b\u770b\u662f\u4e0d\u662fMvc\u73af\u5883,\u5c1d\u8bd5\u5728WebContent\u4e0b\u521b\u5efa",
   "if",
   "(",
   "!",
   "home",
   ".",
   "startsWith",
   "(",
   "\"~/\"",
   ")",
   "||",
   "Mvcs",
   ".",
   "getServletContext",
   "(",
   ")",
   "==",
   "null",
   ")",
   "throw",
   "e",
   ";",
   "try",
   "{",
   "String",
   "tmp",
   "=",
   "Mvcs",
   ".",
   "getServletContext",
   "(",
   ")",
   ".",
   "getRealPath",
   "(",
   "\"/\"",
   ")",
   "+",
   "home",
   ".",
   "substring",
   "(",
   "2",
   ")",
   ";",
   "pool",
   "=",
   "NutFilePool",
   ".",
   "getOrCreatePool",
   "(",
   "tmp",
   ",",
   "max",
   ")",
   ";",
   "log",
   ".",
   "info",
   "(",
   "\"had created filepool under webapp root path\"",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e1",
   ")",
   "{",
   "throw",
   "e",
   ";",
   "// \u629b\u51fa\u539f\u672c\u7684\u5f02\u5e38\u597d\u4e86,\u54ce...",
   "}",
   "}",
   "pool",
   "=",
   "new",
   "SynchronizedFilePool",
   "(",
   "pool",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Throwable",
   "e",
   ")",
   "{",
   "if",
   "(",
   "log",
   ".",
   "isWarnEnabled",
   "(",
   ")",
   ")",
   "log",
   ".",
   "warnf",
   "(",
   "\"NutDao FilePool create fail!! Blob and Clob Support is DISABLE!! Home=\"",
   "+",
   "home",
   ",",
   "e",
   ")",
   ";",
   "}",
   "isInit",
   "=",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-16",
  "nl_tokens": [
   "Return",
   "an",
   "integer",
   "in",
   "the",
   "(",
   "inclusive",
   ")",
   "range",
   "[",
   "min",
   "max",
   "]",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "number",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "int",
   "value",
   "=",
   "rng",
   ".",
   "nextInt",
   "(",
   "max",
   "-",
   "min",
   "+",
   "1",
   ")",
   ";",
   "value",
   "+=",
   "min",
   ";",
   "return",
   "value",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-17",
  "nl_tokens": [
   "Returns",
   "a",
   "new",
   "string",
   "where",
   "any",
   "special",
   "characters",
   "in",
   "the",
   "source",
   "string",
   "have",
   "been",
   "encoded",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "escapeForXML",
   "(",
   "String",
   "source",
   ")",
   "{",
   "Args",
   ".",
   "nullNotPermitted",
   "(",
   "source",
   ",",
   "\"source\"",
   ")",
   ";",
   "StringBuilder",
   "sb",
   "=",
   "new",
   "StringBuilder",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "source",
   ".",
   "length",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "char",
   "c",
   "=",
   "source",
   ".",
   "charAt",
   "(",
   "i",
   ")",
   ";",
   "switch",
   "(",
   "c",
   ")",
   "{",
   "case",
   "'",
   "'",
   ":",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\"&lt;\"",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "'",
   "'",
   ":",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\"&gt;\"",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "'",
   "'",
   ":",
   "{",
   "String",
   "next",
   "=",
   "source",
   ".",
   "substring",
   "(",
   "i",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "i",
   "+",
   "6",
   ",",
   "source",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "next",
   ".",
   "startsWith",
   "(",
   "\"&lt;\"",
   ")",
   "||",
   "next",
   ".",
   "startsWith",
   "(",
   "\"&gt;\"",
   ")",
   "||",
   "next",
   ".",
   "startsWith",
   "(",
   "\"&amp;\"",
   ")",
   "||",
   "next",
   ".",
   "startsWith",
   "(",
   "\"&apos;\"",
   ")",
   "||",
   "next",
   ".",
   "startsWith",
   "(",
   "\"&quot;\"",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "c",
   ")",
   ";",
   "}",
   "else",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\"&amp;\"",
   ")",
   ";",
   "}",
   "break",
   ";",
   "}",
   "case",
   "'",
   "'",
   ":",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\"&apos;\"",
   ")",
   ";",
   "break",
   ";",
   "}",
   "case",
   "'",
   "'",
   ":",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\"&quot;\"",
   ")",
   ";",
   "break",
   ";",
   "}",
   "default",
   ":",
   "sb",
   ".",
   "append",
   "(",
   "c",
   ")",
   ";",
   "}",
   "}",
   "return",
   "sb",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-18",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "public",
   "Long",
   "zcount",
   "(",
   "final",
   "String",
   "key",
   ",",
   "final",
   "double",
   "<mask>",
   ",",
   "final",
   "double",
   "max",
   ")",
   "{",
   "return",
   "this",
   ".",
   "execute",
   "(",
   "new",
   "RedisClusterCallback",
   "<",
   "Long",
   ">",
   "(",
   ")",
   "{",
   "public",
   "Long",
   "doInRedisCluster",
   "(",
   "RedisCluster",
   "redisCluster",
   ")",
   "{",
   "return",
   "redisCluster",
   ".",
   "zcount",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "public",
   "int",
   "getPartitionNumber",
   "(",
   ")",
   "{",
   "return",
   "GatewayPartitionNumber",
   ".",
   "get",
   "(",
   "key",
   ")",
   ";",
   "}",
   "public",
   "AffinityState",
   "getState",
   "(",
   ")",
   "{",
   "return",
   "AffinityState",
   ".",
   "READ",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-19",
  "nl_tokens": [
   "Read",
   "the",
   "specified",
   "number",
   "of",
   "bytes",
   "into",
   "an",
   "array",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "int",
   "read",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "b",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "read",
   "=",
   "0",
   ";",
   "while",
   "(",
   "len",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "encoderOut",
   ".",
   "position",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "encoderOut",
   ".",
   "flip",
   "(",
   ")",
   ";",
   "int",
   "c",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "encoderOut",
   ".",
   "remaining",
   "(",
   ")",
   ",",
   "len",
   ")",
   ";",
   "encoderOut",
   ".",
   "get",
   "(",
   "b",
   ",",
   "off",
   ",",
   "c",
   ")",
   ";",
   "off",
   "+=",
   "c",
   ";",
   "len",
   "-=",
   "c",
   ";",
   "read",
   "+=",
   "c",
   ";",
   "encoderOut",
   ".",
   "compact",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "!",
   "endOfInput",
   "&&",
   "(",
   "lastCoderResult",
   "==",
   "null",
   "||",
   "lastCoderResult",
   ".",
   "isUnderflow",
   "(",
   ")",
   ")",
   ")",
   "{",
   "encoderIn",
   ".",
   "compact",
   "(",
   ")",
   ";",
   "int",
   "position",
   "=",
   "encoderIn",
   ".",
   "position",
   "(",
   ")",
   ";",
   "// We don't use Reader#read(CharBuffer) here because it is more efficient",
   "// to write directly to the underlying char array (the default implementation",
   "// copies data to a temporary char array).",
   "int",
   "c",
   "=",
   "reader",
   ".",
   "read",
   "(",
   "encoderIn",
   ".",
   "array",
   "(",
   ")",
   ",",
   "position",
   ",",
   "encoderIn",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "c",
   "==",
   "-",
   "1",
   ")",
   "{",
   "endOfInput",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "encoderIn",
   ".",
   "position",
   "(",
   "position",
   "+",
   "c",
   ")",
   ";",
   "}",
   "encoderIn",
   ".",
   "flip",
   "(",
   ")",
   ";",
   "}",
   "lastCoderResult",
   "=",
   "encoder",
   ".",
   "encode",
   "(",
   "encoderIn",
   ",",
   "encoderOut",
   ",",
   "endOfInput",
   ")",
   ";",
   "if",
   "(",
   "endOfInput",
   "&&",
   "encoderOut",
   ".",
   "position",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "}",
   "return",
   "read",
   "==",
   "0",
   "&&",
   "endOfInput",
   "?",
   "-",
   "1",
   ":",
   "read",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-20",
  "nl_tokens": [
   "Override",
   "the",
   "min",
   "/",
   "max",
   "methods",
   "to",
   "hoist",
   "delegation",
   "outside",
   "loops"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "<",
   "E",
   "extends",
   "Comparable",
   ">",
   "E",
   "<mask>",
   "(",
   "E",
   "a",
   ",",
   "E",
   "b",
   ")",
   "{",
   "return",
   "NaturalOrdering",
   ".",
   "INSTANCE",
   ".",
   "max",
   "(",
   "a",
   ",",
   "b",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-21",
  "nl_tokens": [
   "Determines",
   "whether",
   "the",
   "operation",
   "should",
   "be",
   "retried",
   "and",
   "specifies",
   "the",
   "interval",
   "until",
   "the",
   "next",
   "retry",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "RetryInfo",
   "evaluate",
   "(",
   "RetryContext",
   "retryContext",
   ",",
   "OperationContext",
   "operationContext",
   ")",
   "{",
   "boolean",
   "secondaryNotFound",
   "=",
   "this",
   ".",
   "evaluateLastAttemptAndSecondaryNotFound",
   "(",
   "retryContext",
   ")",
   ";",
   "if",
   "(",
   "retryContext",
   ".",
   "getCurrentRetryCount",
   "(",
   ")",
   "<",
   "this",
   ".",
   "maximumAttempts",
   ")",
   "{",
   "// If this method is called after a successful response, it means",
   "// we failed during the response body download. So, we should not",
   "// check for success codes here.",
   "int",
   "statusCode",
   "=",
   "retryContext",
   ".",
   "getLastRequestResult",
   "(",
   ")",
   ".",
   "getStatusCode",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "!",
   "secondaryNotFound",
   "&&",
   "statusCode",
   ">=",
   "300",
   "&&",
   "statusCode",
   "<",
   "500",
   "&&",
   "statusCode",
   "!=",
   "408",
   ")",
   "||",
   "statusCode",
   "==",
   "HttpURLConnection",
   ".",
   "HTTP_NOT_IMPLEMENTED",
   "||",
   "statusCode",
   "==",
   "HttpURLConnection",
   ".",
   "HTTP_VERSION",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "final",
   "long",
   "retryInterval",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "deltaBackoffIntervalInMs",
   ",",
   "RetryPolicy",
   ".",
   "DEFAULT_MAX_BACKOFF",
   ")",
   ",",
   "RetryPolicy",
   ".",
   "DEFAULT_MIN_BACKOFF",
   ")",
   ";",
   "return",
   "this",
   ".",
   "evaluateRetryInfo",
   "(",
   "retryContext",
   ",",
   "secondaryNotFound",
   ",",
   "retryInterval",
   ")",
   ";",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-22",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "public",
   "Set",
   "<",
   "String",
   ">",
   "zrangeByScore",
   "(",
   "final",
   "String",
   "key",
   ",",
   "final",
   "double",
   "<mask>",
   ",",
   "final",
   "double",
   "max",
   ")",
   "{",
   "return",
   "this",
   ".",
   "execute",
   "(",
   "new",
   "RedisClusterCallback",
   "<",
   "Set",
   "<",
   "String",
   ">",
   ">",
   "(",
   ")",
   "{",
   "public",
   "Set",
   "<",
   "String",
   ">",
   "doInRedisCluster",
   "(",
   "RedisCluster",
   "redisCluster",
   ")",
   "{",
   "return",
   "redisCluster",
   ".",
   "zrangeByScore",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "public",
   "int",
   "getPartitionNumber",
   "(",
   ")",
   "{",
   "return",
   "GatewayPartitionNumber",
   ".",
   "get",
   "(",
   "key",
   ")",
   ";",
   "}",
   "public",
   "AffinityState",
   "getState",
   "(",
   ")",
   "{",
   "return",
   "AffinityState",
   ".",
   "READ",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-23",
  "nl_tokens": [
   "Gets",
   "the",
   "logical",
   "session",
   "timeout",
   "in",
   "minutes",
   "or",
   "null",
   "if",
   "at",
   "least",
   "one",
   "of",
   "the",
   "known",
   "servers",
   "does",
   "not",
   "support",
   "logical",
   "sessions",
   "."
  ],
  "pl_tokens": [
   "public",
   "Integer",
   "getLogicalSessionTimeoutMinutes",
   "(",
   ")",
   "{",
   "Integer",
   "retVal",
   "=",
   "null",
   ";",
   "for",
   "(",
   "ServerDescription",
   "cur",
   ":",
   "getServersByPredicate",
   "(",
   "new",
   "Predicate",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "boolean",
   "apply",
   "(",
   "final",
   "ServerDescription",
   "serverDescription",
   ")",
   "{",
   "return",
   "serverDescription",
   ".",
   "isPrimary",
   "(",
   ")",
   "||",
   "serverDescription",
   ".",
   "isSecondary",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ")",
   "{",
   "if",
   "(",
   "cur",
   ".",
   "getLogicalSessionTimeoutMinutes",
   "(",
   ")",
   "==",
   "null",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "if",
   "(",
   "retVal",
   "==",
   "null",
   ")",
   "{",
   "retVal",
   "=",
   "cur",
   ".",
   "getLogicalSessionTimeoutMinutes",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "retVal",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "retVal",
   ",",
   "cur",
   ".",
   "getLogicalSessionTimeoutMinutes",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "return",
   "retVal",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-24",
  "nl_tokens": [
   "\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\uff0c\u6700\u957f\u4e32\u7684\u957f\u5ea6"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "maxLength",
   "(",
   "Collection",
   "<",
   "?",
   "extends",
   "CharSequence",
   ">",
   "coll",
   ")",
   "{",
   "int",
   "re",
   "=",
   "0",
   ";",
   "if",
   "(",
   "null",
   "!=",
   "coll",
   ")",
   "for",
   "(",
   "CharSequence",
   "s",
   ":",
   "coll",
   ")",
   "if",
   "(",
   "null",
   "!=",
   "s",
   ")",
   "re",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "re",
   ",",
   "s",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "return",
   "re",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-25",
  "nl_tokens": [
   "Translates",
   "the",
   "source",
   "position",
   "to",
   "an",
   "actual",
   "position",
   "within",
   "the",
   "adapter",
   "wrapper",
   ".",
   "@param",
   "fetchedAdsCount",
   "the",
   "count",
   "of",
   "completely",
   "fetched",
   "ads",
   "that",
   "are",
   "ready",
   "to",
   "be",
   "published",
   "@param",
   "sourcePos",
   "the",
   "source",
   "index"
  ],
  "pl_tokens": [
   "public",
   "int",
   "translateSourceIndexToWrapperPosition",
   "(",
   "int",
   "sourcePos",
   ",",
   "int",
   "fetchedAdsCount",
   ")",
   "{",
   "int",
   "adSpacesCount",
   "=",
   "0",
   ";",
   "if",
   "(",
   "sourcePos",
   ">=",
   "getOffsetValue",
   "(",
   ")",
   "&&",
   "getNoOfDataBetweenAds",
   "(",
   ")",
   ">",
   "0",
   ")",
   "adSpacesCount",
   "=",
   "(",
   "sourcePos",
   "-",
   "getOffsetValue",
   "(",
   ")",
   ")",
   "/",
   "getNoOfDataBetweenAds",
   "(",
   ")",
   "+",
   "1",
   ";",
   "adSpacesCount",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "fetchedAdsCount",
   ",",
   "adSpacesCount",
   ")",
   ";",
   "adSpacesCount",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "adSpacesCount",
   ")",
   ";",
   "adSpacesCount",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "adSpacesCount",
   ",",
   "getLimitOfAds",
   "(",
   ")",
   ")",
   ";",
   "int",
   "wrappedPosition",
   "=",
   "sourcePos",
   "+",
   "adSpacesCount",
   ";",
   "return",
   "wrappedPosition",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-26",
  "nl_tokens": [
   "Returns",
   "the",
   "value",
   "nearest",
   "to",
   "{",
   "@code",
   "value",
   "}",
   "which",
   "is",
   "within",
   "the",
   "closed",
   "range",
   "{",
   "@code",
   "[",
   "min",
   "..",
   "max",
   "]",
   "}",
   "."
  ],
  "pl_tokens": [
   "@",
   "Beta",
   "public",
   "static",
   "float",
   "constrainToRange",
   "(",
   "float",
   "value",
   ",",
   "float",
   "<mask>",
   ",",
   "float",
   "max",
   ")",
   "{",
   "checkArgument",
   "(",
   "min",
   "<=",
   "max",
   ",",
   "\"min (%s) must be less than or equal to max (%s)\"",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "Math",
   ".",
   "max",
   "(",
   "value",
   ",",
   "min",
   ")",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-27",
  "nl_tokens": [
   "Return",
   "an",
   "integer",
   "in",
   "the",
   "(",
   "inclusive",
   ")",
   "range",
   "[",
   "minimum",
   "maximum",
   "]",
   "excluding",
   "exclusivedVal",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "numberExcluding",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ",",
   "int",
   "exclusivedVal",
   ")",
   "{",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "if",
   "(",
   "min",
   ">",
   "exclusivedVal",
   "||",
   "exclusivedVal",
   ">",
   "max",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "int",
   "value",
   "=",
   "number",
   "(",
   "min",
   ",",
   "max",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "value",
   ">=",
   "exclusivedVal",
   ")",
   "value",
   "++",
   ";",
   "return",
   "value",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-28",
  "nl_tokens": [
   "make",
   "scaling",
   "activity",
   "happen",
   "after",
   "a",
   "fixed",
   "delayed",
   "time",
   "for",
   "the",
   "first",
   "time",
   "encountered",
   "(",
   "e",
   ".",
   "g",
   ".",
   "server",
   "start",
   ")"
  ],
  "pl_tokens": [
   "private",
   "long",
   "getInitialCoolDown",
   "(",
   "long",
   "coolDownSecs",
   ")",
   "{",
   "long",
   "initialCoolDownInPastSecs",
   "=",
   "120",
   ";",
   "initialCoolDownInPastSecs",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "coolDownSecs",
   ",",
   "initialCoolDownInPastSecs",
   ")",
   ";",
   "return",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "-",
   "coolDownSecs",
   "*",
   "1000",
   "+",
   "initialCoolDownInPastSecs",
   "*",
   "1000",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-29",
  "nl_tokens": [
   "\u83b7\u53d6\u4e00\u4e2a\u5236\u5b9a\u8303\u56f4\u5185\u7684\u989c\u8272"
  ],
  "pl_tokens": [
   "public",
   "static",
   "Color",
   "randomColor",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "if",
   "(",
   "min",
   ">",
   "255",
   ")",
   "{",
   "min",
   "=",
   "255",
   ";",
   "}",
   "if",
   "(",
   "min",
   "<",
   "0",
   ")",
   "{",
   "min",
   "=",
   "0",
   ";",
   "}",
   "if",
   "(",
   "max",
   ">",
   "255",
   ")",
   "{",
   "max",
   "=",
   "255",
   ";",
   "}",
   "if",
   "(",
   "max",
   "<",
   "0",
   ")",
   "{",
   "max",
   "=",
   "0",
   ";",
   "}",
   "return",
   "new",
   "Color",
   "(",
   "min",
   "+",
   "R",
   ".",
   "random",
   "(",
   "0",
   ",",
   "max",
   "-",
   "min",
   ")",
   ",",
   "min",
   "+",
   "R",
   ".",
   "random",
   "(",
   "0",
   ",",
   "max",
   "-",
   "min",
   ")",
   ",",
   "min",
   "+",
   "R",
   ".",
   "random",
   "(",
   "0",
   ",",
   "max",
   "-",
   "min",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-30",
  "nl_tokens": [
   "/",
   "*",
   "package"
  ],
  "pl_tokens": [
   "VirtualMachineLease",
   "getClonedMaxResourcesLease",
   "(",
   "Collection",
   "<",
   "AssignableVirtualMachine",
   ">",
   "avms",
   ")",
   "{",
   "double",
   "cpus",
   "=",
   "0.0",
   ";",
   "double",
   "mem",
   "=",
   "0.0",
   ";",
   "double",
   "disk",
   "=",
   "0.0",
   ";",
   "double",
   "network",
   "=",
   "0.0",
   ";",
   "double",
   "ports",
   "=",
   "0.0",
   ";",
   "final",
   "Map",
   "<",
   "String",
   ",",
   "Double",
   ">",
   "scalars",
   "=",
   "new",
   "HashMap",
   "<>",
   "(",
   ")",
   ";",
   "final",
   "Map",
   "<",
   "String",
   ",",
   "Protos",
   ".",
   "Attribute",
   ">",
   "attributeMap",
   "=",
   "new",
   "HashMap",
   "<>",
   "(",
   ")",
   ";",
   "if",
   "(",
   "avms",
   "!=",
   "null",
   ")",
   "{",
   "for",
   "(",
   "AssignableVirtualMachine",
   "avm",
   ":",
   "avms",
   ")",
   "{",
   "Map",
   "<",
   "VMResource",
   ",",
   "Double",
   ">",
   "maxResources",
   "=",
   "avm",
   ".",
   "getMaxResources",
   "(",
   ")",
   ";",
   "Double",
   "value",
   "=",
   "maxResources",
   ".",
   "get",
   "(",
   "VMResource",
   ".",
   "CPU",
   ")",
   ";",
   "if",
   "(",
   "value",
   "!=",
   "null",
   ")",
   "{",
   "cpus",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "cpus",
   ",",
   "value",
   ")",
   ";",
   "}",
   "value",
   "=",
   "maxResources",
   ".",
   "get",
   "(",
   "VMResource",
   ".",
   "Memory",
   ")",
   ";",
   "if",
   "(",
   "value",
   "!=",
   "null",
   ")",
   "{",
   "mem",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "mem",
   ",",
   "value",
   ")",
   ";",
   "}",
   "value",
   "=",
   "maxResources",
   ".",
   "get",
   "(",
   "VMResource",
   ".",
   "Disk",
   ")",
   ";",
   "if",
   "(",
   "value",
   "!=",
   "null",
   ")",
   "{",
   "disk",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "disk",
   ",",
   "value",
   ")",
   ";",
   "}",
   "value",
   "=",
   "maxResources",
   ".",
   "get",
   "(",
   "VMResource",
   ".",
   "Network",
   ")",
   ";",
   "if",
   "(",
   "value",
   "!=",
   "null",
   ")",
   "{",
   "network",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "network",
   ",",
   "value",
   ")",
   ";",
   "}",
   "value",
   "=",
   "maxResources",
   ".",
   "get",
   "(",
   "VMResource",
   ".",
   "Ports",
   ")",
   ";",
   "if",
   "(",
   "value",
   "!=",
   "null",
   ")",
   "{",
   "ports",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ports",
   ",",
   "value",
   ")",
   ";",
   "}",
   "final",
   "Map",
   "<",
   "String",
   ",",
   "Double",
   ">",
   "maxScalars",
   "=",
   "avm",
   ".",
   "getMaxScalars",
   "(",
   ")",
   ";",
   "if",
   "(",
   "maxScalars",
   "!=",
   "null",
   "&&",
   "!",
   "maxScalars",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "for",
   "(",
   "String",
   "k",
   ":",
   "maxScalars",
   ".",
   "keySet",
   "(",
   ")",
   ")",
   "scalars",
   ".",
   "compute",
   "(",
   "k",
   ",",
   "(",
   "s",
   ",",
   "oldVal",
   ")",
   "->",
   "{",
   "if",
   "(",
   "oldVal",
   "==",
   "null",
   ")",
   "{",
   "oldVal",
   "=",
   "0.0",
   ";",
   "}",
   "Double",
   "aDouble",
   "=",
   "maxScalars",
   ".",
   "get",
   "(",
   "k",
   ")",
   ";",
   "if",
   "(",
   "aDouble",
   "==",
   "null",
   ")",
   "{",
   "aDouble",
   "=",
   "0.0",
   ";",
   "}",
   "return",
   "oldVal",
   "+",
   "aDouble",
   ";",
   "}",
   ")",
   ";",
   "}",
   "final",
   "Map",
   "<",
   "String",
   ",",
   "Protos",
   ".",
   "Attribute",
   ">",
   "attrs",
   "=",
   "avm",
   ".",
   "getCurrTotalLease",
   "(",
   ")",
   ".",
   "getAttributeMap",
   "(",
   ")",
   ";",
   "if",
   "(",
   "attrs",
   "!=",
   "null",
   "&&",
   "!",
   "attrs",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "for",
   "(",
   "Map",
   ".",
   "Entry",
   "<",
   "String",
   ",",
   "Protos",
   ".",
   "Attribute",
   ">",
   "e",
   ":",
   "attrs",
   ".",
   "entrySet",
   "(",
   ")",
   ")",
   "attributeMap",
   ".",
   "putIfAbsent",
   "(",
   "e",
   ".",
   "getKey",
   "(",
   ")",
   ",",
   "e",
   ".",
   "getValue",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "final",
   "double",
   "fcpus",
   "=",
   "cpus",
   ";",
   "final",
   "double",
   "fmem",
   "=",
   "mem",
   ";",
   "final",
   "double",
   "fdisk",
   "=",
   "disk",
   ";",
   "final",
   "double",
   "fnetwork",
   "=",
   "network",
   ";",
   "final",
   "List",
   "<",
   "VirtualMachineLease",
   ".",
   "Range",
   ">",
   "fports",
   "=",
   "Collections",
   ".",
   "singletonList",
   "(",
   "new",
   "VirtualMachineLease",
   ".",
   "Range",
   "(",
   "100",
   ",",
   "100",
   "+",
   "(",
   "int",
   ")",
   "ports",
   ")",
   ")",
   ";",
   "return",
   "new",
   "VirtualMachineLease",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "String",
   "getId",
   "(",
   ")",
   "{",
   "return",
   "\"NoID\"",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "long",
   "getOfferedTime",
   "(",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "String",
   "hostname",
   "(",
   ")",
   "{",
   "return",
   "\"NoHostname\"",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "String",
   "getVMID",
   "(",
   ")",
   "{",
   "return",
   "\"NoID\"",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "cpuCores",
   "(",
   ")",
   "{",
   "return",
   "fcpus",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "memoryMB",
   "(",
   ")",
   "{",
   "return",
   "fmem",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "networkMbps",
   "(",
   ")",
   "{",
   "return",
   "fnetwork",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "diskMB",
   "(",
   ")",
   "{",
   "return",
   "fdisk",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "List",
   "<",
   "Range",
   ">",
   "portRanges",
   "(",
   ")",
   "{",
   "return",
   "fports",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Protos",
   ".",
   "Offer",
   "getOffer",
   "(",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Map",
   "<",
   "String",
   ",",
   "Protos",
   ".",
   "Attribute",
   ">",
   "getAttributeMap",
   "(",
   ")",
   "{",
   "return",
   "attributeMap",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Double",
   "getScalarValue",
   "(",
   "String",
   "name",
   ")",
   "{",
   "return",
   "scalars",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Map",
   "<",
   "String",
   ",",
   "Double",
   ">",
   "getScalarValues",
   "(",
   ")",
   "{",
   "return",
   "scalars",
   ";",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-31",
  "nl_tokens": [
   "Checks",
   "whether",
   "two",
   "bitsets",
   "intersect",
   "."
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "intersects",
   "(",
   "BitSet",
   "bs",
   ")",
   "{",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "data",
   ".",
   "limit",
   "(",
   ")",
   ",",
   "bs",
   ".",
   "data",
   ".",
   "length",
   ")",
   ";",
   "++",
   "k",
   ")",
   "{",
   "if",
   "(",
   "(",
   "this",
   ".",
   "data",
   ".",
   "get",
   "(",
   "k",
   ")",
   "&",
   "bs",
   ".",
   "data",
   "[",
   "k",
   "]",
   ")",
   "!=",
   "0",
   ")",
   "return",
   "true",
   ";",
   "}",
   "return",
   "false",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-32",
  "nl_tokens": [
   "Determines",
   "whether",
   "the",
   "operation",
   "should",
   "be",
   "retried",
   "and",
   "specifies",
   "the",
   "interval",
   "until",
   "the",
   "next",
   "retry",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "RetryInfo",
   "evaluate",
   "(",
   "RetryContext",
   "retryContext",
   ",",
   "OperationContext",
   "operationContext",
   ")",
   "{",
   "boolean",
   "secondaryNotFound",
   "=",
   "this",
   ".",
   "evaluateLastAttemptAndSecondaryNotFound",
   "(",
   "retryContext",
   ")",
   ";",
   "if",
   "(",
   "retryContext",
   ".",
   "getCurrentRetryCount",
   "(",
   ")",
   "<",
   "this",
   ".",
   "maximumAttempts",
   ")",
   "{",
   "// If this method is called after a successful response, it means",
   "// we failed during the response body download. So, we should not",
   "// check for success codes here. ",
   "int",
   "statusCode",
   "=",
   "retryContext",
   ".",
   "getLastRequestResult",
   "(",
   ")",
   ".",
   "getStatusCode",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "!",
   "secondaryNotFound",
   "&&",
   "statusCode",
   ">=",
   "300",
   "&&",
   "statusCode",
   "<",
   "500",
   "&&",
   "statusCode",
   "!=",
   "408",
   ")",
   "||",
   "statusCode",
   "==",
   "HttpURLConnection",
   ".",
   "HTTP_NOT_IMPLEMENTED",
   "||",
   "statusCode",
   "==",
   "HttpURLConnection",
   ".",
   "HTTP_VERSION",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "// Calculate backoff Interval between 80% and 120% of the desired",
   "// backoff, multiply by 2^n -1 for exponential",
   "double",
   "incrementDelta",
   "=",
   "(",
   "Math",
   ".",
   "pow",
   "(",
   "2",
   ",",
   "retryContext",
   ".",
   "getCurrentRetryCount",
   "(",
   ")",
   ")",
   "-",
   "1",
   ")",
   ";",
   "final",
   "int",
   "boundedRandDelta",
   "=",
   "(",
   "int",
   ")",
   "(",
   "this",
   ".",
   "deltaBackoffIntervalInMs",
   "*",
   "0.8",
   ")",
   "+",
   "this",
   ".",
   "randRef",
   ".",
   "nextInt",
   "(",
   "(",
   "int",
   ")",
   "(",
   "this",
   ".",
   "deltaBackoffIntervalInMs",
   "*",
   "1.2",
   ")",
   "-",
   "(",
   "int",
   ")",
   "(",
   "this",
   ".",
   "deltaBackoffIntervalInMs",
   "*",
   "0.8",
   ")",
   ")",
   ";",
   "incrementDelta",
   "*=",
   "boundedRandDelta",
   ";",
   "final",
   "long",
   "retryInterval",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "resolvedMinBackoff",
   "+",
   "incrementDelta",
   ",",
   "this",
   ".",
   "resolvedMaxBackoff",
   ")",
   ")",
   ";",
   "return",
   "this",
   ".",
   "evaluateRetryInfo",
   "(",
   "retryContext",
   ",",
   "secondaryNotFound",
   ",",
   "retryInterval",
   ")",
   ";",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-33",
  "nl_tokens": [
   "Write",
   "out",
   "up",
   "to",
   "max",
   "words",
   "(",
   "negated",
   ")",
   "returns",
   "how",
   "many",
   "were",
   "written"
  ],
  "pl_tokens": [
   "public",
   "int",
   "dischargeNegated",
   "(",
   "BitmapStorage32",
   "container",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "int",
   "index",
   "=",
   "0",
   ";",
   "while",
   "(",
   "(",
   "index",
   "<",
   "max",
   ")",
   "&&",
   "(",
   "size",
   "(",
   ")",
   ">",
   "0",
   ")",
   ")",
   "{",
   "// first run",
   "int",
   "pl",
   "=",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "index",
   "+",
   "pl",
   ">",
   "max",
   ")",
   "{",
   "pl",
   "=",
   "max",
   "-",
   "index",
   ";",
   "}",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "!",
   "getRunningBit",
   "(",
   ")",
   ",",
   "pl",
   ")",
   ";",
   "index",
   "+=",
   "pl",
   ";",
   "int",
   "pd",
   "=",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "if",
   "(",
   "pd",
   "+",
   "index",
   ">",
   "max",
   ")",
   "{",
   "pd",
   "=",
   "max",
   "-",
   "index",
   ";",
   "}",
   "writeNegatedLiteralWords",
   "(",
   "pd",
   ",",
   "container",
   ")",
   ";",
   "discardFirstWords",
   "(",
   "pl",
   "+",
   "pd",
   ")",
   ";",
   "index",
   "+=",
   "pd",
   ";",
   "}",
   "return",
   "index",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-34",
  "nl_tokens": [
   "Write",
   "out",
   "up",
   "to",
   "max",
   "words",
   "returns",
   "how",
   "many",
   "were",
   "written"
  ],
  "pl_tokens": [
   "protected",
   "static",
   "long",
   "discharge",
   "(",
   "final",
   "BitmapStorage",
   "container",
   ",",
   "IteratingRLW",
   "i",
   ",",
   "long",
   "<mask>",
   ")",
   "{",
   "long",
   "counter",
   "=",
   "0",
   ";",
   "while",
   "(",
   "i",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   "&&",
   "counter",
   "<",
   "max",
   ")",
   "{",
   "long",
   "l1",
   "=",
   "i",
   ".",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "l1",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "l1",
   "+",
   "counter",
   ">",
   "max",
   ")",
   "l1",
   "=",
   "max",
   "-",
   "counter",
   ";",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "i",
   ".",
   "getRunningBit",
   "(",
   ")",
   ",",
   "l1",
   ")",
   ";",
   "counter",
   "+=",
   "l1",
   ";",
   "}",
   "long",
   "l",
   "=",
   "i",
   ".",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "if",
   "(",
   "l",
   "+",
   "counter",
   ">",
   "max",
   ")",
   "l",
   "=",
   "max",
   "-",
   "counter",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "l",
   ";",
   "++",
   "k",
   ")",
   "{",
   "container",
   ".",
   "addWord",
   "(",
   "i",
   ".",
   "getLiteralWordAt",
   "(",
   "k",
   ")",
   ")",
   ";",
   "}",
   "counter",
   "+=",
   "l",
   ";",
   "i",
   ".",
   "discardFirstWords",
   "(",
   "l",
   "+",
   "l1",
   ")",
   ";",
   "}",
   "return",
   "counter",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-35",
  "nl_tokens": [
   "Determine",
   "the",
   "maximum",
   "width",
   "of",
   "any",
   "configured",
   "command",
   "name"
  ],
  "pl_tokens": [
   "private",
   "static",
   "int",
   "determineCommandNameWidth",
   "(",
   "List",
   "<",
   "Command",
   ".",
   "Descriptor",
   ">",
   "descriptors",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "0",
   ";",
   "for",
   "(",
   "Command",
   ".",
   "Descriptor",
   "d",
   ":",
   "descriptors",
   ")",
   "{",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "d",
   ".",
   "getName",
   "(",
   ")",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-36",
  "nl_tokens": [
   "\u6309\u5468\u83b7\u5f97\u67d0\u51e0\u5468\u5468\u4e00",
   "00",
   ":",
   "00",
   ":",
   "00",
   "\u5230\u5468\u516d",
   "\u7684\u65f6\u95f4\u8303\u56f4",
   "<p",
   ">",
   "\u5b83\u4f1a\u6839\u636e\u7ed9\u5b9a\u7684",
   "offL",
   "\u548c",
   "offR",
   "\u5f97\u5230\u4e00\u4e2a\u65f6\u95f4\u8303\u56f4",
   "<p",
   ">",
   "\u5bf9\u672c\u51fd\u6570\u6765\u8bf4",
   "week",
   "(",
   "-",
   "3",
   "-",
   "5",
   ")",
   "\u548c",
   "week",
   "(",
   "-",
   "5",
   "-",
   "3",
   ")",
   "\u662f\u4e00\u4e2a\u610f\u601d"
  ],
  "pl_tokens": [
   "public",
   "static",
   "Date",
   "[",
   "]",
   "weeks",
   "(",
   "long",
   "base",
   ",",
   "int",
   "offL",
   ",",
   "int",
   "offR",
   ")",
   "{",
   "int",
   "from",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "offL",
   ",",
   "offR",
   ")",
   ";",
   "int",
   "len",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "offL",
   "-",
   "offR",
   ")",
   ";",
   "// \u73b0\u5728\r",
   "Calendar",
   "c",
   "=",
   "Calendar",
   ".",
   "getInstance",
   "(",
   ")",
   ";",
   "c",
   ".",
   "setTimeInMillis",
   "(",
   "base",
   ")",
   ";",
   "Date",
   "[",
   "]",
   "re",
   "=",
   "new",
   "Date",
   "[",
   "2",
   "]",
   ";",
   "// \u8ba1\u7b97\u5f00\u59cb\r",
   "c",
   ".",
   "add",
   "(",
   "Calendar",
   ".",
   "DAY_OF_YEAR",
   ",",
   "7",
   "*",
   "from",
   ")",
   ";",
   "c",
   ".",
   "set",
   "(",
   "Calendar",
   ".",
   "DAY_OF_WEEK",
   ",",
   "Calendar",
   ".",
   "MONDAY",
   ")",
   ";",
   "c",
   ".",
   "set",
   "(",
   "Calendar",
   ".",
   "HOUR_OF_DAY",
   ",",
   "0",
   ")",
   ";",
   "c",
   ".",
   "set",
   "(",
   "Calendar",
   ".",
   "MINUTE",
   ",",
   "0",
   ")",
   ";",
   "c",
   ".",
   "set",
   "(",
   "Calendar",
   ".",
   "SECOND",
   ",",
   "0",
   ")",
   ";",
   "c",
   ".",
   "set",
   "(",
   "Calendar",
   ".",
   "MILLISECOND",
   ",",
   "0",
   ")",
   ";",
   "re",
   "[",
   "0",
   "]",
   "=",
   "c",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "// \u8ba1\u7b97\u7ed3\u675f\r",
   "c",
   ".",
   "add",
   "(",
   "Calendar",
   ".",
   "DAY_OF_YEAR",
   ",",
   "7",
   "*",
   "(",
   "len",
   "+",
   "1",
   ")",
   ")",
   ";",
   "c",
   ".",
   "add",
   "(",
   "Calendar",
   ".",
   "MILLISECOND",
   ",",
   "-",
   "1",
   ")",
   ";",
   "re",
   "[",
   "1",
   "]",
   "=",
   "c",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "// \u8fd4\u56de\r",
   "return",
   "re",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-37",
  "nl_tokens": [
   "Gets",
   "the",
   "tasks",
   "page",
   "."
  ],
  "pl_tokens": [
   "public",
   "Iterator",
   "<",
   "IExecutionBridge",
   ">",
   "getJobsPage",
   "(",
   "final",
   "int",
   "_start",
   ",",
   "final",
   "int",
   "_size",
   ")",
   "{",
   "final",
   "int",
   "<mask>",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "_size",
   ",",
   "this",
   ".",
   "executionBridges",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "return",
   "new",
   "ArrayList",
   "<>",
   "(",
   "this",
   ".",
   "executionBridges",
   ".",
   "subList",
   "(",
   "_start",
   ",",
   "min",
   ")",
   ")",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-38",
  "nl_tokens": [
   "\u4ece\u7ed9\u5b9a",
   "offs",
   "\u5c3d\u529b\u5339\u914d\u7ed9\u51fa\u7684\u6570\u7ec4\u3002",
   "<p",
   ">",
   "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662f",
   ">",
   "0",
   "\u7684\u6570\uff0c\u5185\u90e8\u7684\u6807\u5fd7\u4f4d\u5c06\u88ab\u8bbe\u7f6e\u5230\u7b2c\u4e00\u4e2a\u5339\u914d\u5b57\u7b26\uff0c\u4ee5\u4fbf",
   "DUMP",
   "\u5185\u5bb9\u3002",
   "<br",
   ">",
   "\u6240\u4ee5\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u8282\u70b9\u7ed9\u51fa\u7684\u7ed3\u8bba\u662f",
   "-",
   "1\uff0c\u4f46\u662f",
   "l",
   "\u5e76\u4e0d\u662f0\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u5339\u914d\u662f\u5931\u8d25\u7684\uff0c\u9700\u8981\u5c06",
   "\u672c\u8282\u70b9\u7684",
   "r",
   "\u7f6e\u5230",
   "max",
   "\u5904\u3002",
   "<p",
   ">",
   "\u8fd4\u56de\u503c",
   "<ul",
   ">",
   "<li",
   ">",
   "<b",
   ">",
   "-",
   "1<",
   "/",
   "b",
   ">",
   "-",
   "\u5168\u90e8\u88ab\u5339\u914d",
   "<li",
   ">",
   "<b",
   ">",
   "0<",
   "/",
   "b",
   ">",
   "-",
   "\u672a\u53d1\u73b0\u5339\u914d",
   "<li",
   ">",
   "<b",
   ">",
   "\u5927\u4e8e",
   "0<",
   "/",
   "b",
   ">",
   "-",
   "\u5728\u7f13\u51b2\u7684\u672b\u5c3e\u53d1\u73b0\u5339\u914d\uff0c\u4f46\u662f\u6ca1\u6709\u5339\u914d\u5168\uff0c\u5e0c\u671b\u4e0b\u4e00\u4e2a\u8282\u70b9\u7ee7\u7eed\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5339\u914d",
   "<",
   "/",
   "ul",
   ">"
  ],
  "pl_tokens": [
   "int",
   "mark",
   "(",
   "byte",
   "[",
   "]",
   "bs",
   ",",
   "int",
   "[",
   "]",
   "fails",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isLoaded",
   ")",
   "throw",
   "new",
   "MarkUnloadedRingItemException",
   "(",
   ")",
   ";",
   "byte",
   "start",
   "=",
   "bs",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   ";",
   "r",
   "<",
   "<mask>",
   ";",
   "r",
   "++",
   ")",
   "{",
   "// \u53ef\u80fd\u662f\u8fb9\u754c\uff0c\u5f00\u59cb\u5339\u914d\r",
   "if",
   "(",
   "buffer",
   "[",
   "r",
   "]",
   "==",
   "start",
   ")",
   "{",
   "int",
   "re",
   "=",
   "0",
   ";",
   "// \u5df2\u7ecf\u5339\u914d\u957f\u5ea6\r",
   "int",
   "j",
   "=",
   "r",
   ";",
   "// \u5728\u5185\u5bb9\u503c\u5b57\u8282\u6570\u7ec4\u4e2d\u7684\u6307\u9488\r",
   "while",
   "(",
   "true",
   ")",
   "{",
   "re",
   "++",
   ";",
   "j",
   "++",
   ";",
   "// \u5168\u90e8\u5339\u914d\r",
   "if",
   "(",
   "re",
   "==",
   "bs",
   ".",
   "length",
   ")",
   "{",
   "nextmark",
   "=",
   "j",
   ";",
   "return",
   "-",
   "1",
   ";",
   "}",
   "// \u5230\u8fbe\u672c\u9879\u76ee\u7684\u7ed3\u5c3e\uff0c\u4f46\u662f\u5e76\u4e0d\u786e\u5b9a\u662f\u5426\u662f\u8fb9\u754c\uff0c\u56e0\u4e3a\u8fd8\u672a\u5339\u914d\u5b8c\r",
   "// \u56e0\u6b64\u6682\u65f6\u5047\u8bbe\u8fd9\u4e2a\u4e0d\u4f1a\u88ab\u5339\u914d\r",
   "if",
   "(",
   "j",
   "==",
   "max",
   ")",
   "{",
   "nextmark",
   "=",
   "max",
   ";",
   "if",
   "(",
   "isStreamEnd",
   ")",
   "{",
   "r",
   "=",
   "max",
   ";",
   "return",
   "0",
   ";",
   "}",
   "return",
   "re",
   ";",
   "}",
   "// \u5982\u679c\u5b57\u7b26\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u67e5\u770b\u4e00\u4e0b\u56de\u9000\u6570\u7ec4\r",
   "// \u5982\u679c\u56de\u9000\u5230 0\uff0c\u5219\u9000\u51fa\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u8fb9\u754c\uff0c\u5426\u5219\u7ee7\u7eed\u5faa\u73af\u5339\u914d\u8fb9\u754c\r",
   "if",
   "(",
   "bs",
   "[",
   "re",
   "]",
   "!=",
   "buffer",
   "[",
   "j",
   "]",
   ")",
   "{",
   "re",
   "=",
   "fails",
   "[",
   "re",
   "]",
   ";",
   "// \u518d\u6b21\u5224\u65ad\u56de\u9000\u540e\u4f4d\u7f6e\uff0c\u5982\u679c\u8fd8\u662f\u4e0d\u76f8\u540c\uff0c\u5219\u9000\u51fa\u5faa\u73af\r",
   "if",
   "(",
   "bs",
   "[",
   "re",
   "]",
   "!=",
   "buffer",
   "[",
   "j",
   "]",
   ")",
   "{",
   "break",
   ";",
   "}",
   "// \u5982\u679c\u5df2\u7ecf\u56de\u9000\u5230\u4e86 0\uff0c\u4f60\u8fd9\u4e48\u53f3\u8fb9\u754c\u7f6e\u4e3a j\uff0c\u8868\u793a\u4ece\u5934\u641c\u7d22\r",
   "else",
   "if",
   "(",
   "re",
   "==",
   "0",
   ")",
   "{",
   "r",
   "=",
   "j",
   ";",
   "}",
   "// \u5426\u5219\u6269\u5927\u8fb9\u754c\uff0c\u5e76\u7ee7\u7eed\u5faa\u73af\r",
   "else",
   "{",
   "r",
   "+=",
   "re",
   "==",
   "0",
   "?",
   "1",
   ":",
   "re",
   ";",
   "}",
   "}",
   "}",
   "// make 'r' jump to 'j'\r",
   "r",
   "=",
   "j",
   ";",
   "}",
   "}",
   "// Fail to found\r",
   "nextmark",
   "=",
   "max",
   ";",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-39",
  "nl_tokens": [
   "TODO",
   ":",
   "If",
   "we",
   "find",
   "points",
   "where",
   "a",
   "new",
   "HostedRepository",
   "is",
   "added",
   "we",
   "should",
   "be",
   "using",
   "its",
   "comprehensive",
   "index",
   "to",
   "minimize",
   "the",
   "index",
   "damage",
   "to",
   "the",
   "group",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "removeAllSupercededMemberContent",
   "(",
   "final",
   "ArtifactStore",
   "store",
   ",",
   "final",
   "Map",
   "<",
   "ArtifactStore",
   ",",
   "ArtifactStore",
   ">",
   "changeMap",
   ")",
   "{",
   "StoreKey",
   "key",
   "=",
   "store",
   ".",
   "getKey",
   "(",
   ")",
   ";",
   "// we're only interested in groups, since only adjustments to group memberships can invalidate indexed content.",
   "if",
   "(",
   "group",
   "==",
   "key",
   ".",
   "getType",
   "(",
   ")",
   ")",
   "{",
   "List",
   "<",
   "StoreKey",
   ">",
   "newMembers",
   "=",
   "(",
   "(",
   "Group",
   ")",
   "store",
   ")",
   ".",
   "getConstituents",
   "(",
   ")",
   ";",
   "logger",
   ".",
   "debug",
   "(",
   "\"New members of: {} are: {}\"",
   ",",
   "store",
   ",",
   "newMembers",
   ")",
   ";",
   "Group",
   "group",
   "=",
   "(",
   "Group",
   ")",
   "changeMap",
   ".",
   "get",
   "(",
   "store",
   ")",
   ";",
   "List",
   "<",
   "StoreKey",
   ">",
   "oldMembers",
   "=",
   "group",
   ".",
   "getConstituents",
   "(",
   ")",
   ";",
   "logger",
   ".",
   "debug",
   "(",
   "\"Old members of: {} are: {}\"",
   ",",
   "group",
   ",",
   "oldMembers",
   ")",
   ";",
   "int",
   "commonSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "newMembers",
   ".",
   "size",
   "(",
   ")",
   ",",
   "oldMembers",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "int",
   "divergencePoint",
   ";",
   "// look in the members that overlap in new/old groups and see if there are changes that would",
   "// indicate member reordering. If so, it might lead previously suppressed results to be prioritized,",
   "// which would invalidate part of the content index for the group.",
   "boolean",
   "foundDivergence",
   "=",
   "false",
   ";",
   "for",
   "(",
   "divergencePoint",
   "=",
   "0",
   ";",
   "divergencePoint",
   "<",
   "commonSize",
   ";",
   "divergencePoint",
   "++",
   ")",
   "{",
   "logger",
   ".",
   "debug",
   "(",
   "\"Checking for common member at index: {}\"",
   ",",
   "divergencePoint",
   ")",
   ";",
   "if",
   "(",
   "!",
   "oldMembers",
   ".",
   "get",
   "(",
   "divergencePoint",
   ")",
   ".",
   "equals",
   "(",
   "newMembers",
   ".",
   "get",
   "(",
   "divergencePoint",
   ")",
   ")",
   ")",
   "{",
   "foundDivergence",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "}",
   "// [NOS-128]",
   "// 1. If membership has shrunk, we can remove origin-indexed paths, which will remove merged group content",
   "//      based on the removed member's content.",
   "// 2. If membership has grown, we should iterate new members' indexed content looking for mergable paths.",
   "//      For each of these, we need to removeIndexedStorePaths using the group and the mergable path.",
   "// [addendum]",
   "// 3. If membership is the same size but has been reordered, we need to iterate from the divergence point",
   "//    and invalidate the non-mergable files. This is because the reordering may change what artifacts",
   "//    should obscure which other physical artifacts.",
   "//",
   "// NOTE: In any case, once we isolate the changes, we need to handle matches in two ways:",
   "// 1. deleteTransfers()",
   "// 2. add the indexedStorePath to the removed Set so we can propagage their removal through any groups",
   "//      that include the one we're affecting directly here...using clearIndexedPathFrom() to do this.",
   "if",
   "(",
   "!",
   "foundDivergence",
   ")",
   "{",
   "if",
   "(",
   "newMembers",
   ".",
   "size",
   "(",
   ")",
   "<",
   "oldMembers",
   ".",
   "size",
   "(",
   ")",
   ")",
   "{",
   "divergencePoint",
   "=",
   "commonSize",
   ";",
   "}",
   "else",
   "{",
   "divergencePoint",
   "=",
   "newMembers",
   ".",
   "size",
   "(",
   ")",
   ";",
   "}",
   "}",
   "logger",
   ".",
   "debug",
   "(",
   "\"group membership divergence point: {}\"",
   ",",
   "divergencePoint",
   ")",
   ";",
   "Set",
   "<",
   "StoreKey",
   ">",
   "affectedMembers",
   "=",
   "new",
   "HashSet",
   "<>",
   "(",
   ")",
   ";",
   "boolean",
   "removeMergableOnly",
   "=",
   "divergencePoint",
   ">=",
   "oldMembers",
   ".",
   "size",
   "(",
   ")",
   ";",
   "// if we can iterate some old members that have been removed or reordered, invalidate the",
   "// group content index entries for those.",
   "if",
   "(",
   "divergencePoint",
   "<",
   "oldMembers",
   ".",
   "size",
   "(",
   ")",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "divergencePoint",
   ";",
   "i",
   "<",
   "oldMembers",
   ".",
   "size",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "affectedMembers",
   ".",
   "add",
   "(",
   "oldMembers",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "// for new added members, need to clear the indexed path with this group store for repo metadata merging",
   "// See [NOS-128]",
   "for",
   "(",
   "int",
   "i",
   "=",
   "divergencePoint",
   "-",
   "1",
   ";",
   "i",
   ">=",
   "commonSize",
   ";",
   "i",
   "--",
   ")",
   "{",
   "affectedMembers",
   ".",
   "add",
   "(",
   "newMembers",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "}",
   "logger",
   ".",
   "debug",
   "(",
   "\"Got members affected by membership divergence: {}\"",
   ",",
   "affectedMembers",
   ")",
   ";",
   "if",
   "(",
   "!",
   "affectedMembers",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "Set",
   "<",
   "Group",
   ">",
   "groups",
   "=",
   "new",
   "HashSet",
   "<>",
   "(",
   ")",
   ";",
   "groups",
   ".",
   "add",
   "(",
   "group",
   ")",
   ";",
   "try",
   "{",
   "groups",
   ".",
   "addAll",
   "(",
   "storeDataManager",
   ".",
   "query",
   "(",
   ")",
   ".",
   "packageType",
   "(",
   "group",
   ".",
   "getPackageType",
   "(",
   ")",
   ")",
   ".",
   "getGroupsAffectedBy",
   "(",
   "group",
   ".",
   "getKey",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IndyDataException",
   "e",
   ")",
   "{",
   "logger",
   ".",
   "error",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Cannot retrieve groups affected by: %s. Reason: %s\"",
   ",",
   "group",
   ".",
   "getKey",
   "(",
   ")",
   ",",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ",",
   "e",
   ")",
   ";",
   "}",
   "logger",
   ".",
   "debug",
   "(",
   "\"Got affected groups: {}\"",
   ",",
   "groups",
   ")",
   ";",
   "DrainingExecutorCompletionService",
   "<",
   "Integer",
   ">",
   "clearService",
   "=",
   "new",
   "DrainingExecutorCompletionService",
   "<>",
   "(",
   "cleanupExecutor",
   ")",
   ";",
   "final",
   "Predicate",
   "<",
   "?",
   "super",
   "String",
   ">",
   "mergableFilter",
   "=",
   "removeMergableOnly",
   "?",
   "mergablePathStrings",
   "(",
   ")",
   ":",
   "(",
   "p",
   ")",
   "-",
   ">",
   "true",
   ";",
   "// NOTE: We're NOT checking load for this executor, since this is an async process that is critical to",
   "// data integrity.",
   "affectedMembers",
   ".",
   "forEach",
   "(",
   "(",
   "memberKey",
   ")",
   "-",
   ">",
   "{",
   "logger",
   ".",
   "debug",
   "(",
   "\"Listing all {}paths in: {}\"",
   ",",
   "(",
   "removeMergableOnly",
   "?",
   "\"mergeable \"",
   ":",
   "\"\"",
   ")",
   ",",
   "memberKey",
   ")",
   "",
   ";",
   "listPathsAnd",
   "(",
   "memberKey",
   ",",
   "mergableFilter",
   ",",
   "p",
   "->",
   "clearService",
   ".",
   "submit",
   "(",
   "clearPathProcessor",
   "(",
   "p",
   ",",
   "memberKey",
   ",",
   "groups",
   ")",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "drainAndCount",
   "(",
   "clearService",
   ",",
   "\"store: \"",
   "+",
   "store",
   ".",
   "getKey",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-40",
  "nl_tokens": [
   "************************************************************************"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "constructCache",
   "(",
   "DefaultSolverScope",
   "solverScope",
   ")",
   "{",
   "InnerScoreDirector",
   "scoreDirector",
   "=",
   "solverScope",
   ".",
   "getScoreDirector",
   "(",
   ")",
   ";",
   "GenuineVariableDescriptor",
   "variableDescriptor",
   "=",
   "valueSelector",
   ".",
   "getVariableDescriptor",
   "(",
   ")",
   ";",
   "long",
   "valueSize",
   "=",
   "valueSelector",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "// Fail-fast when anchorTrailingChainList.size() could ever be too big",
   "if",
   "(",
   "valueSize",
   ">",
   "(",
   "long",
   ")",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   "{",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "\"The selector (\"",
   "+",
   "this",
   "+",
   "\") has a valueSelector (\"",
   "+",
   "valueSelector",
   "+",
   "\") with valueSize (\"",
   "+",
   "valueSize",
   "+",
   "\") which is higher than Integer.MAX_VALUE.\"",
   ")",
   ";",
   "}",
   "List",
   "<",
   "Object",
   ">",
   "anchorList",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "for",
   "(",
   "Object",
   "value",
   ":",
   "valueSelector",
   ")",
   "{",
   "if",
   "(",
   "variableDescriptor",
   ".",
   "isValuePotentialAnchor",
   "(",
   "value",
   ")",
   ")",
   "{",
   "anchorList",
   ".",
   "add",
   "(",
   "value",
   ")",
   ";",
   "}",
   "}",
   "int",
   "anchorListSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "anchorList",
   ".",
   "size",
   "(",
   ")",
   ",",
   "1",
   ")",
   ";",
   "anchorTrailingChainList",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   "anchorListSize",
   ")",
   ";",
   "int",
   "anchorChainInitialCapacity",
   "=",
   "(",
   "(",
   "int",
   ")",
   "valueSize",
   "/",
   "anchorListSize",
   ")",
   "+",
   "1",
   ";",
   "for",
   "(",
   "Object",
   "anchor",
   ":",
   "anchorList",
   ")",
   "{",
   "List",
   "<",
   "Object",
   ">",
   "anchorChain",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   "anchorChainInitialCapacity",
   ")",
   ";",
   "Object",
   "trailingEntity",
   "=",
   "inverseVariableSupply",
   ".",
   "getInverseSingleton",
   "(",
   "anchor",
   ")",
   ";",
   "while",
   "(",
   "trailingEntity",
   "!=",
   "null",
   ")",
   "{",
   "anchorChain",
   ".",
   "add",
   "(",
   "trailingEntity",
   ")",
   ";",
   "trailingEntity",
   "=",
   "inverseVariableSupply",
   ".",
   "getInverseSingleton",
   "(",
   "trailingEntity",
   ")",
   ";",
   "}",
   "if",
   "(",
   "anchorChain",
   ".",
   "size",
   "(",
   ")",
   ">=",
   "minimumSubChainSize",
   ")",
   "{",
   "anchorTrailingChainList",
   ".",
   "add",
   "(",
   "new",
   "SubChain",
   "(",
   "anchorChain",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-41",
  "nl_tokens": [
   "Zrange",
   "by",
   "score",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrangeByScore",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "max",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZRANGEBYSCORE",
   ",",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-42",
  "nl_tokens": [
   "Create",
   "a",
   "wrapper",
   "ReceiveQueue",
   "that",
   "does",
   "decoding",
   "on",
   "the",
   "fly",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "ReceiveQueue",
   "<",
   "T",
   ">",
   "receiveQueue",
   "(",
   ")",
   "{",
   "final",
   "ReceiveQueue",
   "<",
   "String",
   ">",
   "receiveQueue",
   "=",
   "queue",
   ".",
   "receiveQueue",
   "(",
   ")",
   ";",
   "return",
   "new",
   "ReceiveQueue",
   "<",
   "T",
   ">",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "T",
   "pollWait",
   "(",
   ")",
   "{",
   "final",
   "String",
   "item",
   "=",
   "receiveQueue",
   ".",
   "pollWait",
   "(",
   ")",
   ";",
   "return",
   "getParsedItem",
   "(",
   "item",
   ")",
   ";",
   "}",
   "private",
   "T",
   "getParsedItem",
   "(",
   "String",
   "item",
   ")",
   "{",
   "if",
   "(",
   "item",
   "!=",
   "null",
   ")",
   "{",
   "return",
   "fromJsonFunction",
   ".",
   "apply",
   "(",
   "item",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}",
   "@",
   "Override",
   "public",
   "T",
   "poll",
   "(",
   ")",
   "{",
   "final",
   "String",
   "item",
   "=",
   "receiveQueue",
   ".",
   "pollWait",
   "(",
   ")",
   ";",
   "return",
   "getParsedItem",
   "(",
   "item",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "T",
   "take",
   "(",
   ")",
   "{",
   "final",
   "String",
   "item",
   "=",
   "receiveQueue",
   ".",
   "take",
   "(",
   ")",
   ";",
   "return",
   "getParsedItem",
   "(",
   "item",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Iterable",
   "<",
   "T",
   ">",
   "readBatch",
   "(",
   "int",
   "<mask>",
   ")",
   "{",
   "final",
   "Iterable",
   "<",
   "String",
   ">",
   "iterable",
   "=",
   "receiveQueue",
   ".",
   "readBatch",
   "(",
   "max",
   ")",
   ";",
   "return",
   "getParsedItems",
   "(",
   "iterable",
   ")",
   ";",
   "}",
   "private",
   "Iterable",
   "<",
   "T",
   ">",
   "getParsedItems",
   "(",
   "Iterable",
   "<",
   "String",
   ">",
   "iterable",
   ")",
   "{",
   "int",
   "size",
   "=",
   "16",
   ";",
   "if",
   "(",
   "iterable",
   "instanceof",
   "List",
   ")",
   "{",
   "size",
   "=",
   "(",
   "(",
   "List",
   ")",
   "iterable",
   ")",
   ".",
   "size",
   "(",
   ")",
   ";",
   "}",
   "final",
   "List",
   "<",
   "T",
   ">",
   "items",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   "size",
   ")",
   ";",
   "for",
   "(",
   "String",
   "item",
   ":",
   "iterable",
   ")",
   "{",
   "items",
   ".",
   "add",
   "(",
   "getParsedItem",
   "(",
   "item",
   ")",
   ")",
   ";",
   "}",
   "return",
   "items",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "Iterable",
   "<",
   "T",
   ">",
   "readBatch",
   "(",
   ")",
   "{",
   "final",
   "Iterable",
   "<",
   "String",
   ">",
   "iterable",
   "=",
   "receiveQueue",
   ".",
   "readBatch",
   "(",
   ")",
   ";",
   "return",
   "getParsedItems",
   "(",
   "iterable",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "void",
   "stop",
   "(",
   ")",
   "{",
   "receiveQueue",
   ".",
   "stop",
   "(",
   ")",
   ";",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-43",
  "nl_tokens": [
   "Returns",
   "the",
   "minimal",
   "range",
   "that",
   "{",
   "@linkplain",
   "Range#contains",
   "(",
   "Comparable",
   ")",
   "contains",
   "}",
   "all",
   "of",
   "the",
   "given",
   "values",
   ".",
   "The",
   "returned",
   "range",
   "is",
   "{",
   "@linkplain",
   "BoundType#CLOSED",
   "closed",
   "}",
   "on",
   "both",
   "ends",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "C",
   "extends",
   "Comparable",
   "<",
   "?",
   ">",
   ">",
   "Range",
   "<",
   "C",
   ">",
   "encloseAll",
   "(",
   "Iterable",
   "<",
   "C",
   ">",
   "values",
   ")",
   "{",
   "checkNotNull",
   "(",
   "values",
   ")",
   ";",
   "if",
   "(",
   "values",
   "instanceof",
   "SortedSet",
   ")",
   "{",
   "SortedSet",
   "<",
   "?",
   "extends",
   "C",
   ">",
   "set",
   "=",
   "cast",
   "(",
   "values",
   ")",
   ";",
   "Comparator",
   "<",
   "?",
   ">",
   "comparator",
   "=",
   "set",
   ".",
   "comparator",
   "(",
   ")",
   ";",
   "if",
   "(",
   "Ordering",
   ".",
   "natural",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "comparator",
   ")",
   "||",
   "comparator",
   "==",
   "null",
   ")",
   "{",
   "return",
   "closed",
   "(",
   "set",
   ".",
   "first",
   "(",
   ")",
   ",",
   "set",
   ".",
   "last",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "Iterator",
   "<",
   "C",
   ">",
   "valueIterator",
   "=",
   "values",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "C",
   "<mask>",
   "=",
   "checkNotNull",
   "(",
   "valueIterator",
   ".",
   "next",
   "(",
   ")",
   ")",
   ";",
   "C",
   "max",
   "=",
   "min",
   ";",
   "while",
   "(",
   "valueIterator",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "C",
   "value",
   "=",
   "checkNotNull",
   "(",
   "valueIterator",
   ".",
   "next",
   "(",
   ")",
   ")",
   ";",
   "min",
   "=",
   "Ordering",
   ".",
   "natural",
   "(",
   ")",
   ".",
   "min",
   "(",
   "min",
   ",",
   "value",
   ")",
   ";",
   "max",
   "=",
   "Ordering",
   ".",
   "natural",
   "(",
   ")",
   ".",
   "max",
   "(",
   "max",
   ",",
   "value",
   ")",
   ";",
   "}",
   "return",
   "closed",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-44",
  "nl_tokens": [
   "This",
   "method",
   "complies",
   "with",
   "{",
   "@link",
   "InputStream#read",
   "(",
   "byte",
   "[]",
   "int",
   "int",
   ")",
   "}",
   "and",
   "imposes",
   "stronger",
   "postconditions",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "int",
   "read",
   "(",
   "byte",
   "[",
   "]",
   "b",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "done",
   "=",
   "0",
   ";",
   "while",
   "(",
   "done",
   "<",
   "len",
   "&&",
   "(",
   "done",
   "==",
   "0",
   "||",
   "available",
   "(",
   ")",
   ">",
   "0",
   "||",
   "(",
   "boring",
   "&&",
   "real",
   ".",
   "available",
   "(",
   ")",
   ">",
   "0",
   ")",
   ")",
   ")",
   "done",
   "+=",
   "realRead",
   "(",
   "b",
   ",",
   "off",
   "+",
   "done",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   "-",
   "done",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "1",
   ",",
   "rateHelper",
   ".",
   "getThingsPerTick",
   "(",
   ")",
   ")",
   ")",
   ")",
   ";",
   "return",
   "done",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-45",
  "nl_tokens": [
   "Return",
   "a",
   "long",
   "in",
   "the",
   "(",
   "inclusive",
   ")",
   "range",
   "[",
   "min",
   "max",
   "]",
   "."
  ],
  "pl_tokens": [
   "public",
   "long",
   "randomLongRange",
   "(",
   "long",
   "<mask>",
   ",",
   "long",
   "max",
   ")",
   "{",
   "if",
   "(",
   "max",
   "<=",
   "min",
   ")",
   "return",
   "min",
   ";",
   "long",
   "width",
   "=",
   "max",
   "-",
   "min",
   ";",
   "return",
   "(",
   "long",
   ")",
   "(",
   "rng",
   ".",
   "nextDouble",
   "(",
   ")",
   "*",
   "width",
   ")",
   "+",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-46",
  "nl_tokens": [
   "/",
   "*",
   "TODO",
   "(",
   "cpovirk",
   ")",
   ":",
   "remove",
   "and",
   "removeExactly",
   "currently",
   "accept",
   "null",
   "inputs",
   "only",
   "if",
   "occurrences",
   "==",
   "0",
   ".",
   "This",
   "satisfies",
   "both",
   "NullPointerTester",
   "and",
   "CollectionRemoveTester",
   ".",
   "testRemove_nullAllowed",
   "but",
   "it",
   "s",
   "not",
   "clear",
   "that",
   "it",
   "s",
   "a",
   "good",
   "policy",
   "especially",
   "because",
   "in",
   "order",
   "for",
   "the",
   "test",
   "to",
   "pass",
   "the",
   "parameter",
   "must",
   "be",
   "misleadingly",
   "annotated",
   "as"
  ],
  "pl_tokens": [
   "@",
   "CanIgnoreReturnValue",
   "@",
   "Override",
   "public",
   "int",
   "remove",
   "(",
   "@",
   "Nullable",
   "Object",
   "element",
   ",",
   "int",
   "occurrences",
   ")",
   "{",
   "if",
   "(",
   "occurrences",
   "==",
   "0",
   ")",
   "{",
   "return",
   "count",
   "(",
   "element",
   ")",
   ";",
   "}",
   "CollectPreconditions",
   ".",
   "checkPositive",
   "(",
   "occurrences",
   ",",
   "\"occurences\"",
   ")",
   ";",
   "AtomicInteger",
   "existingCounter",
   "=",
   "Maps",
   ".",
   "safeGet",
   "(",
   "countMap",
   ",",
   "element",
   ")",
   ";",
   "if",
   "(",
   "existingCounter",
   "==",
   "null",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "while",
   "(",
   "true",
   ")",
   "{",
   "int",
   "oldValue",
   "=",
   "existingCounter",
   ".",
   "get",
   "(",
   ")",
   ";",
   "if",
   "(",
   "oldValue",
   "!=",
   "0",
   ")",
   "{",
   "int",
   "newValue",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "oldValue",
   "-",
   "occurrences",
   ")",
   ";",
   "if",
   "(",
   "existingCounter",
   ".",
   "compareAndSet",
   "(",
   "oldValue",
   ",",
   "newValue",
   ")",
   ")",
   "{",
   "if",
   "(",
   "newValue",
   "==",
   "0",
   ")",
   "{",
   "// Just CASed to 0; remove the entry to clean up the map. If the removal fails,",
   "// another thread has already replaced it with a new counter, which is fine.",
   "countMap",
   ".",
   "remove",
   "(",
   "element",
   ",",
   "existingCounter",
   ")",
   ";",
   "}",
   "return",
   "oldValue",
   ";",
   "}",
   "}",
   "else",
   "{",
   "return",
   "0",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-47",
  "nl_tokens": [
   "Same",
   "as",
   "String",
   ".",
   "indexOf",
   "but",
   "(",
   "slightly",
   ")",
   "faster",
   ";",
   ")"
  ],
  "pl_tokens": [
   "@",
   "SuppressWarnings",
   "(",
   "{",
   "\"MethodWithMultipleReturnPoints\"",
   ",",
   "\"LabeledStatement\"",
   ",",
   "\"ValueOfIncrementOrDecrementUsed\"",
   ",",
   "\"ContinueStatement\"",
   ",",
   "\"ContinueStatementWithLabel\"",
   "}",
   ")",
   "public",
   "static",
   "int",
   "indexOf",
   "(",
   "char",
   "[",
   "]",
   "src",
   ",",
   "char",
   "[",
   "]",
   "find",
   ",",
   "int",
   "startAt",
   ")",
   "{",
   "int",
   "startPos",
   "=",
   "startAt",
   ";",
   "final",
   "int",
   "<mask>",
   "=",
   "src",
   ".",
   "length",
   "-",
   "find",
   ".",
   "length",
   ";",
   "if",
   "(",
   "startPos",
   ">",
   "max",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "final",
   "char",
   "find0",
   "=",
   "find",
   "[",
   "0",
   "]",
   ";",
   "final",
   "int",
   "len",
   "=",
   "find",
   ".",
   "length",
   ";",
   "int",
   "j",
   ";",
   "int",
   "k",
   ";",
   "// Find the first character",
   "startOver",
   ":",
   "while",
   "(",
   "startPos",
   "<=",
   "max",
   ")",
   "{",
   "if",
   "(",
   "src",
   "[",
   "startPos",
   "++",
   "]",
   "==",
   "find0",
   ")",
   "{",
   "// First character found - look for the rest",
   "j",
   "=",
   "startPos",
   ";",
   "k",
   "=",
   "1",
   ";",
   "while",
   "(",
   "k",
   "<",
   "len",
   ")",
   "{",
   "if",
   "(",
   "src",
   "[",
   "j",
   "++",
   "]",
   "!=",
   "find",
   "[",
   "k",
   "++",
   "]",
   ")",
   "{",
   "continue",
   "startOver",
   ";",
   "}",
   "}",
   "return",
   "startPos",
   "-",
   "1",
   ";",
   "}",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-48",
  "nl_tokens": [
   "Translates",
   "an",
   "adapter",
   "position",
   "to",
   "an",
   "actual",
   "position",
   "within",
   "the",
   "underlying",
   "dataset",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "getOriginalContentPosition",
   "(",
   "int",
   "position",
   ",",
   "int",
   "fetchedAdsCount",
   ",",
   "int",
   "sourceItemsCount",
   ")",
   "{",
   "int",
   "noOfAds",
   "=",
   "getAdsCountToPublish",
   "(",
   "fetchedAdsCount",
   ",",
   "sourceItemsCount",
   ")",
   ";",
   "// No of spaces for ads in the dataset, according to ad placement rules",
   "int",
   "adSpacesCount",
   "=",
   "(",
   "getAdIndex",
   "(",
   "position",
   ")",
   "+",
   "1",
   ")",
   ";",
   "int",
   "originalPosition",
   "=",
   "position",
   "-",
   "Math",
   ".",
   "<mask>",
   "(",
   "adSpacesCount",
   ",",
   "noOfAds",
   ")",
   ";",
   "//Log.d(\"POSITION\", position + \" is originally \" + originalPosition);",
   "return",
   "originalPosition",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-49",
  "nl_tokens": [
   "Zrevrange",
   "by",
   "score",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrevrangeByScore",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "min",
   ",",
   "final",
   "int",
   "offset",
   ",",
   "int",
   "count",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZREVRANGEBYSCORE",
   ",",
   "key",
   ",",
   "max",
   ",",
   "min",
   ",",
   "Keyword",
   ".",
   "LIMIT",
   ".",
   "raw",
   ",",
   "RedisProtocol",
   ".",
   "toByteArray",
   "(",
   "offset",
   ")",
   ",",
   "RedisProtocol",
   ".",
   "toByteArray",
   "(",
   "count",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-50",
  "nl_tokens": [
   "Get",
   "the",
   "progress",
   "within",
   "the",
   "split",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "float",
   "getProgress",
   "(",
   ")",
   "{",
   "if",
   "(",
   "start_",
   "==",
   "end_",
   ")",
   "{",
   "return",
   "0.0f",
   ";",
   "}",
   "else",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "1.0f",
   ",",
   "(",
   "pos_",
   "-",
   "start_",
   ")",
   "/",
   "(",
   "float",
   ")",
   "(",
   "end_",
   "-",
   "start_",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-51",
  "nl_tokens": [
   "Computes",
   "how",
   "the",
   "estimated",
   "strength",
   "of",
   "interaction",
   "in",
   "the",
   "model",
   "should",
   "change",
   "--",
   "to",
   "what",
   "target",
   "value",
   "--",
   "in",
   "response",
   "to",
   "a",
   "new",
   "interaction",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "computeTargetQui",
   "(",
   "boolean",
   "implicit",
   ",",
   "double",
   "value",
   ",",
   "double",
   "currentValue",
   ")",
   "{",
   "// We want Qui to change based on value. What's the target value, Qui'?",
   "if",
   "(",
   "implicit",
   ")",
   "{",
   "// Target is really 1, or 0, depending on whether value is positive or negative.",
   "// This wouldn't account for the strength though. Instead the target is a function",
   "// of the current value and strength. If the current value is c, and value is positive",
   "// then the target is somewhere between c and 1 depending on the strength. If current",
   "// value is already >= 1, there's no effect. Similarly for negative values.",
   "if",
   "(",
   "value",
   ">",
   "0.0f",
   "&&",
   "currentValue",
   "<",
   "1.0",
   ")",
   "{",
   "double",
   "diff",
   "=",
   "1.0",
   "-",
   "Math",
   ".",
   "<mask>",
   "(",
   "0.0",
   ",",
   "currentValue",
   ")",
   ";",
   "return",
   "currentValue",
   "+",
   "(",
   "value",
   "/",
   "(",
   "1.0",
   "+",
   "value",
   ")",
   ")",
   "*",
   "diff",
   ";",
   "}",
   "if",
   "(",
   "value",
   "<",
   "0.0f",
   "&&",
   "currentValue",
   ">",
   "0.0",
   ")",
   "{",
   "double",
   "diff",
   "=",
   "-",
   "Math",
   ".",
   "min",
   "(",
   "1.0",
   ",",
   "currentValue",
   ")",
   ";",
   "return",
   "currentValue",
   "+",
   "(",
   "value",
   "/",
   "(",
   "value",
   "-",
   "1.0",
   ")",
   ")",
   "*",
   "diff",
   ";",
   "}",
   "// No change",
   "return",
   "Double",
   ".",
   "NaN",
   ";",
   "}",
   "else",
   "{",
   "// Non-implicit -- value is supposed to be the new value",
   "return",
   "value",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-52",
  "nl_tokens": [
   "Performs",
   "internal",
   "read",
   "to",
   "the",
   "given",
   "byte",
   "buffer",
   "."
  ],
  "pl_tokens": [
   "@",
   "DoesServiceRequest",
   "private",
   "synchronized",
   "int",
   "readInternal",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "b",
   ",",
   "final",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "this",
   ".",
   "checkStreamState",
   "(",
   ")",
   ";",
   "// if buffer is empty do next get operation",
   "if",
   "(",
   "(",
   "this",
   ".",
   "currentBuffer",
   "==",
   "null",
   "||",
   "this",
   ".",
   "currentBuffer",
   ".",
   "available",
   "(",
   ")",
   "==",
   "0",
   ")",
   "&&",
   "this",
   ".",
   "currentAbsoluteReadPosition",
   "<",
   "this",
   ".",
   "streamLength",
   ")",
   "{",
   "this",
   ".",
   "dispatchRead",
   "(",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "readSize",
   ",",
   "this",
   ".",
   "streamLength",
   "-",
   "this",
   ".",
   "currentAbsoluteReadPosition",
   ")",
   ")",
   ";",
   "}",
   "len",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "len",
   ",",
   "this",
   ".",
   "readSize",
   ")",
   ";",
   "// do read from buffer",
   "final",
   "int",
   "numberOfBytesRead",
   "=",
   "this",
   ".",
   "currentBuffer",
   ".",
   "read",
   "(",
   "b",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "if",
   "(",
   "numberOfBytesRead",
   ">",
   "0",
   ")",
   "{",
   "this",
   ".",
   "currentAbsoluteReadPosition",
   "+=",
   "numberOfBytesRead",
   ";",
   "if",
   "(",
   "this",
   ".",
   "validateFileMd5",
   ")",
   "{",
   "this",
   ".",
   "md5Digest",
   ".",
   "update",
   "(",
   "b",
   ",",
   "off",
   ",",
   "numberOfBytesRead",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "currentAbsoluteReadPosition",
   "==",
   "this",
   ".",
   "streamLength",
   ")",
   "{",
   "// Reached end of stream, validate md5.",
   "final",
   "String",
   "calculatedMd5",
   "=",
   "Base64",
   ".",
   "encode",
   "(",
   "this",
   ".",
   "md5Digest",
   ".",
   "digest",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "!",
   "calculatedMd5",
   ".",
   "equals",
   "(",
   "this",
   ".",
   "retrievedContentMD5Value",
   ")",
   ")",
   "{",
   "this",
   ".",
   "lastError",
   "=",
   "Utility",
   ".",
   "initIOException",
   "(",
   "new",
   "StorageException",
   "(",
   "StorageErrorCodeStrings",
   ".",
   "INVALID_MD5",
   ",",
   "String",
   ".",
   "format",
   "(",
   "\"File data corrupted (integrity check failed), Expected value is %s, retrieved %s\"",
   ",",
   "this",
   ".",
   "retrievedContentMD5Value",
   ",",
   "calculatedMd5",
   ")",
   ",",
   "Constants",
   ".",
   "HeaderConstants",
   ".",
   "HTTP_UNUSED_306",
   ",",
   "null",
   ",",
   "null",
   ")",
   ")",
   ";",
   "this",
   ".",
   "streamFaulted",
   "=",
   "true",
   ";",
   "throw",
   "this",
   ".",
   "lastError",
   ";",
   "}",
   "}",
   "}",
   "}",
   "// update markers",
   "if",
   "(",
   "this",
   ".",
   "markExpiry",
   ">",
   "0",
   "&&",
   "this",
   ".",
   "markedPosition",
   "+",
   "this",
   ".",
   "markExpiry",
   "<",
   "this",
   ".",
   "currentAbsoluteReadPosition",
   ")",
   "{",
   "this",
   ".",
   "markedPosition",
   "=",
   "0",
   ";",
   "this",
   ".",
   "markExpiry",
   "=",
   "0",
   ";",
   "}",
   "return",
   "numberOfBytesRead",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-53",
  "nl_tokens": [
   "Adds",
   "a",
   "value",
   "to",
   "this",
   "digest",
   ".",
   "The",
   "value",
   "must",
   "be",
   "{"
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "long",
   "value",
   ",",
   "long",
   "count",
   ")",
   "{",
   "checkArgument",
   "(",
   "count",
   ">",
   "0",
   ",",
   "\"count must be > 0\"",
   ")",
   ";",
   "boolean",
   "needsCompression",
   "=",
   "false",
   ";",
   "double",
   "weight",
   "=",
   "count",
   ";",
   "if",
   "(",
   "alpha",
   ">",
   "0.0",
   ")",
   "{",
   "long",
   "nowInSeconds",
   "=",
   "TimeUnit",
   ".",
   "NANOSECONDS",
   ".",
   "toSeconds",
   "(",
   "ticker",
   ".",
   "read",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "nowInSeconds",
   "-",
   "landmarkInSeconds",
   ">=",
   "RESCALE_THRESHOLD_SECONDS",
   ")",
   "{",
   "rescale",
   "(",
   "nowInSeconds",
   ")",
   ";",
   "needsCompression",
   "=",
   "true",
   ";",
   "// rescale affects weights globally, so force compression",
   "}",
   "weight",
   "=",
   "weight",
   "(",
   "nowInSeconds",
   ")",
   "*",
   "count",
   ";",
   "}",
   "<mask>",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "value",
   ")",
   ";",
   "min",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "min",
   ",",
   "value",
   ")",
   ";",
   "double",
   "previousCount",
   "=",
   "weightedCount",
   ";",
   "insert",
   "(",
   "longToBits",
   "(",
   "value",
   ")",
   ",",
   "weight",
   ")",
   ";",
   "// When totalCount crosses the next multiple of k (compression factor), the compression",
   "// equation changes for every node in the tree, so we need to compress globally.",
   "// Otherwise, only node along the insertion path are affected -- TODO: implement this.",
   "int",
   "compressionFactor",
   "=",
   "calculateCompressionFactor",
   "(",
   ")",
   ";",
   "if",
   "(",
   "needsCompression",
   "||",
   "(",
   "(",
   "long",
   ")",
   "previousCount",
   ")",
   "/",
   "compressionFactor",
   "!=",
   "(",
   "(",
   "long",
   ")",
   "weightedCount",
   ")",
   "/",
   "compressionFactor",
   ")",
   "{",
   "compress",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-54",
  "nl_tokens": [
   "Zrevrange",
   "by",
   "score",
   "with",
   "scores",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrevrangeByScoreWithScores",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "min",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZREVRANGEBYSCORE",
   ",",
   "key",
   ",",
   "max",
   ",",
   "min",
   ",",
   "Keyword",
   ".",
   "WITHSCORES",
   ".",
   "raw",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-55",
  "nl_tokens": [
   "Create",
   "a",
   "numeric",
   "field",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "DataEntry",
   "getNumericField",
   "(",
   "String",
   "name",
   ",",
   "Float",
   "<mask>",
   ",",
   "Float",
   "max",
   ")",
   "{",
   "DataEntry",
   "de",
   "=",
   "new",
   "DataEntry",
   "(",
   ")",
   ";",
   "de",
   ".",
   "setEntryName",
   "(",
   "name",
   ")",
   ";",
   "DataEntryType",
   "det",
   "=",
   "DataEntryTypeServer",
   ".",
   "getType",
   "(",
   "\"type.numeric.name\"",
   ")",
   ";",
   "de",
   ".",
   "setDataEntryPropertyList",
   "(",
   "getDefaultProperties",
   "(",
   "det",
   ")",
   ")",
   ";",
   "de",
   ".",
   "setDataEntryType",
   "(",
   "det",
   ")",
   ";",
   "for",
   "(",
   "DataEntryProperty",
   "dep",
   ":",
   "de",
   ".",
   "getDataEntryPropertyList",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "dep",
   ".",
   "getPropertyName",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "\"property.min\"",
   ")",
   "&&",
   "min",
   "!=",
   "null",
   ")",
   "{",
   "//Set minimum\r",
   "dep",
   ".",
   "setPropertyValue",
   "(",
   "min",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "dep",
   ".",
   "getPropertyName",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "\"property.max\"",
   ")",
   "&&",
   "max",
   "!=",
   "null",
   ")",
   "{",
   "//Set minimum\r",
   "dep",
   ".",
   "setPropertyValue",
   "(",
   "max",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "return",
   "de",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-56",
  "nl_tokens": [
   "Generates",
   "the",
   "instructions",
   "for",
   "a",
   "switch",
   "statement",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "tableSwitch",
   "(",
   "final",
   "int",
   "[",
   "]",
   "keys",
   ",",
   "final",
   "TableSwitchGenerator",
   "generator",
   ",",
   "final",
   "boolean",
   "useTable",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "keys",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "if",
   "(",
   "keys",
   "[",
   "i",
   "]",
   "<",
   "keys",
   "[",
   "i",
   "-",
   "1",
   "]",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"keys must be sorted ascending\"",
   ")",
   ";",
   "}",
   "}",
   "Label",
   "def",
   "=",
   "newLabel",
   "(",
   ")",
   ";",
   "Label",
   "end",
   "=",
   "newLabel",
   "(",
   ")",
   ";",
   "if",
   "(",
   "keys",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "int",
   "len",
   "=",
   "keys",
   ".",
   "length",
   ";",
   "int",
   "<mask>",
   "=",
   "keys",
   "[",
   "0",
   "]",
   ";",
   "int",
   "max",
   "=",
   "keys",
   "[",
   "len",
   "-",
   "1",
   "]",
   ";",
   "int",
   "range",
   "=",
   "max",
   "-",
   "min",
   "+",
   "1",
   ";",
   "if",
   "(",
   "useTable",
   ")",
   "{",
   "Label",
   "[",
   "]",
   "labels",
   "=",
   "new",
   "Label",
   "[",
   "range",
   "]",
   ";",
   "Arrays",
   ".",
   "fill",
   "(",
   "labels",
   ",",
   "def",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "++",
   "i",
   ")",
   "{",
   "labels",
   "[",
   "keys",
   "[",
   "i",
   "]",
   "-",
   "min",
   "]",
   "=",
   "newLabel",
   "(",
   ")",
   ";",
   "}",
   "mv",
   ".",
   "visitTableSwitchInsn",
   "(",
   "min",
   ",",
   "max",
   ",",
   "def",
   ",",
   "labels",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "range",
   ";",
   "++",
   "i",
   ")",
   "{",
   "Label",
   "label",
   "=",
   "labels",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "label",
   "!=",
   "def",
   ")",
   "{",
   "mark",
   "(",
   "label",
   ")",
   ";",
   "generator",
   ".",
   "generateCase",
   "(",
   "i",
   "+",
   "min",
   ",",
   "end",
   ")",
   ";",
   "}",
   "}",
   "}",
   "else",
   "{",
   "Label",
   "[",
   "]",
   "labels",
   "=",
   "new",
   "Label",
   "[",
   "len",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "++",
   "i",
   ")",
   "{",
   "labels",
   "[",
   "i",
   "]",
   "=",
   "newLabel",
   "(",
   ")",
   ";",
   "}",
   "mv",
   ".",
   "visitLookupSwitchInsn",
   "(",
   "def",
   ",",
   "keys",
   ",",
   "labels",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "++",
   "i",
   ")",
   "{",
   "mark",
   "(",
   "labels",
   "[",
   "i",
   "]",
   ")",
   ";",
   "generator",
   ".",
   "generateCase",
   "(",
   "keys",
   "[",
   "i",
   "]",
   ",",
   "end",
   ")",
   ";",
   "}",
   "}",
   "}",
   "mark",
   "(",
   "def",
   ")",
   ";",
   "generator",
   ".",
   "generateDefault",
   "(",
   ")",
   ";",
   "mark",
   "(",
   "end",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-57",
  "nl_tokens": [
   "Zcount",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zcount",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "max",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZCOUNT",
   ",",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-58",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "Set",
   "<",
   "byte",
   "[",
   "]",
   ">",
   "zRevRangeByScore",
   "(",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ",",
   "long",
   "offset",
   ",",
   "long",
   "count",
   ")",
   "{",
   "try",
   "{",
   "if",
   "(",
   "isPipelined",
   "(",
   ")",
   ")",
   "{",
   "pipeline",
   "(",
   "new",
   "JedisResult",
   "(",
   "pipeline",
   ".",
   "zrevrangeByScore",
   "(",
   "key",
   ",",
   "max",
   ",",
   "min",
   ",",
   "(",
   "int",
   ")",
   "offset",
   ",",
   "(",
   "int",
   ")",
   "count",
   ")",
   ")",
   ")",
   ";",
   "return",
   "null",
   ";",
   "}",
   "return",
   "client",
   ".",
   "zrevrangeByScore",
   "(",
   "key",
   ",",
   "max",
   ",",
   "min",
   ",",
   "(",
   "int",
   ")",
   "offset",
   ",",
   "(",
   "int",
   ")",
   "count",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "ex",
   ")",
   "{",
   "throw",
   "convertException",
   "(",
   "ex",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-59",
  "nl_tokens": [
   "Check",
   "how",
   "much",
   "we",
   "missed",
   "scheduled",
   "wake",
   "up",
   "and",
   "if",
   "it",
   "is",
   "larger",
   "than",
   "_minStallNano",
   "then",
   "consider",
   "it",
   "a",
   "stall",
   "and",
   "remember",
   "it",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "checkForStall",
   "(",
   "long",
   "currentTime",
   ")",
   "{",
   "long",
   "delta",
   "=",
   "currentTime",
   "-",
   "_lastMonitoringStep",
   ";",
   "if",
   "(",
   "delta",
   "<",
   "_shortestObservedDelta",
   ")",
   "{",
   "_shortestObservedDelta",
   "=",
   "delta",
   ";",
   "}",
   "long",
   "stall",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "delta",
   "-",
   "_shortestObservedDelta",
   ")",
   ";",
   "if",
   "(",
   "stall",
   ">",
   "_minStallNano",
   ")",
   "{",
   "_stalls",
   ".",
   "put",
   "(",
   "_lastMonitoringStep",
   ",",
   "stall",
   ")",
   ";",
   "if",
   "(",
   "_stalls",
   ".",
   "size",
   "(",
   ")",
   ">",
   "_stallsHistorySize",
   ")",
   "{",
   "_stalls",
   ".",
   "pollFirstEntry",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-60",
  "nl_tokens": [
   "Returns",
   "the",
   "least",
   "value",
   "present",
   "in",
   "{",
   "@code",
   "array",
   "}",
   "treating",
   "values",
   "as",
   "unsigned",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "...",
   "array",
   ")",
   "{",
   "checkArgument",
   "(",
   "array",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "int",
   "min",
   "=",
   "flip",
   "(",
   "array",
   "[",
   "0",
   "]",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "next",
   "=",
   "flip",
   "(",
   "array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "next",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "next",
   ";",
   "}",
   "}",
   "return",
   "flip",
   "(",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-61",
  "nl_tokens": [
   "Turn",
   "an",
   "iterator",
   "into",
   "a",
   "bitmap"
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "materialize",
   "(",
   "final",
   "IteratingRLW32",
   "i",
   ",",
   "final",
   "BitmapStorage32",
   "c",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "final",
   "int",
   "origMax",
   "=",
   "max",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "if",
   "(",
   "i",
   ".",
   "getRunningLength",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "int",
   "l",
   "=",
   "i",
   ".",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "l",
   ">",
   "max",
   ")",
   "l",
   "=",
   "max",
   ";",
   "c",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "i",
   ".",
   "getRunningBit",
   "(",
   ")",
   ",",
   "l",
   ")",
   ";",
   "max",
   "-=",
   "l",
   ";",
   "}",
   "long",
   "L",
   "=",
   "i",
   ".",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "L",
   ";",
   "++",
   "k",
   ")",
   "c",
   ".",
   "addWord",
   "(",
   "i",
   ".",
   "getLiteralWordAt",
   "(",
   "k",
   ")",
   ")",
   ";",
   "if",
   "(",
   "max",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "!",
   "i",
   ".",
   "next",
   "(",
   ")",
   ")",
   "break",
   ";",
   "}",
   "else",
   "break",
   ";",
   "}",
   "return",
   "origMax",
   "-",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-62",
  "nl_tokens": [
   "Runs",
   "the",
   "provided",
   "strategy",
   "over",
   "the",
   "managed",
   "series",
   "(",
   "from",
   "startIndex",
   "to",
   "finishIndex",
   ")",
   ".",
   "<p",
   ">"
  ],
  "pl_tokens": [
   "public",
   "TradingRecord",
   "run",
   "(",
   "Strategy",
   "strategy",
   ",",
   "OrderType",
   "orderType",
   ",",
   "Decimal",
   "amount",
   ",",
   "int",
   "startIndex",
   ",",
   "int",
   "finishIndex",
   ")",
   "{",
   "int",
   "runBeginIndex",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "startIndex",
   ",",
   "timeSeries",
   ".",
   "getBeginIndex",
   "(",
   ")",
   ")",
   ";",
   "int",
   "runEndIndex",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "finishIndex",
   ",",
   "timeSeries",
   ".",
   "getEndIndex",
   "(",
   ")",
   ")",
   ";",
   "log",
   ".",
   "trace",
   "(",
   "\"Running strategy (indexes: {} -> {}): {} (starting with {})\"",
   ",",
   "runBeginIndex",
   ",",
   "runEndIndex",
   ",",
   "strategy",
   ",",
   "orderType",
   ")",
   ";",
   "TradingRecord",
   "tradingRecord",
   "=",
   "new",
   "BaseTradingRecord",
   "(",
   "orderType",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "runBeginIndex",
   ";",
   "i",
   "<=",
   "runEndIndex",
   ";",
   "i",
   "++",
   ")",
   "{",
   "// For each tick between both indexes...       ",
   "if",
   "(",
   "strategy",
   ".",
   "shouldOperate",
   "(",
   "i",
   ",",
   "tradingRecord",
   ")",
   ")",
   "{",
   "tradingRecord",
   ".",
   "operate",
   "(",
   "i",
   ",",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "i",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ",",
   "amount",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "!",
   "tradingRecord",
   ".",
   "isClosed",
   "(",
   ")",
   ")",
   "{",
   "// If the last trade is still opened, we search out of the run end index.",
   "// May works if the end index for this run was inferior to the actual number of ticks",
   "int",
   "seriesMaxSize",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "timeSeries",
   ".",
   "getEndIndex",
   "(",
   ")",
   "+",
   "1",
   ",",
   "timeSeries",
   ".",
   "getTickData",
   "(",
   ")",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "runEndIndex",
   "+",
   "1",
   ";",
   "i",
   "<",
   "seriesMaxSize",
   ";",
   "i",
   "++",
   ")",
   "{",
   "// For each tick after the end index of this run...",
   "// --> Trying to close the last trade",
   "if",
   "(",
   "strategy",
   ".",
   "shouldOperate",
   "(",
   "i",
   ",",
   "tradingRecord",
   ")",
   ")",
   "{",
   "tradingRecord",
   ".",
   "operate",
   "(",
   "i",
   ",",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "i",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ",",
   "amount",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "}",
   "return",
   "tradingRecord",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-63",
  "nl_tokens": [
   "\u8fd4\u56de\u6700\u5927\u7684\u4e00\u4e2a"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "...",
   "nums",
   ")",
   "{",
   "return",
   "takeOne",
   "(",
   "new",
   "CompareSomeThing",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "boolean",
   "compare",
   "(",
   "int",
   "arg0",
   ",",
   "int",
   "arg1",
   ")",
   "{",
   "return",
   "arg0",
   ">",
   "arg1",
   ";",
   "}",
   "}",
   ",",
   "nums",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-64",
  "nl_tokens": [
   "Returns",
   "a",
   "stream",
   "in",
   "which",
   "each",
   "element",
   "is",
   "the",
   "result",
   "of",
   "passing",
   "the",
   "corresponding",
   "elementY",
   "of",
   "each",
   "of",
   "{",
   "@code",
   "streamA",
   "}",
   "and",
   "{",
   "@code",
   "streamB",
   "}",
   "to",
   "{",
   "@code",
   "function",
   "}",
   "."
  ],
  "pl_tokens": [
   "@",
   "Beta",
   "public",
   "static",
   "<",
   "A",
   ",",
   "B",
   ",",
   "R",
   ">",
   "Stream",
   "<",
   "R",
   ">",
   "zip",
   "(",
   "Stream",
   "<",
   "A",
   ">",
   "streamA",
   ",",
   "Stream",
   "<",
   "B",
   ">",
   "streamB",
   ",",
   "BiFunction",
   "<",
   "?",
   "super",
   "A",
   ",",
   "?",
   "super",
   "B",
   ",",
   "R",
   ">",
   "function",
   ")",
   "{",
   "checkNotNull",
   "(",
   "streamA",
   ")",
   ";",
   "checkNotNull",
   "(",
   "streamB",
   ")",
   ";",
   "checkNotNull",
   "(",
   "function",
   ")",
   ";",
   "boolean",
   "isParallel",
   "=",
   "streamA",
   ".",
   "isParallel",
   "(",
   ")",
   "||",
   "streamB",
   ".",
   "isParallel",
   "(",
   ")",
   ";",
   "// same as Stream.concat",
   "Spliterator",
   "<",
   "A",
   ">",
   "splitrA",
   "=",
   "streamA",
   ".",
   "spliterator",
   "(",
   ")",
   ";",
   "Spliterator",
   "<",
   "B",
   ">",
   "splitrB",
   "=",
   "streamB",
   ".",
   "spliterator",
   "(",
   ")",
   ";",
   "int",
   "characteristics",
   "=",
   "splitrA",
   ".",
   "characteristics",
   "(",
   ")",
   "&",
   "splitrB",
   ".",
   "characteristics",
   "(",
   ")",
   "&",
   "(",
   "Spliterator",
   ".",
   "SIZED",
   "|",
   "Spliterator",
   ".",
   "ORDERED",
   ")",
   ";",
   "Iterator",
   "<",
   "A",
   ">",
   "itrA",
   "=",
   "Spliterators",
   ".",
   "iterator",
   "(",
   "splitrA",
   ")",
   ";",
   "Iterator",
   "<",
   "B",
   ">",
   "itrB",
   "=",
   "Spliterators",
   ".",
   "iterator",
   "(",
   "splitrB",
   ")",
   ";",
   "return",
   "StreamSupport",
   ".",
   "stream",
   "(",
   "new",
   "AbstractSpliterator",
   "<",
   "R",
   ">",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "splitrA",
   ".",
   "estimateSize",
   "(",
   ")",
   ",",
   "splitrB",
   ".",
   "estimateSize",
   "(",
   ")",
   ")",
   ",",
   "characteristics",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "boolean",
   "tryAdvance",
   "(",
   "Consumer",
   "<",
   "?",
   "super",
   "R",
   ">",
   "action",
   ")",
   "{",
   "if",
   "(",
   "itrA",
   ".",
   "hasNext",
   "(",
   ")",
   "&&",
   "itrB",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "action",
   ".",
   "accept",
   "(",
   "function",
   ".",
   "apply",
   "(",
   "itrA",
   ".",
   "next",
   "(",
   ")",
   ",",
   "itrB",
   ".",
   "next",
   "(",
   ")",
   ")",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}",
   "return",
   "false",
   ";",
   "}",
   "}",
   ",",
   "isParallel",
   ")",
   ".",
   "onClose",
   "(",
   "streamA",
   "::",
   "close",
   ")",
   ".",
   "onClose",
   "(",
   "streamB",
   "::",
   "close",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-65",
  "nl_tokens": [
   "\u8ba1\u7b97\u4e00\u4e2a\u7ed9\u5b9a\u65e5\u671f\uff0c\u8ddd\u79bb",
   "1970",
   "\u5e74",
   "1",
   "\u6708",
   "1",
   "\u65e5\u6709\u591a\u5c11\u5929"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "D1970",
   "(",
   "int",
   "yy",
   ",",
   "int",
   "MM",
   ",",
   "int",
   "dd",
   ")",
   "{",
   "// \u8f6c\u6362\u6210\u76f8\u5bf9\u516c\u5143\u5143\u5e74\u7684\u5e74\u4efd\r",
   "// \u5982\u679c\u7ed9\u7684\u5e74\u4efd\u5c0f\u4e8e 100\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u4ece 1970 \u5f00\u59cb\u7b97\u7684\u5e74\u4efd\r",
   "int",
   "year",
   "=",
   "(",
   "yy",
   "<",
   "100",
   "?",
   "yy",
   "+",
   "1970",
   ":",
   "yy",
   ")",
   ";",
   "// \u5f97\u5230\u4eca\u5e74\u4e4b\u524d\u7684\u57fa\u672c\u5929\u6570\r",
   "int",
   "day",
   "=",
   "(",
   "year",
   "-",
   "1970",
   ")",
   "*",
   "365",
   ";",
   "// \u8865\u4e0a\u95f0\u5e74\u5929\u6570\r",
   "day",
   "+=",
   "countLeapYear",
   "(",
   "year",
   ")",
   "-",
   "countLeapYear",
   "(",
   "1970",
   ")",
   ";",
   "// \u8ba1\u7b97\u4eca\u5e74\u672c\u6708\u4e4b\u524d\u7684\u6708\u4efd\r",
   "int",
   "mi",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "MM",
   "-",
   "1",
   ",",
   "11",
   ")",
   ";",
   "boolean",
   "isLeapYear",
   "=",
   "leapYear",
   "(",
   "yy",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "mi",
   ";",
   "i",
   "++",
   ")",
   "{",
   "day",
   "+=",
   "_MDs",
   "[",
   "i",
   "]",
   ";",
   "}",
   "// \u8003\u8651\u4eca\u5e74\u662f\u95f0\u5e74\u7684\u60c5\u51b5\r",
   "if",
   "(",
   "isLeapYear",
   "&&",
   "MM",
   ">",
   "2",
   ")",
   "{",
   "day",
   "++",
   ";",
   "}",
   "// \u6700\u540e\u52a0\u4e0a\u5929\u6570\r",
   "day",
   "+=",
   "Math",
   ".",
   "min",
   "(",
   "dd",
   ",",
   "_MDs",
   "[",
   "mi",
   "]",
   ")",
   "-",
   "1",
   ";",
   "// \u5982\u679c\u662f\u95f0\u5e74\u4e14\u672c\u6708\u662f 2 \u6708\r",
   "if",
   "(",
   "isLeapYear",
   "&&",
   "dd",
   "==",
   "29",
   ")",
   "{",
   "day",
   "++",
   ";",
   "}",
   "// \u5982\u679c\u662f\u95f0\u5e74\u5e76\u4e14\u8fc7\u4e86\u4e8c\u6708\r",
   "return",
   "day",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-66",
  "nl_tokens": [
   "\u7248\u672c\u53f7\u6bd4\u8f83"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "compareVersion",
   "(",
   "String",
   "v1",
   ",",
   "String",
   "v2",
   ")",
   "{",
   "if",
   "(",
   "v1",
   ".",
   "equals",
   "(",
   "v2",
   ")",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "String",
   "[",
   "]",
   "version1Array",
   "=",
   "v1",
   ".",
   "split",
   "(",
   "\"[._]\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "version2Array",
   "=",
   "v2",
   ".",
   "split",
   "(",
   "\"[._]\"",
   ")",
   ";",
   "int",
   "index",
   "=",
   "0",
   ";",
   "int",
   "minLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "version1Array",
   ".",
   "length",
   ",",
   "version2Array",
   ".",
   "length",
   ")",
   ";",
   "long",
   "diff",
   "=",
   "0",
   ";",
   "while",
   "(",
   "index",
   "<",
   "minLen",
   "&&",
   "(",
   "diff",
   "=",
   "Long",
   ".",
   "parseLong",
   "(",
   "version1Array",
   "[",
   "index",
   "]",
   ")",
   "-",
   "Long",
   ".",
   "parseLong",
   "(",
   "version2Array",
   "[",
   "index",
   "]",
   ")",
   ")",
   "==",
   "0",
   ")",
   "{",
   "index",
   "++",
   ";",
   "}",
   "if",
   "(",
   "diff",
   "==",
   "0",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "index",
   ";",
   "i",
   "<",
   "version1Array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "Long",
   ".",
   "parseLong",
   "(",
   "version1Array",
   "[",
   "i",
   "]",
   ")",
   ">",
   "0",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "}",
   "for",
   "(",
   "int",
   "i",
   "=",
   "index",
   ";",
   "i",
   "<",
   "version2Array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "Long",
   ".",
   "parseLong",
   "(",
   "version2Array",
   "[",
   "i",
   "]",
   ")",
   ">",
   "0",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "}",
   "return",
   "0",
   ";",
   "}",
   "else",
   "{",
   "return",
   "diff",
   ">",
   "0",
   "?",
   "1",
   ":",
   "-",
   "1",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-67",
  "nl_tokens": [
   "Computes",
   "the",
   "max",
   "weight",
   "of",
   "any",
   "path",
   "starting",
   "at",
   "node",
   "and",
   "ending",
   "at",
   "a",
   "leaf",
   "in",
   "the",
   "hypothetical",
   "complete",
   "tree",
   ".",
   "The",
   "weight",
   "is",
   "the",
   "sum",
   "of",
   "counts",
   "in",
   "the",
   "ancestors",
   "of",
   "a",
   "given",
   "node"
  ],
  "pl_tokens": [
   "private",
   "double",
   "computeMaxPathWeight",
   "(",
   "int",
   "node",
   ")",
   "{",
   "if",
   "(",
   "node",
   "==",
   "-",
   "1",
   "||",
   "levels",
   "[",
   "node",
   "]",
   "==",
   "0",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "double",
   "leftMaxWeight",
   "=",
   "computeMaxPathWeight",
   "(",
   "lefts",
   "[",
   "node",
   "]",
   ")",
   ";",
   "double",
   "rightMaxWeight",
   "=",
   "computeMaxPathWeight",
   "(",
   "rights",
   "[",
   "node",
   "]",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "leftMaxWeight",
   ",",
   "rightMaxWeight",
   ")",
   "+",
   "counts",
   "[",
   "node",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-68",
  "nl_tokens": [
   "\u4ece\u5f53\u524d\u8282\u70b9\u7684",
   "next",
   "\u5f00\u59cb\uff0c\u4f9d\u6b21\u5c06\u6240\u6709\u53ef\u7528\u7684\u8282\u70b9\u5168\u90e8\u52a0\u8f7d\u6ee1"
  ],
  "pl_tokens": [
   "public",
   "long",
   "load",
   "(",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "item",
   ".",
   "isStreamEnd",
   ")",
   "return",
   "readed",
   ";",
   "RingItem",
   "ri",
   "=",
   "item",
   ";",
   "while",
   "(",
   "!",
   "ri",
   ".",
   "isLoaded",
   ")",
   "{",
   "ri",
   ".",
   "load",
   "(",
   "ins",
   ")",
   ";",
   "if",
   "(",
   "ri",
   ".",
   "<mask>",
   ">",
   "0",
   ")",
   "readed",
   "+=",
   "ri",
   ".",
   "max",
   ";",
   "ri",
   "=",
   "ri",
   ".",
   "next",
   ";",
   "}",
   "return",
   "readed",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-69",
  "nl_tokens": [
   "Reduce",
   "the",
   "number",
   "of",
   "edits",
   "by",
   "eliminating",
   "semantically",
   "trivial",
   "equalities",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "diff_cleanupSemantic",
   "(",
   "LinkedList",
   "<",
   "Diff",
   ">",
   "diffs",
   ")",
   "{",
   "if",
   "(",
   "diffs",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "boolean",
   "changes",
   "=",
   "false",
   ";",
   "Stack",
   "<",
   "Diff",
   ">",
   "equalities",
   "=",
   "new",
   "Stack",
   "<",
   "Diff",
   ">",
   "(",
   ")",
   ";",
   "// Stack of qualities.",
   "String",
   "lastequality",
   "=",
   "null",
   ";",
   "// Always equal to equalities.lastElement().text",
   "ListIterator",
   "<",
   "Diff",
   ">",
   "pointer",
   "=",
   "diffs",
   ".",
   "listIterator",
   "(",
   ")",
   ";",
   "// Number of characters that changed prior to the equality.",
   "int",
   "length_insertions1",
   "=",
   "0",
   ";",
   "int",
   "length_deletions1",
   "=",
   "0",
   ";",
   "// Number of characters that changed after the equality.",
   "int",
   "length_insertions2",
   "=",
   "0",
   ";",
   "int",
   "length_deletions2",
   "=",
   "0",
   ";",
   "Diff",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ";",
   "while",
   "(",
   "thisDiff",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "thisDiff",
   ".",
   "operation",
   "==",
   "Operation",
   ".",
   "EQUAL",
   ")",
   "{",
   "// Equality found.",
   "equalities",
   ".",
   "push",
   "(",
   "thisDiff",
   ")",
   ";",
   "length_insertions1",
   "=",
   "length_insertions2",
   ";",
   "length_deletions1",
   "=",
   "length_deletions2",
   ";",
   "length_insertions2",
   "=",
   "0",
   ";",
   "length_deletions2",
   "=",
   "0",
   ";",
   "lastequality",
   "=",
   "thisDiff",
   ".",
   "text",
   ";",
   "}",
   "else",
   "{",
   "// An insertion or deletion.",
   "if",
   "(",
   "thisDiff",
   ".",
   "operation",
   "==",
   "Operation",
   ".",
   "INSERT",
   ")",
   "{",
   "length_insertions2",
   "+=",
   "thisDiff",
   ".",
   "text",
   ".",
   "length",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "length_deletions2",
   "+=",
   "thisDiff",
   ".",
   "text",
   ".",
   "length",
   "(",
   ")",
   ";",
   "}",
   "// Eliminate an equality that is smaller or equal to the edits on both",
   "// sides of it.",
   "if",
   "(",
   "lastequality",
   "!=",
   "null",
   "&&",
   "(",
   "lastequality",
   ".",
   "length",
   "(",
   ")",
   "<=",
   "Math",
   ".",
   "<mask>",
   "(",
   "length_insertions1",
   ",",
   "length_deletions1",
   ")",
   ")",
   "&&",
   "(",
   "lastequality",
   ".",
   "length",
   "(",
   ")",
   "<=",
   "Math",
   ".",
   "max",
   "(",
   "length_insertions2",
   ",",
   "length_deletions2",
   ")",
   ")",
   ")",
   "{",
   "//System.out.println(\"Splitting: '\" + lastequality + \"'\");",
   "// Walk back to offending equality.",
   "while",
   "(",
   "thisDiff",
   "!=",
   "equalities",
   ".",
   "lastElement",
   "(",
   ")",
   ")",
   "{",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "previous",
   "(",
   ")",
   ";",
   "}",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ";",
   "// Replace equality with a delete.",
   "pointer",
   ".",
   "set",
   "(",
   "new",
   "Diff",
   "(",
   "Operation",
   ".",
   "DELETE",
   ",",
   "lastequality",
   ")",
   ")",
   ";",
   "// Insert a corresponding an insert.",
   "pointer",
   ".",
   "add",
   "(",
   "new",
   "Diff",
   "(",
   "Operation",
   ".",
   "INSERT",
   ",",
   "lastequality",
   ")",
   ")",
   ";",
   "equalities",
   ".",
   "pop",
   "(",
   ")",
   ";",
   "// Throw away the equality we just deleted.",
   "if",
   "(",
   "!",
   "equalities",
   ".",
   "empty",
   "(",
   ")",
   ")",
   "{",
   "// Throw away the previous equality (it needs to be reevaluated).",
   "equalities",
   ".",
   "pop",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "equalities",
   ".",
   "empty",
   "(",
   ")",
   ")",
   "{",
   "// There are no previous equalities, walk back to the start.",
   "while",
   "(",
   "pointer",
   ".",
   "hasPrevious",
   "(",
   ")",
   ")",
   "{",
   "pointer",
   ".",
   "previous",
   "(",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "// There is a safe equality we can fall back to.",
   "thisDiff",
   "=",
   "equalities",
   ".",
   "lastElement",
   "(",
   ")",
   ";",
   "while",
   "(",
   "thisDiff",
   "!=",
   "pointer",
   ".",
   "previous",
   "(",
   ")",
   ")",
   "{",
   "// Intentionally empty loop.",
   "}",
   "}",
   "length_insertions1",
   "=",
   "0",
   ";",
   "// Reset the counters.",
   "length_insertions2",
   "=",
   "0",
   ";",
   "length_deletions1",
   "=",
   "0",
   ";",
   "length_deletions2",
   "=",
   "0",
   ";",
   "lastequality",
   "=",
   "null",
   ";",
   "changes",
   "=",
   "true",
   ";",
   "}",
   "}",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "hasNext",
   "(",
   ")",
   "?",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ":",
   "null",
   ";",
   "}",
   "// Normalize the diff.",
   "if",
   "(",
   "changes",
   ")",
   "{",
   "diff_cleanupMerge",
   "(",
   "diffs",
   ")",
   ";",
   "}",
   "diff_cleanupSemanticLossless",
   "(",
   "diffs",
   ")",
   ";",
   "// Find any overlaps between deletions and insertions.",
   "// e.g: <del>abcxxx</del><ins>xxxdef</ins>",
   "//   -> <del>abc</del>xxx<ins>def</ins>",
   "// e.g: <del>xxxabc</del><ins>defxxx</ins>",
   "//   -> <ins>def</ins>xxx<del>abc</del>",
   "// Only extract an overlap if it is as big as the edit ahead or behind it.",
   "pointer",
   "=",
   "diffs",
   ".",
   "listIterator",
   "(",
   ")",
   ";",
   "Diff",
   "prevDiff",
   "=",
   "null",
   ";",
   "thisDiff",
   "=",
   "null",
   ";",
   "if",
   "(",
   "pointer",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "prevDiff",
   "=",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ";",
   "if",
   "(",
   "pointer",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ";",
   "}",
   "}",
   "while",
   "(",
   "thisDiff",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "prevDiff",
   ".",
   "operation",
   "==",
   "Operation",
   ".",
   "DELETE",
   "&&",
   "thisDiff",
   ".",
   "operation",
   "==",
   "Operation",
   ".",
   "INSERT",
   ")",
   "{",
   "String",
   "deletion",
   "=",
   "prevDiff",
   ".",
   "text",
   ";",
   "String",
   "insertion",
   "=",
   "thisDiff",
   ".",
   "text",
   ";",
   "int",
   "overlap_length1",
   "=",
   "this",
   ".",
   "diff_commonOverlap",
   "(",
   "deletion",
   ",",
   "insertion",
   ")",
   ";",
   "int",
   "overlap_length2",
   "=",
   "this",
   ".",
   "diff_commonOverlap",
   "(",
   "insertion",
   ",",
   "deletion",
   ")",
   ";",
   "if",
   "(",
   "overlap_length1",
   ">=",
   "overlap_length2",
   ")",
   "{",
   "if",
   "(",
   "overlap_length1",
   ">=",
   "deletion",
   ".",
   "length",
   "(",
   ")",
   "/",
   "2.0",
   "||",
   "overlap_length1",
   ">=",
   "insertion",
   ".",
   "length",
   "(",
   ")",
   "/",
   "2.0",
   ")",
   "{",
   "// Overlap found. Insert an equality and trim the surrounding edits.",
   "pointer",
   ".",
   "previous",
   "(",
   ")",
   ";",
   "pointer",
   ".",
   "add",
   "(",
   "new",
   "Diff",
   "(",
   "Operation",
   ".",
   "EQUAL",
   ",",
   "insertion",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "overlap_length1",
   ")",
   ")",
   ")",
   ";",
   "prevDiff",
   ".",
   "text",
   "=",
   "deletion",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "deletion",
   ".",
   "length",
   "(",
   ")",
   "-",
   "overlap_length1",
   ")",
   ";",
   "thisDiff",
   ".",
   "text",
   "=",
   "insertion",
   ".",
   "substring",
   "(",
   "overlap_length1",
   ")",
   ";",
   "// pointer.add inserts the element before the cursor, so there is",
   "// no need to step past the new element.",
   "}",
   "}",
   "else",
   "{",
   "if",
   "(",
   "overlap_length2",
   ">=",
   "deletion",
   ".",
   "length",
   "(",
   ")",
   "/",
   "2.0",
   "||",
   "overlap_length2",
   ">=",
   "insertion",
   ".",
   "length",
   "(",
   ")",
   "/",
   "2.0",
   ")",
   "{",
   "// Reverse overlap found.",
   "// Insert an equality and swap and trim the surrounding edits.",
   "pointer",
   ".",
   "previous",
   "(",
   ")",
   ";",
   "pointer",
   ".",
   "add",
   "(",
   "new",
   "Diff",
   "(",
   "Operation",
   ".",
   "EQUAL",
   ",",
   "deletion",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "overlap_length2",
   ")",
   ")",
   ")",
   ";",
   "prevDiff",
   ".",
   "operation",
   "=",
   "Operation",
   ".",
   "INSERT",
   ";",
   "prevDiff",
   ".",
   "text",
   "=",
   "insertion",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "insertion",
   ".",
   "length",
   "(",
   ")",
   "-",
   "overlap_length2",
   ")",
   ";",
   "thisDiff",
   ".",
   "operation",
   "=",
   "Operation",
   ".",
   "DELETE",
   ";",
   "thisDiff",
   ".",
   "text",
   "=",
   "deletion",
   ".",
   "substring",
   "(",
   "overlap_length2",
   ")",
   ";",
   "// pointer.add inserts the element before the cursor, so there is",
   "// no need to step past the new element.",
   "}",
   "}",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "hasNext",
   "(",
   ")",
   "?",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ":",
   "null",
   ";",
   "}",
   "prevDiff",
   "=",
   "thisDiff",
   ";",
   "thisDiff",
   "=",
   "pointer",
   ".",
   "hasNext",
   "(",
   ")",
   "?",
   "pointer",
   ".",
   "next",
   "(",
   ")",
   ":",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-70",
  "nl_tokens": [
   "Quickselects",
   "the",
   "top",
   "k",
   "elements",
   "from",
   "the",
   "2k",
   "elements",
   "in",
   "the",
   "buffer",
   ".",
   "O",
   "(",
   "k",
   ")",
   "expected",
   "time",
   "O",
   "(",
   "k",
   "log",
   "k",
   ")",
   "worst",
   "case",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "trim",
   "(",
   ")",
   "{",
   "int",
   "left",
   "=",
   "0",
   ";",
   "int",
   "right",
   "=",
   "2",
   "*",
   "k",
   "-",
   "1",
   ";",
   "int",
   "minThresholdPosition",
   "=",
   "0",
   ";",
   "// The leftmost position at which the greatest of the k lower elements",
   "// -- the new value of threshold -- might be found.",
   "int",
   "iterations",
   "=",
   "0",
   ";",
   "int",
   "maxIterations",
   "=",
   "IntMath",
   ".",
   "log2",
   "(",
   "right",
   "-",
   "left",
   ",",
   "RoundingMode",
   ".",
   "CEILING",
   ")",
   "*",
   "3",
   ";",
   "while",
   "(",
   "left",
   "<",
   "right",
   ")",
   "{",
   "int",
   "pivotIndex",
   "=",
   "(",
   "left",
   "+",
   "right",
   "+",
   "1",
   ")",
   ">>>",
   "1",
   ";",
   "int",
   "pivotNewIndex",
   "=",
   "partition",
   "(",
   "left",
   ",",
   "right",
   ",",
   "pivotIndex",
   ")",
   ";",
   "if",
   "(",
   "pivotNewIndex",
   ">",
   "k",
   ")",
   "{",
   "right",
   "=",
   "pivotNewIndex",
   "-",
   "1",
   ";",
   "}",
   "else",
   "if",
   "(",
   "pivotNewIndex",
   "<",
   "k",
   ")",
   "{",
   "left",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "pivotNewIndex",
   ",",
   "left",
   "+",
   "1",
   ")",
   ";",
   "minThresholdPosition",
   "=",
   "pivotNewIndex",
   ";",
   "}",
   "else",
   "{",
   "break",
   ";",
   "}",
   "iterations",
   "++",
   ";",
   "if",
   "(",
   "iterations",
   ">=",
   "maxIterations",
   ")",
   "{",
   "// We've already taken O(k log k), let's make sure we don't take longer than O(k log k).",
   "Arrays",
   ".",
   "sort",
   "(",
   "buffer",
   ",",
   "left",
   ",",
   "right",
   ",",
   "comparator",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "bufferSize",
   "=",
   "k",
   ";",
   "threshold",
   "=",
   "buffer",
   "[",
   "minThresholdPosition",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "minThresholdPosition",
   "+",
   "1",
   ";",
   "i",
   "<",
   "k",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "comparator",
   ".",
   "compare",
   "(",
   "buffer",
   "[",
   "i",
   "]",
   ",",
   "threshold",
   ")",
   ">",
   "0",
   ")",
   "{",
   "threshold",
   "=",
   "buffer",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-71",
  "nl_tokens": [
   "Return",
   "a",
   "rule",
   "with",
   "a",
   "maximum",
   "number",
   "of",
   "cycles",
   "to",
   "run"
  ],
  "pl_tokens": [
   "public",
   "Rule",
   "<mask>",
   "(",
   "final",
   "int",
   "nrCycles",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "nrCycles",
   ">=",
   "0",
   ",",
   "\"illegal repetition number specified (\"",
   "+",
   "nrCycles",
   "+",
   "\"), must be 0 or greater\"",
   ")",
   ";",
   "return",
   "range",
   "(",
   "Range",
   ".",
   "atMost",
   "(",
   "nrCycles",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-72",
  "nl_tokens": [
   "Takes",
   "several",
   "things",
   "(",
   "eg",
   ".",
   "bytes",
   ")",
   ".",
   "This",
   "method",
   "blocks",
   "until",
   "at",
   "least",
   "one",
   "thing",
   "can",
   "be",
   "used",
   "according",
   "to",
   "the",
   "current",
   "rate",
   "and",
   "prescaling",
   "settings",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "take",
   "(",
   "int",
   "n",
   ")",
   "{",
   "int",
   "lenToTake",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "int",
   "stored",
   "=",
   "spent",
   ".",
   "get",
   "(",
   ")",
   ";",
   "lenToTake",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "n",
   ",",
   "thingsPerTick",
   "-",
   "stored",
   ")",
   ";",
   "if",
   "(",
   "stored",
   ">=",
   "thingsPerTick",
   ")",
   "sleep",
   "(",
   ")",
   ";",
   "else",
   "if",
   "(",
   "spent",
   ".",
   "compareAndSet",
   "(",
   "stored",
   ",",
   "stored",
   "+",
   "lenToTake",
   ")",
   ")",
   "break",
   ";",
   "}",
   "timewiseAvailable",
   "-=",
   "lenToTake",
   ";",
   "return",
   "lenToTake",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-73",
  "nl_tokens": [
   "Return",
   "an",
   "fixed",
   "decimal",
   "double",
   "value",
   "in",
   "the",
   "(",
   "inclusive",
   ")",
   "range",
   "[",
   "minimum",
   "maximum",
   "]",
   ".",
   "For",
   "example",
   "[",
   "0",
   ".",
   "01",
   "..",
   "100",
   ".",
   "00",
   "]",
   "with",
   "decimal",
   "2",
   "has",
   "10",
   "000",
   "unique",
   "values",
   "."
  ],
  "pl_tokens": [
   "public",
   "double",
   "fixedDecimalNumber",
   "(",
   "int",
   "decimal",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "if",
   "(",
   "decimal",
   "<",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "int",
   "multiplier",
   "=",
   "1",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "decimal",
   ";",
   "++",
   "i",
   ")",
   "{",
   "multiplier",
   "*=",
   "10",
   ";",
   "}",
   "int",
   "top",
   "=",
   "(",
   "int",
   ")",
   "(",
   "min",
   "*",
   "multiplier",
   ")",
   ";",
   "int",
   "bottom",
   "=",
   "(",
   "int",
   ")",
   "(",
   "max",
   "*",
   "multiplier",
   ")",
   ";",
   "return",
   "(",
   "double",
   ")",
   "number",
   "(",
   "top",
   ",",
   "bottom",
   ")",
   "/",
   "(",
   "double",
   ")",
   "multiplier",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-74",
  "nl_tokens": [
   "Returns",
   "the",
   "longest",
   "string",
   "{",
   "@code",
   "prefix",
   "}",
   "such",
   "that",
   "{",
   "@code",
   "a",
   ".",
   "toString",
   "()",
   ".",
   "startsWith",
   "(",
   "prefix",
   ")",
   "&&",
   "b",
   ".",
   "toString",
   "()",
   ".",
   "startsWith",
   "(",
   "prefix",
   ")",
   "}",
   "taking",
   "care",
   "not",
   "to",
   "split",
   "surrogate",
   "pairs",
   ".",
   "If",
   "{",
   "@code",
   "a",
   "}",
   "and",
   "{",
   "@code",
   "b",
   "}",
   "have",
   "no",
   "common",
   "prefix",
   "returns",
   "the",
   "empty",
   "string",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "commonPrefix",
   "(",
   "CharSequence",
   "a",
   ",",
   "CharSequence",
   "b",
   ")",
   "{",
   "checkNotNull",
   "(",
   "a",
   ")",
   ";",
   "checkNotNull",
   "(",
   "b",
   ")",
   ";",
   "int",
   "maxPrefixLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "length",
   "(",
   ")",
   ",",
   "b",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "int",
   "p",
   "=",
   "0",
   ";",
   "while",
   "(",
   "p",
   "<",
   "maxPrefixLength",
   "&&",
   "a",
   ".",
   "charAt",
   "(",
   "p",
   ")",
   "==",
   "b",
   ".",
   "charAt",
   "(",
   "p",
   ")",
   ")",
   "{",
   "p",
   "++",
   ";",
   "}",
   "if",
   "(",
   "validSurrogatePairAt",
   "(",
   "a",
   ",",
   "p",
   "-",
   "1",
   ")",
   "||",
   "validSurrogatePairAt",
   "(",
   "b",
   ",",
   "p",
   "-",
   "1",
   ")",
   ")",
   "{",
   "p",
   "--",
   ";",
   "}",
   "return",
   "a",
   ".",
   "subSequence",
   "(",
   "0",
   ",",
   "p",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-75",
  "nl_tokens": [
   "Sets",
   "a",
   "range",
   "of",
   "characters",
   "to",
   "1s",
   "in",
   "the",
   "masks",
   "."
  ],
  "pl_tokens": [
   "ASCIIBits",
   "set",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "// There are faster bit-twiddling tricks to accomplish the same",
   "// thing as below.  Minor optimization for later.",
   "int",
   "i",
   "=",
   "min",
   ";",
   "for",
   "(",
   "int",
   "n",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "max",
   ",",
   "63",
   ")",
   ";",
   "i",
   "<=",
   "n",
   ";",
   "++",
   "i",
   ")",
   "{",
   "_lowerMask",
   "|=",
   "(",
   "1L",
   "<<",
   "i",
   ")",
   ";",
   "}",
   "for",
   "(",
   ";",
   "i",
   "<=",
   "max",
   ";",
   "++",
   "i",
   ")",
   "{",
   "_upperMask",
   "|=",
   "(",
   "1L",
   "<<",
   "i",
   ")",
   ";",
   "}",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-76",
  "nl_tokens": [
   "Asserts",
   "that",
   "the",
   "specified",
   "integer",
   "is",
   "in",
   "the",
   "valid",
   "range",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "assertInBounds",
   "(",
   "final",
   "String",
   "param",
   ",",
   "final",
   "long",
   "value",
   ",",
   "final",
   "long",
   "<mask>",
   ",",
   "final",
   "long",
   "max",
   ")",
   "{",
   "if",
   "(",
   "value",
   "<",
   "min",
   "||",
   "value",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "SR",
   ".",
   "PARAMETER_NOT_IN_RANGE",
   ",",
   "param",
   ",",
   "min",
   ",",
   "max",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-77",
  "nl_tokens": [
   "Reserves",
   "next",
   "ticket",
   "and",
   "returns",
   "the",
   "wait",
   "time",
   "that",
   "the",
   "caller",
   "must",
   "wait",
   "for",
   "."
  ],
  "pl_tokens": [
   "final",
   "long",
   "reserveAndGetWaitLength",
   "(",
   "int",
   "permits",
   ",",
   "long",
   "nowMicros",
   ")",
   "{",
   "long",
   "momentAvailable",
   "=",
   "reserveEarliestAvailable",
   "(",
   "permits",
   ",",
   "nowMicros",
   ")",
   ";",
   "return",
   "<mask>",
   "(",
   "momentAvailable",
   "-",
   "nowMicros",
   ",",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-78",
  "nl_tokens": [
   "Gets",
   "a",
   "field",
   "name",
   "for",
   "a",
   "$group",
   "operation",
   "representing",
   "the",
   "maximum",
   "of",
   "the",
   "values",
   "of",
   "the",
   "given",
   "expression",
   "when",
   "applied",
   "to",
   "all",
   "members",
   "of",
   "the",
   "group",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "TExpression",
   ">",
   "BsonField",
   "<mask>",
   "(",
   "final",
   "String",
   "fieldName",
   ",",
   "final",
   "TExpression",
   "expression",
   ")",
   "{",
   "return",
   "accumulator",
   "(",
   "\"$max\"",
   ",",
   "fieldName",
   ",",
   "expression",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-79",
  "nl_tokens": [
   "Sleeps",
   "for",
   "the",
   "provided",
   "amount",
   "of",
   "milliseconds",
   "ignoring",
   "thread",
   "interrupts",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "sleep",
   "(",
   "int",
   "ms",
   ")",
   "{",
   "long",
   "deadline",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "+",
   "ms",
   ";",
   "while",
   "(",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "<",
   "deadline",
   ")",
   "{",
   "try",
   "{",
   "Thread",
   ".",
   "sleep",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "(",
   "deadline",
   "-",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ")",
   "/",
   "2",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "InterruptedException",
   "ignore",
   ")",
   "{",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-80",
  "nl_tokens": [
   "A",
   "job",
   "is",
   "rescheduled",
   "with",
   "exponential",
   "back",
   "-",
   "off",
   "if",
   "the",
   "client",
   "requests",
   "this",
   "from",
   "their",
   "execution",
   "logic",
   ".",
   "A",
   "caveat",
   "is",
   "for",
   "idle",
   "-",
   "mode",
   "jobs",
   "for",
   "which",
   "the",
   "idle",
   "-",
   "mode",
   "constraint",
   "will",
   "usurp",
   "the",
   "timeliness",
   "of",
   "the",
   "reschedule",
   ".",
   "For",
   "an",
   "idle",
   "-",
   "mode",
   "job",
   "no",
   "deadline",
   "is",
   "given",
   "."
  ],
  "pl_tokens": [
   "private",
   "JobStatus",
   "rescheduleFailedJob",
   "(",
   "JobStatus",
   "job",
   ")",
   "{",
   "if",
   "(",
   "job",
   ".",
   "hasIdleConstraint",
   "(",
   ")",
   ")",
   "{",
   "// Don't need to modify time on idle job, it will run whenever the next idle period is.",
   "return",
   "job",
   ";",
   "}",
   "final",
   "long",
   "elapsedNowMillis",
   "=",
   "SystemClock",
   ".",
   "elapsedRealtime",
   "(",
   ")",
   ";",
   "final",
   "JobInfo",
   "jobInfo",
   "=",
   "job",
   ".",
   "getJob",
   "(",
   ")",
   ";",
   "final",
   "long",
   "initialBackoffMillis",
   "=",
   "jobInfo",
   ".",
   "getInitialBackoffMillis",
   "(",
   ")",
   ";",
   "final",
   "int",
   "backoffAttemps",
   "=",
   "job",
   ".",
   "getNumFailures",
   "(",
   ")",
   "+",
   "1",
   ";",
   "long",
   "delayMillis",
   ";",
   "switch",
   "(",
   "job",
   ".",
   "getJob",
   "(",
   ")",
   ".",
   "getBackoffPolicy",
   "(",
   ")",
   ")",
   "{",
   "case",
   "JobInfo",
   ".",
   "BACKOFF_POLICY_LINEAR",
   ":",
   "delayMillis",
   "=",
   "initialBackoffMillis",
   "*",
   "backoffAttemps",
   ";",
   "break",
   ";",
   "default",
   ":",
   "case",
   "JobInfo",
   ".",
   "BACKOFF_POLICY_EXPONENTIAL",
   ":",
   "delayMillis",
   "=",
   "(",
   "long",
   ")",
   "Math",
   ".",
   "scalb",
   "(",
   "initialBackoffMillis",
   ",",
   "backoffAttemps",
   "-",
   "1",
   ")",
   ";",
   "break",
   ";",
   "}",
   "delayMillis",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "delayMillis",
   ",",
   "JobInfo",
   ".",
   "MAX_BACKOFF_DELAY_MILLIS",
   ")",
   ";",
   "return",
   "new",
   "JobStatus",
   "(",
   "job",
   ",",
   "elapsedNowMillis",
   "+",
   "delayMillis",
   ",",
   "JobStatus",
   ".",
   "NO_LATEST_RUNTIME",
   ",",
   "backoffAttemps",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-81",
  "nl_tokens": [
   "These",
   "have",
   "trailing",
   "newlines",
   "that",
   "we",
   "want",
   "to",
   "avoid",
   "spanning"
  ],
  "pl_tokens": [
   "private",
   "static",
   "void",
   "setBlockSpan",
   "(",
   "SpannableStringBuilder",
   "builder",
   ",",
   "Object",
   "what",
   ")",
   "{",
   "int",
   "length",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "builder",
   ".",
   "length",
   "(",
   ")",
   "-",
   "1",
   ")",
   ";",
   "builder",
   ".",
   "setSpan",
   "(",
   "what",
   ",",
   "0",
   ",",
   "length",
   ",",
   "Spannable",
   ".",
   "SPAN_EXCLUSIVE_EXCLUSIVE",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-82",
  "nl_tokens": [
   "------------------",
   "between"
  ],
  "pl_tokens": [
   "public",
   "SqlExpressionGroup",
   "andBetween",
   "(",
   "String",
   "name",
   ",",
   "Object",
   "<mask>",
   ",",
   "Object",
   "max",
   ")",
   "{",
   "return",
   "and",
   "(",
   "new",
   "BetweenExpression",
   "(",
   "name",
   ",",
   "min",
   ",",
   "max",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-83",
  "nl_tokens": [
   "Get",
   "an",
   "upper",
   "bound",
   "on",
   "the",
   "quantiles",
   "for",
   "the",
   "given",
   "proportions",
   ".",
   "A",
   "returned",
   "q",
   "quantile",
   "is",
   "guaranteed",
   "to",
   "be",
   "within",
   "the",
   "q",
   "and",
   "q",
   "+",
   "maxError",
   "quantiles",
   ".",
   "<p",
   ">",
   "The",
   "input",
   "list",
   "of",
   "quantile",
   "proportions",
   "must",
   "be",
   "sorted",
   "in",
   "increasing",
   "order",
   "and",
   "each",
   "value",
   "must",
   "be",
   "in",
   "the",
   "range",
   "[",
   "0",
   "1",
   "]"
  ],
  "pl_tokens": [
   "public",
   "List",
   "<",
   "Long",
   ">",
   "getQuantilesUpperBound",
   "(",
   "List",
   "<",
   "Double",
   ">",
   "quantiles",
   ")",
   "{",
   "checkArgument",
   "(",
   "Ordering",
   ".",
   "natural",
   "(",
   ")",
   ".",
   "isOrdered",
   "(",
   "quantiles",
   ")",
   ",",
   "\"quantiles must be sorted in increasing order\"",
   ")",
   ";",
   "for",
   "(",
   "double",
   "quantile",
   ":",
   "quantiles",
   ")",
   "{",
   "checkArgument",
   "(",
   "quantile",
   ">=",
   "0",
   "&&",
   "quantile",
   "<=",
   "1",
   ",",
   "\"quantile must be between [0,1]\"",
   ")",
   ";",
   "}",
   "final",
   "ImmutableList",
   ".",
   "Builder",
   "<",
   "Long",
   ">",
   "builder",
   "=",
   "ImmutableList",
   ".",
   "builder",
   "(",
   ")",
   ";",
   "final",
   "PeekingIterator",
   "<",
   "Double",
   ">",
   "iterator",
   "=",
   "Iterators",
   ".",
   "peekingIterator",
   "(",
   "quantiles",
   ".",
   "iterator",
   "(",
   ")",
   ")",
   ";",
   "postOrderTraversal",
   "(",
   "root",
   ",",
   "new",
   "Callback",
   "(",
   ")",
   "{",
   "private",
   "double",
   "sum",
   ";",
   "public",
   "boolean",
   "process",
   "(",
   "int",
   "node",
   ")",
   "{",
   "sum",
   "+=",
   "counts",
   "[",
   "node",
   "]",
   ";",
   "while",
   "(",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   "&&",
   "sum",
   ">",
   "iterator",
   ".",
   "peek",
   "(",
   ")",
   "*",
   "weightedCount",
   ")",
   "{",
   "iterator",
   ".",
   "next",
   "(",
   ")",
   ";",
   "// we know the max value ever seen, so cap the percentile to provide better error",
   "// bounds in this case",
   "long",
   "value",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "upperBound",
   "(",
   "node",
   ")",
   ",",
   "max",
   ")",
   ";",
   "builder",
   ".",
   "add",
   "(",
   "value",
   ")",
   ";",
   "}",
   "return",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "// we finished the traversal without consuming all quantiles. This means the remaining quantiles",
   "// correspond to the max known value",
   "while",
   "(",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "builder",
   ".",
   "add",
   "(",
   "max",
   ")",
   ";",
   "iterator",
   ".",
   "next",
   "(",
   ")",
   ";",
   "}",
   "return",
   "builder",
   ".",
   "build",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-84",
  "nl_tokens": [
   "Returns",
   "the",
   "least",
   "of",
   "the",
   "specified",
   "values",
   "according",
   "to",
   "this",
   "ordering",
   ".",
   "If",
   "there",
   "are",
   "multiple",
   "least",
   "values",
   "the",
   "first",
   "of",
   "those",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "<",
   "E",
   "extends",
   "T",
   ">",
   "E",
   "<mask>",
   "(",
   "@",
   "NullableDecl",
   "E",
   "a",
   ",",
   "@",
   "NullableDecl",
   "E",
   "b",
   ",",
   "@",
   "NullableDecl",
   "E",
   "c",
   ",",
   "E",
   "...",
   "rest",
   ")",
   "{",
   "E",
   "minSoFar",
   "=",
   "min",
   "(",
   "min",
   "(",
   "a",
   ",",
   "b",
   ")",
   ",",
   "c",
   ")",
   ";",
   "for",
   "(",
   "E",
   "r",
   ":",
   "rest",
   ")",
   "{",
   "minSoFar",
   "=",
   "min",
   "(",
   "minSoFar",
   ",",
   "r",
   ")",
   ";",
   "}",
   "return",
   "minSoFar",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-85",
  "nl_tokens": [
   "Converts",
   "this",
   "constraint",
   "into",
   "a",
   "soft",
   "constraint",
   ".",
   "By",
   "default",
   "a",
   "balanced",
   "host",
   "attribute",
   "constraint",
   "is",
   "a",
   "hard",
   "constraint",
   "which",
   "is",
   "to",
   "say",
   "that",
   "Fenzo",
   "will",
   "guarantee",
   "that",
   "the",
   "constraint",
   "is",
   "applied",
   "and",
   "will",
   "fail",
   "to",
   "place",
   "a",
   "task",
   "if",
   "the",
   "only",
   "way",
   "it",
   "can",
   "do",
   "so",
   "is",
   "to",
   "violate",
   "the",
   "constraint",
   ".",
   "This",
   "method",
   "returns",
   "a",
   "{",
   "@link",
   "VMTaskFitnessCalculator",
   "}",
   "that",
   "represents",
   "this",
   "constraint",
   "as",
   "a",
   "soft",
   "constraint",
   "that",
   "will",
   "permit",
   "Fenzo",
   "to",
   "place",
   "a",
   "task",
   "in",
   "violation",
   "of",
   "the",
   "constraint",
   "if",
   "it",
   "cannot",
   "do",
   "so",
   "otherwise",
   "."
  ],
  "pl_tokens": [
   "public",
   "VMTaskFitnessCalculator",
   "asSoftConstraint",
   "(",
   ")",
   "{",
   "return",
   "new",
   "VMTaskFitnessCalculator",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "String",
   "getName",
   "(",
   ")",
   "{",
   "return",
   "name",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "calculateFitness",
   "(",
   "TaskRequest",
   "taskRequest",
   ",",
   "VirtualMachineCurrentState",
   "targetVM",
   ",",
   "TaskTrackerState",
   "taskTrackerState",
   ")",
   "{",
   "String",
   "targetHostAttrVal",
   "=",
   "AttributeUtilities",
   ".",
   "getAttrValue",
   "(",
   "targetVM",
   ".",
   "getCurrAvailableResources",
   "(",
   ")",
   ",",
   "hostAttributeName",
   ")",
   ";",
   "if",
   "(",
   "targetHostAttrVal",
   "==",
   "null",
   "||",
   "targetHostAttrVal",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   "0.0",
   ";",
   "}",
   "Set",
   "<",
   "String",
   ">",
   "coTasks",
   "=",
   "coTasksGetter",
   ".",
   "call",
   "(",
   "taskRequest",
   ".",
   "getId",
   "(",
   ")",
   ")",
   ";",
   "Map",
   "<",
   "String",
   ",",
   "Integer",
   ">",
   "usedAttribsMap",
   "=",
   "null",
   ";",
   "try",
   "{",
   "usedAttribsMap",
   "=",
   "getUsedAttributesMap",
   "(",
   "coTasks",
   ",",
   "taskTrackerState",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "return",
   "0.0",
   ";",
   "}",
   "final",
   "Integer",
   "integer",
   "=",
   "usedAttribsMap",
   ".",
   "get",
   "(",
   "targetHostAttrVal",
   ")",
   ";",
   "if",
   "(",
   "integer",
   "==",
   "null",
   ")",
   "return",
   "1.0",
   ";",
   "if",
   "(",
   "usedAttribsMap",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "return",
   "1.0",
   ";",
   "double",
   "avg",
   "=",
   "0.0",
   ";",
   "for",
   "(",
   "Integer",
   "i",
   ":",
   "usedAttribsMap",
   ".",
   "values",
   "(",
   ")",
   ")",
   "avg",
   "+=",
   "i",
   ";",
   "avg",
   "=",
   "Math",
   ".",
   "ceil",
   "(",
   "avg",
   "+",
   "1",
   "/",
   "Math",
   ".",
   "<mask>",
   "(",
   "expectedValues",
   ",",
   "usedAttribsMap",
   ".",
   "size",
   "(",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "integer",
   "<=",
   "avg",
   ")",
   "return",
   "(",
   "avg",
   "-",
   "(",
   "double",
   ")",
   "integer",
   ")",
   "/",
   "avg",
   ";",
   "return",
   "0.0",
   ";",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-86",
  "nl_tokens": [
   "Makes",
   "a",
   "given",
   "configuration",
   "which",
   "may",
   "have",
   "undefined",
   "values",
   "conform",
   "to",
   "the",
   "rules",
   "declared",
   "[",
   "here",
   "]",
   "(",
   "http",
   ":",
   "//",
   "robolectric",
   ".",
   "org",
   "/",
   "device",
   "-",
   "configuration",
   "/",
   ")",
   "."
  ],
  "pl_tokens": [
   "static",
   "void",
   "applyRules",
   "(",
   "Configuration",
   "configuration",
   ",",
   "DisplayMetrics",
   "displayMetrics",
   ",",
   "int",
   "apiLevel",
   ")",
   "{",
   "Locale",
   "locale",
   "=",
   "getLocale",
   "(",
   "configuration",
   ",",
   "apiLevel",
   ")",
   ";",
   "String",
   "language",
   "=",
   "locale",
   "==",
   "null",
   "?",
   "\"\"",
   ":",
   "locale",
   ".",
   "getLanguage",
   "(",
   ")",
   ";",
   "if",
   "(",
   "language",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "language",
   "=",
   "\"en\"",
   ";",
   "String",
   "country",
   "=",
   "locale",
   "==",
   "null",
   "?",
   "\"\"",
   ":",
   "locale",
   ".",
   "getCountry",
   "(",
   ")",
   ";",
   "if",
   "(",
   "country",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "country",
   "=",
   "\"us\"",
   ";",
   "}",
   "locale",
   "=",
   "new",
   "Locale",
   "(",
   "language",
   ",",
   "country",
   ")",
   ";",
   "setLocale",
   "(",
   "apiLevel",
   ",",
   "configuration",
   ",",
   "locale",
   ")",
   ";",
   "}",
   "if",
   "(",
   "apiLevel",
   "<=",
   "ConfigDescription",
   ".",
   "SDK_JELLY_BEAN",
   "&&",
   "getScreenLayoutLayoutDir",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "SCREENLAYOUT_LAYOUTDIR_UNDEFINED",
   ")",
   "{",
   "setScreenLayoutLayoutDir",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "SCREENLAYOUT_LAYOUTDIR_LTR",
   ")",
   ";",
   "}",
   "ScreenSize",
   "requestedScreenSize",
   "=",
   "getScreenSize",
   "(",
   "configuration",
   ")",
   ";",
   "if",
   "(",
   "requestedScreenSize",
   "==",
   "null",
   ")",
   "{",
   "requestedScreenSize",
   "=",
   "DEFAULT_SCREEN_SIZE",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "orientation",
   "==",
   "Configuration",
   ".",
   "ORIENTATION_UNDEFINED",
   "&&",
   "configuration",
   ".",
   "screenWidthDp",
   "!=",
   "0",
   "&&",
   "configuration",
   ".",
   "screenHeightDp",
   "!=",
   "0",
   ")",
   "{",
   "configuration",
   ".",
   "orientation",
   "=",
   "(",
   "configuration",
   ".",
   "screenWidthDp",
   ">",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   "?",
   "Configuration",
   ".",
   "ORIENTATION_LANDSCAPE",
   ":",
   "Configuration",
   ".",
   "ORIENTATION_PORTRAIT",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "screenWidthDp",
   "==",
   "0",
   ")",
   "{",
   "configuration",
   ".",
   "screenWidthDp",
   "=",
   "requestedScreenSize",
   ".",
   "width",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "screenHeightDp",
   "==",
   "0",
   ")",
   "{",
   "configuration",
   ".",
   "screenHeightDp",
   "=",
   "requestedScreenSize",
   ".",
   "height",
   ";",
   "if",
   "(",
   "(",
   "configuration",
   ".",
   "screenLayout",
   "&",
   "Configuration",
   ".",
   "SCREENLAYOUT_LONG_MASK",
   ")",
   "==",
   "Configuration",
   ".",
   "SCREENLAYOUT_LONG_YES",
   ")",
   "{",
   "configuration",
   ".",
   "screenHeightDp",
   "=",
   "(",
   "int",
   ")",
   "(",
   "configuration",
   ".",
   "screenHeightDp",
   "*",
   "1.25f",
   ")",
   ";",
   "}",
   "}",
   "int",
   "lesserDimenPx",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "configuration",
   ".",
   "screenWidthDp",
   ",",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   ";",
   "int",
   "greaterDimenPx",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "configuration",
   ".",
   "screenWidthDp",
   ",",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   ";",
   "if",
   "(",
   "configuration",
   ".",
   "smallestScreenWidthDp",
   "==",
   "0",
   ")",
   "{",
   "configuration",
   ".",
   "smallestScreenWidthDp",
   "=",
   "lesserDimenPx",
   ";",
   "}",
   "if",
   "(",
   "getScreenLayoutSize",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "SCREENLAYOUT_SIZE_UNDEFINED",
   ")",
   "{",
   "ScreenSize",
   "screenSize",
   "=",
   "ScreenSize",
   ".",
   "match",
   "(",
   "configuration",
   ".",
   "screenWidthDp",
   ",",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   ";",
   "setScreenLayoutSize",
   "(",
   "configuration",
   ",",
   "screenSize",
   ".",
   "configValue",
   ")",
   ";",
   "}",
   "if",
   "(",
   "getScreenLayoutLong",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "SCREENLAYOUT_LONG_UNDEFINED",
   ")",
   "{",
   "setScreenLayoutLong",
   "(",
   "configuration",
   ",",
   "(",
   "(",
   "float",
   ")",
   "greaterDimenPx",
   ")",
   "/",
   "lesserDimenPx",
   ">=",
   "1.75",
   "?",
   "Configuration",
   ".",
   "SCREENLAYOUT_LONG_YES",
   ":",
   "Configuration",
   ".",
   "SCREENLAYOUT_LONG_NO",
   ")",
   ";",
   "}",
   "if",
   "(",
   "getScreenLayoutRound",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "SCREENLAYOUT_ROUND_UNDEFINED",
   ")",
   "{",
   "setScreenLayoutRound",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "SCREENLAYOUT_ROUND_NO",
   ")",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "orientation",
   "==",
   "Configuration",
   ".",
   "ORIENTATION_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "orientation",
   "=",
   "configuration",
   ".",
   "screenWidthDp",
   ">",
   "configuration",
   ".",
   "screenHeightDp",
   "?",
   "Configuration",
   ".",
   "ORIENTATION_LANDSCAPE",
   ":",
   "Configuration",
   ".",
   "ORIENTATION_PORTRAIT",
   ";",
   "}",
   "else",
   "if",
   "(",
   "configuration",
   ".",
   "orientation",
   "==",
   "Configuration",
   ".",
   "ORIENTATION_PORTRAIT",
   "&&",
   "configuration",
   ".",
   "screenWidthDp",
   ">",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   "{",
   "swapXY",
   "(",
   "configuration",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "configuration",
   ".",
   "orientation",
   "==",
   "Configuration",
   ".",
   "ORIENTATION_LANDSCAPE",
   "&&",
   "configuration",
   ".",
   "screenWidthDp",
   "<",
   "configuration",
   ".",
   "screenHeightDp",
   ")",
   "{",
   "swapXY",
   "(",
   "configuration",
   ")",
   ";",
   "}",
   "if",
   "(",
   "getUiModeType",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "UI_MODE_TYPE_UNDEFINED",
   ")",
   "{",
   "setUiModeType",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "UI_MODE_TYPE_NORMAL",
   ")",
   ";",
   "}",
   "if",
   "(",
   "getUiModeNight",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "UI_MODE_NIGHT_UNDEFINED",
   ")",
   "{",
   "setUiModeNight",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "UI_MODE_NIGHT_NO",
   ")",
   ";",
   "}",
   "switch",
   "(",
   "displayMetrics",
   ".",
   "densityDpi",
   ")",
   "{",
   "case",
   "ResTable_config",
   ".",
   "DENSITY_DPI_ANY",
   ":",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'anydpi' isn't actually a dpi\"",
   ")",
   ";",
   "case",
   "ResTable_config",
   ".",
   "DENSITY_DPI_NONE",
   ":",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'nodpi' isn't actually a dpi\"",
   ")",
   ";",
   "case",
   "ResTable_config",
   ".",
   "DENSITY_DPI_UNDEFINED",
   ":",
   "// DisplayMetrics.DENSITY_DEFAULT is mdpi",
   "setDensity",
   "(",
   "DEFAULT_DENSITY",
   ",",
   "apiLevel",
   ",",
   "configuration",
   ",",
   "displayMetrics",
   ")",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "touchscreen",
   "==",
   "Configuration",
   ".",
   "TOUCHSCREEN_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "touchscreen",
   "=",
   "Configuration",
   ".",
   "TOUCHSCREEN_FINGER",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "keyboardHidden",
   "==",
   "Configuration",
   ".",
   "KEYBOARDHIDDEN_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "keyboardHidden",
   "=",
   "Configuration",
   ".",
   "KEYBOARDHIDDEN_SOFT",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "keyboard",
   "==",
   "Configuration",
   ".",
   "KEYBOARD_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "keyboard",
   "=",
   "Configuration",
   ".",
   "KEYBOARD_NOKEYS",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "navigationHidden",
   "==",
   "Configuration",
   ".",
   "NAVIGATIONHIDDEN_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "navigationHidden",
   "=",
   "Configuration",
   ".",
   "NAVIGATIONHIDDEN_YES",
   ";",
   "}",
   "if",
   "(",
   "configuration",
   ".",
   "navigation",
   "==",
   "Configuration",
   ".",
   "NAVIGATION_UNDEFINED",
   ")",
   "{",
   "configuration",
   ".",
   "navigation",
   "=",
   "Configuration",
   ".",
   "NAVIGATION_NONAV",
   ";",
   "}",
   "if",
   "(",
   "apiLevel",
   ">=",
   "VERSION_CODES",
   ".",
   "O",
   ")",
   "{",
   "if",
   "(",
   "getColorModeGamut",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED",
   ")",
   "{",
   "setColorModeGamut",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "COLOR_MODE_WIDE_COLOR_GAMUT_NO",
   ")",
   ";",
   "}",
   "if",
   "(",
   "getColorModeHdr",
   "(",
   "configuration",
   ")",
   "==",
   "Configuration",
   ".",
   "COLOR_MODE_HDR_UNDEFINED",
   ")",
   "{",
   "setColorModeHdr",
   "(",
   "configuration",
   ",",
   "Configuration",
   ".",
   "COLOR_MODE_HDR_NO",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-87",
  "nl_tokens": [
   "Sets",
   "the",
   "output",
   "frame",
   "local",
   "variable",
   "type",
   "at",
   "the",
   "given",
   "index",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "set",
   "(",
   "final",
   "int",
   "local",
   ",",
   "final",
   "int",
   "type",
   ")",
   "{",
   "// creates and/or resizes the output local variables array if necessary",
   "if",
   "(",
   "outputLocals",
   "==",
   "null",
   ")",
   "{",
   "outputLocals",
   "=",
   "new",
   "int",
   "[",
   "10",
   "]",
   ";",
   "}",
   "int",
   "n",
   "=",
   "outputLocals",
   ".",
   "length",
   ";",
   "if",
   "(",
   "local",
   ">=",
   "n",
   ")",
   "{",
   "int",
   "[",
   "]",
   "t",
   "=",
   "new",
   "int",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "local",
   "+",
   "1",
   ",",
   "2",
   "*",
   "n",
   ")",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "outputLocals",
   ",",
   "0",
   ",",
   "t",
   ",",
   "0",
   ",",
   "n",
   ")",
   ";",
   "outputLocals",
   "=",
   "t",
   ";",
   "}",
   "// sets the local variable",
   "outputLocals",
   "[",
   "local",
   "]",
   "=",
   "type",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-88",
  "nl_tokens": [
   "Abbreviates",
   "a",
   "String",
   "using",
   "ellipses",
   ".",
   "This",
   "will",
   "turn",
   "Now",
   "is",
   "the",
   "time",
   "for",
   "all",
   "good",
   "men",
   "into",
   "Now",
   "is",
   "the",
   "time",
   "for",
   "..."
  ],
  "pl_tokens": [
   "@",
   "Nonnull",
   "public",
   "static",
   "String",
   "abbreviate",
   "(",
   "String",
   "str",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "if",
   "(",
   "str",
   "==",
   "null",
   ")",
   "{",
   "return",
   "\"\"",
   ";",
   "}",
   "else",
   "if",
   "(",
   "str",
   ".",
   "length",
   "(",
   ")",
   "<=",
   "max",
   ")",
   "{",
   "return",
   "str",
   ";",
   "}",
   "else",
   "{",
   "return",
   "str",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "max",
   "-",
   "3",
   ")",
   "+",
   "\"...\"",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-89",
  "nl_tokens": [
   "Returns",
   "the",
   "index",
   "of",
   "the",
   "end",
   "of",
   "the",
   "last",
   "span",
   "before",
   "the",
   "cursor",
   "or",
   "the",
   "start",
   "of",
   "the",
   "current",
   "line",
   "if",
   "there",
   "are",
   "no",
   "spans",
   "before",
   "the",
   "cursor",
   "."
  ],
  "pl_tokens": [
   "protected",
   "int",
   "getSearchStartIndex",
   "(",
   "final",
   "@",
   "NonNull",
   "Spanned",
   "text",
   ",",
   "int",
   "cursor",
   ")",
   "{",
   "if",
   "(",
   "cursor",
   "<",
   "0",
   "||",
   "cursor",
   ">",
   "text",
   ".",
   "length",
   "(",
   ")",
   ")",
   "{",
   "cursor",
   "=",
   "0",
   ";",
   "}",
   "// Get index of the end of the last span before the cursor (or 0 if does not exist)",
   "MentionSpan",
   "[",
   "]",
   "spans",
   "=",
   "text",
   ".",
   "getSpans",
   "(",
   "0",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "MentionSpan",
   ".",
   "class",
   ")",
   ";",
   "int",
   "closestToCursor",
   "=",
   "0",
   ";",
   "for",
   "(",
   "MentionSpan",
   "span",
   ":",
   "spans",
   ")",
   "{",
   "int",
   "end",
   "=",
   "text",
   ".",
   "getSpanEnd",
   "(",
   "span",
   ")",
   ";",
   "if",
   "(",
   "end",
   ">",
   "closestToCursor",
   "&&",
   "end",
   "<=",
   "cursor",
   ")",
   "{",
   "closestToCursor",
   "=",
   "end",
   ";",
   "}",
   "}",
   "// Get the index of the start of the line",
   "String",
   "textString",
   "=",
   "text",
   ".",
   "toString",
   "(",
   ")",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "cursor",
   ")",
   ";",
   "int",
   "lineStartIndex",
   "=",
   "0",
   ";",
   "if",
   "(",
   "textString",
   ".",
   "contains",
   "(",
   "mConfig",
   ".",
   "LINE_SEPARATOR",
   ")",
   ")",
   "{",
   "lineStartIndex",
   "=",
   "textString",
   ".",
   "lastIndexOf",
   "(",
   "mConfig",
   ".",
   "LINE_SEPARATOR",
   ")",
   "+",
   "1",
   ";",
   "}",
   "// Return whichever is closer before to the cursor",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "closestToCursor",
   ",",
   "lineStartIndex",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-90",
  "nl_tokens": [
   "Write",
   "out",
   "up",
   "to",
   "max",
   "words",
   "returns",
   "how",
   "many",
   "were",
   "written"
  ],
  "pl_tokens": [
   "public",
   "int",
   "discharge",
   "(",
   "BitmapStorage32",
   "container",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "int",
   "index",
   "=",
   "0",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "if",
   "(",
   "index",
   "+",
   "getRunningLength",
   "(",
   ")",
   ">",
   "max",
   ")",
   "{",
   "final",
   "int",
   "offset",
   "=",
   "max",
   "-",
   "index",
   ";",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "getRunningBit",
   "(",
   ")",
   ",",
   "offset",
   ")",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "RunningLength",
   "-=",
   "offset",
   ";",
   "return",
   "max",
   ";",
   "}",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "getRunningBit",
   "(",
   ")",
   ",",
   "getRunningLength",
   "(",
   ")",
   ")",
   ";",
   "index",
   "+=",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "getNumberOfLiteralWords",
   "(",
   ")",
   "+",
   "index",
   ">",
   "max",
   ")",
   "{",
   "final",
   "int",
   "offset",
   "=",
   "max",
   "-",
   "index",
   ";",
   "writeLiteralWords",
   "(",
   "offset",
   ",",
   "container",
   ")",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "RunningLength",
   "=",
   "0",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "NumberOfLiteralWords",
   "-=",
   "offset",
   ";",
   "this",
   ".",
   "literalWordStartPosition",
   "+=",
   "offset",
   ";",
   "return",
   "max",
   ";",
   "}",
   "writeLiteralWords",
   "(",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ",",
   "container",
   ")",
   ";",
   "index",
   "+=",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "next",
   "(",
   ")",
   ")",
   "break",
   ";",
   "}",
   "return",
   "index",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-91",
  "nl_tokens": [
   "Generates",
   "a",
   "random",
   "decimal",
   "number",
   "between",
   "min",
   "and",
   "max",
   "."
  ],
  "pl_tokens": [
   "private",
   "static",
   "Decimal",
   "randDecimal",
   "(",
   "Decimal",
   "<mask>",
   ",",
   "Decimal",
   "max",
   ")",
   "{",
   "Decimal",
   "randomDecimal",
   "=",
   "null",
   ";",
   "if",
   "(",
   "min",
   "!=",
   "null",
   "&&",
   "max",
   "!=",
   "null",
   "&&",
   "min",
   ".",
   "isLessThan",
   "(",
   "max",
   ")",
   ")",
   "{",
   "randomDecimal",
   "=",
   "max",
   ".",
   "minus",
   "(",
   "min",
   ")",
   ".",
   "multipliedBy",
   "(",
   "Decimal",
   ".",
   "valueOf",
   "(",
   "Math",
   ".",
   "random",
   "(",
   ")",
   ")",
   ")",
   ".",
   "plus",
   "(",
   "min",
   ")",
   ";",
   "}",
   "return",
   "randomDecimal",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-92",
  "nl_tokens": [
   "Get",
   "a",
   "lower",
   "bound",
   "on",
   "the",
   "quantiles",
   "for",
   "the",
   "given",
   "proportions",
   ".",
   "A",
   "returned",
   "q",
   "quantile",
   "is",
   "guaranteed",
   "to",
   "be",
   "within",
   "the",
   "q",
   "-",
   "maxError",
   "and",
   "q",
   "quantiles",
   ".",
   "<p",
   ">",
   "The",
   "input",
   "list",
   "of",
   "quantile",
   "proportions",
   "must",
   "be",
   "sorted",
   "in",
   "increasing",
   "order",
   "and",
   "each",
   "value",
   "must",
   "be",
   "in",
   "the",
   "range",
   "[",
   "0",
   "1",
   "]"
  ],
  "pl_tokens": [
   "public",
   "List",
   "<",
   "Long",
   ">",
   "getQuantilesLowerBound",
   "(",
   "List",
   "<",
   "Double",
   ">",
   "quantiles",
   ")",
   "{",
   "checkArgument",
   "(",
   "Ordering",
   ".",
   "natural",
   "(",
   ")",
   ".",
   "isOrdered",
   "(",
   "quantiles",
   ")",
   ",",
   "\"quantiles must be sorted in increasing order\"",
   ")",
   ";",
   "for",
   "(",
   "double",
   "quantile",
   ":",
   "quantiles",
   ")",
   "{",
   "checkArgument",
   "(",
   "quantile",
   ">=",
   "0",
   "&&",
   "quantile",
   "<=",
   "1",
   ",",
   "\"quantile must be between [0,1]\"",
   ")",
   ";",
   "}",
   "List",
   "<",
   "Double",
   ">",
   "reversedQuantiles",
   "=",
   "ImmutableList",
   ".",
   "copyOf",
   "(",
   "quantiles",
   ")",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "ImmutableList",
   ".",
   "Builder",
   "<",
   "Long",
   ">",
   "builder",
   "=",
   "ImmutableList",
   ".",
   "builder",
   "(",
   ")",
   ";",
   "PeekingIterator",
   "<",
   "Double",
   ">",
   "iterator",
   "=",
   "Iterators",
   ".",
   "peekingIterator",
   "(",
   "reversedQuantiles",
   ".",
   "iterator",
   "(",
   ")",
   ")",
   ";",
   "postOrderTraversal",
   "(",
   "root",
   ",",
   "new",
   "Callback",
   "(",
   ")",
   "{",
   "private",
   "double",
   "sum",
   ";",
   "@",
   "Override",
   "public",
   "boolean",
   "process",
   "(",
   "int",
   "node",
   ")",
   "{",
   "sum",
   "+=",
   "counts",
   "[",
   "node",
   "]",
   ";",
   "while",
   "(",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   "&&",
   "sum",
   ">",
   "(",
   "1.0",
   "-",
   "iterator",
   ".",
   "peek",
   "(",
   ")",
   ")",
   "*",
   "weightedCount",
   ")",
   "{",
   "iterator",
   ".",
   "next",
   "(",
   ")",
   ";",
   "// we know the min value ever seen, so cap the percentile to provide better error",
   "// bounds in this case",
   "long",
   "value",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "lowerBound",
   "(",
   "node",
   ")",
   ",",
   "min",
   ")",
   ";",
   "builder",
   ".",
   "add",
   "(",
   "value",
   ")",
   ";",
   "}",
   "return",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   ";",
   "}",
   "}",
   ",",
   "TraversalOrder",
   ".",
   "REVERSE",
   ")",
   ";",
   "// we finished the traversal without consuming all quantiles. This means the remaining quantiles",
   "// correspond to the max known value",
   "while",
   "(",
   "iterator",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "builder",
   ".",
   "add",
   "(",
   "min",
   ")",
   ";",
   "iterator",
   ".",
   "next",
   "(",
   ")",
   ";",
   "}",
   "return",
   "builder",
   ".",
   "build",
   "(",
   ")",
   ".",
   "reverse",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-93",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "Long",
   "zRemRangeByScore",
   "(",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "try",
   "{",
   "if",
   "(",
   "isPipelined",
   "(",
   ")",
   ")",
   "{",
   "pipeline",
   "(",
   "new",
   "JedisResult",
   "(",
   "pipeline",
   ".",
   "zremrangeByScore",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ")",
   ")",
   ";",
   "return",
   "null",
   ";",
   "}",
   "return",
   "client",
   ".",
   "zremrangeByScore",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "ex",
   ")",
   "{",
   "throw",
   "convertException",
   "(",
   "ex",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-94",
  "nl_tokens": [
   "Calculates",
   "the",
   "cash",
   "flow",
   "for",
   "a",
   "single",
   "trade",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "calculate",
   "(",
   "Trade",
   "trade",
   ")",
   "{",
   "final",
   "int",
   "entryIndex",
   "=",
   "trade",
   ".",
   "getEntry",
   "(",
   ")",
   ".",
   "getIndex",
   "(",
   ")",
   ";",
   "int",
   "begin",
   "=",
   "entryIndex",
   "+",
   "1",
   ";",
   "if",
   "(",
   "begin",
   ">",
   "values",
   ".",
   "size",
   "(",
   ")",
   ")",
   "{",
   "Decimal",
   "lastValue",
   "=",
   "values",
   ".",
   "get",
   "(",
   "values",
   ".",
   "size",
   "(",
   ")",
   "-",
   "1",
   ")",
   ";",
   "values",
   ".",
   "addAll",
   "(",
   "Collections",
   ".",
   "nCopies",
   "(",
   "begin",
   "-",
   "values",
   ".",
   "size",
   "(",
   ")",
   ",",
   "lastValue",
   ")",
   ")",
   ";",
   "}",
   "int",
   "end",
   "=",
   "trade",
   ".",
   "getExit",
   "(",
   ")",
   ".",
   "getIndex",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "begin",
   ",",
   "1",
   ")",
   ";",
   "i",
   "<=",
   "end",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Decimal",
   "ratio",
   ";",
   "if",
   "(",
   "trade",
   ".",
   "getEntry",
   "(",
   ")",
   ".",
   "isBuy",
   "(",
   ")",
   ")",
   "{",
   "ratio",
   "=",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "i",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ".",
   "dividedBy",
   "(",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "entryIndex",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ratio",
   "=",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "entryIndex",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ".",
   "dividedBy",
   "(",
   "timeSeries",
   ".",
   "getTick",
   "(",
   "i",
   ")",
   ".",
   "getClosePrice",
   "(",
   ")",
   ")",
   ";",
   "}",
   "values",
   ".",
   "add",
   "(",
   "values",
   ".",
   "get",
   "(",
   "entryIndex",
   ")",
   ".",
   "multipliedBy",
   "(",
   "ratio",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-95",
  "nl_tokens": [
   "Copy",
   "this",
   "DBCollectionFindOptions",
   "instance",
   "into",
   "a",
   "new",
   "instance",
   "."
  ],
  "pl_tokens": [
   "public",
   "DBCollectionFindOptions",
   "copy",
   "(",
   ")",
   "{",
   "DBCollectionFindOptions",
   "copiedOptions",
   "=",
   "new",
   "DBCollectionFindOptions",
   "(",
   ")",
   ";",
   "copiedOptions",
   ".",
   "batchSize",
   "(",
   "batchSize",
   ")",
   ";",
   "copiedOptions",
   ".",
   "limit",
   "(",
   "limit",
   ")",
   ";",
   "copiedOptions",
   ".",
   "modifiers",
   "(",
   "modifiers",
   ")",
   ";",
   "copiedOptions",
   ".",
   "projection",
   "(",
   "projection",
   ")",
   ";",
   "copiedOptions",
   ".",
   "maxTime",
   "(",
   "maxTimeMS",
   ",",
   "TimeUnit",
   ".",
   "MILLISECONDS",
   ")",
   ";",
   "copiedOptions",
   ".",
   "maxAwaitTime",
   "(",
   "maxAwaitTimeMS",
   ",",
   "TimeUnit",
   ".",
   "MILLISECONDS",
   ")",
   ";",
   "copiedOptions",
   ".",
   "skip",
   "(",
   "skip",
   ")",
   ";",
   "copiedOptions",
   ".",
   "sort",
   "(",
   "sort",
   ")",
   ";",
   "copiedOptions",
   ".",
   "cursorType",
   "(",
   "cursorType",
   ")",
   ";",
   "copiedOptions",
   ".",
   "noCursorTimeout",
   "(",
   "noCursorTimeout",
   ")",
   ";",
   "copiedOptions",
   ".",
   "oplogReplay",
   "(",
   "oplogReplay",
   ")",
   ";",
   "copiedOptions",
   ".",
   "partial",
   "(",
   "partial",
   ")",
   ";",
   "copiedOptions",
   ".",
   "readPreference",
   "(",
   "readPreference",
   ")",
   ";",
   "copiedOptions",
   ".",
   "readConcern",
   "(",
   "readConcern",
   ")",
   ";",
   "copiedOptions",
   ".",
   "collation",
   "(",
   "collation",
   ")",
   ";",
   "copiedOptions",
   ".",
   "comment",
   "(",
   "comment",
   ")",
   ";",
   "copiedOptions",
   ".",
   "hint",
   "(",
   "hint",
   ")",
   ";",
   "copiedOptions",
   ".",
   "<mask>",
   "(",
   "max",
   ")",
   ";",
   "copiedOptions",
   ".",
   "min",
   "(",
   "min",
   ")",
   ";",
   "copiedOptions",
   ".",
   "returnKey",
   "(",
   "returnKey",
   ")",
   ";",
   "copiedOptions",
   ".",
   "showRecordId",
   "(",
   "showRecordId",
   ")",
   ";",
   "return",
   "copiedOptions",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-96",
  "nl_tokens": [
   "Returns",
   "the",
   "minimum",
   "of",
   "this",
   "{"
  ],
  "pl_tokens": [
   "public",
   "Decimal",
   "<mask>",
   "(",
   "Decimal",
   "other",
   ")",
   "{",
   "if",
   "(",
   "(",
   "this",
   "==",
   "NaN",
   ")",
   "||",
   "(",
   "other",
   "==",
   "NaN",
   ")",
   ")",
   "{",
   "return",
   "NaN",
   ";",
   "}",
   "return",
   "(",
   "compareTo",
   "(",
   "other",
   ")",
   "<=",
   "0",
   "?",
   "this",
   ":",
   "other",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-97",
  "nl_tokens": [
   "Return",
   "a",
   "rule",
   "with",
   "a",
   "minimum",
   "number",
   "of",
   "cycles",
   "to",
   "run"
  ],
  "pl_tokens": [
   "public",
   "Rule",
   "<mask>",
   "(",
   "final",
   "int",
   "nrCycles",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "nrCycles",
   ">=",
   "0",
   ",",
   "\"illegal repetition number specified (\"",
   "+",
   "nrCycles",
   "+",
   "\"), must be 0 or greater\"",
   ")",
   ";",
   "return",
   "range",
   "(",
   "Range",
   ".",
   "atLeast",
   "(",
   "nrCycles",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-98",
  "nl_tokens": [
   "************************************************************************"
  ],
  "pl_tokens": [
   "public",
   "int",
   "calculateOverlap",
   "(",
   "MeetingAssignment",
   "other",
   ")",
   "{",
   "if",
   "(",
   "startingTimeGrain",
   "==",
   "null",
   "||",
   "other",
   ".",
   "getStartingTimeGrain",
   "(",
   ")",
   "==",
   "null",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "int",
   "start",
   "=",
   "startingTimeGrain",
   ".",
   "getGrainIndex",
   "(",
   ")",
   ";",
   "int",
   "end",
   "=",
   "start",
   "+",
   "meeting",
   ".",
   "getDurationInGrains",
   "(",
   ")",
   ";",
   "int",
   "otherStart",
   "=",
   "other",
   ".",
   "startingTimeGrain",
   ".",
   "getGrainIndex",
   "(",
   ")",
   ";",
   "int",
   "otherEnd",
   "=",
   "otherStart",
   "+",
   "other",
   ".",
   "meeting",
   ".",
   "getDurationInGrains",
   "(",
   ")",
   ";",
   "if",
   "(",
   "end",
   "<",
   "otherStart",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "else",
   "if",
   "(",
   "otherEnd",
   "<",
   "start",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "end",
   ",",
   "otherEnd",
   ")",
   "-",
   "Math",
   ".",
   "max",
   "(",
   "start",
   ",",
   "otherStart",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-99",
  "nl_tokens": [
   "Converts",
   "this",
   "cursor",
   "to",
   "an",
   "array",
   "."
  ],
  "pl_tokens": [
   "public",
   "List",
   "<",
   "DBObject",
   ">",
   "toArray",
   "(",
   "final",
   "int",
   "<mask>",
   ")",
   "{",
   "checkIteratorOrArray",
   "(",
   "IteratorOrArray",
   ".",
   "ARRAY",
   ")",
   ";",
   "fillArray",
   "(",
   "max",
   "-",
   "1",
   ")",
   ";",
   "return",
   "all",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-100",
  "nl_tokens": [
   "Returns",
   "this",
   "for",
   "chaining"
  ],
  "pl_tokens": [
   "public",
   "DenseHll",
   "mergeWith",
   "(",
   "DenseHll",
   "other",
   ")",
   "{",
   "if",
   "(",
   "indexBitLength",
   "!=",
   "other",
   ".",
   "indexBitLength",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Cannot merge HLLs with different number of buckets: %s vs %s\"",
   ",",
   "numberOfBuckets",
   "(",
   "indexBitLength",
   ")",
   ",",
   "numberOfBuckets",
   "(",
   "other",
   ".",
   "indexBitLength",
   ")",
   ")",
   ")",
   ";",
   "}",
   "int",
   "baseline",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "baseline",
   ",",
   "other",
   ".",
   "baseline",
   ")",
   ";",
   "int",
   "baselineCount",
   "=",
   "0",
   ";",
   "int",
   "overflows",
   "=",
   "0",
   ";",
   "int",
   "[",
   "]",
   "overflowBuckets",
   "=",
   "new",
   "int",
   "[",
   "OVERFLOW_GROW_INCREMENT",
   "]",
   ";",
   "byte",
   "[",
   "]",
   "overflowValues",
   "=",
   "new",
   "byte",
   "[",
   "OVERFLOW_GROW_INCREMENT",
   "]",
   ";",
   "int",
   "numberOfBuckets",
   "=",
   "numberOfBuckets",
   "(",
   "indexBitLength",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "numberOfBuckets",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "value",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "getValue",
   "(",
   "i",
   ")",
   ",",
   "other",
   ".",
   "getValue",
   "(",
   "i",
   ")",
   ")",
   ";",
   "int",
   "delta",
   "=",
   "value",
   "-",
   "baseline",
   ";",
   "if",
   "(",
   "delta",
   "==",
   "0",
   ")",
   "{",
   "baselineCount",
   "++",
   ";",
   "}",
   "else",
   "if",
   "(",
   "delta",
   ">",
   "MAX_DELTA",
   ")",
   "{",
   "// grow overflows arrays if necessary",
   "overflowBuckets",
   "=",
   "Ints",
   ".",
   "ensureCapacity",
   "(",
   "overflowBuckets",
   ",",
   "overflows",
   "+",
   "1",
   ",",
   "OVERFLOW_GROW_INCREMENT",
   ")",
   ";",
   "overflowValues",
   "=",
   "Bytes",
   ".",
   "ensureCapacity",
   "(",
   "overflowValues",
   ",",
   "overflows",
   "+",
   "1",
   ",",
   "OVERFLOW_GROW_INCREMENT",
   ")",
   ";",
   "overflowBuckets",
   "[",
   "overflows",
   "]",
   "=",
   "i",
   ";",
   "overflowValues",
   "[",
   "overflows",
   "]",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "delta",
   "-",
   "MAX_DELTA",
   ")",
   ";",
   "overflows",
   "++",
   ";",
   "delta",
   "=",
   "MAX_DELTA",
   ";",
   "}",
   "setDelta",
   "(",
   "i",
   ",",
   "delta",
   ")",
   ";",
   "}",
   "this",
   ".",
   "baseline",
   "=",
   "(",
   "byte",
   ")",
   "baseline",
   ";",
   "this",
   ".",
   "baselineCount",
   "=",
   "baselineCount",
   ";",
   "this",
   ".",
   "overflows",
   "=",
   "overflows",
   ";",
   "this",
   ".",
   "overflowBuckets",
   "=",
   "overflowBuckets",
   ";",
   "this",
   ".",
   "overflowValues",
   "=",
   "overflowValues",
   ";",
   "// all baseline values in one of the HLLs lost to the values",
   "// in the other HLL, so we need to adjust the final baseline",
   "adjustBaselineIfNeeded",
   "(",
   ")",
   ";",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-101",
  "nl_tokens": [
   "Writes",
   "to",
   "the",
   "given",
   "{",
   "@link",
   "ByteBuffer",
   "}",
   "a",
   "byte",
   "representation",
   "of",
   "this",
   "instance",
   "."
  ],
  "pl_tokens": [
   "void",
   "writeTo",
   "(",
   "ByteBuffer",
   "buffer",
   ")",
   "{",
   "checkNotNull",
   "(",
   "buffer",
   ")",
   ";",
   "checkArgument",
   "(",
   "buffer",
   ".",
   "remaining",
   "(",
   ")",
   ">=",
   "BYTES",
   ",",
   "\"Expected at least Stats.BYTES = %s remaining , got %s\"",
   ",",
   "BYTES",
   ",",
   "buffer",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "buffer",
   ".",
   "putLong",
   "(",
   "count",
   ")",
   ".",
   "putDouble",
   "(",
   "mean",
   ")",
   ".",
   "putDouble",
   "(",
   "sumOfSquaresOfDeltas",
   ")",
   ".",
   "putDouble",
   "(",
   "<mask>",
   ")",
   ".",
   "putDouble",
   "(",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-102",
  "nl_tokens": [
   "Increases",
   "the",
   "size",
   "of",
   "cached",
   "results",
   "buffer",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "increaseLengthTo",
   "(",
   "int",
   "index",
   ",",
   "int",
   "maxLength",
   ")",
   "{",
   "if",
   "(",
   "highestResultIndex",
   ">",
   "-",
   "1",
   ")",
   "{",
   "int",
   "newResultsCount",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "index",
   "-",
   "highestResultIndex",
   ",",
   "maxLength",
   ")",
   ";",
   "if",
   "(",
   "newResultsCount",
   "==",
   "maxLength",
   ")",
   "{",
   "results",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "results",
   ".",
   "addAll",
   "(",
   "Collections",
   ".",
   "<",
   "T",
   ">",
   "nCopies",
   "(",
   "maxLength",
   ",",
   "null",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "newResultsCount",
   ">",
   "0",
   ")",
   "{",
   "results",
   ".",
   "addAll",
   "(",
   "Collections",
   ".",
   "<",
   "T",
   ">",
   "nCopies",
   "(",
   "newResultsCount",
   ",",
   "null",
   ")",
   ")",
   ";",
   "removeExceedingResults",
   "(",
   "maxLength",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "// First use of cache",
   "assert",
   "results",
   ".",
   "isEmpty",
   "(",
   ")",
   ":",
   "\"Cache results list should be empty\"",
   ";",
   "results",
   ".",
   "addAll",
   "(",
   "Collections",
   ".",
   "<",
   "T",
   ">",
   "nCopies",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "index",
   "+",
   "1",
   ",",
   "maxLength",
   ")",
   ",",
   "null",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-103",
  "nl_tokens": [
   "Get",
   "the",
   "minimum",
   "sequence",
   "from",
   "an",
   "array",
   "of",
   "{",
   "@link",
   "Sequence",
   "}",
   "s",
   "."
  ],
  "pl_tokens": [
   "static",
   "long",
   "getMinimumSequence",
   "(",
   "@",
   "Nullable",
   "Sequence",
   "excludeSequence",
   ",",
   "final",
   "Sequence",
   "[",
   "]",
   "sequences",
   ",",
   "long",
   "minimum",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ",",
   "n",
   "=",
   "sequences",
   ".",
   "length",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "excludeSequence",
   "==",
   "null",
   "||",
   "sequences",
   "[",
   "i",
   "]",
   "!=",
   "excludeSequence",
   ")",
   "{",
   "long",
   "value",
   "=",
   "sequences",
   "[",
   "i",
   "]",
   ".",
   "getAsLong",
   "(",
   ")",
   ";",
   "minimum",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minimum",
   ",",
   "value",
   ")",
   ";",
   "}",
   "}",
   "return",
   "minimum",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-104",
  "nl_tokens": [
   "Reads",
   "data",
   "from",
   "an",
   "input",
   "stream",
   "and",
   "writes",
   "it",
   "to",
   "an",
   "output",
   "stream",
   "calculates",
   "the",
   "length",
   "of",
   "the",
   "data",
   "written",
   "and",
   "optionally",
   "calculates",
   "the",
   "MD5",
   "hash",
   "for",
   "the",
   "data",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "StreamMd5AndLength",
   "writeToOutputStream",
   "(",
   "final",
   "InputStream",
   "sourceStream",
   ",",
   "final",
   "OutputStream",
   "outStream",
   ",",
   "long",
   "writeLength",
   ",",
   "final",
   "boolean",
   "rewindSourceStream",
   ",",
   "final",
   "boolean",
   "calculateMD5",
   ",",
   "OperationContext",
   "opContext",
   ",",
   "final",
   "RequestOptions",
   "options",
   ",",
   "StorageRequest",
   "<",
   "?",
   ",",
   "?",
   ",",
   "Integer",
   ">",
   "request",
   ",",
   "StreamMd5AndLength",
   "descriptor",
   ")",
   "throws",
   "IOException",
   ",",
   "StorageException",
   "{",
   "if",
   "(",
   "rewindSourceStream",
   "&&",
   "sourceStream",
   ".",
   "markSupported",
   "(",
   ")",
   ")",
   "{",
   "sourceStream",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "sourceStream",
   ".",
   "mark",
   "(",
   "Constants",
   ".",
   "MAX_MARK_LENGTH",
   ")",
   ";",
   "}",
   "if",
   "(",
   "descriptor",
   "==",
   "null",
   ")",
   "{",
   "descriptor",
   "=",
   "new",
   "StreamMd5AndLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "calculateMD5",
   ")",
   "{",
   "try",
   "{",
   "descriptor",
   ".",
   "setDigest",
   "(",
   "MessageDigest",
   ".",
   "getInstance",
   "(",
   "\"MD5\"",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "final",
   "NoSuchAlgorithmException",
   "e",
   ")",
   "{",
   "// This wont happen, throw fatal.",
   "throw",
   "Utility",
   ".",
   "generateNewUnexpectedStorageException",
   "(",
   "e",
   ")",
   ";",
   "}",
   "}",
   "}",
   "else",
   "{",
   "descriptor",
   ".",
   "setMd5",
   "(",
   "null",
   ")",
   ";",
   "}",
   "if",
   "(",
   "writeLength",
   "<",
   "0",
   ")",
   "{",
   "writeLength",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "}",
   "final",
   "byte",
   "[",
   "]",
   "retrievedBuff",
   "=",
   "new",
   "byte",
   "[",
   "Constants",
   ".",
   "BUFFER_COPY_LENGTH",
   "]",
   ";",
   "int",
   "nextCopy",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "retrievedBuff",
   ".",
   "length",
   ",",
   "writeLength",
   ")",
   ";",
   "int",
   "count",
   "=",
   "sourceStream",
   ".",
   "read",
   "(",
   "retrievedBuff",
   ",",
   "0",
   ",",
   "nextCopy",
   ")",
   ";",
   "while",
   "(",
   "nextCopy",
   ">",
   "0",
   "&&",
   "count",
   "!=",
   "-",
   "1",
   ")",
   "{",
   "// if maximum execution time would be exceeded",
   "if",
   "(",
   "Utility",
   ".",
   "validateMaxExecutionTimeout",
   "(",
   "options",
   ".",
   "getOperationExpiryTimeInMs",
   "(",
   ")",
   ")",
   ")",
   "{",
   "// throw an exception",
   "TimeoutException",
   "timeoutException",
   "=",
   "new",
   "TimeoutException",
   "(",
   "SR",
   ".",
   "MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION",
   ")",
   ";",
   "throw",
   "Utility",
   ".",
   "initIOException",
   "(",
   "timeoutException",
   ")",
   ";",
   "}",
   "if",
   "(",
   "outStream",
   "!=",
   "null",
   ")",
   "{",
   "outStream",
   ".",
   "write",
   "(",
   "retrievedBuff",
   ",",
   "0",
   ",",
   "count",
   ")",
   ";",
   "}",
   "if",
   "(",
   "calculateMD5",
   ")",
   "{",
   "descriptor",
   ".",
   "getDigest",
   "(",
   ")",
   ".",
   "update",
   "(",
   "retrievedBuff",
   ",",
   "0",
   ",",
   "count",
   ")",
   ";",
   "}",
   "descriptor",
   ".",
   "setLength",
   "(",
   "descriptor",
   ".",
   "getLength",
   "(",
   ")",
   "+",
   "count",
   ")",
   ";",
   "descriptor",
   ".",
   "setCurrentOperationByteCount",
   "(",
   "descriptor",
   ".",
   "getCurrentOperationByteCount",
   "(",
   ")",
   "+",
   "count",
   ")",
   ";",
   "if",
   "(",
   "request",
   "!=",
   "null",
   ")",
   "{",
   "request",
   ".",
   "setCurrentRequestByteCount",
   "(",
   "request",
   ".",
   "getCurrentRequestByteCount",
   "(",
   ")",
   "+",
   "count",
   ")",
   ";",
   "request",
   ".",
   "setCurrentDescriptor",
   "(",
   "descriptor",
   ")",
   ";",
   "}",
   "nextCopy",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "min",
   "(",
   "retrievedBuff",
   ".",
   "length",
   ",",
   "writeLength",
   "-",
   "descriptor",
   ".",
   "getLength",
   "(",
   ")",
   ")",
   ";",
   "count",
   "=",
   "sourceStream",
   ".",
   "read",
   "(",
   "retrievedBuff",
   ",",
   "0",
   ",",
   "nextCopy",
   ")",
   ";",
   "}",
   "if",
   "(",
   "outStream",
   "!=",
   "null",
   ")",
   "{",
   "outStream",
   ".",
   "flush",
   "(",
   ")",
   ";",
   "}",
   "return",
   "descriptor",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-105",
  "nl_tokens": [
   "Returns",
   "the",
   "least",
   "value",
   "present",
   "in",
   "{",
   "@code",
   "array",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "byte",
   "<mask>",
   "(",
   "byte",
   "...",
   "array",
   ")",
   "{",
   "checkArgument",
   "(",
   "array",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "int",
   "min",
   "=",
   "toInt",
   "(",
   "array",
   "[",
   "0",
   "]",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "next",
   "=",
   "toInt",
   "(",
   "array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "next",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "next",
   ";",
   "}",
   "}",
   "return",
   "(",
   "byte",
   ")",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-106",
  "nl_tokens": [
   "Constructs",
   "an",
   "{",
   "@code",
   "ImmutableSet",
   "}",
   "from",
   "the",
   "first",
   "{",
   "@code",
   "n",
   "}",
   "elements",
   "of",
   "the",
   "specified",
   "array",
   "which",
   "we",
   "have",
   "no",
   "particular",
   "reason",
   "to",
   "believe",
   "does",
   "or",
   "does",
   "not",
   "contain",
   "duplicates",
   ".",
   "If",
   "{",
   "@code",
   "k",
   "}",
   "is",
   "the",
   "size",
   "of",
   "the",
   "returned",
   "{",
   "@code",
   "ImmutableSet",
   "}",
   "then",
   "the",
   "unique",
   "elements",
   "of",
   "{",
   "@code",
   "elements",
   "}",
   "will",
   "be",
   "in",
   "the",
   "first",
   "{",
   "@code",
   "k",
   "}",
   "positions",
   "and",
   "{",
   "@code",
   "elements",
   "[",
   "i",
   "]",
   "==",
   "null",
   "}",
   "for",
   "{",
   "@code",
   "k",
   "<",
   "=",
   "i",
   "<",
   "n",
   "}",
   "."
  ],
  "pl_tokens": [
   "private",
   "static",
   "<",
   "E",
   ">",
   "ImmutableSet",
   "<",
   "E",
   ">",
   "constructUnknownDuplication",
   "(",
   "int",
   "n",
   ",",
   "Object",
   "...",
   "elements",
   ")",
   "{",
   "// Guess the size is \"halfway between\" all duplicates and no duplicates, on a log scale.",
   "return",
   "construct",
   "(",
   "n",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "ImmutableCollection",
   ".",
   "Builder",
   ".",
   "DEFAULT_INITIAL_CAPACITY",
   ",",
   "IntMath",
   ".",
   "sqrt",
   "(",
   "n",
   ",",
   "RoundingMode",
   ".",
   "CEILING",
   ")",
   ")",
   ",",
   "elements",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-107",
  "nl_tokens": [
   "\u8fd4\u56de\u6700\u5c0f\u7684\u4e00\u4e2a"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "...",
   "nums",
   ")",
   "{",
   "return",
   "takeOne",
   "(",
   "new",
   "CompareSomeThing",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "boolean",
   "compare",
   "(",
   "int",
   "arg0",
   ",",
   "int",
   "arg1",
   ")",
   "{",
   "return",
   "arg0",
   "<",
   "arg1",
   ";",
   "}",
   "}",
   ",",
   "nums",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-108",
  "nl_tokens": [
   "Called",
   "after",
   "a",
   "periodic",
   "has",
   "executed",
   "so",
   "we",
   "can",
   "to",
   "re",
   "-",
   "add",
   "it",
   ".",
   "We",
   "take",
   "the",
   "last",
   "execution",
   "time",
   "of",
   "the",
   "job",
   "to",
   "be",
   "the",
   "time",
   "of",
   "completion",
   "(",
   "i",
   ".",
   "e",
   ".",
   "the",
   "time",
   "at",
   "which",
   "this",
   "function",
   "is",
   "called",
   ")",
   ".",
   "This",
   "could",
   "be",
   "inaccurate",
   "b",
   "/",
   "c",
   "the",
   "job",
   "can",
   "run",
   "for",
   "as",
   "long",
   "as",
   "{"
  ],
  "pl_tokens": [
   "private",
   "JobStatus",
   "reschedulePeriodicJob",
   "(",
   "JobStatus",
   "job",
   ")",
   "{",
   "final",
   "long",
   "elapsedNow",
   "=",
   "SystemClock",
   ".",
   "elapsedRealtime",
   "(",
   ")",
   ";",
   "// Compute how much of the period is remaining.",
   "long",
   "runEarly",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "job",
   ".",
   "getLatestRunTimeElapsed",
   "(",
   ")",
   "-",
   "elapsedNow",
   ",",
   "0",
   ")",
   ";",
   "long",
   "newEarliestRunTimeElapsed",
   "=",
   "elapsedNow",
   "+",
   "runEarly",
   ";",
   "long",
   "period",
   "=",
   "job",
   ".",
   "getJob",
   "(",
   ")",
   ".",
   "getIntervalMillis",
   "(",
   ")",
   ";",
   "long",
   "newLatestRuntimeElapsed",
   "=",
   "newEarliestRunTimeElapsed",
   "+",
   "period",
   ";",
   "return",
   "new",
   "JobStatus",
   "(",
   "job",
   ",",
   "newEarliestRunTimeElapsed",
   ",",
   "newLatestRuntimeElapsed",
   ",",
   "0",
   "/* backoffAttempt */",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-109",
  "nl_tokens": [
   "Returns",
   "a",
   "{"
  ],
  "pl_tokens": [
   "@",
   "Nonnull",
   "public",
   "static",
   "<",
   "T",
   ">",
   "Set",
   "<",
   "T",
   ">",
   "asSet",
   "(",
   "@",
   "Nullable",
   "T",
   "...",
   "objects",
   ")",
   "{",
   "final",
   "Set",
   "<",
   "T",
   ">",
   "result",
   ";",
   "if",
   "(",
   "objects",
   "==",
   "null",
   ")",
   "{",
   "result",
   "=",
   "new",
   "LinkedHashSet",
   "<>",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "final",
   "int",
   "initialCapacity",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "16",
   ",",
   "(",
   "(",
   "objects",
   ".",
   "length",
   "+",
   "2",
   ")",
   "/",
   "3",
   ")",
   "*",
   "4",
   ")",
   ";",
   "result",
   "=",
   "new",
   "LinkedHashSet",
   "<>",
   "(",
   "initialCapacity",
   ")",
   ";",
   "result",
   ".",
   "addAll",
   "(",
   "new",
   "ArrayWrapper",
   "<>",
   "(",
   "objects",
   ")",
   ")",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-110",
  "nl_tokens": [
   "Creates",
   "an",
   "update",
   "that",
   "sets",
   "the",
   "value",
   "of",
   "the",
   "field",
   "to",
   "the",
   "given",
   "value",
   "if",
   "the",
   "given",
   "value",
   "is",
   "less",
   "than",
   "the",
   "current",
   "value",
   "of",
   "the",
   "field",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "TItem",
   ">",
   "Bson",
   "<mask>",
   "(",
   "final",
   "String",
   "fieldName",
   ",",
   "final",
   "TItem",
   "value",
   ")",
   "{",
   "return",
   "new",
   "SimpleUpdate",
   "<",
   "TItem",
   ">",
   "(",
   "fieldName",
   ",",
   "value",
   ",",
   "\"$min\"",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-111",
  "nl_tokens": [
   "Asserts",
   "that",
   "the",
   "specified",
   "value",
   "is",
   "greater",
   "than",
   "or",
   "equal",
   "to",
   "the",
   "min",
   "value",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "assertGreaterThanOrEqual",
   "(",
   "final",
   "String",
   "param",
   ",",
   "final",
   "long",
   "value",
   ",",
   "final",
   "long",
   "<mask>",
   ")",
   "{",
   "if",
   "(",
   "value",
   "<",
   "min",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "SR",
   ".",
   "PARAMETER_SHOULD_BE_GREATER_OR_EQUAL",
   ",",
   "param",
   ",",
   "min",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-112",
  "nl_tokens": [
   "Resizes",
   "the",
   "entries",
   "storage",
   "if",
   "necessary",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "resizeMeMaybe",
   "(",
   "int",
   "newSize",
   ")",
   "{",
   "int",
   "entriesSize",
   "=",
   "entries",
   ".",
   "length",
   ";",
   "if",
   "(",
   "newSize",
   ">",
   "entriesSize",
   ")",
   "{",
   "int",
   "newCapacity",
   "=",
   "entriesSize",
   "+",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "entriesSize",
   ">>>",
   "1",
   ")",
   ";",
   "if",
   "(",
   "newCapacity",
   "<",
   "0",
   ")",
   "{",
   "newCapacity",
   "=",
   "Integer",
   ".",
   "MAX_VALUE",
   ";",
   "}",
   "if",
   "(",
   "newCapacity",
   "!=",
   "entriesSize",
   ")",
   "{",
   "resizeEntries",
   "(",
   "newCapacity",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-113",
  "nl_tokens": [
   "Returns",
   "the",
   "lesser",
   "of",
   "the",
   "two",
   "values",
   "according",
   "to",
   "this",
   "ordering",
   ".",
   "If",
   "the",
   "values",
   "compare",
   "as",
   "0",
   "the",
   "first",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "<",
   "E",
   "extends",
   "T",
   ">",
   "E",
   "<mask>",
   "(",
   "@",
   "NullableDecl",
   "E",
   "a",
   ",",
   "@",
   "NullableDecl",
   "E",
   "b",
   ")",
   "{",
   "return",
   "(",
   "compare",
   "(",
   "a",
   ",",
   "b",
   ")",
   "<=",
   "0",
   ")",
   "?",
   "a",
   ":",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-114",
  "nl_tokens": [
   "Returns",
   "the",
   "maximum",
   "of",
   "this",
   "{"
  ],
  "pl_tokens": [
   "public",
   "Decimal",
   "<mask>",
   "(",
   "Decimal",
   "other",
   ")",
   "{",
   "if",
   "(",
   "(",
   "this",
   "==",
   "NaN",
   ")",
   "||",
   "(",
   "other",
   "==",
   "NaN",
   ")",
   ")",
   "{",
   "return",
   "NaN",
   ";",
   "}",
   "return",
   "(",
   "compareTo",
   "(",
   "other",
   ")",
   ">=",
   "0",
   "?",
   "this",
   ":",
   "other",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-115",
  "nl_tokens": [
   "Adds",
   "a",
   "new",
   "type",
   "to",
   "the",
   "list",
   "of",
   "types",
   "on",
   "which",
   "a",
   "constructor",
   "is",
   "invoked",
   "in",
   "the",
   "basic",
   "block",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "init",
   "(",
   "final",
   "int",
   "var",
   ")",
   "{",
   "// creates and/or resizes the initializations array if necessary",
   "if",
   "(",
   "initializations",
   "==",
   "null",
   ")",
   "{",
   "initializations",
   "=",
   "new",
   "int",
   "[",
   "2",
   "]",
   ";",
   "}",
   "int",
   "n",
   "=",
   "initializations",
   ".",
   "length",
   ";",
   "if",
   "(",
   "initializationCount",
   ">=",
   "n",
   ")",
   "{",
   "int",
   "[",
   "]",
   "t",
   "=",
   "new",
   "int",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "initializationCount",
   "+",
   "1",
   ",",
   "2",
   "*",
   "n",
   ")",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "initializations",
   ",",
   "0",
   ",",
   "t",
   ",",
   "0",
   ",",
   "n",
   ")",
   ";",
   "initializations",
   "=",
   "t",
   ";",
   "}",
   "// stores the type to be initialized",
   "initializations",
   "[",
   "initializationCount",
   "++",
   "]",
   "=",
   "var",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-116",
  "nl_tokens": [
   "Gets",
   "the",
   "chart",
   "window",
   "height",
   "."
  ],
  "pl_tokens": [
   "private",
   "static",
   "int",
   "getChartWindowHeight",
   "(",
   "final",
   "boolean",
   "fullPage",
   ")",
   "{",
   "if",
   "(",
   "fullPage",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "int",
   ")",
   "(",
   "Page",
   ".",
   "getCurrent",
   "(",
   ")",
   ".",
   "getBrowserWindowHeight",
   "(",
   ")",
   "*",
   "HEIGHT_PERCENTAGE_FULL_PAGE",
   ")",
   ",",
   "MINIMUM_CHART_HEIGHT_FULL_PAGE",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "(",
   "int",
   ")",
   "(",
   "Page",
   ".",
   "getCurrent",
   "(",
   ")",
   ".",
   "getBrowserWindowHeight",
   "(",
   ")",
   "*",
   "HEIGHT_PERCETAGE_HALF_PAGE",
   ")",
   ",",
   "NINIMUM_CHART_HEIGHT_HALF_PAGE",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-117",
  "nl_tokens": [
   "************************************************************************"
  ],
  "pl_tokens": [
   "private",
   "void",
   "insertQuantityMillis",
   "(",
   "AssetClassAllocation",
   "allocation",
   ",",
   "boolean",
   "reset",
   ")",
   "{",
   "// Standard deviation maximum",
   "if",
   "(",
   "squaredStandardDeviationFemtos",
   ">",
   "squaredStandardDeviationFemtosMaximum",
   ")",
   "{",
   "hardScore",
   "+=",
   "squaredStandardDeviationFemtos",
   "-",
   "squaredStandardDeviationFemtosMaximum",
   ";",
   "}",
   "squaredStandardDeviationFemtos",
   "+=",
   "calculateStandardDeviationSquaredFemtosDelta",
   "(",
   "allocation",
   ",",
   "reset",
   ")",
   ";",
   "if",
   "(",
   "squaredStandardDeviationFemtos",
   ">",
   "squaredStandardDeviationFemtosMaximum",
   ")",
   "{",
   "hardScore",
   "-=",
   "squaredStandardDeviationFemtos",
   "-",
   "squaredStandardDeviationFemtosMaximum",
   ";",
   "}",
   "Long",
   "quantityMillis",
   "=",
   "allocation",
   ".",
   "getQuantityMillis",
   "(",
   ")",
   ";",
   "if",
   "(",
   "quantityMillis",
   "!=",
   "null",
   ")",
   "{",
   "// Region quantity maximum",
   "Region",
   "region",
   "=",
   "allocation",
   ".",
   "getRegion",
   "(",
   ")",
   ";",
   "long",
   "regionQuantityMaximum",
   "=",
   "region",
   ".",
   "getQuantityMillisMaximum",
   "(",
   ")",
   ";",
   "long",
   "oldRegionQuantity",
   "=",
   "regionQuantityTotalMap",
   ".",
   "get",
   "(",
   "region",
   ")",
   ";",
   "long",
   "oldRegionAvailable",
   "=",
   "regionQuantityMaximum",
   "-",
   "oldRegionQuantity",
   ";",
   "long",
   "newRegionQuantity",
   "=",
   "oldRegionQuantity",
   "+",
   "quantityMillis",
   ";",
   "long",
   "newRegionAvailable",
   "=",
   "regionQuantityMaximum",
   "-",
   "newRegionQuantity",
   ";",
   "hardScore",
   "+=",
   "Math",
   ".",
   "<mask>",
   "(",
   "newRegionAvailable",
   ",",
   "0L",
   ")",
   "-",
   "Math",
   ".",
   "min",
   "(",
   "oldRegionAvailable",
   ",",
   "0L",
   ")",
   ";",
   "regionQuantityTotalMap",
   ".",
   "put",
   "(",
   "region",
   ",",
   "newRegionQuantity",
   ")",
   ";",
   "// Sector quantity maximum",
   "Sector",
   "sector",
   "=",
   "allocation",
   ".",
   "getSector",
   "(",
   ")",
   ";",
   "long",
   "sectorQuantityMaximum",
   "=",
   "sector",
   ".",
   "getQuantityMillisMaximum",
   "(",
   ")",
   ";",
   "long",
   "oldSectorQuantity",
   "=",
   "sectorQuantityTotalMap",
   ".",
   "get",
   "(",
   "sector",
   ")",
   ";",
   "long",
   "oldSectorAvailable",
   "=",
   "sectorQuantityMaximum",
   "-",
   "oldSectorQuantity",
   ";",
   "long",
   "newSectorQuantity",
   "=",
   "oldSectorQuantity",
   "+",
   "quantityMillis",
   ";",
   "long",
   "newSectorAvailable",
   "=",
   "sectorQuantityMaximum",
   "-",
   "newSectorQuantity",
   ";",
   "hardScore",
   "+=",
   "Math",
   ".",
   "min",
   "(",
   "newSectorAvailable",
   ",",
   "0L",
   ")",
   "-",
   "Math",
   ".",
   "min",
   "(",
   "oldSectorAvailable",
   ",",
   "0L",
   ")",
   ";",
   "sectorQuantityTotalMap",
   ".",
   "put",
   "(",
   "sector",
   ",",
   "newSectorQuantity",
   ")",
   ";",
   "}",
   "// Maximize expected return",
   "softScore",
   "+=",
   "allocation",
   ".",
   "getQuantifiedExpectedReturnMicros",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-118",
  "nl_tokens": [
   "/",
   "*"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "Long",
   "zCount",
   "(",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "try",
   "{",
   "if",
   "(",
   "isPipelined",
   "(",
   ")",
   ")",
   "{",
   "pipeline",
   "(",
   "new",
   "JedisResult",
   "(",
   "pipeline",
   ".",
   "zcount",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ")",
   ")",
   ";",
   "return",
   "null",
   ";",
   "}",
   "return",
   "client",
   ".",
   "zcount",
   "(",
   "key",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "ex",
   ")",
   "{",
   "throw",
   "convertException",
   "(",
   "ex",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-119",
  "nl_tokens": [
   "Writes",
   "the",
   "data",
   "to",
   "the",
   "buffer",
   "and",
   "triggers",
   "writes",
   "to",
   "the",
   "service",
   "as",
   "needed",
   "."
  ],
  "pl_tokens": [
   "@",
   "DoesServiceRequest",
   "private",
   "synchronized",
   "void",
   "writeInternal",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "data",
   ",",
   "int",
   "offset",
   ",",
   "int",
   "length",
   ")",
   "throws",
   "IOException",
   "{",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "this",
   ".",
   "checkStreamState",
   "(",
   ")",
   ";",
   "final",
   "int",
   "availableBufferBytes",
   "=",
   "this",
   ".",
   "internalWriteThreshold",
   "-",
   "this",
   ".",
   "currentBufferedBytes",
   ";",
   "final",
   "int",
   "nextWrite",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "availableBufferBytes",
   ",",
   "length",
   ")",
   ";",
   "// If we need to set MD5 then update the digest accordingly",
   "if",
   "(",
   "this",
   ".",
   "options",
   ".",
   "getStoreFileContentMD5",
   "(",
   ")",
   ")",
   "{",
   "this",
   ".",
   "md5Digest",
   ".",
   "update",
   "(",
   "data",
   ",",
   "offset",
   ",",
   "nextWrite",
   ")",
   ";",
   "}",
   "this",
   ".",
   "outBuffer",
   ".",
   "write",
   "(",
   "data",
   ",",
   "offset",
   ",",
   "nextWrite",
   ")",
   ";",
   "this",
   ".",
   "currentBufferedBytes",
   "+=",
   "nextWrite",
   ";",
   "offset",
   "+=",
   "nextWrite",
   ";",
   "length",
   "-=",
   "nextWrite",
   ";",
   "if",
   "(",
   "this",
   ".",
   "currentBufferedBytes",
   "==",
   "this",
   ".",
   "internalWriteThreshold",
   ")",
   "{",
   "this",
   ".",
   "dispatchWrite",
   "(",
   "this",
   ".",
   "internalWriteThreshold",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-120",
  "nl_tokens": [
   "Created",
   "a",
   "new",
   "IndexRange",
   "that",
   "spans",
   "all",
   "characters",
   "between",
   "the",
   "smallest",
   "and",
   "the",
   "highest",
   "index",
   "of",
   "the",
   "two",
   "ranges",
   "."
  ],
  "pl_tokens": [
   "public",
   "IndexRange",
   "mergedWith",
   "(",
   "final",
   "IndexRange",
   "other",
   ")",
   "{",
   "Objects",
   ".",
   "requireNonNull",
   "(",
   "other",
   ",",
   "\"other\"",
   ")",
   ";",
   "return",
   "new",
   "IndexRange",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "start",
   ",",
   "other",
   ".",
   "start",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "end",
   ",",
   "other",
   ".",
   "end",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-121",
  "nl_tokens": [
   "Returns",
   "an",
   "unmodifiable",
   "view",
   "of",
   "the",
   "difference",
   "of",
   "two",
   "multisets",
   ".",
   "In",
   "the",
   "returned",
   "multiset",
   "the",
   "count",
   "of",
   "each",
   "element",
   "is",
   "the",
   "result",
   "of",
   "the",
   "<i",
   ">",
   "zero",
   "-",
   "truncated",
   "subtraction<",
   "/",
   "i",
   ">",
   "of",
   "its",
   "count",
   "in",
   "the",
   "second",
   "multiset",
   "from",
   "its",
   "count",
   "in",
   "the",
   "first",
   "multiset",
   "with",
   "elements",
   "that",
   "would",
   "have",
   "a",
   "count",
   "of",
   "0",
   "not",
   "included",
   ".",
   "The",
   "iteration",
   "order",
   "of",
   "the",
   "returned",
   "multiset",
   "matches",
   "that",
   "of",
   "the",
   "element",
   "set",
   "of",
   "{",
   "@code",
   "multiset1",
   "}",
   "with",
   "repeated",
   "occurrences",
   "of",
   "the",
   "same",
   "element",
   "appearing",
   "consecutively",
   "."
  ],
  "pl_tokens": [
   "@",
   "Beta",
   "public",
   "static",
   "<",
   "E",
   ">",
   "Multiset",
   "<",
   "E",
   ">",
   "difference",
   "(",
   "final",
   "Multiset",
   "<",
   "E",
   ">",
   "multiset1",
   ",",
   "final",
   "Multiset",
   "<",
   "?",
   ">",
   "multiset2",
   ")",
   "{",
   "checkNotNull",
   "(",
   "multiset1",
   ")",
   ";",
   "checkNotNull",
   "(",
   "multiset2",
   ")",
   ";",
   "// TODO(lowasser): consider making the entries live views",
   "return",
   "new",
   "ViewMultiset",
   "<",
   "E",
   ">",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "int",
   "count",
   "(",
   "@",
   "Nullable",
   "Object",
   "element",
   ")",
   "{",
   "int",
   "count1",
   "=",
   "multiset1",
   ".",
   "count",
   "(",
   "element",
   ")",
   ";",
   "return",
   "(",
   "count1",
   "==",
   "0",
   ")",
   "?",
   "0",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "count1",
   "-",
   "multiset2",
   ".",
   "count",
   "(",
   "element",
   ")",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "void",
   "clear",
   "(",
   ")",
   "{",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "Iterator",
   "<",
   "E",
   ">",
   "elementIterator",
   "(",
   ")",
   "{",
   "final",
   "Iterator",
   "<",
   "Entry",
   "<",
   "E",
   ">",
   ">",
   "iterator1",
   "=",
   "multiset1",
   ".",
   "entrySet",
   "(",
   ")",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "return",
   "new",
   "AbstractIterator",
   "<",
   "E",
   ">",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "protected",
   "E",
   "computeNext",
   "(",
   ")",
   "{",
   "while",
   "(",
   "iterator1",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "Entry",
   "<",
   "E",
   ">",
   "entry1",
   "=",
   "iterator1",
   ".",
   "next",
   "(",
   ")",
   ";",
   "E",
   "element",
   "=",
   "entry1",
   ".",
   "getElement",
   "(",
   ")",
   ";",
   "if",
   "(",
   "entry1",
   ".",
   "getCount",
   "(",
   ")",
   ">",
   "multiset2",
   ".",
   "count",
   "(",
   "element",
   ")",
   ")",
   "{",
   "return",
   "element",
   ";",
   "}",
   "}",
   "return",
   "endOfData",
   "(",
   ")",
   ";",
   "}",
   "}",
   ";",
   "}",
   "@",
   "Override",
   "Iterator",
   "<",
   "Entry",
   "<",
   "E",
   ">",
   ">",
   "entryIterator",
   "(",
   ")",
   "{",
   "final",
   "Iterator",
   "<",
   "Entry",
   "<",
   "E",
   ">",
   ">",
   "iterator1",
   "=",
   "multiset1",
   ".",
   "entrySet",
   "(",
   ")",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "return",
   "new",
   "AbstractIterator",
   "<",
   "Entry",
   "<",
   "E",
   ">",
   ">",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "protected",
   "Entry",
   "<",
   "E",
   ">",
   "computeNext",
   "(",
   ")",
   "{",
   "while",
   "(",
   "iterator1",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "Entry",
   "<",
   "E",
   ">",
   "entry1",
   "=",
   "iterator1",
   ".",
   "next",
   "(",
   ")",
   ";",
   "E",
   "element",
   "=",
   "entry1",
   ".",
   "getElement",
   "(",
   ")",
   ";",
   "int",
   "count",
   "=",
   "entry1",
   ".",
   "getCount",
   "(",
   ")",
   "-",
   "multiset2",
   ".",
   "count",
   "(",
   "element",
   ")",
   ";",
   "if",
   "(",
   "count",
   ">",
   "0",
   ")",
   "{",
   "return",
   "immutableEntry",
   "(",
   "element",
   ",",
   "count",
   ")",
   ";",
   "}",
   "}",
   "return",
   "endOfData",
   "(",
   ")",
   ";",
   "}",
   "}",
   ";",
   "}",
   "@",
   "Override",
   "int",
   "distinctElements",
   "(",
   ")",
   "{",
   "return",
   "Iterators",
   ".",
   "size",
   "(",
   "entryIterator",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-122",
  "nl_tokens": [
   "For",
   "a",
   "given",
   "multiline",
   "message",
   "determines",
   "the",
   "character",
   "count",
   "of",
   "the",
   "longest",
   "line",
   "."
  ],
  "pl_tokens": [
   "private",
   "static",
   "int",
   "getLongestLineLen",
   "(",
   "final",
   "String",
   "message",
   ")",
   "{",
   "String",
   "newLine",
   "=",
   "System",
   ".",
   "getProperty",
   "(",
   "\"line.separator\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "lines",
   "=",
   "message",
   ".",
   "split",
   "(",
   "newLine",
   ")",
   ";",
   "int",
   "maxLen",
   "=",
   "0",
   ";",
   "for",
   "(",
   "String",
   "line",
   ":",
   "lines",
   ")",
   "{",
   "maxLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxLen",
   ",",
   "line",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "maxLen",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-123",
  "nl_tokens": [
   "Return",
   "a",
   "double",
   "in",
   "the",
   "(",
   "inclusive",
   ")",
   "range",
   "[",
   "min",
   "max",
   "]",
   "with",
   "the",
   "increase",
   "precision",
   "."
  ],
  "pl_tokens": [
   "public",
   "double",
   "randomDoubleIncrRange",
   "(",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ",",
   "double",
   "incr",
   ")",
   "{",
   "long",
   "width",
   "=",
   "(",
   "long",
   ")",
   "(",
   "(",
   "max",
   "-",
   "min",
   ")",
   "/",
   "incr",
   ")",
   ";",
   "return",
   "randomLongRange",
   "(",
   "0",
   ",",
   "width",
   ")",
   "*",
   "incr",
   "+",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-124",
  "nl_tokens": [
   "Print",
   "a",
   "summary",
   "of",
   "the",
   "given",
   "results",
   "."
  ],
  "pl_tokens": [
   "public",
   "String",
   "summary",
   "(",
   "Map",
   "<",
   "String",
   ",",
   "List",
   "<",
   "File",
   ">",
   ">",
   "result",
   ",",
   "Path",
   "outDir",
   ",",
   "String",
   "dist",
   ",",
   "long",
   "duration",
   ",",
   "String",
   "...",
   "extraInfo",
   ")",
   "{",
   "StringBuilder",
   "buffer",
   "=",
   "new",
   "StringBuilder",
   "(",
   ")",
   ";",
   "buffer",
   ".",
   "append",
   "(",
   "\"Summary:\\n\"",
   ")",
   ";",
   "long",
   "seconds",
   "=",
   "Duration",
   ".",
   "ofMillis",
   "(",
   "duration",
   ")",
   ".",
   "getSeconds",
   "(",
   ")",
   ";",
   "String",
   "took",
   "=",
   "seconds",
   ">",
   "0",
   "?",
   "seconds",
   "+",
   "\"s\"",
   ":",
   "duration",
   "+",
   "\"ms\"",
   ";",
   "buffer",
   ".",
   "append",
   "(",
   "\"Pipeline: \"",
   ")",
   ".",
   "append",
   "(",
   "pipeline",
   "(",
   "dist",
   ")",
   ")",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "buffer",
   ".",
   "append",
   "(",
   "\"Time: \"",
   ")",
   ".",
   "append",
   "(",
   "took",
   ")",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "buffer",
   ".",
   "append",
   "(",
   "\"Output: \"",
   ")",
   ".",
   "append",
   "(",
   "outDir",
   ")",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "Stream",
   ".",
   "of",
   "(",
   "extraInfo",
   ")",
   ".",
   "forEach",
   "(",
   "line",
   "->",
   "buffer",
   ".",
   "append",
   "(",
   "line",
   ")",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ")",
   ";",
   "int",
   "w1",
   "=",
   "result",
   ".",
   "keySet",
   "(",
   ")",
   ".",
   "stream",
   "(",
   ")",
   ".",
   "map",
   "(",
   "it",
   "->",
   "it",
   ".",
   "length",
   "(",
   ")",
   "+",
   "2",
   ")",
   ".",
   "<mask>",
   "(",
   "Integer",
   "::",
   "compareTo",
   ")",
   ".",
   "orElse",
   "(",
   "0",
   ")",
   ";",
   "int",
   "mw1",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "w1",
   ",",
   "\"Fileset\"",
   ".",
   "length",
   "(",
   ")",
   "+",
   "2",
   ")",
   ";",
   "int",
   "w2",
   "=",
   "result",
   ".",
   "values",
   "(",
   ")",
   ".",
   "stream",
   "(",
   ")",
   ".",
   "flatMap",
   "(",
   "List",
   "::",
   "stream",
   ")",
   ".",
   "map",
   "(",
   "file",
   "->",
   "outDir",
   ".",
   "relativize",
   "(",
   "file",
   ".",
   "toPath",
   "(",
   ")",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ".",
   "map",
   "(",
   "String",
   "::",
   "length",
   ")",
   ".",
   "max",
   "(",
   "Integer",
   "::",
   "compareTo",
   ")",
   ".",
   "orElse",
   "(",
   "0",
   ")",
   ";",
   "buffer",
   ".",
   "append",
   "(",
   "format",
   "(",
   "w1",
   ",",
   "w2",
   ",",
   "\"Fileset\"",
   ",",
   "\"Output\"",
   ",",
   "\"Size\"",
   ")",
   ")",
   ";",
   "result",
   ".",
   "forEach",
   "(",
   "(",
   "fileset",
   ",",
   "files",
   ")",
   "->",
   "{",
   "if",
   "(",
   "files",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "// Head",
   "buffer",
   ".",
   "append",
   "(",
   "format",
   "(",
   "mw1",
   ",",
   "w2",
   ",",
   "\"  \"",
   "+",
   "fileset",
   ",",
   "\"\"",
   ",",
   "\"\"",
   ")",
   ")",
   ";",
   "// Tail",
   "files",
   ".",
   "forEach",
   "(",
   "file",
   "->",
   "buffer",
   ".",
   "append",
   "(",
   "format",
   "(",
   "mw1",
   ",",
   "w2",
   ",",
   "\"\"",
   ",",
   "outDir",
   ".",
   "relativize",
   "(",
   "file",
   ".",
   "toPath",
   "(",
   ")",
   ")",
   ",",
   "AssetCompiler",
   ".",
   "humanReadableByteCount",
   "(",
   "file",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "return",
   "buffer",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-125",
  "nl_tokens": [
   "Returns",
   "a",
   "new",
   "{"
  ],
  "pl_tokens": [
   "public",
   "CacheStats",
   "minus",
   "(",
   "CacheStats",
   "other",
   ")",
   "{",
   "return",
   "new",
   "CacheStats",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "hitCount",
   "-",
   "other",
   ".",
   "hitCount",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "missCount",
   "-",
   "other",
   ".",
   "missCount",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "loadSuccessCount",
   "-",
   "other",
   ".",
   "loadSuccessCount",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "loadExceptionCount",
   "-",
   "other",
   ".",
   "loadExceptionCount",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "totalLoadTime",
   "-",
   "other",
   ".",
   "totalLoadTime",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "evictionCount",
   "-",
   "other",
   ".",
   "evictionCount",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-126",
  "nl_tokens": [
   "Creates",
   "an",
   "update",
   "that",
   "sets",
   "the",
   "value",
   "of",
   "the",
   "field",
   "to",
   "the",
   "given",
   "value",
   "if",
   "the",
   "given",
   "value",
   "is",
   "greater",
   "than",
   "the",
   "current",
   "value",
   "of",
   "the",
   "field",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "TItem",
   ">",
   "Bson",
   "<mask>",
   "(",
   "final",
   "String",
   "fieldName",
   ",",
   "final",
   "TItem",
   "value",
   ")",
   "{",
   "return",
   "new",
   "SimpleUpdate",
   "<",
   "TItem",
   ">",
   "(",
   "fieldName",
   ",",
   "value",
   ",",
   "\"$max\"",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-127",
  "nl_tokens": [
   "Adds",
   "a",
   "special",
   "operator",
   "like",
   "$comment",
   "or",
   "$returnKey",
   ".",
   "For",
   "example",
   ":",
   "<pre",
   ">",
   "addSpecial",
   "(",
   "$returnKey",
   "1",
   ")",
   "addSpecial",
   "(",
   "$comment",
   "this",
   "is",
   "a",
   "special",
   "query",
   ")",
   "<",
   "/",
   "pre",
   ">"
  ],
  "pl_tokens": [
   "@",
   "SuppressWarnings",
   "(",
   "\"deprecation\"",
   ")",
   "@",
   "Deprecated",
   "public",
   "DBCursor",
   "addSpecial",
   "(",
   "@",
   "Nullable",
   "final",
   "String",
   "name",
   ",",
   "@",
   "Nullable",
   "final",
   "Object",
   "value",
   ")",
   "{",
   "if",
   "(",
   "name",
   "==",
   "null",
   "||",
   "value",
   "==",
   "null",
   ")",
   "{",
   "return",
   "this",
   ";",
   "}",
   "if",
   "(",
   "\"$comment\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "comment",
   "(",
   "value",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$explain\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "findOptions",
   ".",
   "getModifiers",
   "(",
   ")",
   ".",
   "put",
   "(",
   "\"$explain\"",
   ",",
   "true",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$hint\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "if",
   "(",
   "value",
   "instanceof",
   "String",
   ")",
   "{",
   "hint",
   "(",
   "(",
   "String",
   ")",
   "value",
   ")",
   ";",
   "}",
   "else",
   "{",
   "hint",
   "(",
   "(",
   "DBObject",
   ")",
   "value",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "\"$maxScan\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "maxScan",
   "(",
   "(",
   "(",
   "Number",
   ")",
   "value",
   ")",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$maxTimeMS\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "maxTime",
   "(",
   "(",
   "(",
   "Number",
   ")",
   "value",
   ")",
   ".",
   "longValue",
   "(",
   ")",
   ",",
   "MILLISECONDS",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$max\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "<mask>",
   "(",
   "(",
   "DBObject",
   ")",
   "value",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$min\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "min",
   "(",
   "(",
   "DBObject",
   ")",
   "value",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$orderby\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "sort",
   "(",
   "(",
   "DBObject",
   ")",
   "value",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$returnKey\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "returnKey",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$showDiskLoc\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "showDiskLoc",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$snapshot\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "snapshot",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "\"$natural\"",
   ".",
   "equals",
   "(",
   "name",
   ")",
   ")",
   "{",
   "sort",
   "(",
   "new",
   "BasicDBObject",
   "(",
   "\"$natural\"",
   ",",
   "(",
   "(",
   "Number",
   ")",
   "value",
   ")",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "name",
   "+",
   "\"is not a supported modifier\"",
   ")",
   ";",
   "}",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-128",
  "nl_tokens": [
   "Get",
   "a",
   "single",
   "line",
   "address",
   "which",
   "uses",
   "the",
   "delimiter",
   "between",
   "the",
   "original",
   "lines",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "concatAddressLines",
   "(",
   "Address",
   "address",
   ",",
   "String",
   "delimiter",
   ")",
   "{",
   "StringBuilder",
   "s",
   "=",
   "new",
   "StringBuilder",
   "(",
   "256",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ",",
   "<mask>",
   "=",
   "address",
   ".",
   "getMaxAddressLineIndex",
   "(",
   ")",
   ";",
   "i",
   "<=",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "i",
   ">",
   "0",
   ")",
   "{",
   "s",
   ".",
   "append",
   "(",
   "delimiter",
   ")",
   ";",
   "}",
   "s",
   ".",
   "append",
   "(",
   "address",
   ".",
   "getAddressLine",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "return",
   "s",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-129",
  "nl_tokens": [
   "Turn",
   "an",
   "iterator",
   "into",
   "a",
   "bitmap",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "materialize",
   "(",
   "final",
   "IteratingRLW",
   "i",
   ",",
   "final",
   "BitmapStorage",
   "c",
   ",",
   "long",
   "<mask>",
   ")",
   "{",
   "final",
   "long",
   "origMax",
   "=",
   "max",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "if",
   "(",
   "i",
   ".",
   "getRunningLength",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "long",
   "L",
   "=",
   "i",
   ".",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "L",
   ">",
   "max",
   ")",
   "L",
   "=",
   "max",
   ";",
   "c",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "i",
   ".",
   "getRunningBit",
   "(",
   ")",
   ",",
   "L",
   ")",
   ";",
   "max",
   "-=",
   "L",
   ";",
   "}",
   "long",
   "L",
   "=",
   "i",
   ".",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "L",
   ";",
   "++",
   "k",
   ")",
   "c",
   ".",
   "addWord",
   "(",
   "i",
   ".",
   "getLiteralWordAt",
   "(",
   "k",
   ")",
   ")",
   ";",
   "if",
   "(",
   "max",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "!",
   "i",
   ".",
   "next",
   "(",
   ")",
   ")",
   "break",
   ";",
   "}",
   "else",
   "break",
   ";",
   "}",
   "return",
   "origMax",
   "-",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-130",
  "nl_tokens": [
   "Gets",
   "the",
   "count",
   "of",
   "ads",
   "that",
   "could",
   "be",
   "published"
  ],
  "pl_tokens": [
   "public",
   "int",
   "getAdsCountToPublish",
   "(",
   "int",
   "fetchedAdsCount",
   ",",
   "int",
   "sourceItemsCount",
   ")",
   "{",
   "if",
   "(",
   "fetchedAdsCount",
   "<=",
   "0",
   "||",
   "getNoOfDataBetweenAds",
   "(",
   ")",
   "<=",
   "0",
   ")",
   "return",
   "0",
   ";",
   "int",
   "expected",
   "=",
   "0",
   ";",
   "if",
   "(",
   "sourceItemsCount",
   ">",
   "0",
   "&&",
   "sourceItemsCount",
   ">=",
   "getOffsetValue",
   "(",
   ")",
   "+",
   "1",
   ")",
   "expected",
   "=",
   "(",
   "sourceItemsCount",
   "-",
   "getOffsetValue",
   "(",
   ")",
   ")",
   "/",
   "getNoOfDataBetweenAds",
   "(",
   ")",
   "+",
   "1",
   ";",
   "expected",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "expected",
   ")",
   ";",
   "expected",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "fetchedAdsCount",
   ",",
   "expected",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "expected",
   ",",
   "getLimitOfAds",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-131",
  "nl_tokens": [
   "Add",
   "one",
   "word",
   "to",
   "the",
   "trie"
  ],
  "pl_tokens": [
   "public",
   "TrieBuilder",
   "addWord",
   "(",
   "@",
   "Nonnull",
   "final",
   "String",
   "word",
   ")",
   "{",
   "Objects",
   ".",
   "requireNonNull",
   "(",
   "word",
   ")",
   ";",
   "final",
   "int",
   "length",
   "=",
   "word",
   ".",
   "length",
   "(",
   ")",
   ";",
   "if",
   "(",
   "length",
   "==",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"a trie cannot have empty \"",
   "+",
   "\"strings (use EMPTY instead)\"",
   ")",
   ";",
   "nrWords",
   "++",
   ";",
   "maxLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxLength",
   ",",
   "length",
   ")",
   ";",
   "nodeBuilder",
   ".",
   "addWord",
   "(",
   "word",
   ")",
   ";",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-132",
  "nl_tokens": [
   "results",
   "is",
   ">",
   "=",
   "max",
   ".",
   "The",
   "max",
   "option",
   "allows",
   "us",
   "to",
   "avoid",
   "doing",
   "unnecessary",
   "and",
   "potentially",
   "long",
   "calculations",
   "."
  ],
  "pl_tokens": [
   "private",
   "int",
   "calculateSuggestionItemsHeight",
   "(",
   "List",
   "<",
   "?",
   "extends",
   "SearchSuggestion",
   ">",
   "suggestions",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "//todo",
   "// 'i < suggestions.size()' in the below 'for' seems unneeded, investigate if there is a use for it.",
   "int",
   "visibleItemsHeight",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "suggestions",
   ".",
   "size",
   "(",
   ")",
   "&&",
   "i",
   "<",
   "mSuggestionsList",
   ".",
   "getChildCount",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "visibleItemsHeight",
   "+=",
   "mSuggestionsList",
   ".",
   "getChildAt",
   "(",
   "i",
   ")",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "if",
   "(",
   "visibleItemsHeight",
   ">",
   "max",
   ")",
   "{",
   "visibleItemsHeight",
   "=",
   "max",
   ";",
   "break",
   ";",
   "}",
   "}",
   "return",
   "visibleItemsHeight",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-133",
  "nl_tokens": [
   "Write",
   "out",
   "up",
   "to",
   "max",
   "words",
   "returns",
   "how",
   "many",
   "were",
   "written"
  ],
  "pl_tokens": [
   "public",
   "long",
   "discharge",
   "(",
   "BitmapStorage",
   "container",
   ",",
   "long",
   "<mask>",
   ")",
   "{",
   "long",
   "index",
   "=",
   "0",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "if",
   "(",
   "index",
   "+",
   "getRunningLength",
   "(",
   ")",
   ">",
   "max",
   ")",
   "{",
   "final",
   "int",
   "offset",
   "=",
   "(",
   "int",
   ")",
   "(",
   "max",
   "-",
   "index",
   ")",
   ";",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "getRunningBit",
   "(",
   ")",
   ",",
   "offset",
   ")",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "runningLength",
   "-=",
   "offset",
   ";",
   "return",
   "max",
   ";",
   "}",
   "container",
   ".",
   "addStreamOfEmptyWords",
   "(",
   "getRunningBit",
   "(",
   ")",
   ",",
   "getRunningLength",
   "(",
   ")",
   ")",
   ";",
   "index",
   "+=",
   "getRunningLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "getNumberOfLiteralWords",
   "(",
   ")",
   "+",
   "index",
   ">",
   "max",
   ")",
   "{",
   "final",
   "int",
   "offset",
   "=",
   "(",
   "int",
   ")",
   "(",
   "max",
   "-",
   "index",
   ")",
   ";",
   "writeLiteralWords",
   "(",
   "offset",
   ",",
   "container",
   ")",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "runningLength",
   "=",
   "0",
   ";",
   "this",
   ".",
   "brlw",
   ".",
   "numberOfLiteralWords",
   "-=",
   "offset",
   ";",
   "this",
   ".",
   "literalWordStartPosition",
   "+=",
   "offset",
   ";",
   "return",
   "max",
   ";",
   "}",
   "writeLiteralWords",
   "(",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ",",
   "container",
   ")",
   ";",
   "index",
   "+=",
   "getNumberOfLiteralWords",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "next",
   "(",
   ")",
   ")",
   "break",
   ";",
   "}",
   "return",
   "index",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-134",
  "nl_tokens": [
   "Locate",
   "the",
   "best",
   "instance",
   "of",
   "pattern",
   "in",
   "text",
   "near",
   "loc",
   "using",
   "the",
   "Bitap",
   "algorithm",
   ".",
   "Returns",
   "-",
   "1",
   "if",
   "no",
   "match",
   "found",
   "."
  ],
  "pl_tokens": [
   "protected",
   "int",
   "match_bitap",
   "(",
   "String",
   "text",
   ",",
   "String",
   "pattern",
   ",",
   "int",
   "loc",
   ")",
   "{",
   "assert",
   "(",
   "Match_MaxBits",
   "==",
   "0",
   "||",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   "<=",
   "Match_MaxBits",
   ")",
   ":",
   "\"Pattern too long for this application.\"",
   ";",
   "// Initialise the alphabet.",
   "Map",
   "<",
   "Character",
   ",",
   "Integer",
   ">",
   "s",
   "=",
   "match_alphabet",
   "(",
   "pattern",
   ")",
   ";",
   "// Highest score beyond which we give up.",
   "double",
   "score_threshold",
   "=",
   "Match_Threshold",
   ";",
   "// Is there a nearby exact match? (speedup)",
   "int",
   "best_loc",
   "=",
   "text",
   ".",
   "indexOf",
   "(",
   "pattern",
   ",",
   "loc",
   ")",
   ";",
   "if",
   "(",
   "best_loc",
   "!=",
   "-",
   "1",
   ")",
   "{",
   "score_threshold",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "match_bitapScore",
   "(",
   "0",
   ",",
   "best_loc",
   ",",
   "loc",
   ",",
   "pattern",
   ")",
   ",",
   "score_threshold",
   ")",
   ";",
   "// What about in the other direction? (speedup)",
   "best_loc",
   "=",
   "text",
   ".",
   "lastIndexOf",
   "(",
   "pattern",
   ",",
   "loc",
   "+",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "best_loc",
   "!=",
   "-",
   "1",
   ")",
   "{",
   "score_threshold",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "match_bitapScore",
   "(",
   "0",
   ",",
   "best_loc",
   ",",
   "loc",
   ",",
   "pattern",
   ")",
   ",",
   "score_threshold",
   ")",
   ";",
   "}",
   "}",
   "// Initialise the bit arrays.",
   "int",
   "matchmask",
   "=",
   "1",
   "<<",
   "(",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   "-",
   "1",
   ")",
   ";",
   "best_loc",
   "=",
   "-",
   "1",
   ";",
   "int",
   "bin_min",
   ",",
   "bin_mid",
   ";",
   "int",
   "bin_max",
   "=",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   "+",
   "text",
   ".",
   "length",
   "(",
   ")",
   ";",
   "// Empty initialization added to appease Java compiler.",
   "int",
   "[",
   "]",
   "last_rd",
   "=",
   "new",
   "int",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "d",
   "=",
   "0",
   ";",
   "d",
   "<",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   ";",
   "d",
   "++",
   ")",
   "{",
   "// Scan for the best match; each iteration allows for one more error.",
   "// Run a binary search to determine how far from 'loc' we can stray at",
   "// this error level.",
   "bin_min",
   "=",
   "0",
   ";",
   "bin_mid",
   "=",
   "bin_max",
   ";",
   "while",
   "(",
   "bin_min",
   "<",
   "bin_mid",
   ")",
   "{",
   "if",
   "(",
   "match_bitapScore",
   "(",
   "d",
   ",",
   "loc",
   "+",
   "bin_mid",
   ",",
   "loc",
   ",",
   "pattern",
   ")",
   "<=",
   "score_threshold",
   ")",
   "{",
   "bin_min",
   "=",
   "bin_mid",
   ";",
   "}",
   "else",
   "{",
   "bin_max",
   "=",
   "bin_mid",
   ";",
   "}",
   "bin_mid",
   "=",
   "(",
   "bin_max",
   "-",
   "bin_min",
   ")",
   "/",
   "2",
   "+",
   "bin_min",
   ";",
   "}",
   "// Use the result from this iteration as the maximum for the next.",
   "bin_max",
   "=",
   "bin_mid",
   ";",
   "int",
   "start",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "1",
   ",",
   "loc",
   "-",
   "bin_mid",
   "+",
   "1",
   ")",
   ";",
   "int",
   "finish",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "loc",
   "+",
   "bin_mid",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ")",
   "+",
   "pattern",
   ".",
   "length",
   "(",
   ")",
   ";",
   "int",
   "[",
   "]",
   "rd",
   "=",
   "new",
   "int",
   "[",
   "finish",
   "+",
   "2",
   "]",
   ";",
   "rd",
   "[",
   "finish",
   "+",
   "1",
   "]",
   "=",
   "(",
   "1",
   "<<",
   "d",
   ")",
   "-",
   "1",
   ";",
   "for",
   "(",
   "int",
   "j",
   "=",
   "finish",
   ";",
   "j",
   ">=",
   "start",
   ";",
   "j",
   "--",
   ")",
   "{",
   "int",
   "charMatch",
   ";",
   "if",
   "(",
   "text",
   ".",
   "length",
   "(",
   ")",
   "<=",
   "j",
   "-",
   "1",
   "||",
   "!",
   "s",
   ".",
   "containsKey",
   "(",
   "text",
   ".",
   "charAt",
   "(",
   "j",
   "-",
   "1",
   ")",
   ")",
   ")",
   "{",
   "// Out of range.",
   "charMatch",
   "=",
   "0",
   ";",
   "}",
   "else",
   "{",
   "charMatch",
   "=",
   "s",
   ".",
   "get",
   "(",
   "text",
   ".",
   "charAt",
   "(",
   "j",
   "-",
   "1",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "d",
   "==",
   "0",
   ")",
   "{",
   "// First pass: exact match.",
   "rd",
   "[",
   "j",
   "]",
   "=",
   "(",
   "(",
   "rd",
   "[",
   "j",
   "+",
   "1",
   "]",
   "<<",
   "1",
   ")",
   "|",
   "1",
   ")",
   "&",
   "charMatch",
   ";",
   "}",
   "else",
   "{",
   "// Subsequent passes: fuzzy match.",
   "rd",
   "[",
   "j",
   "]",
   "=",
   "(",
   "(",
   "(",
   "rd",
   "[",
   "j",
   "+",
   "1",
   "]",
   "<<",
   "1",
   ")",
   "|",
   "1",
   ")",
   "&",
   "charMatch",
   ")",
   "|",
   "(",
   "(",
   "(",
   "last_rd",
   "[",
   "j",
   "+",
   "1",
   "]",
   "|",
   "last_rd",
   "[",
   "j",
   "]",
   ")",
   "<<",
   "1",
   ")",
   "|",
   "1",
   ")",
   "|",
   "last_rd",
   "[",
   "j",
   "+",
   "1",
   "]",
   ";",
   "}",
   "if",
   "(",
   "(",
   "rd",
   "[",
   "j",
   "]",
   "&",
   "matchmask",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "double",
   "score",
   "=",
   "match_bitapScore",
   "(",
   "d",
   ",",
   "j",
   "-",
   "1",
   ",",
   "loc",
   ",",
   "pattern",
   ")",
   ";",
   "// This match will almost certainly be better than any existing",
   "// match.  But check anyway.",
   "if",
   "(",
   "score",
   "<=",
   "score_threshold",
   ")",
   "{",
   "// Told you so.",
   "score_threshold",
   "=",
   "score",
   ";",
   "best_loc",
   "=",
   "j",
   "-",
   "1",
   ";",
   "if",
   "(",
   "best_loc",
   ">",
   "loc",
   ")",
   "{",
   "// When passing loc, don't exceed our current distance from loc.",
   "start",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "1",
   ",",
   "2",
   "*",
   "loc",
   "-",
   "best_loc",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// Already passed loc, downhill from here on in.",
   "break",
   ";",
   "}",
   "}",
   "}",
   "}",
   "if",
   "(",
   "match_bitapScore",
   "(",
   "d",
   "+",
   "1",
   ",",
   "loc",
   ",",
   "loc",
   ",",
   "pattern",
   ")",
   ">",
   "score_threshold",
   ")",
   "{",
   "// No hope for a (better) match at greater error levels.",
   "break",
   ";",
   "}",
   "last_rd",
   "=",
   "rd",
   ";",
   "}",
   "return",
   "best_loc",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-135",
  "nl_tokens": [
   "Performs",
   "an",
   "in",
   "-",
   "place",
   "selection",
   "to",
   "find",
   "the",
   "element",
   "which",
   "would",
   "appear",
   "at",
   "a",
   "given",
   "index",
   "in",
   "a",
   "dataset",
   "if",
   "it",
   "were",
   "sorted",
   ".",
   "The",
   "following",
   "preconditions",
   "should",
   "hold",
   ":"
  ],
  "pl_tokens": [
   "private",
   "static",
   "void",
   "selectInPlace",
   "(",
   "int",
   "required",
   ",",
   "double",
   "[",
   "]",
   "array",
   ",",
   "int",
   "from",
   ",",
   "int",
   "to",
   ")",
   "{",
   "// If we are looking for the least element in the range, we can just do a linear search for it.",
   "// (We will hit this whenever we are doing quantile interpolation: our first selection finds",
   "// the lower value, our second one finds the upper value by looking for the next least element.)",
   "if",
   "(",
   "required",
   "==",
   "from",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "from",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "from",
   "+",
   "1",
   ";",
   "index",
   "<=",
   "to",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "array",
   "[",
   "min",
   "]",
   ">",
   "array",
   "[",
   "index",
   "]",
   ")",
   "{",
   "min",
   "=",
   "index",
   ";",
   "}",
   "}",
   "if",
   "(",
   "min",
   "!=",
   "from",
   ")",
   "{",
   "swap",
   "(",
   "array",
   ",",
   "min",
   ",",
   "from",
   ")",
   ";",
   "}",
   "return",
   ";",
   "}",
   "// Let's play quickselect! We'll repeatedly partition the range [from, to] containing the",
   "// required element, as long as it has more than one element.",
   "while",
   "(",
   "to",
   ">",
   "from",
   ")",
   "{",
   "int",
   "partitionPoint",
   "=",
   "partition",
   "(",
   "array",
   ",",
   "from",
   ",",
   "to",
   ")",
   ";",
   "if",
   "(",
   "partitionPoint",
   ">=",
   "required",
   ")",
   "{",
   "to",
   "=",
   "partitionPoint",
   "-",
   "1",
   ";",
   "}",
   "if",
   "(",
   "partitionPoint",
   "<=",
   "required",
   ")",
   "{",
   "from",
   "=",
   "partitionPoint",
   "+",
   "1",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-136",
  "nl_tokens": [
   "Returns",
   "the",
   "greatest",
   "value",
   "present",
   "in",
   "{",
   "@code",
   "array",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "byte",
   "<mask>",
   "(",
   "byte",
   "...",
   "array",
   ")",
   "{",
   "checkArgument",
   "(",
   "array",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "int",
   "max",
   "=",
   "toInt",
   "(",
   "array",
   "[",
   "0",
   "]",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "next",
   "=",
   "toInt",
   "(",
   "array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "next",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "next",
   ";",
   "}",
   "}",
   "return",
   "(",
   "byte",
   ")",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-137",
  "nl_tokens": [
   "Try",
   "and",
   "match",
   "a",
   "set",
   "of",
   "rules",
   "zero",
   "or",
   "more",
   "times"
  ],
  "pl_tokens": [
   "@",
   "DontLabel",
   "public",
   "Rule",
   "zeroOrMore",
   "(",
   "final",
   "Object",
   "rule",
   ",",
   "final",
   "Object",
   "rule2",
   ",",
   "final",
   "Object",
   "...",
   "moreRules",
   ")",
   "{",
   "return",
   "repeat",
   "(",
   "rule",
   ",",
   "rule2",
   ",",
   "moreRules",
   ")",
   ".",
   "<mask>",
   "(",
   "0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-138",
  "nl_tokens": [
   "Returns",
   "the",
   "longest",
   "string",
   "{",
   "@code",
   "suffix",
   "}",
   "such",
   "that",
   "{",
   "@code",
   "a",
   ".",
   "toString",
   "()",
   ".",
   "endsWith",
   "(",
   "suffix",
   ")",
   "&&",
   "b",
   ".",
   "toString",
   "()",
   ".",
   "endsWith",
   "(",
   "suffix",
   ")",
   "}",
   "taking",
   "care",
   "not",
   "to",
   "split",
   "surrogate",
   "pairs",
   ".",
   "If",
   "{",
   "@code",
   "a",
   "}",
   "and",
   "{",
   "@code",
   "b",
   "}",
   "have",
   "no",
   "common",
   "suffix",
   "returns",
   "the",
   "empty",
   "string",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "commonSuffix",
   "(",
   "CharSequence",
   "a",
   ",",
   "CharSequence",
   "b",
   ")",
   "{",
   "checkNotNull",
   "(",
   "a",
   ")",
   ";",
   "checkNotNull",
   "(",
   "b",
   ")",
   ";",
   "int",
   "maxSuffixLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "length",
   "(",
   ")",
   ",",
   "b",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "int",
   "s",
   "=",
   "0",
   ";",
   "while",
   "(",
   "s",
   "<",
   "maxSuffixLength",
   "&&",
   "a",
   ".",
   "charAt",
   "(",
   "a",
   ".",
   "length",
   "(",
   ")",
   "-",
   "s",
   "-",
   "1",
   ")",
   "==",
   "b",
   ".",
   "charAt",
   "(",
   "b",
   ".",
   "length",
   "(",
   ")",
   "-",
   "s",
   "-",
   "1",
   ")",
   ")",
   "{",
   "s",
   "++",
   ";",
   "}",
   "if",
   "(",
   "validSurrogatePairAt",
   "(",
   "a",
   ",",
   "a",
   ".",
   "length",
   "(",
   ")",
   "-",
   "s",
   "-",
   "1",
   ")",
   "||",
   "validSurrogatePairAt",
   "(",
   "b",
   ",",
   "b",
   ".",
   "length",
   "(",
   ")",
   "-",
   "s",
   "-",
   "1",
   ")",
   ")",
   "{",
   "s",
   "--",
   ";",
   "}",
   "return",
   "a",
   ".",
   "subSequence",
   "(",
   "a",
   ".",
   "length",
   "(",
   ")",
   "-",
   "s",
   ",",
   "a",
   ".",
   "length",
   "(",
   ")",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-139",
  "nl_tokens": [
   "Returns",
   "a",
   "{"
  ],
  "pl_tokens": [
   "@",
   "Nonnull",
   "public",
   "static",
   "<",
   "T",
   ">",
   "List",
   "<",
   "T",
   ">",
   "asList",
   "(",
   "@",
   "Nullable",
   "T",
   "...",
   "objects",
   ")",
   "{",
   "final",
   "List",
   "<",
   "T",
   ">",
   "result",
   ";",
   "if",
   "(",
   "objects",
   "==",
   "null",
   ")",
   "{",
   "result",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "final",
   "int",
   "initialCapacity",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "16",
   ",",
   "(",
   "(",
   "objects",
   ".",
   "length",
   "+",
   "2",
   ")",
   "/",
   "3",
   ")",
   "*",
   "4",
   ")",
   ";",
   "result",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   "initialCapacity",
   ")",
   ";",
   "result",
   ".",
   "addAll",
   "(",
   "new",
   "ArrayWrapper",
   "<>",
   "(",
   "objects",
   ")",
   ")",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-140",
  "nl_tokens": [
   "Returns",
   "the",
   "lesser",
   "of",
   "the",
   "two",
   "values",
   "according",
   "to",
   "this",
   "ordering",
   ".",
   "If",
   "the",
   "values",
   "compare",
   "as",
   "0",
   "the",
   "first",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "<",
   "E",
   "extends",
   "T",
   ">",
   "E",
   "<mask>",
   "(",
   "@",
   "Nullable",
   "E",
   "a",
   ",",
   "@",
   "Nullable",
   "E",
   "b",
   ")",
   "{",
   "return",
   "(",
   "compare",
   "(",
   "a",
   ",",
   "b",
   ")",
   "<=",
   "0",
   ")",
   "?",
   "a",
   ":",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-141",
  "nl_tokens": [
   "Adds",
   "the",
   "given",
   "statistics",
   "to",
   "the",
   "dataset",
   "as",
   "if",
   "the",
   "individual",
   "values",
   "used",
   "to",
   "compute",
   "the",
   "statistics",
   "had",
   "been",
   "added",
   "directly",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "addAll",
   "(",
   "Stats",
   "values",
   ")",
   "{",
   "if",
   "(",
   "values",
   ".",
   "count",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "return",
   ";",
   "}",
   "if",
   "(",
   "count",
   "==",
   "0",
   ")",
   "{",
   "count",
   "=",
   "values",
   ".",
   "count",
   "(",
   ")",
   ";",
   "mean",
   "=",
   "values",
   ".",
   "mean",
   "(",
   ")",
   ";",
   "sumOfSquaresOfDeltas",
   "=",
   "values",
   ".",
   "sumOfSquaresOfDeltas",
   "(",
   ")",
   ";",
   "<mask>",
   "=",
   "values",
   ".",
   "min",
   "(",
   ")",
   ";",
   "max",
   "=",
   "values",
   ".",
   "max",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "count",
   "+=",
   "values",
   ".",
   "count",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isFinite",
   "(",
   "mean",
   ")",
   "&&",
   "isFinite",
   "(",
   "values",
   ".",
   "mean",
   "(",
   ")",
   ")",
   ")",
   "{",
   "// This is a generalized version of the calculation in add(double) above.",
   "double",
   "delta",
   "=",
   "values",
   ".",
   "mean",
   "(",
   ")",
   "-",
   "mean",
   ";",
   "mean",
   "+=",
   "delta",
   "*",
   "values",
   ".",
   "count",
   "(",
   ")",
   "/",
   "count",
   ";",
   "sumOfSquaresOfDeltas",
   "+=",
   "values",
   ".",
   "sumOfSquaresOfDeltas",
   "(",
   ")",
   "+",
   "delta",
   "*",
   "(",
   "values",
   ".",
   "mean",
   "(",
   ")",
   "-",
   "mean",
   ")",
   "*",
   "values",
   ".",
   "count",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "mean",
   "=",
   "calculateNewMeanNonFinite",
   "(",
   "mean",
   ",",
   "values",
   ".",
   "mean",
   "(",
   ")",
   ")",
   ";",
   "sumOfSquaresOfDeltas",
   "=",
   "NaN",
   ";",
   "}",
   "min",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "min",
   ",",
   "values",
   ".",
   "min",
   "(",
   ")",
   ")",
   ";",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "values",
   ".",
   "max",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-142",
  "nl_tokens": [
   "Zrange",
   "by",
   "score",
   "with",
   "scores",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrangeByScoreWithScores",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "key",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "<mask>",
   ",",
   "final",
   "byte",
   "[",
   "]",
   "max",
   ",",
   "final",
   "int",
   "offset",
   ",",
   "final",
   "int",
   "count",
   ")",
   "{",
   "sendCommand",
   "(",
   "Command",
   ".",
   "ZRANGEBYSCORE",
   ",",
   "key",
   ",",
   "min",
   ",",
   "max",
   ",",
   "Keyword",
   ".",
   "LIMIT",
   ".",
   "raw",
   ",",
   "RedisProtocol",
   ".",
   "toByteArray",
   "(",
   "offset",
   ")",
   ",",
   "RedisProtocol",
   ".",
   "toByteArray",
   "(",
   "count",
   ")",
   ",",
   "Keyword",
   ".",
   "WITHSCORES",
   ".",
   "raw",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-143",
  "nl_tokens": [
   "Zcount",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zcount",
   "(",
   "final",
   "String",
   "key",
   ",",
   "final",
   "String",
   "<mask>",
   ",",
   "final",
   "String",
   "max",
   ")",
   "{",
   "zcount",
   "(",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "key",
   ")",
   ",",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "min",
   ")",
   ",",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "max",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-144",
  "nl_tokens": [
   "\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\uff0c\u6700\u957f\u4e32\u7684\u957f\u5ea6"
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   "extends",
   "CharSequence",
   ">",
   "int",
   "maxLength",
   "(",
   "T",
   "[",
   "]",
   "array",
   ")",
   "{",
   "int",
   "re",
   "=",
   "0",
   ";",
   "if",
   "(",
   "null",
   "!=",
   "array",
   ")",
   "for",
   "(",
   "CharSequence",
   "s",
   ":",
   "array",
   ")",
   "if",
   "(",
   "null",
   "!=",
   "s",
   ")",
   "re",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "re",
   ",",
   "s",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "return",
   "re",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-145",
  "nl_tokens": [
   "MUST",
   "sync",
   "-",
   "ly",
   "consume",
   "buffer"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "received",
   "(",
   "ByteBuffer",
   "deflated",
   ")",
   "{",
   "if",
   "(",
   "ended",
   ")",
   "{",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "deflated",
   ".",
   "remaining",
   "(",
   ")",
   ">=",
   "FOOTER_LENGTH",
   ")",
   "{",
   "for",
   "(",
   "ByteBuffer",
   "b",
   ":",
   "previewFooter",
   ")",
   "{",
   "if",
   "(",
   "!",
   "read",
   "(",
   "b",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "}",
   "previewFooter",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "currentPreviewFooterLength",
   "=",
   "0",
   ";",
   "ByteBuffer",
   "deflatedKeepingFooter",
   "=",
   "deflated",
   ".",
   "duplicate",
   "(",
   ")",
   ";",
   "deflatedKeepingFooter",
   ".",
   "limit",
   "(",
   "deflatedKeepingFooter",
   ".",
   "limit",
   "(",
   ")",
   "-",
   "FOOTER_LENGTH",
   ")",
   ";",
   "deflated",
   ".",
   "position",
   "(",
   "deflated",
   ".",
   "position",
   "(",
   ")",
   "+",
   "deflatedKeepingFooter",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "!",
   "read",
   "(",
   "deflatedKeepingFooter",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "currentPreviewFooterLength",
   "+=",
   "deflated",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "previewFooter",
   ".",
   "addLast",
   "(",
   "deflated",
   ".",
   "duplicate",
   "(",
   ")",
   ")",
   ";",
   "deflated",
   ".",
   "position",
   "(",
   "deflated",
   ".",
   "position",
   "(",
   ")",
   "+",
   "deflated",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "return",
   ";",
   "}",
   "else",
   "{",
   "currentPreviewFooterLength",
   "+=",
   "deflated",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "previewFooter",
   ".",
   "addLast",
   "(",
   "deflated",
   ".",
   "duplicate",
   "(",
   ")",
   ")",
   ";",
   "deflated",
   ".",
   "position",
   "(",
   "deflated",
   ".",
   "position",
   "(",
   ")",
   "+",
   "deflated",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "int",
   "toFlush",
   "=",
   "FOOTER_LENGTH",
   "-",
   "currentPreviewFooterLength",
   ";",
   "while",
   "(",
   "toFlush",
   ">",
   "0",
   ")",
   "{",
   "ByteBuffer",
   "b",
   "=",
   "previewFooter",
   ".",
   "getFirst",
   "(",
   ")",
   ";",
   "ByteBuffer",
   "d",
   "=",
   "b",
   ".",
   "duplicate",
   "(",
   ")",
   ";",
   "d",
   ".",
   "limit",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "d",
   ".",
   "limit",
   "(",
   ")",
   ",",
   "toFlush",
   ")",
   ")",
   ";",
   "b",
   ".",
   "position",
   "(",
   "b",
   ".",
   "position",
   "(",
   ")",
   "+",
   "d",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "toFlush",
   "-=",
   "d",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "read",
   "(",
   "d",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "if",
   "(",
   "!",
   "b",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "previewFooter",
   ".",
   "removeFirst",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-146",
  "nl_tokens": [
   "Uploads",
   "a",
   "range",
   "to",
   "a",
   "file",
   "using",
   "the",
   "specified",
   "lease",
   "ID",
   "request",
   "options",
   "and",
   "operation",
   "context",
   "."
  ],
  "pl_tokens": [
   "@",
   "DoesServiceRequest",
   "public",
   "void",
   "uploadRange",
   "(",
   "final",
   "InputStream",
   "sourceStream",
   ",",
   "final",
   "long",
   "offset",
   ",",
   "final",
   "long",
   "length",
   ",",
   "final",
   "AccessCondition",
   "accessCondition",
   ",",
   "FileRequestOptions",
   "options",
   ",",
   "OperationContext",
   "opContext",
   ")",
   "throws",
   "StorageException",
   ",",
   "IOException",
   ",",
   "URISyntaxException",
   "{",
   "if",
   "(",
   "opContext",
   "==",
   "null",
   ")",
   "{",
   "opContext",
   "=",
   "new",
   "OperationContext",
   "(",
   ")",
   ";",
   "}",
   "this",
   ".",
   "getShare",
   "(",
   ")",
   ".",
   "assertNoSnapshot",
   "(",
   ")",
   ";",
   "options",
   "=",
   "FileRequestOptions",
   ".",
   "populateAndApplyDefaults",
   "(",
   "options",
   ",",
   "this",
   ".",
   "fileServiceClient",
   ")",
   ";",
   "final",
   "FileRange",
   "range",
   "=",
   "new",
   "FileRange",
   "(",
   "offset",
   ",",
   "offset",
   "+",
   "length",
   "-",
   "1",
   ")",
   ";",
   "final",
   "byte",
   "[",
   "]",
   "data",
   "=",
   "new",
   "byte",
   "[",
   "(",
   "int",
   ")",
   "length",
   "]",
   ";",
   "String",
   "md5",
   "=",
   "null",
   ";",
   "int",
   "count",
   "=",
   "0",
   ";",
   "int",
   "total",
   "=",
   "0",
   ";",
   "while",
   "(",
   "total",
   "<",
   "length",
   ")",
   "{",
   "count",
   "=",
   "sourceStream",
   ".",
   "read",
   "(",
   "data",
   ",",
   "total",
   ",",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   "-",
   "total",
   ",",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   ")",
   ";",
   "total",
   "+=",
   "count",
   ";",
   "}",
   "if",
   "(",
   "options",
   ".",
   "getUseTransactionalContentMD5",
   "(",
   ")",
   ")",
   "{",
   "try",
   "{",
   "final",
   "MessageDigest",
   "digest",
   "=",
   "MessageDigest",
   ".",
   "getInstance",
   "(",
   "\"MD5\"",
   ")",
   ";",
   "digest",
   ".",
   "update",
   "(",
   "data",
   ",",
   "0",
   ",",
   "data",
   ".",
   "length",
   ")",
   ";",
   "md5",
   "=",
   "Base64",
   ".",
   "encode",
   "(",
   "digest",
   ".",
   "digest",
   "(",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "final",
   "NoSuchAlgorithmException",
   "e",
   ")",
   "{",
   "// This wont happen, throw fatal.",
   "throw",
   "Utility",
   ".",
   "generateNewUnexpectedStorageException",
   "(",
   "e",
   ")",
   ";",
   "}",
   "}",
   "this",
   ".",
   "putRangeInternal",
   "(",
   "range",
   ",",
   "FileRangeOperationType",
   ".",
   "UPDATE",
   ",",
   "data",
   ",",
   "length",
   ",",
   "md5",
   ",",
   "accessCondition",
   ",",
   "options",
   ",",
   "opContext",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-147",
  "nl_tokens": [
   "Compute",
   "the",
   "StackMapTypes",
   "of",
   "the",
   "live",
   "variables",
   "of",
   "the",
   "current",
   "method",
   "at",
   "a",
   "specific",
   "location",
   "within",
   "the",
   "method",
   ".",
   "There",
   "may",
   "be",
   "gaps",
   "(",
   "Bogus",
   "or",
   "non",
   "-",
   "live",
   "slots",
   ")",
   "so",
   "we",
   "can",
   "t",
   "just",
   "count",
   "the",
   "number",
   "of",
   "live",
   "variables",
   "we",
   "must",
   "find",
   "the",
   "max",
   "index",
   "of",
   "all",
   "the",
   "live",
   "variables",
   "."
  ],
  "pl_tokens": [
   "protected",
   "final",
   "StackMapType",
   "[",
   "]",
   "calculate_live_local_types",
   "(",
   "MethodGen",
   "mg",
   ",",
   "int",
   "location",
   ")",
   "{",
   "int",
   "max_local_index",
   "=",
   "-",
   "1",
   ";",
   "StackMapType",
   "[",
   "]",
   "local_map_types",
   "=",
   "new",
   "StackMapType",
   "[",
   "mg",
   ".",
   "getMaxLocals",
   "(",
   ")",
   "]",
   ";",
   "Arrays",
   ".",
   "fill",
   "(",
   "local_map_types",
   ",",
   "new",
   "StackMapType",
   "(",
   "Const",
   ".",
   "ITEM_Bogus",
   ",",
   "-",
   "1",
   ",",
   "pool",
   ".",
   "getConstantPool",
   "(",
   ")",
   ")",
   ")",
   ";",
   "for",
   "(",
   "LocalVariableGen",
   "lv",
   ":",
   "mg",
   ".",
   "getLocalVariables",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "location",
   ">=",
   "lv",
   ".",
   "getStart",
   "(",
   ")",
   ".",
   "getPosition",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "lv",
   ".",
   "getLiveToEnd",
   "(",
   ")",
   "||",
   "location",
   "<",
   "lv",
   ".",
   "getEnd",
   "(",
   ")",
   ".",
   "getPosition",
   "(",
   ")",
   ")",
   "{",
   "int",
   "i",
   "=",
   "lv",
   ".",
   "getIndex",
   "(",
   ")",
   ";",
   "local_map_types",
   "[",
   "i",
   "]",
   "=",
   "generate_StackMapType_from_Type",
   "(",
   "lv",
   ".",
   "getType",
   "(",
   ")",
   ")",
   ";",
   "max_local_index",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "max_local_index",
   ",",
   "i",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "Arrays",
   ".",
   "copyOf",
   "(",
   "local_map_types",
   ",",
   "max_local_index",
   "+",
   "1",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-148",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "long",
   "sizeOf",
   "(",
   "Object",
   "obj",
   ")",
   "{",
   "if",
   "(",
   "obj",
   ".",
   "getClass",
   "(",
   ")",
   ".",
   "isArray",
   "(",
   ")",
   ")",
   "{",
   "Class",
   "<",
   "?",
   ">",
   "klazz",
   "=",
   "obj",
   ".",
   "getClass",
   "(",
   ")",
   ";",
   "int",
   "base",
   "=",
   "UNSAFE",
   ".",
   "arrayBaseOffset",
   "(",
   "klazz",
   ")",
   ";",
   "int",
   "scale",
   "=",
   "UNSAFE",
   ".",
   "arrayIndexScale",
   "(",
   "klazz",
   ")",
   ";",
   "long",
   "size",
   "=",
   "base",
   "+",
   "(",
   "scale",
   "*",
   "Array",
   ".",
   "getLength",
   "(",
   "obj",
   ")",
   ")",
   ";",
   "size",
   "+=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getFieldOffsetAdjustment",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "size",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "size",
   "+=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   "-",
   "(",
   "size",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getMinimumObjectSize",
   "(",
   ")",
   ",",
   "size",
   ")",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "Class",
   "<",
   "?",
   ">",
   "klazz",
   "=",
   "obj",
   ".",
   "getClass",
   "(",
   ")",
   ";",
   "klazz",
   "!=",
   "null",
   ";",
   "klazz",
   "=",
   "klazz",
   ".",
   "getSuperclass",
   "(",
   ")",
   ")",
   "{",
   "long",
   "lastFieldOffset",
   "=",
   "-",
   "1",
   ";",
   "for",
   "(",
   "Field",
   "f",
   ":",
   "klazz",
   ".",
   "getDeclaredFields",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "!",
   "Modifier",
   ".",
   "isStatic",
   "(",
   "f",
   ".",
   "getModifiers",
   "(",
   ")",
   ")",
   ")",
   "{",
   "lastFieldOffset",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "lastFieldOffset",
   ",",
   "UNSAFE",
   ".",
   "objectFieldOffset",
   "(",
   "f",
   ")",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "lastFieldOffset",
   ">",
   "0",
   ")",
   "{",
   "lastFieldOffset",
   "+=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getFieldOffsetAdjustment",
   "(",
   ")",
   ";",
   "lastFieldOffset",
   "+=",
   "1",
   ";",
   "if",
   "(",
   "(",
   "lastFieldOffset",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "lastFieldOffset",
   "+=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   "-",
   "(",
   "lastFieldOffset",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getMinimumObjectSize",
   "(",
   ")",
   ",",
   "lastFieldOffset",
   ")",
   ";",
   "}",
   "}",
   "long",
   "size",
   "=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectHeaderSize",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "size",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "size",
   "+=",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   "-",
   "(",
   "size",
   "%",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getObjectAlignment",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "CURRENT_JVM_INFORMATION",
   ".",
   "getMinimumObjectSize",
   "(",
   ")",
   ",",
   "size",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-149",
  "nl_tokens": [
   "Returns",
   "best",
   "-",
   "effort",
   "-",
   "sized",
   "StringBuilder",
   "based",
   "on",
   "the",
   "given",
   "collection",
   "size",
   "."
  ],
  "pl_tokens": [
   "static",
   "StringBuilder",
   "newStringBuilderForCollection",
   "(",
   "int",
   "size",
   ")",
   "{",
   "checkNonnegative",
   "(",
   "size",
   ",",
   "\"size\"",
   ")",
   ";",
   "return",
   "new",
   "StringBuilder",
   "(",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "size",
   "*",
   "8L",
   ",",
   "Ints",
   ".",
   "MAX_POWER_OF_TWO",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-150",
  "nl_tokens": [
   "\u5c06\u4e24\u4e2a\u8def\u5f84\u6bd4\u8f83\uff0c\u5f97\u51fa\u76f8\u5bf9\u8def\u5f84"
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "getRelativePath",
   "(",
   "String",
   "base",
   ",",
   "String",
   "path",
   ",",
   "String",
   "equalPath",
   ")",
   "{",
   "// \u5982\u679c\u4e24\u4e2a\u8def\u5f84\u76f8\u7b49\r",
   "if",
   "(",
   "base",
   ".",
   "equals",
   "(",
   "path",
   ")",
   "||",
   "\"./\"",
   ".",
   "equals",
   "(",
   "path",
   ")",
   "||",
   "\".\"",
   ".",
   "equals",
   "(",
   "path",
   ")",
   ")",
   "{",
   "return",
   "equalPath",
   ";",
   "}",
   "// \u5f00\u59cb\u5224\u65ad\r",
   "String",
   "[",
   "]",
   "bb",
   "=",
   "Strings",
   ".",
   "splitIgnoreBlank",
   "(",
   "getCanonicalPath",
   "(",
   "base",
   ")",
   ",",
   "\"[\\\\\\\\/]\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "ff",
   "=",
   "Strings",
   ".",
   "splitIgnoreBlank",
   "(",
   "getCanonicalPath",
   "(",
   "path",
   ")",
   ",",
   "\"[\\\\\\\\/]\"",
   ")",
   ";",
   "int",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "bb",
   ".",
   "length",
   ",",
   "ff",
   ".",
   "length",
   ")",
   ";",
   "int",
   "pos",
   "=",
   "0",
   ";",
   "for",
   "(",
   ";",
   "pos",
   "<",
   "len",
   ";",
   "pos",
   "++",
   ")",
   "if",
   "(",
   "!",
   "bb",
   "[",
   "pos",
   "]",
   ".",
   "equals",
   "(",
   "ff",
   "[",
   "pos",
   "]",
   ")",
   ")",
   "break",
   ";",
   "// \u8bc1\u660e\u8def\u5f84\u662f\u76f8\u7b49\u7684\r",
   "if",
   "(",
   "len",
   "==",
   "pos",
   "&&",
   "bb",
   ".",
   "length",
   "==",
   "ff",
   ".",
   "length",
   ")",
   "{",
   "return",
   "equalPath",
   ";",
   "}",
   "// \u5f00\u59cb\u67e5\u627e\u4e0d\u540c\r",
   "int",
   "dir",
   "=",
   "1",
   ";",
   "if",
   "(",
   "base",
   ".",
   "endsWith",
   "(",
   "\"/\"",
   ")",
   ")",
   "dir",
   "=",
   "0",
   ";",
   "StringBuilder",
   "sb",
   "=",
   "new",
   "StringBuilder",
   "(",
   "Strings",
   ".",
   "dup",
   "(",
   "\"../\"",
   ",",
   "bb",
   ".",
   "length",
   "-",
   "pos",
   "-",
   "dir",
   ")",
   ")",
   ";",
   "sb",
   ".",
   "append",
   "(",
   "Lang",
   ".",
   "concat",
   "(",
   "pos",
   ",",
   "ff",
   ".",
   "length",
   "-",
   "pos",
   ",",
   "'",
   "'",
   ",",
   "ff",
   ")",
   ")",
   ";",
   "if",
   "(",
   "path",
   ".",
   "endsWith",
   "(",
   "\"/\"",
   ")",
   ")",
   "sb",
   ".",
   "append",
   "(",
   "'",
   "'",
   ")",
   ";",
   "return",
   "sb",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-151",
  "nl_tokens": [
   "Adds",
   "the",
   "given",
   "value",
   "to",
   "the",
   "dataset",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "double",
   "value",
   ")",
   "{",
   "if",
   "(",
   "count",
   "==",
   "0",
   ")",
   "{",
   "count",
   "=",
   "1",
   ";",
   "mean",
   "=",
   "value",
   ";",
   "<mask>",
   "=",
   "value",
   ";",
   "max",
   "=",
   "value",
   ";",
   "if",
   "(",
   "!",
   "isFinite",
   "(",
   "value",
   ")",
   ")",
   "{",
   "sumOfSquaresOfDeltas",
   "=",
   "NaN",
   ";",
   "}",
   "}",
   "else",
   "{",
   "count",
   "++",
   ";",
   "if",
   "(",
   "isFinite",
   "(",
   "value",
   ")",
   "&&",
   "isFinite",
   "(",
   "mean",
   ")",
   ")",
   "{",
   "// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15) and (16)",
   "double",
   "delta",
   "=",
   "value",
   "-",
   "mean",
   ";",
   "mean",
   "+=",
   "delta",
   "/",
   "count",
   ";",
   "sumOfSquaresOfDeltas",
   "+=",
   "delta",
   "*",
   "(",
   "value",
   "-",
   "mean",
   ")",
   ";",
   "}",
   "else",
   "{",
   "mean",
   "=",
   "calculateNewMeanNonFinite",
   "(",
   "mean",
   ",",
   "value",
   ")",
   ";",
   "sumOfSquaresOfDeltas",
   "=",
   "NaN",
   ";",
   "}",
   "min",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "min",
   ",",
   "value",
   ")",
   ";",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "value",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-152",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "@",
   "NonNull",
   "public",
   "String",
   "getCurrentTokenString",
   "(",
   ")",
   "{",
   "// Get the text and ensure a valid tokenizer is set",
   "Editable",
   "text",
   "=",
   "getText",
   "(",
   ")",
   ";",
   "if",
   "(",
   "mTokenizer",
   "==",
   "null",
   "||",
   "text",
   "==",
   "null",
   ")",
   "{",
   "return",
   "\"\"",
   ";",
   "}",
   "// Use current text to determine token string",
   "int",
   "cursor",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getSelectionStart",
   "(",
   ")",
   ",",
   "0",
   ")",
   ";",
   "int",
   "start",
   "=",
   "mTokenizer",
   ".",
   "findTokenStart",
   "(",
   "text",
   ",",
   "cursor",
   ")",
   ";",
   "int",
   "end",
   "=",
   "mTokenizer",
   ".",
   "findTokenEnd",
   "(",
   "text",
   ",",
   "cursor",
   ")",
   ";",
   "String",
   "contentString",
   "=",
   "text",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "return",
   "TextUtils",
   ".",
   "isEmpty",
   "(",
   "contentString",
   ")",
   "?",
   "\"\"",
   ":",
   "contentString",
   ".",
   "substring",
   "(",
   "start",
   ",",
   "end",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-153",
  "nl_tokens": [
   "Paste",
   "clipboard",
   "content",
   "between",
   "min",
   "and",
   "max",
   "positions",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "paste",
   "(",
   "@",
   "IntRange",
   "(",
   "from",
   "=",
   "0",
   ")",
   "int",
   "<mask>",
   ",",
   "@",
   "IntRange",
   "(",
   "from",
   "=",
   "0",
   ")",
   "int",
   "max",
   ")",
   "{",
   "if",
   "(",
   "android",
   ".",
   "os",
   ".",
   "Build",
   ".",
   "VERSION",
   ".",
   "SDK_INT",
   "<",
   "android",
   ".",
   "os",
   ".",
   "Build",
   ".",
   "VERSION_CODES",
   ".",
   "HONEYCOMB",
   ")",
   "{",
   "android",
   ".",
   "text",
   ".",
   "ClipboardManager",
   "clipboard",
   "=",
   "(",
   "android",
   ".",
   "text",
   ".",
   "ClipboardManager",
   ")",
   "getContext",
   "(",
   ")",
   ".",
   "getSystemService",
   "(",
   "Context",
   ".",
   "CLIPBOARD_SERVICE",
   ")",
   ";",
   "MentionsEditable",
   "text",
   "=",
   "getMentionsText",
   "(",
   ")",
   ";",
   "text",
   ".",
   "replace",
   "(",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "clipboard",
   ".",
   "getText",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "pasteHoneycombImpl",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-154",
  "nl_tokens": [
   "Returns",
   "an",
   "empty",
   "list",
   "by",
   "default",
   "or",
   "the",
   "last",
   "value",
   "set",
   "by",
   "{",
   "@link",
   "#setFromLocation",
   "(",
   "List",
   ")",
   "}"
  ],
  "pl_tokens": [
   "@",
   "Implementation",
   "protected",
   "List",
   "<",
   "Address",
   ">",
   "getFromLocation",
   "(",
   "double",
   "latitude",
   ",",
   "double",
   "longitude",
   ",",
   "int",
   "maxResults",
   ")",
   "throws",
   "IOException",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "-",
   "90",
   "<=",
   "latitude",
   "&&",
   "latitude",
   "<=",
   "90",
   ",",
   "\"Latitude must be between -90 and 90, got %s\"",
   ",",
   "latitude",
   ")",
   ";",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "-",
   "180",
   "<=",
   "longitude",
   "&&",
   "longitude",
   "<=",
   "180",
   ",",
   "\"Longitude must be between -180 and 180, got %s\"",
   ",",
   "longitude",
   ")",
   ";",
   "return",
   "fromLocation",
   ".",
   "subList",
   "(",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxResults",
   ",",
   "fromLocation",
   ".",
   "size",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-155",
  "nl_tokens": [
   "Zrevrange",
   "by",
   "score",
   "with",
   "scores",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "zrevrangeByScoreWithScores",
   "(",
   "final",
   "String",
   "key",
   ",",
   "final",
   "String",
   "<mask>",
   ",",
   "final",
   "String",
   "min",
   ",",
   "final",
   "int",
   "offset",
   ",",
   "final",
   "int",
   "count",
   ")",
   "{",
   "zrevrangeByScoreWithScores",
   "(",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "key",
   ")",
   ",",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "max",
   ")",
   ",",
   "SafeEncoder",
   ".",
   "encode",
   "(",
   "min",
   ")",
   ",",
   "offset",
   ",",
   "count",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-156",
  "nl_tokens": [
   "Returns",
   "the",
   "greater",
   "of",
   "the",
   "two",
   "values",
   "according",
   "to",
   "this",
   "ordering",
   ".",
   "If",
   "the",
   "values",
   "compare",
   "as",
   "0",
   "the",
   "first",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "<",
   "E",
   "extends",
   "T",
   ">",
   "E",
   "<mask>",
   "(",
   "@",
   "NullableDecl",
   "E",
   "a",
   ",",
   "@",
   "NullableDecl",
   "E",
   "b",
   ")",
   "{",
   "return",
   "(",
   "compare",
   "(",
   "a",
   ",",
   "b",
   ")",
   ">=",
   "0",
   ")",
   "?",
   "a",
   ":",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-157",
  "nl_tokens": [
   "\u83b7\u53d6\u4e24\u4e2a\u8def\u5f84\u4ece\u5934\u90e8\u5f00\u59cb\u8ba1\u7b97\u7684\u4ea4\u96c6"
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "getIntersectPath",
   "(",
   "String",
   "ph0",
   ",",
   "String",
   "ph1",
   ",",
   "String",
   "dft",
   ")",
   "{",
   "// \u6728\u53ef\u80fd\u6709\u4ea4\u96c6\r",
   "if",
   "(",
   "null",
   "==",
   "ph0",
   "||",
   "null",
   "==",
   "ph1",
   ")",
   "return",
   "dft",
   ";",
   "String",
   "[",
   "]",
   "ss0",
   "=",
   "Strings",
   ".",
   "splitIgnoreBlank",
   "(",
   "ph0",
   ",",
   "\"[\\\\\\\\/]\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "ss1",
   "=",
   "Strings",
   ".",
   "splitIgnoreBlank",
   "(",
   "ph1",
   ",",
   "\"[\\\\\\\\/]\"",
   ")",
   ";",
   "int",
   "pos",
   "=",
   "0",
   ";",
   "int",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "ss0",
   ".",
   "length",
   ",",
   "ss1",
   ".",
   "length",
   ")",
   ";",
   "for",
   "(",
   ";",
   "pos",
   "<",
   "len",
   ";",
   "pos",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ss0",
   "[",
   "pos",
   "]",
   ".",
   "equals",
   "(",
   "ss1",
   "[",
   "pos",
   "]",
   ")",
   ")",
   "break",
   ";",
   "}",
   "// \u6728\u6709\u4ea4\u96c6\r",
   "if",
   "(",
   "pos",
   "==",
   "0",
   ")",
   "return",
   "dft",
   ";",
   "// \u5f97\u5230\r",
   "String",
   "re",
   "=",
   "Lang",
   ".",
   "concat",
   "(",
   "0",
   ",",
   "pos",
   ",",
   "\"/\"",
   ",",
   "ss0",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "// \u9700\u8981\u8865\u5168\u540e\u9762\u7684 \"/\" \u5417\r",
   "if",
   "(",
   "ph0",
   ".",
   "endsWith",
   "(",
   "\"/\"",
   ")",
   "&&",
   "ph1",
   ".",
   "endsWith",
   "(",
   "\"/\"",
   ")",
   ")",
   "return",
   "re",
   "+",
   "\"/\"",
   ";",
   "return",
   "re",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-158",
  "nl_tokens": [
   "Returns",
   "a",
   "pseudo",
   "-",
   "random",
   "number",
   "between",
   "min",
   "and",
   "max",
   "inclusive",
   ".",
   "The",
   "difference",
   "between",
   "min",
   "and",
   "max",
   "can",
   "be",
   "at",
   "most",
   "<code",
   ">",
   "Integer",
   ".",
   "MAX_VALUE",
   "-",
   "1<",
   "/",
   "code",
   ">",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "randInt",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "// NOTE: Usually this should be a field rather than a method",
   "// variable so that it is not re-seeded every call.",
   "Random",
   "rand",
   "=",
   "new",
   "Random",
   "(",
   ")",
   ";",
   "// nextInt is normally exclusive of the top value,",
   "// so add 1 to make it inclusive",
   "int",
   "randomNum",
   "=",
   "rand",
   ".",
   "nextInt",
   "(",
   "(",
   "max",
   "-",
   "min",
   ")",
   "+",
   "1",
   ")",
   "+",
   "min",
   ";",
   "return",
   "randomNum",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-159",
  "nl_tokens": [
   "Returns",
   "a",
   "result",
   "for",
   "the",
   "given",
   "delay",
   "and",
   "epsilon",
   "(",
   "error",
   "rate",
   ")",
   ".",
   "Epsilon",
   "must",
   "be",
   "between",
   "0",
   "and",
   "1",
   "exclusively",
   ".",
   "See",
   "{",
   "@link",
   "DelayCalculator",
   "}",
   "for",
   "details",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Result",
   "calculate",
   "(",
   "long",
   "nanoseconds",
   ",",
   "float",
   "epsilon",
   ")",
   "{",
   "if",
   "(",
   "epsilon",
   "<=",
   "0",
   "||",
   "epsilon",
   ">=",
   "1",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"0 < epsilon < 1 not satisfied\"",
   ")",
   ";",
   "long",
   "max_divider",
   "=",
   "(",
   "int",
   ")",
   "(",
   "1D",
   "/",
   "epsilon",
   ")",
   ";",
   "if",
   "(",
   "nanoseconds",
   "<",
   "max_divider",
   ")",
   "return",
   "new",
   "Result",
   "(",
   "nanoseconds",
   ",",
   "1",
   ")",
   ";",
   "long",
   "interval",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "MAX_INTERVAL",
   ",",
   "nanoseconds",
   "/",
   "max_divider",
   ")",
   ";",
   "long",
   "correction",
   "=",
   "nanoseconds",
   "/",
   "interval",
   ";",
   "return",
   "new",
   "Result",
   "(",
   "interval",
   ",",
   "correction",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-160",
  "nl_tokens": [
   "Calculates",
   "the",
   "maximum",
   "timeGradient",
   "of",
   "all",
   "Terminations",
   ".",
   "Not",
   "supported",
   "timeGradients",
   "(",
   "-",
   "1",
   ".",
   "0",
   ")",
   "are",
   "ignored",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "double",
   "calculateSolverTimeGradient",
   "(",
   "DefaultSolverScope",
   "solverScope",
   ")",
   "{",
   "double",
   "timeGradient",
   "=",
   "0.0",
   ";",
   "for",
   "(",
   "Termination",
   "termination",
   ":",
   "terminationList",
   ")",
   "{",
   "double",
   "nextTimeGradient",
   "=",
   "termination",
   ".",
   "calculateSolverTimeGradient",
   "(",
   "solverScope",
   ")",
   ";",
   "if",
   "(",
   "nextTimeGradient",
   ">=",
   "0.0",
   ")",
   "{",
   "timeGradient",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "timeGradient",
   ",",
   "nextTimeGradient",
   ")",
   ";",
   "}",
   "}",
   "return",
   "timeGradient",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-161",
  "nl_tokens": [
   "Acquires",
   "the",
   "given",
   "number",
   "of",
   "permits",
   "from",
   "this",
   "{",
   "@code",
   "RateLimiter",
   "}",
   "if",
   "it",
   "can",
   "be",
   "obtained",
   "without",
   "exceeding",
   "the",
   "specified",
   "{",
   "@code",
   "timeout",
   "}",
   "or",
   "returns",
   "{",
   "@code",
   "false",
   "}",
   "immediately",
   "(",
   "without",
   "waiting",
   ")",
   "if",
   "the",
   "permits",
   "would",
   "not",
   "have",
   "been",
   "granted",
   "before",
   "the",
   "timeout",
   "expired",
   "."
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "tryAcquire",
   "(",
   "int",
   "permits",
   ",",
   "long",
   "timeout",
   ",",
   "TimeUnit",
   "unit",
   ")",
   "{",
   "long",
   "timeoutMicros",
   "=",
   "<mask>",
   "(",
   "unit",
   ".",
   "toMicros",
   "(",
   "timeout",
   ")",
   ",",
   "0",
   ")",
   ";",
   "checkPermits",
   "(",
   "permits",
   ")",
   ";",
   "long",
   "microsToWait",
   ";",
   "synchronized",
   "(",
   "mutex",
   "(",
   ")",
   ")",
   "{",
   "long",
   "nowMicros",
   "=",
   "stopwatch",
   ".",
   "readMicros",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "canAcquire",
   "(",
   "nowMicros",
   ",",
   "timeoutMicros",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "else",
   "{",
   "microsToWait",
   "=",
   "reserveAndGetWaitLength",
   "(",
   "permits",
   ",",
   "nowMicros",
   ")",
   ";",
   "}",
   "}",
   "stopwatch",
   ".",
   "sleepMicrosUninterruptibly",
   "(",
   "microsToWait",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-162",
  "nl_tokens": [
   "\u6309\u7167ascii",
   "(",
   "\u5b57\u5178",
   ")",
   "\u987a\u5e8f\u6bd4\u8f83\u5b57\u7b26\u5927\u5c0f"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "compare",
   "(",
   "String",
   "str1",
   ",",
   "String",
   "str2",
   ")",
   "{",
   "//\u6709\u4e00\u4e2a\u4e3anull\u7684\u8bdd\u6309\u7167\u975enull\u7684\u5927\u5904\u7406",
   "if",
   "(",
   "str1",
   "==",
   "null",
   "||",
   "str2",
   "==",
   "null",
   ")",
   "{",
   "return",
   "Integer",
   ".",
   "compare",
   "(",
   "(",
   "str1",
   "==",
   "null",
   ")",
   "?",
   "0",
   ":",
   "1",
   ",",
   "(",
   "str2",
   "==",
   "null",
   ")",
   "?",
   "0",
   ":",
   "1",
   ")",
   ";",
   "}",
   "if",
   "(",
   "str1",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   "||",
   "str2",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "return",
   "str1",
   ".",
   "length",
   "(",
   ")",
   "-",
   "str2",
   ".",
   "length",
   "(",
   ")",
   ";",
   "}",
   "int",
   "res",
   "=",
   "0",
   ";",
   "int",
   "position",
   "=",
   "0",
   ";",
   "int",
   "maxComparePosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "str1",
   ".",
   "length",
   "(",
   ")",
   ",",
   "str2",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "while",
   "(",
   "position",
   "<",
   "maxComparePosition",
   ")",
   "{",
   "char",
   "ch1",
   "=",
   "str1",
   ".",
   "charAt",
   "(",
   "position",
   ")",
   ";",
   "char",
   "ch2",
   "=",
   "str2",
   ".",
   "charAt",
   "(",
   "position",
   ")",
   ";",
   "if",
   "(",
   "ch1",
   "==",
   "ch2",
   ")",
   "{",
   "position",
   "++",
   ";",
   "continue",
   ";",
   "}",
   "//\u4e0d\u76f8\u7b49\u7684\u8bdd\u8fd4\u56de\u5dee\u503c,\u4ee3\u8868\u5b57\u7b26\u4e32\u5927\u5c0f",
   "res",
   "=",
   "ch1",
   "-",
   "ch2",
   ";",
   "break",
   ";",
   "}",
   "//\u5982\u679c\u6700\u540e\u6bd4\u8f83\u7ed3\u679c\u662f\u76f8\u7b49\u7684\u8bdd,\u8bf4\u660e\u6bd4\u8f83\u957f\u5ea6\u5185\u7684\u5b57\u7b26\u4e32\u76f8\u7b49,\u9700\u8981\u6bd4\u8f83\u5b57\u7b26\u4e32\u957f\u5ea6",
   "return",
   "res",
   "==",
   "0",
   "?",
   "(",
   "str1",
   ".",
   "length",
   "(",
   ")",
   "-",
   "str2",
   ".",
   "length",
   "(",
   ")",
   ")",
   ":",
   "res",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-163",
  "nl_tokens": [
   "Gets",
   "a",
   "field",
   "name",
   "for",
   "a",
   "$group",
   "operation",
   "representing",
   "the",
   "minimum",
   "of",
   "the",
   "values",
   "of",
   "the",
   "given",
   "expression",
   "when",
   "applied",
   "to",
   "all",
   "members",
   "of",
   "the",
   "group",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "TExpression",
   ">",
   "BsonField",
   "<mask>",
   "(",
   "final",
   "String",
   "fieldName",
   ",",
   "final",
   "TExpression",
   "expression",
   ")",
   "{",
   "return",
   "accumulator",
   "(",
   "\"$min\"",
   ",",
   "fieldName",
   ",",
   "expression",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-164",
  "nl_tokens": [
   "Returns",
   "an",
   "array",
   "size",
   "suitable",
   "for",
   "the",
   "backing",
   "array",
   "of",
   "a",
   "hash",
   "table",
   "that",
   "uses",
   "open",
   "addressing",
   "with",
   "linear",
   "probing",
   "in",
   "its",
   "implementation",
   ".",
   "The",
   "returned",
   "size",
   "is",
   "the",
   "smallest",
   "power",
   "of",
   "two",
   "that",
   "can",
   "hold",
   "setSize",
   "elements",
   "with",
   "the",
   "desired",
   "load",
   "factor",
   ".",
   "Always",
   "returns",
   "at",
   "least",
   "setSize",
   "+",
   "2",
   "."
  ],
  "pl_tokens": [
   "@",
   "VisibleForTesting",
   "static",
   "int",
   "chooseTableSize",
   "(",
   "int",
   "setSize",
   ")",
   "{",
   "setSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "setSize",
   ",",
   "2",
   ")",
   ";",
   "// Correct the size for open addressing to match desired load factor.",
   "if",
   "(",
   "setSize",
   "<",
   "CUTOFF",
   ")",
   "{",
   "// Round up to the next highest power of 2.",
   "int",
   "tableSize",
   "=",
   "Integer",
   ".",
   "highestOneBit",
   "(",
   "setSize",
   "-",
   "1",
   ")",
   "<<",
   "1",
   ";",
   "while",
   "(",
   "tableSize",
   "*",
   "DESIRED_LOAD_FACTOR",
   "<",
   "setSize",
   ")",
   "{",
   "tableSize",
   "<<=",
   "1",
   ";",
   "}",
   "return",
   "tableSize",
   ";",
   "}",
   "// The table can't be completely full or we'll get infinite reprobes",
   "checkArgument",
   "(",
   "setSize",
   "<",
   "MAX_TABLE_SIZE",
   ",",
   "\"collection too large\"",
   ")",
   ";",
   "return",
   "MAX_TABLE_SIZE",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-165",
  "nl_tokens": [
   "Returns",
   "the",
   "greatest",
   "value",
   "present",
   "in",
   "{",
   "@code",
   "array",
   "}",
   "treating",
   "values",
   "as",
   "unsigned",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "...",
   "array",
   ")",
   "{",
   "checkArgument",
   "(",
   "array",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "int",
   "max",
   "=",
   "flip",
   "(",
   "array",
   "[",
   "0",
   "]",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "array",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "next",
   "=",
   "flip",
   "(",
   "array",
   "[",
   "i",
   "]",
   ")",
   ";",
   "if",
   "(",
   "next",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "next",
   ";",
   "}",
   "}",
   "return",
   "flip",
   "(",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-166",
  "nl_tokens": [
   "/",
   "*",
   "Note",
   ":",
   "a",
   "null",
   "return",
   "value",
   "means",
   "that",
   "the",
   "caller",
   "doesn",
   "t",
   "need",
   "to",
   "do",
   "anything",
   ".",
   "Currently",
   "this",
   "only",
   "happens",
   "if",
   "this",
   "is",
   "an",
   "AXFR",
   "request",
   "over",
   "TCP",
   "."
  ],
  "pl_tokens": [
   "byte",
   "[",
   "]",
   "generateReply",
   "(",
   "Message",
   "query",
   ",",
   "byte",
   "[",
   "]",
   "in",
   ",",
   "int",
   "length",
   ",",
   "Socket",
   "s",
   ")",
   "throws",
   "IOException",
   "{",
   "final",
   "Header",
   "header",
   ";",
   "final",
   "int",
   "maxLength",
   ";",
   "int",
   "flags",
   "=",
   "0",
   ";",
   "header",
   "=",
   "query",
   ".",
   "getHeader",
   "(",
   ")",
   ";",
   "if",
   "(",
   "header",
   ".",
   "getFlag",
   "(",
   "Flags",
   ".",
   "QR",
   ")",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "if",
   "(",
   "header",
   ".",
   "getRcode",
   "(",
   ")",
   "!=",
   "Rcode",
   ".",
   "NOERROR",
   ")",
   "{",
   "return",
   "errorMessage",
   "(",
   "query",
   ",",
   "Rcode",
   ".",
   "FORMERR",
   ")",
   ";",
   "}",
   "if",
   "(",
   "header",
   ".",
   "getOpcode",
   "(",
   ")",
   "!=",
   "Opcode",
   ".",
   "QUERY",
   ")",
   "{",
   "return",
   "errorMessage",
   "(",
   "query",
   ",",
   "Rcode",
   ".",
   "NOTIMP",
   ")",
   ";",
   "}",
   "final",
   "Record",
   "queryRecord",
   "=",
   "query",
   ".",
   "getQuestion",
   "(",
   ")",
   ";",
   "final",
   "TSIGRecord",
   "queryTSIG",
   "=",
   "query",
   ".",
   "getTSIG",
   "(",
   ")",
   ";",
   "TSIG",
   "tsig",
   "=",
   "null",
   ";",
   "if",
   "(",
   "queryTSIG",
   "!=",
   "null",
   ")",
   "{",
   "tsig",
   "=",
   "_tsigs",
   ".",
   "get",
   "(",
   "queryTSIG",
   ".",
   "getName",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "tsig",
   "==",
   "null",
   "||",
   "tsig",
   ".",
   "verify",
   "(",
   "query",
   ",",
   "in",
   ",",
   "length",
   ",",
   "null",
   ")",
   "!=",
   "Rcode",
   ".",
   "NOERROR",
   ")",
   "{",
   "return",
   "formerrMessage",
   "(",
   "in",
   ")",
   ";",
   "}",
   "}",
   "final",
   "OPTRecord",
   "queryOPT",
   "=",
   "query",
   ".",
   "getOPT",
   "(",
   ")",
   ";",
   "if",
   "(",
   "queryOPT",
   "!=",
   "null",
   "&&",
   "queryOPT",
   ".",
   "getVersion",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "}",
   "if",
   "(",
   "s",
   "!=",
   "null",
   ")",
   "{",
   "maxLength",
   "=",
   "65535",
   ";",
   "}",
   "else",
   "if",
   "(",
   "queryOPT",
   "!=",
   "null",
   ")",
   "{",
   "maxLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "queryOPT",
   ".",
   "getPayloadSize",
   "(",
   ")",
   ",",
   "512",
   ")",
   ";",
   "}",
   "else",
   "{",
   "maxLength",
   "=",
   "512",
   ";",
   "}",
   "if",
   "(",
   "queryOPT",
   "!=",
   "null",
   "&&",
   "(",
   "queryOPT",
   ".",
   "getFlags",
   "(",
   ")",
   "&",
   "ExtendedFlags",
   ".",
   "DO",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "flags",
   "=",
   "FLAG_DNSSECOK",
   ";",
   "}",
   "final",
   "Message",
   "response",
   "=",
   "new",
   "Message",
   "(",
   "query",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "getID",
   "(",
   ")",
   ")",
   ";",
   "response",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setFlag",
   "(",
   "Flags",
   ".",
   "QR",
   ")",
   ";",
   "if",
   "(",
   "query",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "getFlag",
   "(",
   "Flags",
   ".",
   "RD",
   ")",
   ")",
   "{",
   "response",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setFlag",
   "(",
   "Flags",
   ".",
   "RD",
   ")",
   ";",
   "}",
   "response",
   ".",
   "addRecord",
   "(",
   "queryRecord",
   ",",
   "Section",
   ".",
   "QUESTION",
   ")",
   ";",
   "final",
   "Name",
   "name",
   "=",
   "queryRecord",
   ".",
   "getName",
   "(",
   ")",
   ";",
   "final",
   "int",
   "type",
   "=",
   "queryRecord",
   ".",
   "getType",
   "(",
   ")",
   ";",
   "final",
   "int",
   "dclass",
   "=",
   "queryRecord",
   ".",
   "getDClass",
   "(",
   ")",
   ";",
   "if",
   "(",
   "type",
   "==",
   "Type",
   ".",
   "AXFR",
   "&&",
   "s",
   "!=",
   "null",
   ")",
   "{",
   "return",
   "doAXFR",
   "(",
   "name",
   ",",
   "query",
   ",",
   "tsig",
   ",",
   "queryTSIG",
   ",",
   "s",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "Type",
   ".",
   "isRR",
   "(",
   "type",
   ")",
   "&&",
   "type",
   "!=",
   "Type",
   ".",
   "ANY",
   ")",
   "{",
   "return",
   "errorMessage",
   "(",
   "query",
   ",",
   "Rcode",
   ".",
   "NOTIMP",
   ")",
   ";",
   "}",
   "final",
   "byte",
   "rcode",
   "=",
   "addAnswer",
   "(",
   "response",
   ",",
   "name",
   ",",
   "type",
   ",",
   "dclass",
   ",",
   "0",
   ",",
   "flags",
   ")",
   ";",
   "if",
   "(",
   "rcode",
   "!=",
   "Rcode",
   ".",
   "NOERROR",
   "&&",
   "rcode",
   "!=",
   "Rcode",
   ".",
   "NXDOMAIN",
   ")",
   "{",
   "return",
   "errorMessage",
   "(",
   "query",
   ",",
   "rcode",
   ")",
   ";",
   "}",
   "addAdditional",
   "(",
   "response",
   ",",
   "flags",
   ")",
   ";",
   "if",
   "(",
   "queryOPT",
   "!=",
   "null",
   ")",
   "{",
   "final",
   "int",
   "optflags",
   "=",
   "(",
   "flags",
   "==",
   "FLAG_DNSSECOK",
   ")",
   "?",
   "ExtendedFlags",
   ".",
   "DO",
   ":",
   "0",
   ";",
   "final",
   "OPTRecord",
   "opt",
   "=",
   "new",
   "OPTRecord",
   "(",
   "(",
   "short",
   ")",
   "4096",
   ",",
   "rcode",
   ",",
   "(",
   "byte",
   ")",
   "0",
   ",",
   "optflags",
   ")",
   ";",
   "response",
   ".",
   "addRecord",
   "(",
   "opt",
   ",",
   "Section",
   ".",
   "ADDITIONAL",
   ")",
   ";",
   "}",
   "response",
   ".",
   "setTSIG",
   "(",
   "tsig",
   ",",
   "Rcode",
   ".",
   "NOERROR",
   ",",
   "queryTSIG",
   ")",
   ";",
   "return",
   "response",
   ".",
   "toWire",
   "(",
   "maxLength",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-167",
  "nl_tokens": [
   "Copy",
   "as",
   "much",
   "of",
   "the",
   "byte",
   "buffer",
   "into",
   "the",
   "output",
   "array",
   "as",
   "possible",
   "returning",
   "the",
   "(",
   "positive",
   ")",
   "number",
   "of",
   "characters",
   "copied",
   "."
  ],
  "pl_tokens": [
   "private",
   "int",
   "drain",
   "(",
   "byte",
   "[",
   "]",
   "b",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "{",
   "int",
   "remaining",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "byteBuffer",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "byteBuffer",
   ".",
   "get",
   "(",
   "b",
   ",",
   "off",
   ",",
   "remaining",
   ")",
   ";",
   "return",
   "remaining",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-168",
  "nl_tokens": [
   "Visits",
   "a",
   "TABLESWITCH",
   "instruction",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "visitTableSwitchInsn",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ",",
   "Label",
   "dflt",
   ",",
   "Label",
   "...",
   "labels",
   ")",
   "{",
   "if",
   "(",
   "mv",
   "!=",
   "null",
   ")",
   "{",
   "mv",
   ".",
   "visitTableSwitchInsn",
   "(",
   "min",
   ",",
   "max",
   ",",
   "dflt",
   ",",
   "labels",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-169",
  "nl_tokens": [
   "Similar",
   "to",
   "load64",
   "but",
   "allows",
   "offset",
   "+",
   "8",
   ">",
   "input",
   ".",
   "length",
   "padding",
   "the",
   "result",
   "with",
   "zeroes",
   ".",
   "This",
   "has",
   "to",
   "explicitly",
   "reverse",
   "the",
   "order",
   "of",
   "the",
   "bytes",
   "as",
   "it",
   "packs",
   "them",
   "into",
   "the",
   "result",
   "which",
   "makes",
   "it",
   "slower",
   "than",
   "the",
   "native",
   "version",
   "."
  ],
  "pl_tokens": [
   "static",
   "long",
   "load64Safely",
   "(",
   "byte",
   "[",
   "]",
   "input",
   ",",
   "int",
   "offset",
   ",",
   "int",
   "length",
   ")",
   "{",
   "long",
   "result",
   "=",
   "0",
   ";",
   "// Due to the way we shift, we can stop iterating once we've run out of data, the rest",
   "// of the result already being filled with zeros.",
   "// This loop is critical to performance, so please check HashBenchmark if altering it.",
   "int",
   "limit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   ",",
   "8",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "limit",
   ";",
   "i",
   "++",
   ")",
   "{",
   "// Shift value left while iterating logically through the array.",
   "result",
   "|=",
   "(",
   "input",
   "[",
   "offset",
   "+",
   "i",
   "]",
   "&",
   "0xFF",
   "L",
   ")",
   "<<",
   "(",
   "i",
   "*",
   "8",
   ")",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-170",
  "nl_tokens": [
   "Evaluate",
   "the",
   "allocation",
   "share",
   "of",
   "a",
   "bucket",
   "among",
   "all",
   "the",
   "buckets",
   "for",
   "which",
   "allocations",
   "are",
   "defined",
   ".",
   "If",
   "there",
   "are",
   "no",
   "allocations",
   "setup",
   "return",
   "1",
   ".",
   "0",
   "implying",
   "100%",
   ".",
   "If",
   "no",
   "allocation",
   "is",
   "setup",
   "for",
   "the",
   "given",
   "<code",
   ">",
   "bucket<",
   "/",
   "code",
   ">",
   "return",
   "a",
   "small",
   "value",
   ".",
   "Otherwise",
   "calculate",
   "the",
   "share",
   "percentage",
   "of",
   "each",
   "resource",
   "cpu",
   "memory",
   "network",
   "and",
   "disk",
   "from",
   "the",
   "total",
   "and",
   "return",
   "the",
   "maximum",
   "of",
   "these",
   "shares",
   "."
  ],
  "pl_tokens": [
   "double",
   "evalAllocationShare",
   "(",
   "String",
   "bucket",
   ")",
   "{",
   "if",
   "(",
   "allocsMap",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   "1.0",
   ";",
   "// special case if there are no allocations setup",
   "}",
   "final",
   "ResAllocs",
   "resAllocs",
   "=",
   "allocsMap",
   ".",
   "get",
   "(",
   "bucket",
   ")",
   ";",
   "if",
   "(",
   "resAllocs",
   "==",
   "null",
   ")",
   "return",
   "totalCpu",
   "<",
   "(",
   "1.0",
   "/",
   "eps",
   ")",
   "?",
   "eps",
   ":",
   "1.0",
   "/",
   "totalCpu",
   ";",
   "// arbitrarily base it on cpus",
   "double",
   "val",
   "=",
   "totalCpu",
   "<",
   "1.0",
   "?",
   "eps",
   ":",
   "resAllocs",
   ".",
   "getCores",
   "(",
   ")",
   "/",
   "totalCpu",
   ";",
   "val",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "val",
   ",",
   "totalMem",
   "<",
   "1.0",
   "?",
   "eps",
   ":",
   "resAllocs",
   ".",
   "getMemory",
   "(",
   ")",
   "/",
   "totalMem",
   ")",
   ";",
   "val",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "val",
   ",",
   "totalNetwork",
   "<",
   "1.0",
   "?",
   "eps",
   ":",
   "resAllocs",
   ".",
   "getNetworkMbps",
   "(",
   ")",
   "/",
   "totalNetwork",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "val",
   ",",
   "totalDisk",
   "<",
   "1.0",
   "?",
   "eps",
   ":",
   "resAllocs",
   ".",
   "getDisk",
   "(",
   ")",
   "/",
   "totalDisk",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-171",
  "nl_tokens": [
   "Returns",
   "a",
   "Maybe",
   "that",
   "signals",
   "the",
   "events",
   "emitted",
   "by",
   "the",
   "source",
   "Maybe",
   "shifted",
   "forward",
   "in",
   "time",
   "by",
   "a",
   "specified",
   "delay",
   "running",
   "on",
   "the",
   "specified",
   "Scheduler",
   ".",
   "<p",
   ">",
   "<img",
   "width",
   "=",
   "640",
   "height",
   "=",
   "310",
   "src",
   "=",
   "https",
   ":",
   "//",
   "raw",
   ".",
   "github",
   ".",
   "com",
   "/",
   "wiki",
   "/",
   "ReactiveX",
   "/",
   "RxJava",
   "/",
   "images",
   "/",
   "rx",
   "-",
   "operators",
   "/",
   "delay",
   ".",
   "s",
   ".",
   "png",
   "alt",
   "=",
   ">",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Scheduler",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "you",
   "specify",
   "which",
   "{",
   "@link",
   "Scheduler",
   "}",
   "this",
   "operator",
   "will",
   "use",
   ".",
   "<",
   "/",
   "dd",
   ">",
   "<",
   "/",
   "dl",
   ">"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "final",
   "Maybe",
   "<",
   "T",
   ">",
   "delay",
   "(",
   "long",
   "delay",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "MaybeDelay",
   "<",
   "T",
   ">",
   "(",
   "this",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "delay",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-172",
  "nl_tokens": [
   "Calculates",
   "the",
   "number",
   "of",
   "columns",
   "needed",
   "to",
   "host",
   "all",
   "field",
   "editors",
   "."
  ],
  "pl_tokens": [
   "private",
   "int",
   "calcNumberOfColumns",
   "(",
   ")",
   "{",
   "int",
   "result",
   "=",
   "0",
   ";",
   "if",
   "(",
   "fields",
   "!=",
   "null",
   ")",
   "{",
   "Iterator",
   "<",
   "FieldEditor",
   ">",
   "e",
   "=",
   "fields",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "e",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "FieldEditor",
   "pe",
   "=",
   "e",
   ".",
   "next",
   "(",
   ")",
   ";",
   "result",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "result",
   ",",
   "pe",
   ".",
   "getNumberOfControls",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-173",
  "nl_tokens": [
   "True",
   "if",
   "f1",
   "is",
   "newer",
   "than",
   "f2",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "compareFiles",
   "(",
   "WrappedFileSystem",
   "fs",
   ",",
   "WrappedFile",
   "f1",
   ",",
   "WrappedFile",
   "f2",
   ")",
   "{",
   "if",
   "(",
   "!",
   "fs",
   ".",
   "exists",
   "(",
   "f2",
   ")",
   ")",
   "{",
   "return",
   "true",
   ";",
   "}",
   "try",
   "{",
   "long",
   "mtime1",
   "=",
   "fs",
   ".",
   "getLastModifiedTime",
   "(",
   "f1",
   ")",
   ";",
   "long",
   "mtime2",
   "=",
   "fs",
   ".",
   "getLastModifiedTime",
   "(",
   "f2",
   ")",
   ";",
   "long",
   "ctime1",
   "=",
   "fs",
   ".",
   "getChangedTime",
   "(",
   "f1",
   ")",
   ";",
   "long",
   "ctime2",
   "=",
   "fs",
   ".",
   "getChangedTime",
   "(",
   "f2",
   ")",
   ";",
   "long",
   "time1",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "mtime1",
   ",",
   "ctime1",
   ")",
   ";",
   "long",
   "time2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "mtime2",
   ",",
   "ctime2",
   ")",
   ";",
   "int",
   "compares",
   "=",
   "Long",
   ".",
   "compare",
   "(",
   "time1",
   ",",
   "time2",
   ")",
   ";",
   "if",
   "(",
   "compares",
   "!=",
   "0",
   ")",
   "{",
   "return",
   "compares",
   ">",
   "0",
   ";",
   "}",
   "}",
   "catch",
   "(",
   "IOException",
   "ex",
   ")",
   "{",
   "LOG",
   ".",
   "error",
   "(",
   "\"Failed to get ctime: '{}'\"",
   ",",
   "f1",
   ".",
   "getFileName",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "return",
   "false",
   ";",
   "}",
   "return",
   "f1",
   ".",
   "getAbsolutePath",
   "(",
   ")",
   ".",
   "compareTo",
   "(",
   "f2",
   ".",
   "getAbsolutePath",
   "(",
   ")",
   ")",
   ">",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-174",
  "nl_tokens": [
   "Write",
   "a",
   "portion",
   "of",
   "this",
   "data",
   "to",
   "an",
   "OutputStream",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "writeTo",
   "(",
   "OutputStream",
   "os",
   ",",
   "long",
   "startPosition",
   ",",
   "long",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "segmentSize",
   "=",
   "1",
   "<<",
   "log2OfSegmentSize",
   ";",
   "int",
   "remainingBytesInSegment",
   "=",
   "segmentSize",
   "-",
   "(",
   "int",
   ")",
   "(",
   "startPosition",
   "&",
   "bitmask",
   ")",
   ";",
   "long",
   "remainingBytesInCopy",
   "=",
   "len",
   ";",
   "while",
   "(",
   "remainingBytesInCopy",
   ">",
   "0",
   ")",
   "{",
   "long",
   "bytesToCopyFromSegment",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remainingBytesInSegment",
   ",",
   "remainingBytesInCopy",
   ")",
   ";",
   "os",
   ".",
   "write",
   "(",
   "segments",
   "[",
   "(",
   "int",
   ")",
   "(",
   "startPosition",
   ">>>",
   "log2OfSegmentSize",
   ")",
   "]",
   ",",
   "(",
   "int",
   ")",
   "(",
   "startPosition",
   "&",
   "bitmask",
   ")",
   ",",
   "(",
   "int",
   ")",
   "bytesToCopyFromSegment",
   ")",
   ";",
   "startPosition",
   "+=",
   "bytesToCopyFromSegment",
   ";",
   "remainingBytesInSegment",
   "=",
   "segmentSize",
   "-",
   "(",
   "int",
   ")",
   "(",
   "startPosition",
   "&",
   "bitmask",
   ")",
   ";",
   "remainingBytesInCopy",
   "-=",
   "bytesToCopyFromSegment",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-175",
  "nl_tokens": [
   "Reduce",
   "a",
   "fraction",
   "to",
   "it",
   "s",
   "lowest",
   "common",
   "denominators",
   ".",
   "<br",
   ">",
   "This",
   "is",
   "useful",
   "for",
   "framerate",
   "calculations",
   ".",
   "<br",
   ">"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "sReduce",
   "(",
   "Rational",
   "dst",
   ",",
   "long",
   "num",
   ",",
   "long",
   "den",
   ",",
   "long",
   "<mask>",
   ")",
   "{",
   "return",
   "VideoJNI",
   ".",
   "Rational_sReduce",
   "(",
   "Rational",
   ".",
   "getCPtr",
   "(",
   "dst",
   ")",
   ",",
   "dst",
   ",",
   "num",
   ",",
   "den",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-176",
  "nl_tokens": [
   "Creates",
   "a",
   "new",
   "int",
   "range",
   "type",
   "with",
   "the",
   "specified",
   "name",
   "if",
   "it",
   "does",
   "not",
   "already",
   "exist",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Type",
   "createInstance",
   "(",
   "String",
   "name",
   ",",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "// Ensure that min is less than or equal to max.",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'min' must be less than or equal to 'max'.\"",
   ")",
   ";",
   "}",
   "synchronized",
   "(",
   "INT_RANGE_TYPES",
   ")",
   "{",
   "// Add the newly created type to the map of all types.",
   "IntRangeType",
   "newType",
   "=",
   "new",
   "IntRangeType",
   "(",
   "name",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "// Ensure that the named type does not already exist, unless it has an identical definition already, in which",
   "// case the old definition can be re-used and the new one discarded.",
   "IntRangeType",
   "oldType",
   "=",
   "INT_RANGE_TYPES",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "!",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The type '\"",
   "+",
   "name",
   "+",
   "\"' already exists and cannot be redefined.\"",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "return",
   "oldType",
   ";",
   "}",
   "else",
   "{",
   "INT_RANGE_TYPES",
   ".",
   "put",
   "(",
   "name",
   ",",
   "newType",
   ")",
   ";",
   "return",
   "newType",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-177",
  "nl_tokens": [
   "Draw",
   "a",
   "tile",
   "with",
   "the",
   "provided",
   "text",
   "label",
   "in",
   "the",
   "middle"
  ],
  "pl_tokens": [
   "private",
   "Bitmap",
   "drawTile",
   "(",
   "int",
   "tileWidth",
   ",",
   "int",
   "tileHeight",
   ",",
   "String",
   "text",
   ")",
   "{",
   "// Create bitmap and canvas",
   "Bitmap",
   "bitmap",
   "=",
   "Bitmap",
   ".",
   "createBitmap",
   "(",
   "tileWidth",
   ",",
   "tileHeight",
   ",",
   "Bitmap",
   ".",
   "Config",
   ".",
   "ARGB_8888",
   ")",
   ";",
   "Canvas",
   "canvas",
   "=",
   "new",
   "Canvas",
   "(",
   "bitmap",
   ")",
   ";",
   "// Draw the tile fill paint",
   "if",
   "(",
   "tileFillPaint",
   "!=",
   "null",
   ")",
   "{",
   "canvas",
   ".",
   "drawRect",
   "(",
   "0",
   ",",
   "0",
   ",",
   "tileWidth",
   ",",
   "tileHeight",
   ",",
   "tileFillPaint",
   ")",
   ";",
   "}",
   "// Draw the tile border",
   "if",
   "(",
   "tileBorderPaint",
   "!=",
   "null",
   ")",
   "{",
   "canvas",
   ".",
   "drawRect",
   "(",
   "0",
   ",",
   "0",
   ",",
   "tileWidth",
   ",",
   "tileHeight",
   ",",
   "tileBorderPaint",
   ")",
   ";",
   "}",
   "// Determine the text bounds",
   "Rect",
   "textBounds",
   "=",
   "new",
   "Rect",
   "(",
   ")",
   ";",
   "textPaint",
   ".",
   "getTextBounds",
   "(",
   "text",
   ",",
   "0",
   ",",
   "text",
   ".",
   "length",
   "(",
   ")",
   ",",
   "textBounds",
   ")",
   ";",
   "// Determine the center of the tile",
   "int",
   "centerX",
   "=",
   "(",
   "int",
   ")",
   "(",
   "bitmap",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "2.0f",
   ")",
   ";",
   "int",
   "centerY",
   "=",
   "(",
   "int",
   ")",
   "(",
   "bitmap",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "2.0f",
   ")",
   ";",
   "// Draw the circle",
   "if",
   "(",
   "circlePaint",
   "!=",
   "null",
   "||",
   "circleFillPaint",
   "!=",
   "null",
   ")",
   "{",
   "int",
   "diameter",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "textBounds",
   ".",
   "width",
   "(",
   ")",
   ",",
   "textBounds",
   ".",
   "height",
   "(",
   ")",
   ")",
   ";",
   "float",
   "radius",
   "=",
   "diameter",
   "/",
   "2.0f",
   ";",
   "radius",
   "=",
   "radius",
   "+",
   "(",
   "diameter",
   "*",
   "circlePaddingPercentage",
   ")",
   ";",
   "// Draw the filled circle",
   "if",
   "(",
   "circleFillPaint",
   "!=",
   "null",
   ")",
   "{",
   "canvas",
   ".",
   "drawCircle",
   "(",
   "centerX",
   ",",
   "centerY",
   ",",
   "radius",
   ",",
   "circleFillPaint",
   ")",
   ";",
   "}",
   "// Draw the circle",
   "if",
   "(",
   "circlePaint",
   "!=",
   "null",
   ")",
   "{",
   "canvas",
   ".",
   "drawCircle",
   "(",
   "centerX",
   ",",
   "centerY",
   ",",
   "radius",
   ",",
   "circlePaint",
   ")",
   ";",
   "}",
   "}",
   "// Draw the text",
   "canvas",
   ".",
   "drawText",
   "(",
   "text",
   ",",
   "centerX",
   "-",
   "textBounds",
   ".",
   "exactCenterX",
   "(",
   ")",
   ",",
   "centerY",
   "-",
   "textBounds",
   ".",
   "exactCenterY",
   "(",
   ")",
   ",",
   "textPaint",
   ")",
   ";",
   "return",
   "bitmap",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-178",
  "nl_tokens": [
   "Consider",
   "the",
   "uninstalls",
   ".",
   "<p",
   "/",
   ">",
   "This",
   "method",
   "is",
   "here",
   "to",
   "be",
   "able",
   "to",
   "override",
   "the",
   "behavior",
   "after",
   "installs",
   "failed",
   ".",
   "e",
   ".",
   "g",
   ".",
   "perhaps",
   "only",
   "running",
   "uninstalls",
   "from",
   "the",
   "index",
   ".",
   "<p",
   "/",
   ">",
   "By",
   "default",
   "we",
   "run",
   "all",
   "uninstalls",
   "in",
   "the",
   "case",
   "at",
   "least",
   "one",
   "install",
   "failed",
   "."
  ],
  "pl_tokens": [
   "protected",
   "void",
   "considerUninstalls",
   "(",
   "List",
   "<",
   "Joinpoint",
   ">",
   "uninstalls",
   ",",
   "int",
   "index",
   ")",
   "{",
   "if",
   "(",
   "uninstalls",
   "==",
   "null",
   ")",
   "return",
   ";",
   "for",
   "(",
   "int",
   "j",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "index",
   ",",
   "uninstalls",
   ".",
   "size",
   "(",
   ")",
   "-",
   "1",
   ")",
   ";",
   "j",
   ">=",
   "0",
   ";",
   "j",
   "--",
   ")",
   "{",
   "try",
   "{",
   "uninstalls",
   ".",
   "get",
   "(",
   "j",
   ")",
   ".",
   "dispatch",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Throwable",
   "t",
   ")",
   "{",
   "PojoLogger",
   ".",
   "ROOT_LOGGER",
   ".",
   "ignoreUninstallError",
   "(",
   "uninstalls",
   ".",
   "get",
   "(",
   "j",
   ")",
   ",",
   "t",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-179",
  "nl_tokens": [
   "Combines",
   "{",
   "@link",
   "PerformanceStats",
   "}",
   "instances",
   "e",
   ".",
   "g",
   ".",
   "from",
   "different",
   "Simulator",
   "Workers",
   ".",
   "<p",
   ">",
   "For",
   "the",
   "real",
   "-",
   "time",
   "performance",
   "monitor",
   "during",
   "the",
   "{",
   "@link",
   "TestPhase#RUN",
   "}",
   "the",
   "maximum",
   "value",
   "should",
   "be",
   "set",
   "so",
   "we",
   "get",
   "the",
   "maximum",
   "operation",
   "count",
   "and",
   "throughput",
   "values",
   "of",
   "all",
   "{",
   "@link",
   "PerformanceStats",
   "}",
   "instances",
   "of",
   "the",
   "last",
   "interval",
   ".",
   "<p",
   ">",
   "For",
   "the",
   "total",
   "performance",
   "number",
   "and",
   "the",
   "performance",
   "per",
   "Simulator",
   "Agent",
   "the",
   "added",
   "values",
   "should",
   "be",
   "set",
   "so",
   "we",
   "get",
   "the",
   "summed",
   "up",
   "operation",
   "count",
   "and",
   "throughput",
   "values",
   ".",
   "<p",
   ">",
   "The",
   "method",
   "always",
   "sets",
   "the",
   "maximum",
   "values",
   "for",
   "latency",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "PerformanceStats",
   "other",
   ",",
   "boolean",
   "addOperationCountAndThroughput",
   ")",
   "{",
   "if",
   "(",
   "other",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "if",
   "(",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "operationCount",
   "=",
   "other",
   ".",
   "operationCount",
   ";",
   "intervalThroughput",
   "=",
   "other",
   ".",
   "intervalThroughput",
   ";",
   "totalThroughput",
   "=",
   "other",
   ".",
   "totalThroughput",
   ";",
   "intervalLatencyAvgNanos",
   "=",
   "other",
   ".",
   "intervalLatencyAvgNanos",
   ";",
   "intervalLatency999PercentileNanos",
   "=",
   "other",
   ".",
   "intervalLatency999PercentileNanos",
   ";",
   "intervalLatencyMaxNanos",
   "=",
   "other",
   ".",
   "intervalLatencyMaxNanos",
   ";",
   "}",
   "else",
   "{",
   "if",
   "(",
   "addOperationCountAndThroughput",
   ")",
   "{",
   "operationCount",
   "+=",
   "other",
   ".",
   "operationCount",
   ";",
   "intervalThroughput",
   "+=",
   "other",
   ".",
   "intervalThroughput",
   ";",
   "totalThroughput",
   "+=",
   "other",
   ".",
   "totalThroughput",
   ";",
   "}",
   "else",
   "{",
   "operationCount",
   "=",
   "<mask>",
   "(",
   "operationCount",
   ",",
   "other",
   ".",
   "operationCount",
   ")",
   ";",
   "intervalThroughput",
   "=",
   "max",
   "(",
   "intervalThroughput",
   ",",
   "other",
   ".",
   "intervalThroughput",
   ")",
   ";",
   "totalThroughput",
   "=",
   "max",
   "(",
   "totalThroughput",
   ",",
   "other",
   ".",
   "totalThroughput",
   ")",
   ";",
   "}",
   "intervalLatencyAvgNanos",
   "=",
   "max",
   "(",
   "intervalLatencyAvgNanos",
   ",",
   "other",
   ".",
   "intervalLatencyAvgNanos",
   ")",
   ";",
   "intervalLatency999PercentileNanos",
   "=",
   "max",
   "(",
   "intervalLatency999PercentileNanos",
   ",",
   "other",
   ".",
   "intervalLatency999PercentileNanos",
   ")",
   ";",
   "intervalLatencyMaxNanos",
   "=",
   "max",
   "(",
   "intervalLatencyMaxNanos",
   ",",
   "other",
   ".",
   "intervalLatencyMaxNanos",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-180",
  "nl_tokens": [
   "Calculates",
   "median",
   "prediction"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "calcMVPredictionMedian",
   "(",
   "int",
   "a",
   ",",
   "int",
   "b",
   ",",
   "int",
   "c",
   ",",
   "int",
   "d",
   ",",
   "boolean",
   "aAvb",
   ",",
   "boolean",
   "bAvb",
   ",",
   "boolean",
   "cAvb",
   ",",
   "boolean",
   "dAvb",
   ",",
   "int",
   "ref",
   ",",
   "int",
   "comp",
   ")",
   "{",
   "if",
   "(",
   "!",
   "cAvb",
   ")",
   "{",
   "c",
   "=",
   "d",
   ";",
   "cAvb",
   "=",
   "dAvb",
   ";",
   "}",
   "if",
   "(",
   "aAvb",
   "&&",
   "!",
   "bAvb",
   "&&",
   "!",
   "cAvb",
   ")",
   "{",
   "b",
   "=",
   "c",
   "=",
   "a",
   ";",
   "bAvb",
   "=",
   "cAvb",
   "=",
   "aAvb",
   ";",
   "}",
   "a",
   "=",
   "aAvb",
   "?",
   "a",
   ":",
   "NULL_VECTOR",
   ";",
   "b",
   "=",
   "bAvb",
   "?",
   "b",
   ":",
   "NULL_VECTOR",
   ";",
   "c",
   "=",
   "cAvb",
   "?",
   "c",
   ":",
   "NULL_VECTOR",
   ";",
   "if",
   "(",
   "mvRef",
   "(",
   "a",
   ")",
   "==",
   "ref",
   "&&",
   "mvRef",
   "(",
   "b",
   ")",
   "!=",
   "ref",
   "&&",
   "mvRef",
   "(",
   "c",
   ")",
   "!=",
   "ref",
   ")",
   "return",
   "mvC",
   "(",
   "a",
   ",",
   "comp",
   ")",
   ";",
   "else",
   "if",
   "(",
   "mvRef",
   "(",
   "b",
   ")",
   "==",
   "ref",
   "&&",
   "mvRef",
   "(",
   "a",
   ")",
   "!=",
   "ref",
   "&&",
   "mvRef",
   "(",
   "c",
   ")",
   "!=",
   "ref",
   ")",
   "return",
   "mvC",
   "(",
   "b",
   ",",
   "comp",
   ")",
   ";",
   "else",
   "if",
   "(",
   "mvRef",
   "(",
   "c",
   ")",
   "==",
   "ref",
   "&&",
   "mvRef",
   "(",
   "a",
   ")",
   "!=",
   "ref",
   "&&",
   "mvRef",
   "(",
   "b",
   ")",
   "!=",
   "ref",
   ")",
   "return",
   "mvC",
   "(",
   "c",
   ",",
   "comp",
   ")",
   ";",
   "return",
   "mvC",
   "(",
   "a",
   ",",
   "comp",
   ")",
   "+",
   "mvC",
   "(",
   "b",
   ",",
   "comp",
   ")",
   "+",
   "mvC",
   "(",
   "c",
   ",",
   "comp",
   ")",
   "-",
   "<mask>",
   "(",
   "mvC",
   "(",
   "a",
   ",",
   "comp",
   ")",
   ",",
   "mvC",
   "(",
   "b",
   ",",
   "comp",
   ")",
   ",",
   "mvC",
   "(",
   "c",
   ",",
   "comp",
   ")",
   ")",
   "-",
   "max",
   "(",
   "mvC",
   "(",
   "a",
   ",",
   "comp",
   ")",
   ",",
   "mvC",
   "(",
   "b",
   ",",
   "comp",
   ")",
   ",",
   "mvC",
   "(",
   "c",
   ",",
   "comp",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-181",
  "nl_tokens": [
   "return",
   "item",
   "selected",
   "by",
   "this",
   "pixel",
   "position"
  ],
  "pl_tokens": [
   "protected",
   "int",
   "getItem",
   "(",
   "int",
   "pixel",
   ")",
   "{",
   "if",
   "(",
   "nitems",
   "<",
   "2",
   ")",
   "return",
   "0",
   ";",
   "int",
   "eff_width",
   "=",
   "b",
   ".",
   "width",
   "-",
   "2",
   "*",
   "arrow_size",
   ";",
   "// effective width\r",
   "double",
   "fitem",
   "=",
   "(",
   "(",
   "double",
   ")",
   "(",
   "pixel",
   "-",
   "arrow_size",
   ")",
   "*",
   "(",
   "nitems",
   "-",
   "1",
   ")",
   ")",
   "/",
   "eff_width",
   ";",
   "int",
   "item",
   "=",
   "(",
   "int",
   ")",
   "(",
   "fitem",
   "+",
   ".5",
   ")",
   ";",
   "item",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "item",
   ",",
   "nitems",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "return",
   "item",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-182",
  "nl_tokens": [
   "Finds",
   "the",
   "intersection",
   "between",
   "two",
   "rectangles",
   ".",
   "If",
   "the",
   "rectangles",
   "don",
   "t",
   "intersect",
   "then",
   "false",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "intersection",
   "(",
   "Rectangle2D_F64",
   "a",
   ",",
   "Rectangle2D_F64",
   "b",
   ",",
   "Rectangle2D_F64",
   "result",
   ")",
   "{",
   "if",
   "(",
   "!",
   "intersects",
   "(",
   "a",
   ",",
   "b",
   ")",
   ")",
   "return",
   "false",
   ";",
   "result",
   ".",
   "p0",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "p0",
   ".",
   "x",
   ",",
   "b",
   ".",
   "p0",
   ".",
   "x",
   ")",
   ";",
   "result",
   ".",
   "p1",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "p1",
   ".",
   "x",
   ",",
   "b",
   ".",
   "p1",
   ".",
   "x",
   ")",
   ";",
   "result",
   ".",
   "p0",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "a",
   ".",
   "p0",
   ".",
   "y",
   ",",
   "b",
   ".",
   "p0",
   ".",
   "y",
   ")",
   ";",
   "result",
   ".",
   "p1",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "p1",
   ".",
   "y",
   ",",
   "b",
   ".",
   "p1",
   ".",
   "y",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-183",
  "nl_tokens": [
   "Returns",
   "the",
   "absolute",
   "value",
   "of",
   "the",
   "component",
   "with",
   "the",
   "largest",
   "absolute",
   "value"
  ],
  "pl_tokens": [
   "public",
   "double",
   "maxAbs",
   "(",
   ")",
   "{",
   "double",
   "absX",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "x",
   ")",
   ";",
   "double",
   "absY",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "y",
   ")",
   ";",
   "double",
   "absZ",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "z",
   ")",
   ";",
   "double",
   "absW",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "w",
   ")",
   ";",
   "double",
   "found",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "absX",
   ",",
   "absY",
   ")",
   ";",
   "if",
   "(",
   "found",
   "<",
   "absZ",
   ")",
   "found",
   "=",
   "absZ",
   ";",
   "if",
   "(",
   "found",
   "<",
   "absW",
   ")",
   "found",
   "=",
   "absW",
   ";",
   "return",
   "found",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-184",
  "nl_tokens": [
   "Max"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "int",
   "max",
   "=",
   "Integer",
   ".",
   "MIN_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-185",
  "nl_tokens": [
   "Reads",
   "bytes",
   "from",
   "this",
   "byte",
   "-",
   "array",
   "input",
   "stream",
   "as",
   "specified",
   "in",
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "int",
   "read",
   "(",
   "final",
   "byte",
   "b",
   "[",
   "]",
   ",",
   "final",
   "int",
   "offset",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "length",
   "==",
   "this",
   ".",
   "position",
   ")",
   "return",
   "length",
   "==",
   "0",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "final",
   "int",
   "n",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   ",",
   "this",
   ".",
   "length",
   "-",
   "this",
   ".",
   "position",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "array",
   ",",
   "this",
   ".",
   "offset",
   "+",
   "this",
   ".",
   "position",
   ",",
   "b",
   ",",
   "offset",
   ",",
   "n",
   ")",
   ";",
   "this",
   ".",
   "position",
   "+=",
   "n",
   ";",
   "return",
   "n",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-186",
  "nl_tokens": [
   "/",
   "*",
   "(",
   "non",
   "-",
   "Javadoc",
   ")"
  ],
  "pl_tokens": [
   "public",
   "TimerID",
   "setTimer",
   "(",
   "ActivityContextInterface",
   "aci",
   ",",
   "Address",
   "address",
   ",",
   "long",
   "startTime",
   ",",
   "long",
   "period",
   ",",
   "int",
   "numRepetitions",
   ",",
   "TimerOptions",
   "timerOptions",
   ")",
   "throws",
   "NullPointerException",
   ",",
   "IllegalArgumentException",
   ",",
   "TransactionRolledbackLocalException",
   ",",
   "FacilityException",
   "{",
   "if",
   "(",
   "aci",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "NullPointerException",
   "(",
   "\"Null ActivityContextInterface\"",
   ")",
   ";",
   "if",
   "(",
   "startTime",
   "<",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"startTime < 0\"",
   ")",
   ";",
   "if",
   "(",
   "period",
   "<=",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"period <= 0\"",
   ")",
   ";",
   "if",
   "(",
   "timerOptions",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "NullPointerException",
   "(",
   "\"Null TimerOptions\"",
   ")",
   ";",
   "if",
   "(",
   "timerOptions",
   ".",
   "getTimeout",
   "(",
   ")",
   ">",
   "period",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"timeout > period\"",
   ")",
   ";",
   "if",
   "(",
   "timerOptions",
   ".",
   "getTimeout",
   "(",
   ")",
   "<",
   "this",
   ".",
   "getResolution",
   "(",
   ")",
   ")",
   "timerOptions",
   ".",
   "setTimeout",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "period",
   ",",
   "this",
   ".",
   "getResolution",
   "(",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "period",
   "==",
   "Long",
   ".",
   "MAX_VALUE",
   "&&",
   "numRepetitions",
   "==",
   "1",
   ")",
   "{",
   "// non periodic value, the framework expects it to be negative instead\r",
   "period",
   "=",
   "-",
   "1",
   ";",
   "}",
   "// when numRepetitions == 0 the timer repeats infinitely or until\r",
   "// canceled\r",
   "if",
   "(",
   "numRepetitions",
   "<",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"numRepetitions < 0\"",
   ")",
   ";",
   "SleeTransactionManager",
   "txMgr",
   "=",
   "sleeContainer",
   ".",
   "getTransactionManager",
   "(",
   ")",
   ";",
   "boolean",
   "startedTx",
   "=",
   "txMgr",
   ".",
   "requireTransaction",
   "(",
   ")",
   ";",
   "TimerIDImpl",
   "timerID",
   "=",
   "new",
   "TimerIDImpl",
   "(",
   "sleeContainer",
   ".",
   "getUuidGenerator",
   "(",
   ")",
   ".",
   "createUUID",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "logger",
   ".",
   "isDebugEnabled",
   "(",
   ")",
   ")",
   "{",
   "logger",
   ".",
   "debug",
   "(",
   "\"setTimer: timerID = \"",
   "+",
   "timerID",
   "+",
   "\" , startTime = \"",
   "+",
   "startTime",
   "+",
   "\" period = \"",
   "+",
   "period",
   "+",
   "\" numRepetitions = \"",
   "+",
   "numRepetitions",
   "+",
   "\" timeroptions =\"",
   "+",
   "timerOptions",
   ")",
   ";",
   "}",
   "// Attach to activity context\r",
   "org",
   ".",
   "mobicents",
   ".",
   "slee",
   ".",
   "container",
   ".",
   "activity",
   ".",
   "ActivityContextInterface",
   "aciImpl",
   "=",
   "(",
   "org",
   ".",
   "mobicents",
   ".",
   "slee",
   ".",
   "container",
   ".",
   "activity",
   ".",
   "ActivityContextInterface",
   ")",
   "aci",
   ";",
   "aciImpl",
   ".",
   "getActivityContext",
   "(",
   ")",
   ".",
   "attachTimer",
   "(",
   "timerID",
   ")",
   ";",
   "// schedule timer task\r",
   "TimerFacilityTimerTaskData",
   "taskData",
   "=",
   "new",
   "TimerFacilityTimerTaskData",
   "(",
   "timerID",
   ",",
   "aciImpl",
   ".",
   "getActivityContext",
   "(",
   ")",
   ".",
   "getActivityContextHandle",
   "(",
   ")",
   ",",
   "address",
   ",",
   "startTime",
   ",",
   "period",
   ",",
   "numRepetitions",
   ",",
   "timerOptions",
   ")",
   ";",
   "final",
   "TimerFacilityTimerTask",
   "task",
   "=",
   "new",
   "TimerFacilityTimerTask",
   "(",
   "taskData",
   ")",
   ";",
   "if",
   "(",
   "configuration",
   ".",
   "getTaskExecutionWaitsForTxCommitConfirmation",
   "(",
   ")",
   ")",
   "{",
   "final",
   "CountDownLatch",
   "countDownLatch",
   "=",
   "new",
   "CountDownLatch",
   "(",
   "1",
   ")",
   ";",
   "task",
   ".",
   "setCountDownLatch",
   "(",
   "countDownLatch",
   ")",
   ";",
   "TransactionalAction",
   "action",
   "=",
   "new",
   "TransactionalAction",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "void",
   "execute",
   "(",
   ")",
   "{",
   "countDownLatch",
   ".",
   "countDown",
   "(",
   ")",
   ";",
   "}",
   "}",
   ";",
   "TransactionContext",
   "txContext",
   "=",
   "txMgr",
   ".",
   "getTransactionContext",
   "(",
   ")",
   ";",
   "txContext",
   ".",
   "getAfterCommitActions",
   "(",
   ")",
   ".",
   "add",
   "(",
   "action",
   ")",
   ";",
   "txContext",
   ".",
   "getAfterRollbackActions",
   "(",
   ")",
   ".",
   "add",
   "(",
   "action",
   ")",
   ";",
   "}",
   "scheduler",
   ".",
   "schedule",
   "(",
   "task",
   ")",
   ";",
   "// If we started a tx for this operation, we commit it now\r",
   "if",
   "(",
   "startedTx",
   ")",
   "{",
   "try",
   "{",
   "txMgr",
   ".",
   "commit",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "TransactionRolledbackLocalException",
   "(",
   "\"Failed to commit transaction\"",
   ")",
   ";",
   "}",
   "}",
   "return",
   "timerID",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-187",
  "nl_tokens": [
   "{",
   "@inheritDoc",
   "}"
  ],
  "pl_tokens": [
   "public",
   "int",
   "compareTo",
   "(",
   "ASCIIString",
   "comparator",
   ")",
   "{",
   "int",
   "n",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   ",",
   "comparator",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "byte",
   "b1",
   "=",
   "get",
   "(",
   "i",
   ")",
   ";",
   "byte",
   "b2",
   "=",
   "comparator",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "b1",
   "==",
   "b2",
   ")",
   "{",
   "continue",
   ";",
   "}",
   "if",
   "(",
   "b1",
   "<",
   "b2",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "return",
   "1",
   ";",
   "}",
   "return",
   "length",
   "-",
   "comparator",
   ".",
   "length",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-188",
  "nl_tokens": [
   "The",
   "paragraph",
   "is",
   "selected",
   "by",
   "the",
   "Selection",
   "if",
   ":",
   "<p",
   ">",
   "-",
   "they",
   "have",
   "at",
   "least",
   "one",
   "character",
   "in",
   "common",
   "-",
   "the",
   "selection",
   "is",
   "a",
   "point",
   "within",
   "the",
   "paragraph",
   "(",
   "01",
   "\\",
   "n",
   "-",
   ">",
   "0",
   "till",
   "2",
   "intersects",
   "while",
   "the",
   "span",
   "is",
   "[",
   "0",
   "3",
   "]",
   ")",
   "-",
   "the",
   "selection",
   "is",
   "a",
   "point",
   "within",
   "or",
   "at",
   "the",
   "end",
   "of",
   "the",
   "LAST",
   "paragraph",
   "(",
   "01",
   "-",
   ">",
   "0",
   "till",
   "2",
   "intersects",
   "while",
   "the",
   "span",
   "is",
   "[",
   "0",
   "2",
   "]",
   ")",
   "e",
   ".",
   "g",
   ".",
   "[",
   "10",
   "10",
   "]",
   "will",
   "intersect",
   "the",
   "paragraph",
   "[",
   "0",
   "10",
   "]",
   "only",
   "if",
   "it",
   "s",
   "the",
   "last",
   "paragraph"
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "isSelected",
   "(",
   "Selection",
   "sel",
   ")",
   "{",
   "if",
   "(",
   "sel",
   "==",
   "null",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "if",
   "(",
   "sel",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "// selection is a point",
   "boolean",
   "isCompletelyWithin",
   "=",
   "sel",
   ".",
   "start",
   "(",
   ")",
   ">=",
   "start",
   "(",
   ")",
   "&&",
   "sel",
   ".",
   "end",
   "(",
   ")",
   "<",
   "end",
   "(",
   ")",
   ";",
   "// selection is completely within paragraph (not at the end)",
   "boolean",
   "isWithin",
   "=",
   "sel",
   ".",
   "start",
   "(",
   ")",
   ">=",
   "start",
   "(",
   ")",
   "&&",
   "sel",
   ".",
   "end",
   "(",
   ")",
   "<=",
   "end",
   "(",
   ")",
   ";",
   "// selection is within or at the end of the paragraph",
   "return",
   "isCompletelyWithin",
   "||",
   "(",
   "isWithin",
   "&&",
   "mIsLast",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// selection is a range --> at least one character in common",
   "int",
   "start",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "start",
   "(",
   ")",
   ",",
   "sel",
   ".",
   "start",
   "(",
   ")",
   ")",
   ";",
   "int",
   "end",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "end",
   "(",
   ")",
   ",",
   "sel",
   ".",
   "end",
   "(",
   ")",
   ")",
   ";",
   "return",
   "start",
   "<",
   "end",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-189",
  "nl_tokens": [
   "Returns",
   "a",
   "Flowable",
   "that",
   "emits",
   "a",
   "{",
   "@code",
   "0L",
   "}",
   "after",
   "the",
   "{",
   "@code",
   "initialDelay",
   "}",
   "and",
   "ever",
   "-",
   "increasing",
   "numbers",
   "after",
   "each",
   "{",
   "@code",
   "period",
   "}",
   "of",
   "time",
   "thereafter",
   "on",
   "a",
   "specified",
   "{",
   "@link",
   "Scheduler",
   "}",
   ".",
   "<p",
   ">",
   "<img",
   "width",
   "=",
   "640",
   "height",
   "=",
   "200",
   "src",
   "=",
   "https",
   ":",
   "//",
   "raw",
   ".",
   "github",
   ".",
   "com",
   "/",
   "wiki",
   "/",
   "ReactiveX",
   "/",
   "RxJava",
   "/",
   "images",
   "/",
   "rx",
   "-",
   "operators",
   "/",
   "timer",
   ".",
   "ps",
   ".",
   "png",
   "alt",
   "=",
   ">",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Backpressure",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "The",
   "operator",
   "generates",
   "values",
   "based",
   "on",
   "time",
   "and",
   "ignores",
   "downstream",
   "backpressure",
   "which",
   "may",
   "lead",
   "to",
   "{",
   "@code",
   "MissingBackpressureException",
   "}",
   "at",
   "some",
   "point",
   "in",
   "the",
   "chain",
   ".",
   "Consumers",
   "should",
   "consider",
   "applying",
   "one",
   "of",
   "the",
   "{",
   "@code",
   "onBackpressureXXX",
   "}",
   "operators",
   "as",
   "well",
   ".",
   "<",
   "/",
   "dd",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Scheduler",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "You",
   "specify",
   "which",
   "{",
   "@link",
   "Scheduler",
   "}",
   "this",
   "operator",
   "will",
   "use",
   ".",
   "<",
   "/",
   "dd",
   ">",
   "<",
   "/",
   "dl",
   ">"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "BackpressureSupport",
   "(",
   "BackpressureKind",
   ".",
   "ERROR",
   ")",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "static",
   "Flowable",
   "<",
   "Long",
   ">",
   "interval",
   "(",
   "long",
   "initialDelay",
   ",",
   "long",
   "period",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "FlowableInterval",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "initialDelay",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0L",
   ",",
   "period",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-190",
  "nl_tokens": [
   "Returns",
   "the",
   "min",
   "value",
   "of",
   "the",
   "object",
   "with",
   "the",
   "property",
   "given",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "T",
   "[",
   "]",
   "array",
   ",",
   "String",
   "sortBy",
   ")",
   "{",
   "if",
   "(",
   "array",
   ".",
   "length",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sort",
   "(",
   "array",
   ",",
   "sortBy",
   ")",
   ";",
   "return",
   "array",
   "[",
   "0",
   "]",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-191",
  "nl_tokens": [
   "Finds",
   "the",
   "minimal",
   "volume",
   "{",
   "@link",
   "georegression",
   ".",
   "struct",
   ".",
   "shapes",
   ".",
   "RectangleLength2D_F64",
   "}",
   "which",
   "contains",
   "all",
   "the",
   "points",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "RectangleLength2D_F64",
   "bounding",
   "(",
   "List",
   "<",
   "Point2D_F64",
   ">",
   "points",
   ",",
   "RectangleLength2D_F64",
   "bounding",
   ")",
   "{",
   "if",
   "(",
   "bounding",
   "==",
   "null",
   ")",
   "bounding",
   "=",
   "new",
   "RectangleLength2D_F64",
   "(",
   ")",
   ";",
   "double",
   "minX",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ",",
   "maxX",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "minY",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ",",
   "maxY",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "points",
   ".",
   "size",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Point2D_F64",
   "p",
   "=",
   "points",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "p",
   ".",
   "x",
   "<",
   "minX",
   ")",
   "minX",
   "=",
   "p",
   ".",
   "x",
   ";",
   "if",
   "(",
   "p",
   ".",
   "x",
   ">",
   "maxX",
   ")",
   "maxX",
   "=",
   "p",
   ".",
   "x",
   ";",
   "if",
   "(",
   "p",
   ".",
   "y",
   "<",
   "minY",
   ")",
   "minY",
   "=",
   "p",
   ".",
   "y",
   ";",
   "if",
   "(",
   "p",
   ".",
   "y",
   ">",
   "maxY",
   ")",
   "maxY",
   "=",
   "p",
   ".",
   "y",
   ";",
   "}",
   "bounding",
   ".",
   "x0",
   "=",
   "minX",
   ";",
   "bounding",
   ".",
   "y0",
   "=",
   "minY",
   ";",
   "bounding",
   ".",
   "width",
   "=",
   "maxX",
   "-",
   "minX",
   ";",
   "bounding",
   ".",
   "height",
   "=",
   "maxY",
   "-",
   "minY",
   ";",
   "// make sure rounding doesn't cause a point to be out of bounds",
   "bounding",
   ".",
   "width",
   "+=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "(",
   "maxX",
   "-",
   "(",
   "bounding",
   ".",
   "x0",
   "+",
   "bounding",
   ".",
   "width",
   ")",
   ")",
   "*",
   "10.0",
   ")",
   ";",
   "bounding",
   ".",
   "height",
   "+=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "(",
   "maxY",
   "-",
   "(",
   "bounding",
   ".",
   "y0",
   "+",
   "bounding",
   ".",
   "height",
   ")",
   ")",
   "*",
   "10.0",
   ")",
   ";",
   "return",
   "bounding",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-192",
  "nl_tokens": [
   "Create",
   "an",
   "expanded",
   "bounding",
   "box",
   "to",
   "handle",
   "features",
   "outside",
   "the",
   "tile",
   "that",
   "overlap"
  ],
  "pl_tokens": [
   "public",
   "BoundingBox",
   "expandBoundingBox",
   "(",
   "BoundingBox",
   "webMercatorBoundingBox",
   ",",
   "BoundingBox",
   "tileWebMercatorBoundingBox",
   ")",
   "{",
   "// Create an expanded bounding box to handle features outside the tile",
   "// that overlap",
   "double",
   "minLongitude",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getLongitudeFromPixel",
   "(",
   "tileWidth",
   ",",
   "webMercatorBoundingBox",
   ",",
   "tileWebMercatorBoundingBox",
   ",",
   "0",
   "-",
   "widthOverlap",
   ")",
   ";",
   "double",
   "maxLongitude",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getLongitudeFromPixel",
   "(",
   "tileWidth",
   ",",
   "webMercatorBoundingBox",
   ",",
   "tileWebMercatorBoundingBox",
   ",",
   "tileWidth",
   "+",
   "widthOverlap",
   ")",
   ";",
   "double",
   "maxLatitude",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getLatitudeFromPixel",
   "(",
   "tileHeight",
   ",",
   "webMercatorBoundingBox",
   ",",
   "tileWebMercatorBoundingBox",
   ",",
   "0",
   "-",
   "heightOverlap",
   ")",
   ";",
   "double",
   "minLatitude",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getLatitudeFromPixel",
   "(",
   "tileHeight",
   ",",
   "webMercatorBoundingBox",
   ",",
   "tileWebMercatorBoundingBox",
   ",",
   "tileHeight",
   "+",
   "heightOverlap",
   ")",
   ";",
   "// Choose the most expanded longitudes and latitudes",
   "minLongitude",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minLongitude",
   ",",
   "webMercatorBoundingBox",
   ".",
   "getMinLongitude",
   "(",
   ")",
   ")",
   ";",
   "maxLongitude",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxLongitude",
   ",",
   "webMercatorBoundingBox",
   ".",
   "getMaxLongitude",
   "(",
   ")",
   ")",
   ";",
   "minLatitude",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minLatitude",
   ",",
   "webMercatorBoundingBox",
   ".",
   "getMinLatitude",
   "(",
   ")",
   ")",
   ";",
   "maxLatitude",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxLatitude",
   ",",
   "webMercatorBoundingBox",
   ".",
   "getMaxLatitude",
   "(",
   ")",
   ")",
   ";",
   "// Bound with the web mercator limits",
   "minLongitude",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "minLongitude",
   ",",
   "-",
   "1",
   "*",
   "ProjectionConstants",
   ".",
   "WEB_MERCATOR_HALF_WORLD_WIDTH",
   ")",
   ";",
   "maxLongitude",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxLongitude",
   ",",
   "ProjectionConstants",
   ".",
   "WEB_MERCATOR_HALF_WORLD_WIDTH",
   ")",
   ";",
   "minLatitude",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "minLatitude",
   ",",
   "-",
   "1",
   "*",
   "ProjectionConstants",
   ".",
   "WEB_MERCATOR_HALF_WORLD_WIDTH",
   ")",
   ";",
   "maxLatitude",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxLatitude",
   ",",
   "ProjectionConstants",
   ".",
   "WEB_MERCATOR_HALF_WORLD_WIDTH",
   ")",
   ";",
   "BoundingBox",
   "expandedBoundingBox",
   "=",
   "new",
   "BoundingBox",
   "(",
   "minLongitude",
   ",",
   "minLatitude",
   ",",
   "maxLongitude",
   ",",
   "maxLatitude",
   ")",
   ";",
   "return",
   "expandedBoundingBox",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-193",
  "nl_tokens": [
   "Creates",
   "<code",
   ">",
   "char<",
   "/",
   "code",
   ">",
   "subarray",
   "from",
   "buffered",
   "content",
   "."
  ],
  "pl_tokens": [
   "public",
   "char",
   "[",
   "]",
   "toArray",
   "(",
   "int",
   "start",
   ",",
   "int",
   "len",
   ")",
   "{",
   "int",
   "remaining",
   "=",
   "len",
   ";",
   "int",
   "pos",
   "=",
   "0",
   ";",
   "char",
   "[",
   "]",
   "array",
   "=",
   "new",
   "char",
   "[",
   "len",
   "]",
   ";",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   "array",
   ";",
   "}",
   "int",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "start",
   ">=",
   "buffers",
   "[",
   "i",
   "]",
   ".",
   "length",
   ")",
   "{",
   "start",
   "-=",
   "buffers",
   "[",
   "i",
   "]",
   ".",
   "length",
   ";",
   "i",
   "++",
   ";",
   "}",
   "while",
   "(",
   "i",
   "<",
   "buffersCount",
   ")",
   "{",
   "char",
   "[",
   "]",
   "buf",
   "=",
   "buffers",
   "[",
   "i",
   "]",
   ";",
   "int",
   "c",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "length",
   "-",
   "start",
   ",",
   "remaining",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "buf",
   ",",
   "start",
   ",",
   "array",
   ",",
   "pos",
   ",",
   "c",
   ")",
   ";",
   "pos",
   "+=",
   "c",
   ";",
   "remaining",
   "-=",
   "c",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "start",
   "=",
   "0",
   ";",
   "i",
   "++",
   ";",
   "}",
   "return",
   "array",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-194",
  "nl_tokens": [
   "Find",
   "the",
   "best",
   "index",
   "for",
   "the",
   "given",
   "lat",
   "lon",
   "point",
   ".",
   "@param",
   "wantLat",
   "lat",
   "of",
   "point",
   "@param",
   "wantLon",
   "lon",
   "of",
   "point",
   "@param",
   "rectIndex",
   "return",
   "(",
   "row",
   "col",
   ")",
   "index",
   "or",
   "best",
   "guess",
   "here",
   ".",
   "may",
   "not",
   "be",
   "null"
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "findCoordElementNoForce",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "findBounds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "wantLat",
   "<",
   "latMinMax",
   ".",
   "<mask>",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLat",
   ">",
   "latMinMax",
   ".",
   "max",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   "<",
   "lonMinMax",
   ".",
   "min",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   ">",
   "lonMinMax",
   ".",
   "max",
   ")",
   "return",
   "false",
   ";",
   "double",
   "gradientLat",
   "=",
   "(",
   "latMinMax",
   ".",
   "max",
   "-",
   "latMinMax",
   ".",
   "min",
   ")",
   "/",
   "nrows",
   ";",
   "double",
   "gradientLon",
   "=",
   "(",
   "lonMinMax",
   ".",
   "max",
   "-",
   "lonMinMax",
   ".",
   "min",
   ")",
   "/",
   "ncols",
   ";",
   "double",
   "diffLat",
   "=",
   "wantLat",
   "-",
   "latMinMax",
   ".",
   "min",
   ";",
   "double",
   "diffLon",
   "=",
   "wantLon",
   "-",
   "lonMinMax",
   ".",
   "min",
   ";",
   "// initial guess\r",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "diffLat",
   "/",
   "gradientLat",
   ")",
   ";",
   "// row\r",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "diffLon",
   "/",
   "gradientLon",
   ")",
   ";",
   "// col\r",
   "int",
   "count",
   "=",
   "0",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "count",
   "++",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\"%nIteration %d %n\"",
   ",",
   "count",
   ")",
   ";",
   "if",
   "(",
   "contains",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ")",
   "return",
   "true",
   ";",
   "if",
   "(",
   "!",
   "jump2",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ")",
   "return",
   "false",
   ";",
   "// bouncing around\r",
   "if",
   "(",
   "count",
   ">",
   "10",
   ")",
   "{",
   "// last ditch attempt\r",
   "return",
   "incr",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ";",
   "//if (!ok)\r",
   "//  log.error(\"findCoordElement didnt converge lat,lon = \"+wantLat+\" \"+ wantLon);\r",
   "//return ok;\r",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-195",
  "nl_tokens": [
   "/",
   "*",
   "table",
   "7"
  ],
  "pl_tokens": [
   "private",
   "int",
   "sbr_grid",
   "(",
   "IBitStream",
   "ld",
   ",",
   "int",
   "ch",
   ")",
   "throws",
   "AACException",
   "{",
   "int",
   "i",
   ",",
   "env",
   ",",
   "rel",
   ",",
   "result",
   ";",
   "int",
   "bs_abs_bord",
   ",",
   "bs_abs_bord_1",
   ";",
   "int",
   "bs_num_env",
   "=",
   "0",
   ";",
   "int",
   "saved_L_E",
   "=",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   ";",
   "int",
   "saved_L_Q",
   "=",
   "this",
   ".",
   "L_Q",
   "[",
   "ch",
   "]",
   ";",
   "int",
   "saved_frame_class",
   "=",
   "this",
   ".",
   "bs_frame_class",
   "[",
   "ch",
   "]",
   ";",
   "this",
   ".",
   "bs_frame_class",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "switch",
   "(",
   "this",
   ".",
   "bs_frame_class",
   "[",
   "ch",
   "]",
   ")",
   "{",
   "case",
   "FIXFIX",
   ":",
   "i",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "bs_num_env",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   "<<",
   "i",
   ",",
   "5",
   ")",
   ";",
   "i",
   "=",
   "ld",
   ".",
   "readBit",
   "(",
   ")",
   ";",
   "for",
   "(",
   "env",
   "=",
   "0",
   ";",
   "env",
   "<",
   "bs_num_env",
   ";",
   "env",
   "++",
   ")",
   "{",
   "this",
   ".",
   "f",
   "[",
   "ch",
   "]",
   "[",
   "env",
   "]",
   "=",
   "i",
   ";",
   "}",
   "this",
   ".",
   "abs_bord_lead",
   "[",
   "ch",
   "]",
   "=",
   "0",
   ";",
   "this",
   ".",
   "abs_bord_trail",
   "[",
   "ch",
   "]",
   "=",
   "this",
   ".",
   "numTimeSlots",
   ";",
   "this",
   ".",
   "n_rel_lead",
   "[",
   "ch",
   "]",
   "=",
   "bs_num_env",
   "-",
   "1",
   ";",
   "this",
   ".",
   "n_rel_trail",
   "[",
   "ch",
   "]",
   "=",
   "0",
   ";",
   "break",
   ";",
   "case",
   "FIXVAR",
   ":",
   "bs_abs_bord",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "this",
   ".",
   "numTimeSlots",
   ";",
   "bs_num_env",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "1",
   ";",
   "for",
   "(",
   "rel",
   "=",
   "0",
   ";",
   "rel",
   "<",
   "bs_num_env",
   "-",
   "1",
   ";",
   "rel",
   "++",
   ")",
   "{",
   "this",
   ".",
   "bs_rel_bord",
   "[",
   "ch",
   "]",
   "[",
   "rel",
   "]",
   "=",
   "2",
   "*",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "2",
   ";",
   "}",
   "i",
   "=",
   "sbr_log2",
   "(",
   "bs_num_env",
   "+",
   "1",
   ")",
   ";",
   "this",
   ".",
   "bs_pointer",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "i",
   ")",
   ";",
   "for",
   "(",
   "env",
   "=",
   "0",
   ";",
   "env",
   "<",
   "bs_num_env",
   ";",
   "env",
   "++",
   ")",
   "{",
   "this",
   ".",
   "f",
   "[",
   "ch",
   "]",
   "[",
   "bs_num_env",
   "-",
   "env",
   "-",
   "1",
   "]",
   "=",
   "ld",
   ".",
   "readBit",
   "(",
   ")",
   ";",
   "}",
   "this",
   ".",
   "abs_bord_lead",
   "[",
   "ch",
   "]",
   "=",
   "0",
   ";",
   "this",
   ".",
   "abs_bord_trail",
   "[",
   "ch",
   "]",
   "=",
   "bs_abs_bord",
   ";",
   "this",
   ".",
   "n_rel_lead",
   "[",
   "ch",
   "]",
   "=",
   "0",
   ";",
   "this",
   ".",
   "n_rel_trail",
   "[",
   "ch",
   "]",
   "=",
   "bs_num_env",
   "-",
   "1",
   ";",
   "break",
   ";",
   "case",
   "VARFIX",
   ":",
   "bs_abs_bord",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "bs_num_env",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "1",
   ";",
   "for",
   "(",
   "rel",
   "=",
   "0",
   ";",
   "rel",
   "<",
   "bs_num_env",
   "-",
   "1",
   ";",
   "rel",
   "++",
   ")",
   "{",
   "this",
   ".",
   "bs_rel_bord",
   "[",
   "ch",
   "]",
   "[",
   "rel",
   "]",
   "=",
   "2",
   "*",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "2",
   ";",
   "}",
   "i",
   "=",
   "sbr_log2",
   "(",
   "bs_num_env",
   "+",
   "1",
   ")",
   ";",
   "this",
   ".",
   "bs_pointer",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "i",
   ")",
   ";",
   "for",
   "(",
   "env",
   "=",
   "0",
   ";",
   "env",
   "<",
   "bs_num_env",
   ";",
   "env",
   "++",
   ")",
   "{",
   "this",
   ".",
   "f",
   "[",
   "ch",
   "]",
   "[",
   "env",
   "]",
   "=",
   "ld",
   ".",
   "readBit",
   "(",
   ")",
   ";",
   "}",
   "this",
   ".",
   "abs_bord_lead",
   "[",
   "ch",
   "]",
   "=",
   "bs_abs_bord",
   ";",
   "this",
   ".",
   "abs_bord_trail",
   "[",
   "ch",
   "]",
   "=",
   "this",
   ".",
   "numTimeSlots",
   ";",
   "this",
   ".",
   "n_rel_lead",
   "[",
   "ch",
   "]",
   "=",
   "bs_num_env",
   "-",
   "1",
   ";",
   "this",
   ".",
   "n_rel_trail",
   "[",
   "ch",
   "]",
   "=",
   "0",
   ";",
   "break",
   ";",
   "case",
   "VARVAR",
   ":",
   "bs_abs_bord",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "bs_abs_bord_1",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "this",
   ".",
   "numTimeSlots",
   ";",
   "this",
   ".",
   "bs_num_rel_0",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "this",
   ".",
   "bs_num_rel_1",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   ";",
   "bs_num_env",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "5",
   ",",
   "this",
   ".",
   "bs_num_rel_0",
   "[",
   "ch",
   "]",
   "+",
   "this",
   ".",
   "bs_num_rel_1",
   "[",
   "ch",
   "]",
   "+",
   "1",
   ")",
   ";",
   "for",
   "(",
   "rel",
   "=",
   "0",
   ";",
   "rel",
   "<",
   "this",
   ".",
   "bs_num_rel_0",
   "[",
   "ch",
   "]",
   ";",
   "rel",
   "++",
   ")",
   "{",
   "this",
   ".",
   "bs_rel_bord_0",
   "[",
   "ch",
   "]",
   "[",
   "rel",
   "]",
   "=",
   "2",
   "*",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "2",
   ";",
   "}",
   "for",
   "(",
   "rel",
   "=",
   "0",
   ";",
   "rel",
   "<",
   "this",
   ".",
   "bs_num_rel_1",
   "[",
   "ch",
   "]",
   ";",
   "rel",
   "++",
   ")",
   "{",
   "this",
   ".",
   "bs_rel_bord_1",
   "[",
   "ch",
   "]",
   "[",
   "rel",
   "]",
   "=",
   "2",
   "*",
   "ld",
   ".",
   "readBits",
   "(",
   "2",
   ")",
   "+",
   "2",
   ";",
   "}",
   "i",
   "=",
   "sbr_log2",
   "(",
   "this",
   ".",
   "bs_num_rel_0",
   "[",
   "ch",
   "]",
   "+",
   "this",
   ".",
   "bs_num_rel_1",
   "[",
   "ch",
   "]",
   "+",
   "2",
   ")",
   ";",
   "this",
   ".",
   "bs_pointer",
   "[",
   "ch",
   "]",
   "=",
   "ld",
   ".",
   "readBits",
   "(",
   "i",
   ")",
   ";",
   "for",
   "(",
   "env",
   "=",
   "0",
   ";",
   "env",
   "<",
   "bs_num_env",
   ";",
   "env",
   "++",
   ")",
   "{",
   "this",
   ".",
   "f",
   "[",
   "ch",
   "]",
   "[",
   "env",
   "]",
   "=",
   "ld",
   ".",
   "readBit",
   "(",
   ")",
   ";",
   "}",
   "this",
   ".",
   "abs_bord_lead",
   "[",
   "ch",
   "]",
   "=",
   "bs_abs_bord",
   ";",
   "this",
   ".",
   "abs_bord_trail",
   "[",
   "ch",
   "]",
   "=",
   "bs_abs_bord_1",
   ";",
   "this",
   ".",
   "n_rel_lead",
   "[",
   "ch",
   "]",
   "=",
   "this",
   ".",
   "bs_num_rel_0",
   "[",
   "ch",
   "]",
   ";",
   "this",
   ".",
   "n_rel_trail",
   "[",
   "ch",
   "]",
   "=",
   "this",
   ".",
   "bs_num_rel_1",
   "[",
   "ch",
   "]",
   ";",
   "break",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "bs_frame_class",
   "[",
   "ch",
   "]",
   "==",
   "VARVAR",
   ")",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "bs_num_env",
   ",",
   "5",
   ")",
   ";",
   "else",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "bs_num_env",
   ",",
   "4",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   "<=",
   "0",
   ")",
   "return",
   "1",
   ";",
   "if",
   "(",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   ">",
   "1",
   ")",
   "this",
   ".",
   "L_Q",
   "[",
   "ch",
   "]",
   "=",
   "2",
   ";",
   "else",
   "this",
   ".",
   "L_Q",
   "[",
   "ch",
   "]",
   "=",
   "1",
   ";",
   "/* TODO: this code can probably be integrated into the code above! */",
   "if",
   "(",
   "(",
   "result",
   "=",
   "TFGrid",
   ".",
   "envelope_time_border_vector",
   "(",
   "this",
   ",",
   "ch",
   ")",
   ")",
   ">",
   "0",
   ")",
   "{",
   "this",
   ".",
   "bs_frame_class",
   "[",
   "ch",
   "]",
   "=",
   "saved_frame_class",
   ";",
   "this",
   ".",
   "L_E",
   "[",
   "ch",
   "]",
   "=",
   "saved_L_E",
   ";",
   "this",
   ".",
   "L_Q",
   "[",
   "ch",
   "]",
   "=",
   "saved_L_Q",
   ";",
   "return",
   "result",
   ";",
   "}",
   "TFGrid",
   ".",
   "noise_floor_time_border_vector",
   "(",
   "this",
   ",",
   "ch",
   ")",
   ";",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-196",
  "nl_tokens": [
   "Compares",
   "two",
   "version",
   "strings",
   "such",
   "that",
   "1",
   ".",
   "10",
   ".",
   "1",
   ">",
   "1",
   ".",
   "4",
   "etc"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "compareVersions",
   "(",
   "String",
   "v1",
   ",",
   "String",
   "v2",
   ")",
   "{",
   "String",
   "[",
   "]",
   "components1",
   "=",
   "split",
   "(",
   "v1",
   ")",
   ";",
   "String",
   "[",
   "]",
   "components2",
   "=",
   "split",
   "(",
   "v2",
   ")",
   ";",
   "int",
   "diff",
   ";",
   "int",
   "length",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "components1",
   ".",
   "length",
   ",",
   "components2",
   ".",
   "length",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "String",
   "s1",
   "=",
   "components1",
   "[",
   "i",
   "]",
   ";",
   "String",
   "s2",
   "=",
   "components2",
   "[",
   "i",
   "]",
   ";",
   "Integer",
   "i1",
   "=",
   "tryParseInteger",
   "(",
   "s1",
   ")",
   ";",
   "Integer",
   "i2",
   "=",
   "tryParseInteger",
   "(",
   "s2",
   ")",
   ";",
   "if",
   "(",
   "i1",
   "!=",
   "null",
   "&&",
   "i2",
   "!=",
   "null",
   ")",
   "{",
   "diff",
   "=",
   "i1",
   ".",
   "compareTo",
   "(",
   "i2",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// lets assume strings instead",
   "diff",
   "=",
   "s1",
   ".",
   "compareTo",
   "(",
   "s2",
   ")",
   ";",
   "}",
   "if",
   "(",
   "diff",
   "!=",
   "0",
   ")",
   "{",
   "return",
   "diff",
   ";",
   "}",
   "}",
   "diff",
   "=",
   "Integer",
   ".",
   "compare",
   "(",
   "components1",
   ".",
   "length",
   ",",
   "components2",
   ".",
   "length",
   ")",
   ";",
   "if",
   "(",
   "diff",
   "==",
   "0",
   ")",
   "{",
   "if",
   "(",
   "v1",
   "==",
   "v2",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "/* if v1 == null then v2 can't be null here (see 'if' above).\n               So for v1 == null its always smaller than v2 */",
   ";",
   "return",
   "v1",
   "!=",
   "null",
   "?",
   "v1",
   ".",
   "compareTo",
   "(",
   "v2",
   ")",
   ":",
   "-",
   "1",
   ";",
   "}",
   "return",
   "diff",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-197",
  "nl_tokens": [
   "Poll",
   "for",
   "new",
   "messages",
   "in",
   "a",
   "stream",
   ".",
   "If",
   "new",
   "messages",
   "are",
   "found",
   "beyond",
   "the",
   "last",
   "consumed",
   "position",
   "then",
   "they",
   "will",
   "be",
   "delivered",
   "to",
   "the",
   "{",
   "@link",
   "BlockHandler",
   "}",
   "up",
   "to",
   "a",
   "limited",
   "number",
   "of",
   "bytes",
   ".",
   "<p",
   ">",
   "A",
   "scan",
   "will",
   "terminate",
   "if",
   "a",
   "padding",
   "frame",
   "is",
   "encountered",
   ".",
   "If",
   "first",
   "frame",
   "in",
   "a",
   "scan",
   "is",
   "padding",
   "then",
   "a",
   "block",
   "for",
   "the",
   "padding",
   "is",
   "notified",
   ".",
   "If",
   "the",
   "padding",
   "comes",
   "after",
   "the",
   "first",
   "frame",
   "in",
   "a",
   "scan",
   "then",
   "the",
   "scan",
   "terminates",
   "at",
   "the",
   "offset",
   "the",
   "padding",
   "frame",
   "begins",
   ".",
   "Padding",
   "frames",
   "are",
   "delivered",
   "singularly",
   "in",
   "a",
   "block",
   ".",
   "<p",
   ">",
   "Padding",
   "frames",
   "may",
   "be",
   "for",
   "a",
   "greater",
   "range",
   "than",
   "the",
   "limit",
   "offset",
   "but",
   "only",
   "the",
   "header",
   "needs",
   "to",
   "be",
   "valid",
   "so",
   "relevant",
   "length",
   "of",
   "the",
   "frame",
   "is",
   "{",
   "@link",
   "io",
   ".",
   "aeron",
   ".",
   "protocol",
   ".",
   "DataHeaderFlyweight#HEADER_LENGTH",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "blockPoll",
   "(",
   "final",
   "BlockHandler",
   "handler",
   ",",
   "final",
   "int",
   "blockLengthLimit",
   ")",
   "{",
   "if",
   "(",
   "isClosed",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "final",
   "long",
   "position",
   "=",
   "subscriberPosition",
   ".",
   "get",
   "(",
   ")",
   ";",
   "final",
   "int",
   "termOffset",
   "=",
   "(",
   "int",
   ")",
   "position",
   "&",
   "termLengthMask",
   ";",
   "final",
   "UnsafeBuffer",
   "termBuffer",
   "=",
   "activeTermBuffer",
   "(",
   "position",
   ")",
   ";",
   "final",
   "int",
   "limitOffset",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "termOffset",
   "+",
   "blockLengthLimit",
   ",",
   "termBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ")",
   ";",
   "final",
   "int",
   "resultingOffset",
   "=",
   "TermBlockScanner",
   ".",
   "scan",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "limitOffset",
   ")",
   ";",
   "final",
   "int",
   "length",
   "=",
   "resultingOffset",
   "-",
   "termOffset",
   ";",
   "if",
   "(",
   "resultingOffset",
   ">",
   "termOffset",
   ")",
   "{",
   "try",
   "{",
   "final",
   "int",
   "termId",
   "=",
   "termBuffer",
   ".",
   "getInt",
   "(",
   "termOffset",
   "+",
   "TERM_ID_FIELD_OFFSET",
   ",",
   "LITTLE_ENDIAN",
   ")",
   ";",
   "handler",
   ".",
   "onBlock",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "length",
   ",",
   "sessionId",
   ",",
   "termId",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "final",
   "Throwable",
   "t",
   ")",
   "{",
   "errorHandler",
   ".",
   "onError",
   "(",
   "t",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "subscriberPosition",
   ".",
   "setOrdered",
   "(",
   "position",
   "+",
   "length",
   ")",
   ";",
   "}",
   "}",
   "return",
   "length",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-198",
  "nl_tokens": [
   "copies",
   "exactly",
   "data",
   ".",
   "length",
   "bytes",
   "from",
   "this",
   "SegmentedByteArray",
   "into",
   "the",
   "provided",
   "byte",
   "array"
  ],
  "pl_tokens": [
   "public",
   "int",
   "copy",
   "(",
   "long",
   "srcPos",
   ",",
   "byte",
   "[",
   "]",
   "data",
   ",",
   "int",
   "destPos",
   ",",
   "int",
   "length",
   ")",
   "{",
   "int",
   "segmentSize",
   "=",
   "1",
   "<<",
   "log2OfSegmentSize",
   ";",
   "int",
   "remainingBytesInSegment",
   "=",
   "(",
   "int",
   ")",
   "(",
   "segmentSize",
   "-",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ")",
   ";",
   "int",
   "dataPosition",
   "=",
   "destPos",
   ";",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "byte",
   "[",
   "]",
   "segment",
   "=",
   "segments",
   "[",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   ">>>",
   "log2OfSegmentSize",
   ")",
   "]",
   ";",
   "int",
   "bytesToCopyFromSegment",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remainingBytesInSegment",
   ",",
   "length",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "segment",
   ",",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ",",
   "data",
   ",",
   "dataPosition",
   ",",
   "bytesToCopyFromSegment",
   ")",
   ";",
   "dataPosition",
   "+=",
   "bytesToCopyFromSegment",
   ";",
   "srcPos",
   "+=",
   "bytesToCopyFromSegment",
   ";",
   "remainingBytesInSegment",
   "=",
   "segmentSize",
   "-",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ";",
   "length",
   "-=",
   "bytesToCopyFromSegment",
   ";",
   "}",
   "return",
   "dataPosition",
   "-",
   "destPos",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-199",
  "nl_tokens": [
   "This",
   "reports",
   "how",
   "well",
   "different",
   "compression",
   "schemes",
   "would",
   "work",
   "on",
   "the",
   "specific",
   "data",
   ".",
   "Should",
   "be",
   "renamed"
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "calcScaleOffset",
   "(",
   "GribData",
   ".",
   "Bean",
   "bean1",
   ",",
   "Formatter",
   "f",
   ")",
   "{",
   "float",
   "[",
   "]",
   "data",
   ";",
   "try",
   "{",
   "data",
   "=",
   "bean1",
   ".",
   "readData",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "f",
   ".",
   "format",
   "(",
   "\"IOException %s\"",
   ",",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "return",
   ";",
   "}",
   "int",
   "npoints",
   "=",
   "data",
   ".",
   "length",
   ";",
   "// we always use unsigned packed",
   "// \"If the packed values are intended to be interpreted as signed/unsigned integers\"",
   "// http://www.unidata.ucar.edu/software/netcdf/docs/BestPractices.html",
   "int",
   "nbits",
   "=",
   "bean1",
   ".",
   "getNBits",
   "(",
   ")",
   ";",
   "int",
   "width",
   "=",
   "(",
   "2",
   "<<",
   "nbits",
   "-",
   "1",
   ")",
   "-",
   "2",
   ";",
   "// unsigned",
   "int",
   "missing_value",
   "=",
   "(",
   "2",
   "<<",
   "nbits",
   "-",
   "1",
   ")",
   "-",
   "1",
   ";",
   "// all ones - reserved for missing value",
   "// int width2 = (2 << (nbits-1)) - 1;  // signed",
   "f",
   ".",
   "format",
   "(",
   "\" nbits = %d%n\"",
   ",",
   "nbits",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" npoints = %d%n\"",
   ",",
   "npoints",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" width = %d (0x%s) %n\"",
   ",",
   "width",
   ",",
   "Long",
   ".",
   "toHexString",
   "(",
   "width",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" scale = %g %n\"",
   ",",
   "bean1",
   ".",
   "getScale",
   "(",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" resolution = %g %n\"",
   ",",
   "bean1",
   ".",
   "getScale",
   "(",
   ")",
   "/",
   "2",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" range = %f %n%n\"",
   ",",
   "bean1",
   ".",
   "getMaximum",
   "(",
   ")",
   "-",
   "bean1",
   ".",
   "getMinimum",
   "(",
   ")",
   ")",
   ";",
   "float",
   "dataMin",
   "=",
   "Float",
   ".",
   "MAX_VALUE",
   ";",
   "float",
   "dataMax",
   "=",
   "-",
   "Float",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "float",
   "fd",
   ":",
   "data",
   ")",
   "{",
   "if",
   "(",
   "Float",
   ".",
   "isNaN",
   "(",
   "fd",
   ")",
   ")",
   "continue",
   ";",
   "dataMin",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dataMin",
   ",",
   "fd",
   ")",
   ";",
   "dataMax",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "dataMax",
   ",",
   "fd",
   ")",
   ";",
   "}",
   "f",
   ".",
   "format",
   "(",
   "\"           actual    computed%n\"",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" dataMin = %8f %8f%n\"",
   ",",
   "dataMin",
   ",",
   "bean1",
   ".",
   "getMinimum",
   "(",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" dataMax = %8f %8f%n\"",
   ",",
   "dataMax",
   ",",
   "bean1",
   ".",
   "getMaximum",
   "(",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" actual range = %f%n\"",
   ",",
   "(",
   "dataMax",
   "-",
   "dataMin",
   ")",
   ")",
   ";",
   "// scale_factor =(dataMax - dataMin) / (2^n - 1)",
   "// add_offset = dataMin + 2^(n-1) * scale_factor",
   "double",
   "scale_factor",
   "=",
   "(",
   "dataMax",
   "-",
   "dataMin",
   ")",
   "/",
   "width",
   ";",
   "// float add_offset = dataMin + width2 * scale_factor / 2; // signed",
   "double",
   "add_offset",
   "=",
   "dataMin",
   ";",
   "// unsigned",
   "f",
   ".",
   "format",
   "(",
   "\" scale_factor = %g%n\"",
   ",",
   "scale_factor",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" add_offset = %g%n\"",
   ",",
   "add_offset",
   ")",
   ";",
   "// unpacked_data_value = packed_data_value * scale_factor + add_offset",
   "// packed_data_value = nint((unpacked_data_value - add_offset) / scale_factor)",
   "ByteBuffer",
   "bb",
   "=",
   "ByteBuffer",
   ".",
   "allocate",
   "(",
   "4",
   "*",
   "npoints",
   ")",
   ";",
   "IntBuffer",
   "intBuffer",
   "=",
   "bb",
   ".",
   "asIntBuffer",
   "(",
   ")",
   ";",
   "double",
   "diffMax",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "diffTotal",
   "=",
   "0",
   ";",
   "double",
   "diffTotal2",
   "=",
   "0",
   ";",
   "for",
   "(",
   "float",
   "fd",
   ":",
   "data",
   ")",
   "{",
   "if",
   "(",
   "Float",
   ".",
   "isNaN",
   "(",
   "fd",
   ")",
   ")",
   "{",
   "intBuffer",
   ".",
   "put",
   "(",
   "missing_value",
   ")",
   ";",
   "continue",
   ";",
   "}",
   "// otherwise pack it",
   "int",
   "packed_data",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "(",
   "fd",
   "-",
   "add_offset",
   ")",
   "/",
   "scale_factor",
   ")",
   ";",
   "// nint((unpacked_data_value - add_offset) / scale_factor)",
   "double",
   "unpacked_data",
   "=",
   "packed_data",
   "*",
   "scale_factor",
   "+",
   "add_offset",
   ";",
   "double",
   "diff",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "fd",
   "-",
   "unpacked_data",
   ")",
   ";",
   "if",
   "(",
   "diff",
   ">",
   "scale_factor",
   "/",
   "2",
   ")",
   "f",
   ".",
   "format",
   "(",
   "\"***   org=%g, packed_data=%d unpacked=%g diff = %g%n\"",
   ",",
   "fd",
   ",",
   "packed_data",
   ",",
   "unpacked_data",
   ",",
   "diff",
   ")",
   ";",
   "diffMax",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "diffMax",
   ",",
   "diff",
   ")",
   ";",
   "diffTotal",
   "+=",
   "diff",
   ";",
   "diffTotal2",
   "+=",
   "diff",
   "*",
   "diff",
   ";",
   "intBuffer",
   ".",
   "put",
   "(",
   "packed_data",
   ")",
   ";",
   "}",
   "f",
   ".",
   "format",
   "(",
   "\"%n max_diff = %g%n\"",
   ",",
   "diffMax",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" avg_diff = %g%n\"",
   ",",
   "diffTotal",
   "/",
   "data",
   ".",
   "length",
   ")",
   ";",
   "// Math.sqrt( sumsq/n - avg * avg)",
   "double",
   "mean",
   "=",
   "diffTotal",
   "/",
   "npoints",
   ";",
   "double",
   "var",
   "=",
   "(",
   "diffTotal2",
   "/",
   "npoints",
   "-",
   "mean",
   "*",
   "mean",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" std_diff = %g%n\"",
   ",",
   "Math",
   ".",
   "sqrt",
   "(",
   "var",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\"%nCompression%n\"",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" number of values = %d%n\"",
   ",",
   "npoints",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" uncompressed as floats = %d%n\"",
   ",",
   "npoints",
   "*",
   "4",
   ")",
   ";",
   "int",
   "packedBitsLen",
   "=",
   "npoints",
   "*",
   "nbits",
   "/",
   "8",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" uncompressed packed bits = %d%n\"",
   ",",
   "packedBitsLen",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" grib data length = %d%n\"",
   ",",
   "bean1",
   ".",
   "getDataLength",
   "(",
   ")",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" grib msg length = %d%n\"",
   ",",
   "bean1",
   ".",
   "getMsgLength",
   "(",
   ")",
   ")",
   ";",
   "byte",
   "[",
   "]",
   "bdata",
   "=",
   "convertToBytes",
   "(",
   "data",
   ")",
   ";",
   "byte",
   "[",
   "]",
   "scaledData",
   "=",
   "bb",
   ".",
   "array",
   "(",
   ")",
   ";",
   "////////////////////////////////////////////",
   "f",
   ".",
   "format",
   "(",
   "\"%ndeflate (float)%n\"",
   ")",
   ";",
   "Deflater",
   "deflater",
   "=",
   "new",
   "Deflater",
   "(",
   ")",
   ";",
   "deflater",
   ".",
   "setInput",
   "(",
   "bdata",
   ")",
   ";",
   "deflater",
   ".",
   "finish",
   "(",
   ")",
   ";",
   "int",
   "compressedSize",
   "=",
   "deflater",
   ".",
   "deflate",
   "(",
   "new",
   "byte",
   "[",
   "10",
   "*",
   "npoints",
   "]",
   ")",
   ";",
   "deflater",
   ".",
   "end",
   "(",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" compressedSize = %d%n\"",
   ",",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio floats / size = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "(",
   "npoints",
   "*",
   "4",
   ")",
   "/",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio packed bits / size = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "packedBitsLen",
   "/",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio size / grib = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "compressedSize",
   "/",
   "bean1",
   ".",
   "getMsgLength",
   "(",
   ")",
   ")",
   ";",
   "/////////////////////////////////////////////////////////",
   "f",
   ".",
   "format",
   "(",
   "\"%ndeflate (scaled ints)%n\"",
   ")",
   ";",
   "deflater",
   "=",
   "new",
   "Deflater",
   "(",
   ")",
   ";",
   "deflater",
   ".",
   "setInput",
   "(",
   "scaledData",
   ")",
   ";",
   "deflater",
   ".",
   "finish",
   "(",
   ")",
   ";",
   "compressedSize",
   "=",
   "deflater",
   ".",
   "deflate",
   "(",
   "new",
   "byte",
   "[",
   "10",
   "*",
   "npoints",
   "]",
   ")",
   ";",
   "deflater",
   ".",
   "end",
   "(",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" compressedSize = %d%n\"",
   ",",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio floats / size = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "(",
   "npoints",
   "*",
   "4",
   ")",
   "/",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio packed bits / size = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "packedBitsLen",
   "/",
   "compressedSize",
   ")",
   ";",
   "f",
   ".",
   "format",
   "(",
   "\" ratio size / grib = %f%n\"",
   ",",
   "(",
   "float",
   ")",
   "compressedSize",
   "/",
   "bean1",
   ".",
   "getMsgLength",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-200",
  "nl_tokens": [
   "Create",
   "a",
   "new",
   "Range",
   "by",
   "making",
   "the",
   "union",
   "with",
   "a",
   "Range",
   "using",
   "same",
   "interval",
   "as",
   "this",
   "Range",
   ".",
   "NOTE",
   ":",
   "no",
   "strides"
  ],
  "pl_tokens": [
   "public",
   "Range",
   "union",
   "(",
   "Range",
   "r",
   ")",
   "throws",
   "InvalidRangeException",
   "{",
   "if",
   "(",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "return",
   "r",
   ";",
   "if",
   "(",
   "this",
   "==",
   "VLEN",
   "||",
   "r",
   "==",
   "VLEN",
   ")",
   "return",
   "VLEN",
   ";",
   "if",
   "(",
   "r",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "return",
   "this",
   ";",
   "int",
   "first",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "first",
   "(",
   ")",
   ",",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   ";",
   "int",
   "last",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "last",
   "(",
   ")",
   ",",
   "r",
   ".",
   "last",
   "(",
   ")",
   ")",
   ";",
   "return",
   "new",
   "Range",
   "(",
   "name",
   ",",
   "first",
   ",",
   "last",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-201",
  "nl_tokens": [
   "Max"
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "<mask>",
   "(",
   "long",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "long",
   "max",
   "=",
   "Long",
   ".",
   "MIN_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-202",
  "nl_tokens": [
   "Returns",
   "an",
   "Observable",
   "that",
   "emits",
   "a",
   "{",
   "@code",
   "0L",
   "}",
   "after",
   "the",
   "{",
   "@code",
   "initialDelay",
   "}",
   "and",
   "ever",
   "increasing",
   "numbers",
   "after",
   "each",
   "{",
   "@code",
   "period",
   "}",
   "of",
   "time",
   "thereafter",
   "on",
   "a",
   "specified",
   "{",
   "@link",
   "Scheduler",
   "}",
   ".",
   "<p",
   ">",
   "<img",
   "width",
   "=",
   "640",
   "height",
   "=",
   "200",
   "src",
   "=",
   "https",
   ":",
   "//",
   "raw",
   ".",
   "github",
   ".",
   "com",
   "/",
   "wiki",
   "/",
   "ReactiveX",
   "/",
   "RxJava",
   "/",
   "images",
   "/",
   "rx",
   "-",
   "operators",
   "/",
   "timer",
   ".",
   "ps",
   ".",
   "png",
   "alt",
   "=",
   ">",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Scheduler",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "You",
   "specify",
   "which",
   "{",
   "@link",
   "Scheduler",
   "}",
   "this",
   "operator",
   "will",
   "use",
   ".",
   "<",
   "/",
   "dd",
   ">",
   "<",
   "/",
   "dl",
   ">"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "static",
   "Observable",
   "<",
   "Long",
   ">",
   "interval",
   "(",
   "long",
   "initialDelay",
   ",",
   "long",
   "period",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "ObservableInterval",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "initialDelay",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0L",
   ",",
   "period",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-203",
  "nl_tokens": [
   "Adds",
   "the",
   "data",
   "from",
   "the",
   "specified",
   "statistics",
   "to",
   "this",
   "builder"
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "Statistics",
   "<",
   "?",
   ">",
   "stats",
   ")",
   "{",
   "if",
   "(",
   "stats",
   ".",
   "hasNonNullValue",
   "(",
   ")",
   ")",
   "{",
   "nullPages",
   ".",
   "add",
   "(",
   "false",
   ")",
   ";",
   "Object",
   "<mask>",
   "=",
   "stats",
   ".",
   "genericGetMin",
   "(",
   ")",
   ";",
   "Object",
   "max",
   "=",
   "stats",
   ".",
   "genericGetMax",
   "(",
   ")",
   ";",
   "addMinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "pageIndexes",
   ".",
   "add",
   "(",
   "nextPageIndex",
   ")",
   ";",
   "minMaxSize",
   "+=",
   "sizeOf",
   "(",
   "min",
   ")",
   ";",
   "minMaxSize",
   "+=",
   "sizeOf",
   "(",
   "max",
   ")",
   ";",
   "}",
   "else",
   "{",
   "nullPages",
   ".",
   "add",
   "(",
   "true",
   ")",
   ";",
   "}",
   "nullCounts",
   ".",
   "add",
   "(",
   "stats",
   ".",
   "getNumNulls",
   "(",
   ")",
   ")",
   ";",
   "++",
   "nextPageIndex",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-204",
  "nl_tokens": [
   "Set",
   "the",
   "grid",
   "scale",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setGrid",
   "(",
   "Rectangle2D",
   "bbox",
   ",",
   "double",
   "width",
   ",",
   "double",
   "height",
   ")",
   "{",
   "offsetX",
   "=",
   "bbox",
   ".",
   "getX",
   "(",
   ")",
   ";",
   "offsetY",
   "=",
   "bbox",
   ".",
   "getY",
   "(",
   ")",
   ";",
   "// number of grid cells",
   "countX",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "nx",
   ",",
   "(",
   "int",
   ")",
   "(",
   "bbox",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "(",
   "scaleOverlap",
   "*",
   "width",
   ")",
   ")",
   ")",
   ";",
   "countY",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ny",
   ",",
   "(",
   "int",
   ")",
   "(",
   "bbox",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "(",
   "scaleOverlap",
   "*",
   "height",
   ")",
   ")",
   ")",
   ";",
   "gridWidth",
   "=",
   "bbox",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "countX",
   ";",
   "gridHeight",
   "=",
   "bbox",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "countY",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"SpatialGrid size \"",
   "+",
   "gridWidth",
   "+",
   "\" \"",
   "+",
   "gridHeight",
   "+",
   "\" = \"",
   "+",
   "countX",
   "+",
   "\" by \"",
   "+",
   "countY",
   "+",
   "\" scaleOverlap= \"",
   "+",
   "scaleOverlap",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-205",
  "nl_tokens": [
   "Write",
   "a",
   "portion",
   "of",
   "a",
   "String",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "write",
   "(",
   "String",
   "s",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "ensureOpen",
   "(",
   ")",
   ";",
   "if",
   "(",
   "bufferSize",
   "==",
   "0",
   ")",
   "{",
   "initOut",
   "(",
   ")",
   ";",
   "out",
   ".",
   "write",
   "(",
   "s",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "return",
   ";",
   "}",
   "int",
   "b",
   "=",
   "off",
   ",",
   "t",
   "=",
   "off",
   "+",
   "len",
   ";",
   "while",
   "(",
   "b",
   "<",
   "t",
   ")",
   "{",
   "int",
   "d",
   "=",
   "<mask>",
   "(",
   "getRemaining",
   "(",
   ")",
   ",",
   "t",
   "-",
   "b",
   ")",
   ";",
   "s",
   ".",
   "getChars",
   "(",
   "b",
   ",",
   "b",
   "+",
   "d",
   ",",
   "buf",
   ".",
   "buf",
   ",",
   "buf",
   ".",
   "pos",
   ")",
   ";",
   "b",
   "+=",
   "d",
   ";",
   "buf",
   ".",
   "pos",
   "+=",
   "d",
   ";",
   "if",
   "(",
   "getRemaining",
   "(",
   ")",
   "==",
   "0",
   ")",
   "if",
   "(",
   "autoFlush",
   ")",
   "flushBuffer",
   "(",
   ")",
   ";",
   "else",
   "bufferOverflow",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-206",
  "nl_tokens": [
   "Run",
   "the",
   "program"
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "main",
   "(",
   "String",
   "[",
   "]",
   "args",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "args",
   ".",
   "length",
   "==",
   "0",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"need to supply a GEMPAK grid file name\"",
   ")",
   ";",
   "System",
   ".",
   "exit",
   "(",
   "1",
   ")",
   ";",
   "}",
   "try",
   "{",
   "GempakGridParameterTable",
   ".",
   "addParameters",
   "(",
   "\"resources/nj22/tables/gempak/wmogrib3.tbl\"",
   ")",
   ";",
   "GempakGridParameterTable",
   ".",
   "addParameters",
   "(",
   "\"resources/nj22/tables/gempak/ncepgrib2.tbl\"",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"unable to init param tables\"",
   ")",
   ";",
   "}",
   "GempakGridReader",
   "ggr",
   "=",
   "getInstance",
   "(",
   "getFile",
   "(",
   "args",
   "[",
   "0",
   "]",
   ")",
   ",",
   "true",
   ")",
   ";",
   "String",
   "var",
   "=",
   "\"PMSL\"",
   ";",
   "if",
   "(",
   "(",
   "args",
   ".",
   "length",
   ">",
   "1",
   ")",
   "&&",
   "!",
   "args",
   "[",
   "1",
   "]",
   ".",
   "equalsIgnoreCase",
   "(",
   "\"X\"",
   ")",
   ")",
   "{",
   "var",
   "=",
   "args",
   "[",
   "1",
   "]",
   ";",
   "}",
   "ggr",
   ".",
   "showGridInfo",
   "(",
   "args",
   ".",
   "length",
   "!=",
   "3",
   ")",
   ";",
   "GempakGridRecord",
   "gh",
   "=",
   "ggr",
   ".",
   "findGrid",
   "(",
   "var",
   ")",
   ";",
   "if",
   "(",
   "gh",
   "!=",
   "null",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"\\n\"",
   "+",
   "var",
   "+",
   "\":\"",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "gh",
   ")",
   ";",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "2",
   ";",
   "j",
   "++",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"Using DP: \"",
   "+",
   "ggr",
   ".",
   "useDP",
   ")",
   ";",
   "float",
   "[",
   "]",
   "data",
   "=",
   "ggr",
   ".",
   "readGrid",
   "(",
   "gh",
   ")",
   ";",
   "if",
   "(",
   "data",
   "!=",
   "null",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"# of points = \"",
   "+",
   "data",
   ".",
   "length",
   ")",
   ";",
   "int",
   "cnt",
   "=",
   "0",
   ";",
   "int",
   "it",
   "=",
   "10",
   ";",
   "float",
   "<mask>",
   "=",
   "Float",
   ".",
   "POSITIVE_INFINITY",
   ";",
   "float",
   "max",
   "=",
   "Float",
   ".",
   "NEGATIVE_INFINITY",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "data",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "cnt",
   "==",
   "it",
   ")",
   "{",
   "cnt",
   "=",
   "0",
   ";",
   "}",
   "cnt",
   "++",
   ";",
   "if",
   "(",
   "(",
   "data",
   "[",
   "i",
   "]",
   "!=",
   "RMISSD",
   ")",
   "&&",
   "(",
   "data",
   "[",
   "i",
   "]",
   "<",
   "min",
   ")",
   ")",
   "{",
   "min",
   "=",
   "data",
   "[",
   "i",
   "]",
   ";",
   "}",
   "if",
   "(",
   "(",
   "data",
   "[",
   "i",
   "]",
   "!=",
   "RMISSD",
   ")",
   "&&",
   "(",
   "data",
   "[",
   "i",
   "]",
   ">",
   "max",
   ")",
   ")",
   "{",
   "max",
   "=",
   "data",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"max/min = \"",
   "+",
   "max",
   "+",
   "\"/\"",
   "+",
   "min",
   ")",
   ";",
   "}",
   "else",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"unable to decode grid data\"",
   ")",
   ";",
   "}",
   "ggr",
   ".",
   "useDP",
   "=",
   "!",
   "ggr",
   ".",
   "useDP",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-207",
  "nl_tokens": [
   "Within",
   "guice",
   "s",
   "core",
   "allow",
   "for",
   "better",
   "missing",
   "binding",
   "messages"
  ],
  "pl_tokens": [
   "<",
   "T",
   ">",
   "Errors",
   "missingImplementationWithHint",
   "(",
   "Key",
   "<",
   "T",
   ">",
   "key",
   ",",
   "Injector",
   "injector",
   ")",
   "{",
   "StringBuilder",
   "sb",
   "=",
   "new",
   "StringBuilder",
   "(",
   ")",
   ";",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"No implementation for %s was bound.\"",
   ",",
   "key",
   ")",
   ")",
   ";",
   "// Keys which have similar strings as the desired key",
   "List",
   "<",
   "String",
   ">",
   "possibleMatches",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "// Check for other keys that may have the same type,",
   "// but not the same annotation",
   "TypeLiteral",
   "<",
   "T",
   ">",
   "type",
   "=",
   "key",
   ".",
   "getTypeLiteral",
   "(",
   ")",
   ";",
   "List",
   "<",
   "Binding",
   "<",
   "T",
   ">",
   ">",
   "sameTypes",
   "=",
   "injector",
   ".",
   "findBindingsByType",
   "(",
   "type",
   ")",
   ";",
   "if",
   "(",
   "!",
   "sameTypes",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%n  Did you mean?\"",
   ")",
   ")",
   ";",
   "int",
   "howMany",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "sameTypes",
   ".",
   "size",
   "(",
   ")",
   ",",
   "MAX_MATCHING_TYPES_REPORTED",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "howMany",
   ";",
   "++",
   "i",
   ")",
   "{",
   "// TODO: Look into a better way to prioritize suggestions. For example, possbily",
   "// use levenshtein distance of the given annotation vs actual annotation.",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%n    * %s\"",
   ",",
   "sameTypes",
   ".",
   "get",
   "(",
   "i",
   ")",
   ".",
   "getKey",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "int",
   "remaining",
   "=",
   "sameTypes",
   ".",
   "size",
   "(",
   ")",
   "-",
   "MAX_MATCHING_TYPES_REPORTED",
   ";",
   "if",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   "{",
   "String",
   "plural",
   "=",
   "(",
   "remaining",
   "==",
   "1",
   ")",
   "?",
   "\"\"",
   ":",
   "\"s\"",
   ";",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%n    %d more binding%s with other annotations.\"",
   ",",
   "remaining",
   ",",
   "plural",
   ")",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "// For now, do a simple substring search for possibilities. This can help spot",
   "// issues when there are generics being used (such as a wrapper class) and the",
   "// user has forgotten they need to bind based on the wrapper, not the underlying",
   "// class. In the future, consider doing a strict in-depth type search.",
   "// TODO: Look into a better way to prioritize suggestions. For example, possbily",
   "// use levenshtein distance of the type literal strings.",
   "String",
   "want",
   "=",
   "type",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "Map",
   "<",
   "Key",
   "<",
   "?",
   ">",
   ",",
   "Binding",
   "<",
   "?",
   ">",
   ">",
   "bindingMap",
   "=",
   "injector",
   ".",
   "getAllBindings",
   "(",
   ")",
   ";",
   "for",
   "(",
   "Key",
   "<",
   "?",
   ">",
   "bindingKey",
   ":",
   "bindingMap",
   ".",
   "keySet",
   "(",
   ")",
   ")",
   "{",
   "String",
   "have",
   "=",
   "bindingKey",
   ".",
   "getTypeLiteral",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "if",
   "(",
   "have",
   ".",
   "contains",
   "(",
   "want",
   ")",
   "||",
   "want",
   ".",
   "contains",
   "(",
   "have",
   ")",
   ")",
   "{",
   "Formatter",
   "fmt",
   "=",
   "new",
   "Formatter",
   "(",
   ")",
   ";",
   "Messages",
   ".",
   "formatSource",
   "(",
   "fmt",
   ",",
   "bindingMap",
   ".",
   "get",
   "(",
   "bindingKey",
   ")",
   ".",
   "getSource",
   "(",
   ")",
   ")",
   ";",
   "String",
   "match",
   "=",
   "String",
   ".",
   "format",
   "(",
   "\"%s bound%s\"",
   ",",
   "convert",
   "(",
   "bindingKey",
   ")",
   ",",
   "fmt",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "possibleMatches",
   ".",
   "add",
   "(",
   "match",
   ")",
   ";",
   "// TODO: Consider a check that if there are more than some number of results,",
   "// don't suggest any.",
   "if",
   "(",
   "possibleMatches",
   ".",
   "size",
   "(",
   ")",
   ">",
   "MAX_RELATED_TYPES_REPORTED",
   ")",
   "{",
   "// Early exit if we have found more than we need.",
   "break",
   ";",
   "}",
   "}",
   "}",
   "if",
   "(",
   "(",
   "possibleMatches",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   ")",
   "&&",
   "(",
   "possibleMatches",
   ".",
   "size",
   "(",
   ")",
   "<=",
   "MAX_RELATED_TYPES_REPORTED",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%n  Did you mean?\"",
   ")",
   ")",
   ";",
   "for",
   "(",
   "String",
   "possibleMatch",
   ":",
   "possibleMatches",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%n    %s\"",
   ",",
   "possibleMatch",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "// If where are no possibilities to suggest, then handle the case of missing",
   "// annotations on simple types. This is usually a bad idea.",
   "if",
   "(",
   "sameTypes",
   ".",
   "isEmpty",
   "(",
   ")",
   "&&",
   "possibleMatches",
   ".",
   "isEmpty",
   "(",
   ")",
   "&&",
   "key",
   ".",
   "getAnnotation",
   "(",
   ")",
   "==",
   "null",
   "&&",
   "COMMON_AMBIGUOUS_TYPES",
   ".",
   "contains",
   "(",
   "key",
   ".",
   "getTypeLiteral",
   "(",
   ")",
   ".",
   "getRawType",
   "(",
   ")",
   ")",
   ")",
   "{",
   "// We don't recommend using such simple types without annotations.",
   "sb",
   ".",
   "append",
   "(",
   "format",
   "(",
   "\"%nThe key seems very generic, did you forget an annotation?\"",
   ")",
   ")",
   ";",
   "}",
   "return",
   "addMessage",
   "(",
   "sb",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-208",
  "nl_tokens": [
   "Get",
   "an",
   "ordered",
   "sequence",
   "of",
   "index",
   "entries",
   "in",
   "this",
   "{",
   "@link",
   "Stream",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "java",
   ".",
   "util",
   ".",
   "List",
   "<",
   "IndexEntry",
   ">",
   "getIndexEntries",
   "(",
   ")",
   "{",
   "final",
   "int",
   "numEntries",
   "=",
   "getNumIndexEntries",
   "(",
   ")",
   ";",
   "java",
   ".",
   "util",
   ".",
   "List",
   "<",
   "IndexEntry",
   ">",
   "retval",
   "=",
   "new",
   "java",
   ".",
   "util",
   ".",
   "ArrayList",
   "<",
   "IndexEntry",
   ">",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "numEntries",
   ",",
   "10",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "numEntries",
   ";",
   "i",
   "++",
   ")",
   "{",
   "final",
   "IndexEntry",
   "entry",
   "=",
   "getIndexEntry",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "entry",
   "!=",
   "null",
   ")",
   "{",
   "retval",
   ".",
   "add",
   "(",
   "entry",
   ")",
   ";",
   "}",
   "}",
   "return",
   "retval",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-209",
  "nl_tokens": [
   "Randomly",
   "generates",
   "a",
   "set",
   "of",
   "points",
   "on",
   "the",
   "plane",
   "centered",
   "at",
   "the",
   "plane",
   "s",
   "origin",
   "using",
   "a",
   "uniform",
   "distribution",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "List",
   "<",
   "Point3D_F64",
   ">",
   "random",
   "(",
   "PlaneNormal3D_F64",
   "plane",
   ",",
   "double",
   "<mask>",
   ",",
   "int",
   "num",
   ",",
   "Random",
   "rand",
   ")",
   "{",
   "List",
   "<",
   "Point3D_F64",
   ">",
   "ret",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "Vector3D_F64",
   "axisX",
   "=",
   "new",
   "Vector3D_F64",
   "(",
   ")",
   ";",
   "Vector3D_F64",
   "axisY",
   "=",
   "new",
   "Vector3D_F64",
   "(",
   ")",
   ";",
   "UtilPlane3D_F64",
   ".",
   "selectAxis2D",
   "(",
   "plane",
   ".",
   "n",
   ",",
   "axisX",
   ",",
   "axisY",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "num",
   ";",
   "i",
   "++",
   ")",
   "{",
   "double",
   "x",
   "=",
   "2",
   "*",
   "max",
   "*",
   "(",
   "rand",
   ".",
   "nextDouble",
   "(",
   ")",
   "-",
   "0.5",
   ")",
   ";",
   "double",
   "y",
   "=",
   "2",
   "*",
   "max",
   "*",
   "(",
   "rand",
   ".",
   "nextDouble",
   "(",
   ")",
   "-",
   "0.5",
   ")",
   ";",
   "Point3D_F64",
   "p",
   "=",
   "new",
   "Point3D_F64",
   "(",
   ")",
   ";",
   "p",
   ".",
   "x",
   "=",
   "plane",
   ".",
   "p",
   ".",
   "x",
   "+",
   "axisX",
   ".",
   "x",
   "*",
   "x",
   "+",
   "axisY",
   ".",
   "x",
   "*",
   "y",
   ";",
   "p",
   ".",
   "y",
   "=",
   "plane",
   ".",
   "p",
   ".",
   "y",
   "+",
   "axisX",
   ".",
   "y",
   "*",
   "x",
   "+",
   "axisY",
   ".",
   "y",
   "*",
   "y",
   ";",
   "p",
   ".",
   "z",
   "=",
   "plane",
   ".",
   "p",
   ".",
   "z",
   "+",
   "axisX",
   ".",
   "z",
   "*",
   "x",
   "+",
   "axisY",
   ".",
   "z",
   "*",
   "y",
   ";",
   "ret",
   ".",
   "add",
   "(",
   "p",
   ")",
   ";",
   "}",
   "return",
   "ret",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-210",
  "nl_tokens": [
   "Get",
   "Index",
   "Ranges",
   "for",
   "the",
   "given",
   "lat",
   "lon",
   "bounding",
   "box",
   ".",
   "For",
   "projection",
   "only",
   "an",
   "approximation",
   "based",
   "on",
   "latlon",
   "corners",
   ".",
   "Must",
   "have",
   "CoordinateAxis1D",
   "or",
   "2D",
   "for",
   "x",
   "and",
   "y",
   "axis",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "List",
   "<",
   "Range",
   ">",
   "getRangesFromLatLonRect",
   "(",
   "LatLonRect",
   "rect",
   ")",
   "throws",
   "InvalidRangeException",
   "{",
   "double",
   "minx",
   ",",
   "maxx",
   ",",
   "miny",
   ",",
   "maxy",
   ";",
   "ProjectionImpl",
   "proj",
   "=",
   "getProjection",
   "(",
   ")",
   ";",
   "if",
   "(",
   "proj",
   "!=",
   "null",
   "&&",
   "!",
   "(",
   "proj",
   "instanceof",
   "VerticalPerspectiveView",
   ")",
   "&&",
   "!",
   "(",
   "proj",
   "instanceof",
   "MSGnavigation",
   ")",
   "&&",
   "!",
   "(",
   "proj",
   "instanceof",
   "Geostationary",
   ")",
   ")",
   "{",
   "// LOOK kludge - how to do this generrally ??\r",
   "// first clip the request rectangle to the bounding box of the grid\r",
   "LatLonRect",
   "bb",
   "=",
   "getLatLonBoundingBox",
   "(",
   ")",
   ";",
   "LatLonRect",
   "rect2",
   "=",
   "bb",
   ".",
   "intersect",
   "(",
   "rect",
   ")",
   ";",
   "if",
   "(",
   "null",
   "==",
   "rect2",
   ")",
   "throw",
   "new",
   "InvalidRangeException",
   "(",
   "\"Request Bounding box does not intersect Grid \"",
   ")",
   ";",
   "rect",
   "=",
   "rect2",
   ";",
   "}",
   "CoordinateAxis",
   "xaxis",
   "=",
   "getXHorizAxis",
   "(",
   ")",
   ";",
   "CoordinateAxis",
   "yaxis",
   "=",
   "getYHorizAxis",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isLatLon",
   "(",
   ")",
   ")",
   "{",
   "LatLonPointImpl",
   "llpt",
   "=",
   "rect",
   ".",
   "getLowerLeftPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "urpt",
   "=",
   "rect",
   ".",
   "getUpperRightPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "lrpt",
   "=",
   "rect",
   ".",
   "getLowerRightPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "ulpt",
   "=",
   "rect",
   ".",
   "getUpperLeftPoint",
   "(",
   ")",
   ";",
   "minx",
   "=",
   "getMinOrMaxLon",
   "(",
   "llpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "ulpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "true",
   ")",
   ";",
   "miny",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "llpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ",",
   "lrpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "maxx",
   "=",
   "getMinOrMaxLon",
   "(",
   "urpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "lrpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "false",
   ")",
   ";",
   "maxy",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ulpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ",",
   "urpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "// normalize to [minLon,minLon+360]\r",
   "double",
   "minLon",
   "=",
   "xaxis",
   ".",
   "getMinValue",
   "(",
   ")",
   ";",
   "minx",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormalFrom",
   "(",
   "minx",
   ",",
   "minLon",
   ")",
   ";",
   "maxx",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormalFrom",
   "(",
   "maxx",
   ",",
   "minLon",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ProjectionRect",
   "prect",
   "=",
   "getProjection",
   "(",
   ")",
   ".",
   "latLonToProjBB",
   "(",
   "rect",
   ")",
   ";",
   "// allow projection to override\r",
   "minx",
   "=",
   "prect",
   ".",
   "getMinPoint",
   "(",
   ")",
   ".",
   "getX",
   "(",
   ")",
   ";",
   "miny",
   "=",
   "prect",
   ".",
   "getMinPoint",
   "(",
   ")",
   ".",
   "getY",
   "(",
   ")",
   ";",
   "maxx",
   "=",
   "prect",
   ".",
   "getMaxPoint",
   "(",
   ")",
   ".",
   "getX",
   "(",
   ")",
   ";",
   "maxy",
   "=",
   "prect",
   ".",
   "getMaxPoint",
   "(",
   ")",
   ".",
   "getY",
   "(",
   ")",
   ";",
   "/*\r\n      see ProjectionImpl.latLonToProjBB2()\r\n      Projection dataProjection = getProjection();\r\n      ProjectionPoint ll = dataProjection.latLonToProj(llpt, new ProjectionPointImpl());\r\n      ProjectionPoint ur = dataProjection.latLonToProj(urpt, new ProjectionPointImpl());\r\n      ProjectionPoint lr = dataProjection.latLonToProj(lrpt, new ProjectionPointImpl());\r\n      ProjectionPoint ul = dataProjection.latLonToProj(ulpt, new ProjectionPointImpl());\r\n\r\n      minx = Math.min(ll.getX(), ul.getX());\r\n      miny = Math.min(ll.getY(), lr.getY());\r\n      maxx = Math.max(ur.getX(), lr.getX());\r\n      maxy = Math.max(ul.getY(), ur.getY()); */",
   "}",
   "if",
   "(",
   "(",
   "xaxis",
   "instanceof",
   "CoordinateAxis1D",
   ")",
   "&&",
   "(",
   "yaxis",
   "instanceof",
   "CoordinateAxis1D",
   ")",
   ")",
   "{",
   "CoordinateAxis1D",
   "xaxis1",
   "=",
   "(",
   "CoordinateAxis1D",
   ")",
   "xaxis",
   ";",
   "CoordinateAxis1D",
   "yaxis1",
   "=",
   "(",
   "CoordinateAxis1D",
   ")",
   "yaxis",
   ";",
   "int",
   "minxIndex",
   "=",
   "xaxis1",
   ".",
   "findCoordElementBounded",
   "(",
   "minx",
   ")",
   ";",
   "int",
   "minyIndex",
   "=",
   "yaxis1",
   ".",
   "findCoordElementBounded",
   "(",
   "miny",
   ")",
   ";",
   "int",
   "maxxIndex",
   "=",
   "xaxis1",
   ".",
   "findCoordElementBounded",
   "(",
   "maxx",
   ")",
   ";",
   "int",
   "maxyIndex",
   "=",
   "yaxis1",
   ".",
   "findCoordElementBounded",
   "(",
   "maxy",
   ")",
   ";",
   "List",
   "<",
   "Range",
   ">",
   "list",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "list",
   ".",
   "add",
   "(",
   "new",
   "Range",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "minyIndex",
   ",",
   "maxyIndex",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "minyIndex",
   ",",
   "maxyIndex",
   ")",
   ")",
   ")",
   ";",
   "list",
   ".",
   "add",
   "(",
   "new",
   "Range",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "minxIndex",
   ",",
   "maxxIndex",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "minxIndex",
   ",",
   "maxxIndex",
   ")",
   ")",
   ")",
   ";",
   "return",
   "list",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "xaxis",
   "instanceof",
   "CoordinateAxis2D",
   ")",
   "&&",
   "(",
   "yaxis",
   "instanceof",
   "CoordinateAxis2D",
   ")",
   "&&",
   "isLatLon",
   "(",
   ")",
   ")",
   "{",
   "CoordinateAxis2D",
   "lon_axis",
   "=",
   "(",
   "CoordinateAxis2D",
   ")",
   "xaxis",
   ";",
   "CoordinateAxis2D",
   "lat_axis",
   "=",
   "(",
   "CoordinateAxis2D",
   ")",
   "yaxis",
   ";",
   "int",
   "shape",
   "[",
   "]",
   "=",
   "lon_axis",
   ".",
   "getShape",
   "(",
   ")",
   ";",
   "int",
   "nj",
   "=",
   "shape",
   "[",
   "0",
   "]",
   ";",
   "int",
   "ni",
   "=",
   "shape",
   "[",
   "1",
   "]",
   ";",
   "int",
   "mini",
   "=",
   "Integer",
   ".",
   "MAX_VALUE",
   ",",
   "minj",
   "=",
   "Integer",
   ".",
   "MAX_VALUE",
   ";",
   "int",
   "maxi",
   "=",
   "-",
   "1",
   ",",
   "maxj",
   "=",
   "-",
   "1",
   ";",
   "// margolis 2/18/2010\r",
   "//minx = LatLonPointImpl.lonNormal( minx ); // <-- THIS IS NEW\r",
   "//maxx = LatLonPointImpl.lonNormal( maxx ); // <-- THIS IS NEW\r",
   "// brute force, examine every point LOOK BAD\r",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "nj",
   ";",
   "j",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "ni",
   ";",
   "i",
   "++",
   ")",
   "{",
   "double",
   "lat",
   "=",
   "lat_axis",
   ".",
   "getCoordValue",
   "(",
   "j",
   ",",
   "i",
   ")",
   ";",
   "double",
   "lon",
   "=",
   "lon_axis",
   ".",
   "getCoordValue",
   "(",
   "j",
   ",",
   "i",
   ")",
   ";",
   "//lon = LatLonPointImpl.lonNormal( lon ); // <-- THIS IS NEW      \r",
   "if",
   "(",
   "(",
   "lat",
   ">=",
   "miny",
   ")",
   "&&",
   "(",
   "lat",
   "<=",
   "maxy",
   ")",
   "&&",
   "(",
   "lon",
   ">=",
   "minx",
   ")",
   "&&",
   "(",
   "lon",
   "<=",
   "maxx",
   ")",
   ")",
   "{",
   "if",
   "(",
   "i",
   ">",
   "maxi",
   ")",
   "maxi",
   "=",
   "i",
   ";",
   "if",
   "(",
   "i",
   "<",
   "mini",
   ")",
   "mini",
   "=",
   "i",
   ";",
   "if",
   "(",
   "j",
   ">",
   "maxj",
   ")",
   "maxj",
   "=",
   "j",
   ";",
   "if",
   "(",
   "j",
   "<",
   "minj",
   ")",
   "minj",
   "=",
   "j",
   ";",
   "//System.out.println(j+\" \"+i+\" lat=\"+lat+\" lon=\"+lon);\r",
   "}",
   "}",
   "}",
   "// this is the case where no points are included\r",
   "if",
   "(",
   "(",
   "mini",
   ">",
   "maxi",
   ")",
   "||",
   "(",
   "minj",
   ">",
   "maxj",
   ")",
   ")",
   "{",
   "mini",
   "=",
   "0",
   ";",
   "minj",
   "=",
   "0",
   ";",
   "maxi",
   "=",
   "-",
   "1",
   ";",
   "maxj",
   "=",
   "-",
   "1",
   ";",
   "}",
   "ArrayList",
   "<",
   "Range",
   ">",
   "list",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "list",
   ".",
   "add",
   "(",
   "new",
   "Range",
   "(",
   "minj",
   ",",
   "maxj",
   ")",
   ")",
   ";",
   "list",
   ".",
   "add",
   "(",
   "new",
   "Range",
   "(",
   "mini",
   ",",
   "maxi",
   ")",
   ")",
   ";",
   "return",
   "list",
   ";",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"must be 1D or 2D/LatLon \"",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-211",
  "nl_tokens": [
   "Makes",
   "a",
   "new",
   "buffer",
   "available",
   "either",
   "by",
   "allocating",
   "a",
   "new",
   "one",
   "or",
   "re",
   "-",
   "cycling",
   "an",
   "existing",
   "one",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "needNewBuffer",
   "(",
   "int",
   "newcount",
   ")",
   "{",
   "if",
   "(",
   "currentBufferIndex",
   "<",
   "buffers",
   ".",
   "size",
   "(",
   ")",
   "-",
   "1",
   ")",
   "{",
   "//Recycling old buffer",
   "filledBufferSum",
   "+=",
   "currentBuffer",
   ".",
   "length",
   ";",
   "currentBufferIndex",
   "++",
   ";",
   "currentBuffer",
   "=",
   "buffers",
   ".",
   "get",
   "(",
   "currentBufferIndex",
   ")",
   ";",
   "}",
   "else",
   "{",
   "//Creating new buffer",
   "int",
   "newBufferSize",
   ";",
   "if",
   "(",
   "currentBuffer",
   "==",
   "null",
   ")",
   "{",
   "newBufferSize",
   "=",
   "newcount",
   ";",
   "filledBufferSum",
   "=",
   "0",
   ";",
   "}",
   "else",
   "{",
   "newBufferSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "currentBuffer",
   ".",
   "length",
   "<<",
   "1",
   ",",
   "newcount",
   "-",
   "filledBufferSum",
   ")",
   ";",
   "filledBufferSum",
   "+=",
   "currentBuffer",
   ".",
   "length",
   ";",
   "}",
   "currentBufferIndex",
   "++",
   ";",
   "currentBuffer",
   "=",
   "new",
   "byte",
   "[",
   "newBufferSize",
   "]",
   ";",
   "buffers",
   ".",
   "add",
   "(",
   "currentBuffer",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-212",
  "nl_tokens": [
   "Parses",
   "an",
   "RSM",
   "from",
   "a",
   "query",
   "XML",
   "element"
  ],
  "pl_tokens": [
   "public",
   "static",
   "RSM",
   "parseRSM",
   "(",
   "Element",
   "queryElement",
   ")",
   "{",
   "RSM",
   "rsm",
   "=",
   "new",
   "RSM",
   "(",
   ")",
   ";",
   "Element",
   "setElement",
   "=",
   "queryElement",
   ".",
   "element",
   "(",
   "\"set\"",
   ")",
   ";",
   "if",
   "(",
   "setElement",
   "==",
   "null",
   ")",
   "{",
   "return",
   "rsm",
   ";",
   "}",
   "Element",
   "after",
   "=",
   "setElement",
   ".",
   "element",
   "(",
   "\"after\"",
   ")",
   ";",
   "if",
   "(",
   "after",
   "!=",
   "null",
   ")",
   "{",
   "rsm",
   ".",
   "setAfter",
   "(",
   "after",
   ".",
   "getText",
   "(",
   ")",
   ")",
   ";",
   "}",
   "Element",
   "before",
   "=",
   "setElement",
   ".",
   "element",
   "(",
   "\"before\"",
   ")",
   ";",
   "if",
   "(",
   "before",
   "!=",
   "null",
   ")",
   "{",
   "String",
   "beforeText",
   "=",
   "before",
   ".",
   "getText",
   "(",
   ")",
   ";",
   "rsm",
   ".",
   "setBefore",
   "(",
   "beforeText",
   "==",
   "null",
   "?",
   "\"\"",
   ":",
   "beforeText",
   ")",
   ";",
   "}",
   "Element",
   "index",
   "=",
   "setElement",
   ".",
   "element",
   "(",
   "\"index\"",
   ")",
   ";",
   "if",
   "(",
   "index",
   "!=",
   "null",
   ")",
   "{",
   "rsm",
   ".",
   "setIndex",
   "(",
   "Integer",
   ".",
   "parseInt",
   "(",
   "index",
   ".",
   "getText",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "Element",
   "<mask>",
   "=",
   "setElement",
   ".",
   "element",
   "(",
   "\"max\"",
   ")",
   ";",
   "if",
   "(",
   "max",
   "!=",
   "null",
   ")",
   "{",
   "rsm",
   ".",
   "setMax",
   "(",
   "Integer",
   ".",
   "parseInt",
   "(",
   "max",
   ".",
   "getText",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "rsm",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-213",
  "nl_tokens": [
   "Calculates",
   "the",
   "bounding",
   "box",
   "of",
   "this",
   "coordinate",
   "reference",
   "system",
   "in",
   "latitude",
   "/",
   "longitude",
   ".",
   "This",
   "method",
   "properly",
   "handles",
   "coverages",
   "that",
   "straddle",
   "the",
   "international",
   "date",
   "line",
   "by",
   "deriving",
   "its",
   "bounding",
   "box",
   "from",
   "the",
   "{",
   "@link",
   "#calcConnectedLatLonBoundaryPoints",
   "(",
   "int",
   "int",
   ")",
   "connected",
   "latitude",
   "/",
   "longitude",
   "boundary",
   "}",
   ".",
   "<p",
   ">",
   "If",
   "this",
   "CRS",
   "{",
   "@link",
   "#isProjection",
   "is",
   "a",
   "projection",
   "}",
   "its",
   "lat",
   "/",
   "lon",
   "boundary",
   "is",
   "computed",
   "by",
   "converting",
   "each",
   "point",
   "in",
   "its",
   "{",
   "@link",
   "#calcProjectionBoundaryPoints",
   "()",
   "projection",
   "boundary",
   "}",
   "to",
   "latitude",
   "/",
   "longitude",
   "using",
   "the",
   "{",
   "@link",
   "Projection",
   "projection",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "LatLonRect",
   "calcLatLonBoundingBox",
   "(",
   ")",
   "{",
   "double",
   "minLat",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "minLon",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "maxLat",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "maxLon",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "LatLonPointNoNormalize",
   "boundaryPoint",
   ":",
   "calcConnectedLatLonBoundaryPoints",
   "(",
   ")",
   ")",
   "{",
   "minLat",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minLat",
   ",",
   "boundaryPoint",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "minLon",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minLon",
   ",",
   "boundaryPoint",
   ".",
   "getLongitude",
   "(",
   ")",
   ")",
   ";",
   "maxLat",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxLat",
   ",",
   "boundaryPoint",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "maxLon",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxLon",
   ",",
   "boundaryPoint",
   ".",
   "getLongitude",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "new",
   "LatLonRect",
   "(",
   "new",
   "LatLonPointImpl",
   "(",
   "minLat",
   ",",
   "minLon",
   ")",
   ",",
   "new",
   "LatLonPointImpl",
   "(",
   "maxLat",
   ",",
   "maxLon",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-214",
  "nl_tokens": [
   "Intersects",
   "the",
   "pair",
   "of",
   "specified",
   "source",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "objects",
   "and",
   "puts",
   "the",
   "result",
   "into",
   "the",
   "specified",
   "destination",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "object",
   ".",
   "One",
   "of",
   "the",
   "source",
   "rectangles",
   "can",
   "also",
   "be",
   "the",
   "destination",
   "to",
   "avoid",
   "creating",
   "a",
   "third",
   "Rectangle2D",
   "object",
   "but",
   "in",
   "this",
   "case",
   "the",
   "original",
   "points",
   "of",
   "this",
   "source",
   "rectangle",
   "will",
   "be",
   "overwritten",
   "by",
   "this",
   "method",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "intersect",
   "(",
   "ProjectionRect",
   "src1",
   ",",
   "ProjectionRect",
   "src2",
   ",",
   "ProjectionRect",
   "dest",
   ")",
   "{",
   "double",
   "x1",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "src1",
   ".",
   "getMinX",
   "(",
   ")",
   ",",
   "src2",
   ".",
   "getMinX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "y1",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "src1",
   ".",
   "getMinY",
   "(",
   ")",
   ",",
   "src2",
   ".",
   "getMinY",
   "(",
   ")",
   ")",
   ";",
   "double",
   "x2",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "src1",
   ".",
   "getMaxX",
   "(",
   ")",
   ",",
   "src2",
   ".",
   "getMaxX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "y2",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "src1",
   ".",
   "getMaxY",
   "(",
   ")",
   ",",
   "src2",
   ".",
   "getMaxY",
   "(",
   ")",
   ")",
   ";",
   "dest",
   ".",
   "setRect",
   "(",
   "x1",
   ",",
   "y1",
   ",",
   "x2",
   "-",
   "x1",
   ",",
   "y2",
   "-",
   "y1",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-215",
  "nl_tokens": [
   "Converts",
   "an",
   "absolute",
   "path",
   "into",
   "a",
   "relative",
   "one",
   "."
  ],
  "pl_tokens": [
   "public",
   "String",
   "abs2rel",
   "(",
   "final",
   "String",
   "basePath",
   ",",
   "final",
   "String",
   "absPath",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isAbsolutePath",
   "(",
   "absPath",
   ")",
   ")",
   "{",
   "return",
   "absPath",
   ";",
   "}",
   "if",
   "(",
   "isWindowsDrive",
   "(",
   "absPath",
   ")",
   "&&",
   "isWindowsDrive",
   "(",
   "basePath",
   ")",
   "&&",
   "absPath",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   "!=",
   "basePath",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   ")",
   "{",
   "return",
   "absPath",
   ";",
   "}",
   "StringBuilder",
   "result",
   "=",
   "new",
   "StringBuilder",
   "(",
   ")",
   ";",
   "String",
   "[",
   "]",
   "baseParts",
   "=",
   "getParts",
   "(",
   "basePath",
   ")",
   ";",
   "String",
   "[",
   "]",
   "absParts",
   "=",
   "getParts",
   "(",
   "absPath",
   ")",
   ";",
   "// extract common prefix",
   "int",
   "start",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "baseParts",
   ".",
   "length",
   ",",
   "absParts",
   ".",
   "length",
   ")",
   ";",
   "++",
   "i",
   ")",
   "{",
   "if",
   "(",
   "baseParts",
   "[",
   "i",
   "]",
   ".",
   "equals",
   "(",
   "absParts",
   "[",
   "i",
   "]",
   ")",
   ")",
   "{",
   "start",
   "=",
   "i",
   "+",
   "1",
   ";",
   "}",
   "}",
   "for",
   "(",
   "int",
   "i",
   "=",
   "start",
   ";",
   "i",
   "<",
   "baseParts",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "if",
   "(",
   "result",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "result",
   ".",
   "append",
   "(",
   "File",
   ".",
   "separator",
   ")",
   ";",
   "}",
   "result",
   ".",
   "append",
   "(",
   "\"..\"",
   ")",
   ";",
   "}",
   "for",
   "(",
   "int",
   "i",
   "=",
   "start",
   ";",
   "i",
   "<",
   "absParts",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "if",
   "(",
   "result",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "result",
   ".",
   "append",
   "(",
   "File",
   ".",
   "separator",
   ")",
   ";",
   "}",
   "result",
   ".",
   "append",
   "(",
   "absParts",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "return",
   "result",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-216",
  "nl_tokens": [
   "Read",
   "the",
   "next",
   "nb",
   "bits",
   "and",
   "return",
   "an",
   "Unsigned",
   "Long",
   "."
  ],
  "pl_tokens": [
   "public",
   "long",
   "bits2UInt",
   "(",
   "int",
   "nb",
   ")",
   "throws",
   "IOException",
   "{",
   "assert",
   "nb",
   "<=",
   "64",
   ";",
   "assert",
   "nb",
   ">=",
   "0",
   ";",
   "long",
   "result",
   "=",
   "0",
   ";",
   "int",
   "bitsLeft",
   "=",
   "nb",
   ";",
   "while",
   "(",
   "bitsLeft",
   ">",
   "0",
   ")",
   "{",
   "// we ran out of bits - fetch the next byte...\r",
   "if",
   "(",
   "bitPos",
   "==",
   "0",
   ")",
   "{",
   "bitBuf",
   "=",
   "nextByte",
   "(",
   ")",
   ";",
   "bitPos",
   "=",
   "BIT_LENGTH",
   ";",
   "}",
   "// -- retrieve bit from current byte ----------\r",
   "// how many bits to read from the current byte\r",
   "int",
   "size",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "bitsLeft",
   ",",
   "bitPos",
   ")",
   ";",
   "// move my part to start\r",
   "int",
   "myBits",
   "=",
   "bitBuf",
   ">>",
   "(",
   "bitPos",
   "-",
   "size",
   ")",
   ";",
   "// mask-off sign-extending\r",
   "myBits",
   "&=",
   "BYTE_BITMASK",
   ";",
   "// mask-off bits of next value\r",
   "myBits",
   "&=",
   "~",
   "(",
   "BYTE_BITMASK",
   "<<",
   "size",
   ")",
   ";",
   "// -- put bit to result ----------------------\r",
   "// where to place myBits inside of result\r",
   "int",
   "shift",
   "=",
   "bitsLeft",
   "-",
   "size",
   ";",
   "assert",
   "shift",
   ">=",
   "0",
   ";",
   "// put it there\r",
   "result",
   "|=",
   "myBits",
   "<<",
   "shift",
   ";",
   "// -- put bit to result ----------------------\r",
   "// update information on what we consumed\r",
   "bitsLeft",
   "-=",
   "size",
   ";",
   "bitPos",
   "-=",
   "size",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-217",
  "nl_tokens": [
   "deal",
   "with",
   "having",
   "components",
   "on",
   "more",
   "than",
   "one",
   "line"
  ],
  "pl_tokens": [
   "public",
   "Dimension",
   "preferredLayoutSize",
   "(",
   "Container",
   "target",
   ")",
   "{",
   "synchronized",
   "(",
   "target",
   ".",
   "getTreeLock",
   "(",
   ")",
   ")",
   "{",
   "Dimension",
   "dim",
   "=",
   "new",
   "Dimension",
   "(",
   "0",
   ",",
   "0",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "target",
   ".",
   "getComponentCount",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Component",
   "m",
   "=",
   "target",
   ".",
   "getComponent",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "m",
   ".",
   "isVisible",
   "(",
   ")",
   ")",
   "{",
   "Dimension",
   "d",
   "=",
   "m",
   ".",
   "getPreferredSize",
   "(",
   ")",
   ";",
   "// original",
   "// dim.height = Math.max(dim.height, d.height);",
   "//if (i > 0) { dim.width += hgap; }",
   "// dim.width += d.width;",
   "// new  way",
   "Point",
   "p",
   "=",
   "m",
   ".",
   "getLocation",
   "(",
   ")",
   ";",
   "dim",
   ".",
   "width",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dim",
   ".",
   "width",
   ",",
   "p",
   ".",
   "x",
   "+",
   "d",
   ".",
   "width",
   ")",
   ";",
   "dim",
   ".",
   "height",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "dim",
   ".",
   "height",
   ",",
   "p",
   ".",
   "y",
   "+",
   "d",
   ".",
   "height",
   ")",
   ";",
   "}",
   "}",
   "Insets",
   "insets",
   "=",
   "target",
   ".",
   "getInsets",
   "(",
   ")",
   ";",
   "dim",
   ".",
   "width",
   "+=",
   "insets",
   ".",
   "left",
   "+",
   "insets",
   ".",
   "right",
   "+",
   "getHgap",
   "(",
   ")",
   "*",
   "2",
   ";",
   "dim",
   ".",
   "height",
   "+=",
   "insets",
   ".",
   "top",
   "+",
   "insets",
   ".",
   "bottom",
   "+",
   "getVgap",
   "(",
   ")",
   "*",
   "2",
   ";",
   "return",
   "dim",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-218",
  "nl_tokens": [
   "----------------------------------------------------------------",
   "valid"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "boolean",
   "isValid",
   "(",
   "final",
   "ValidationConstraintContext",
   "vcc",
   ",",
   "final",
   "Object",
   "value",
   ")",
   "{",
   "return",
   "validate",
   "(",
   "value",
   ",",
   "<mask>",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-219",
  "nl_tokens": [
   "Jump",
   "some",
   "characters",
   "reading",
   "from",
   "an",
   "offset",
   "of",
   "a",
   "String",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "jump",
   "(",
   "final",
   "CharSequence",
   "iText",
   ",",
   "int",
   "iCurrentPosition",
   ",",
   "final",
   "int",
   "iMaxPosition",
   ",",
   "final",
   "String",
   "iJumpChars",
   ")",
   "{",
   "if",
   "(",
   "iCurrentPosition",
   "<",
   "0",
   ")",
   "return",
   "-",
   "1",
   ";",
   "final",
   "int",
   "size",
   "=",
   "iMaxPosition",
   ">",
   "-",
   "1",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "iMaxPosition",
   ",",
   "iText",
   ".",
   "length",
   "(",
   ")",
   ")",
   ":",
   "iText",
   ".",
   "length",
   "(",
   ")",
   ";",
   "final",
   "int",
   "jumpCharSize",
   "=",
   "iJumpChars",
   ".",
   "length",
   "(",
   ")",
   ";",
   "boolean",
   "found",
   "=",
   "true",
   ";",
   "char",
   "c",
   ";",
   "for",
   "(",
   ";",
   "iCurrentPosition",
   "<",
   "size",
   ";",
   "++",
   "iCurrentPosition",
   ")",
   "{",
   "found",
   "=",
   "false",
   ";",
   "c",
   "=",
   "iText",
   ".",
   "charAt",
   "(",
   "iCurrentPosition",
   ")",
   ";",
   "for",
   "(",
   "int",
   "jumpIndex",
   "=",
   "0",
   ";",
   "jumpIndex",
   "<",
   "jumpCharSize",
   ";",
   "++",
   "jumpIndex",
   ")",
   "{",
   "if",
   "(",
   "iJumpChars",
   ".",
   "charAt",
   "(",
   "jumpIndex",
   ")",
   "==",
   "c",
   ")",
   "{",
   "found",
   "=",
   "true",
   ";",
   "break",
   ";",
   "}",
   "}",
   "if",
   "(",
   "!",
   "found",
   ")",
   "break",
   ";",
   "}",
   "return",
   "iCurrentPosition",
   ">=",
   "size",
   "?",
   "-",
   "1",
   ":",
   "iCurrentPosition",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-220",
  "nl_tokens": [
   "Given",
   "a",
   "URL",
   "check",
   "if",
   "its",
   "a",
   "jar",
   "url",
   "(",
   "jar",
   ":",
   "<url",
   ">",
   "!",
   "/",
   "archive",
   ")",
   "and",
   "if",
   "it",
   "is",
   "extract",
   "the",
   "archive",
   "entry",
   "into",
   "the",
   "given",
   "dest",
   "directory",
   "and",
   "return",
   "a",
   "file",
   "URL",
   "to",
   "its",
   "location",
   ".",
   "If",
   "jarURL",
   "is",
   "not",
   "a",
   "jar",
   "url",
   "then",
   "it",
   "is",
   "simply",
   "returned",
   "as",
   "the",
   "URL",
   "for",
   "the",
   "jar",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "URL",
   "extractNestedJar",
   "(",
   "URL",
   "jarURL",
   ",",
   "File",
   "dest",
   ")",
   "throws",
   "IOException",
   "{",
   "// This may not be a jar URL so validate the protocol ",
   "if",
   "(",
   "jarURL",
   ".",
   "getProtocol",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "\"jar\"",
   ")",
   "==",
   "false",
   ")",
   "return",
   "jarURL",
   ";",
   "String",
   "destPath",
   "=",
   "dest",
   ".",
   "getAbsolutePath",
   "(",
   ")",
   ";",
   "URLConnection",
   "urlConn",
   "=",
   "jarURL",
   ".",
   "openConnection",
   "(",
   ")",
   ";",
   "JarURLConnection",
   "jarConn",
   "=",
   "(",
   "JarURLConnection",
   ")",
   "urlConn",
   ";",
   "// Extract the archive to dest/jarName-contents/archive",
   "String",
   "parentArchiveName",
   "=",
   "jarConn",
   ".",
   "getJarFile",
   "(",
   ")",
   ".",
   "getName",
   "(",
   ")",
   ";",
   "// Find the longest common prefix between destPath and parentArchiveName",
   "int",
   "length",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "destPath",
   ".",
   "length",
   "(",
   ")",
   ",",
   "parentArchiveName",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "int",
   "n",
   "=",
   "0",
   ";",
   "while",
   "(",
   "n",
   "<",
   "length",
   ")",
   "{",
   "char",
   "a",
   "=",
   "destPath",
   ".",
   "charAt",
   "(",
   "n",
   ")",
   ";",
   "char",
   "b",
   "=",
   "parentArchiveName",
   ".",
   "charAt",
   "(",
   "n",
   ")",
   ";",
   "if",
   "(",
   "a",
   "!=",
   "b",
   ")",
   "break",
   ";",
   "n",
   "++",
   ";",
   "}",
   "// Remove any common prefix from parentArchiveName",
   "parentArchiveName",
   "=",
   "parentArchiveName",
   ".",
   "substring",
   "(",
   "n",
   ")",
   ";",
   "File",
   "archiveDir",
   "=",
   "new",
   "File",
   "(",
   "dest",
   ",",
   "parentArchiveName",
   "+",
   "\"-contents\"",
   ")",
   ";",
   "if",
   "(",
   "archiveDir",
   ".",
   "exists",
   "(",
   ")",
   "==",
   "false",
   "&&",
   "archiveDir",
   ".",
   "mkdirs",
   "(",
   ")",
   "==",
   "false",
   ")",
   "throw",
   "new",
   "IOException",
   "(",
   "\"Failed to create contents directory for archive, path=\"",
   "+",
   "archiveDir",
   ".",
   "getAbsolutePath",
   "(",
   ")",
   ")",
   ";",
   "String",
   "archiveName",
   "=",
   "jarConn",
   ".",
   "getEntryName",
   "(",
   ")",
   ";",
   "File",
   "archiveFile",
   "=",
   "new",
   "File",
   "(",
   "archiveDir",
   ",",
   "archiveName",
   ")",
   ";",
   "File",
   "archiveParentDir",
   "=",
   "archiveFile",
   ".",
   "getParentFile",
   "(",
   ")",
   ";",
   "if",
   "(",
   "archiveParentDir",
   ".",
   "exists",
   "(",
   ")",
   "==",
   "false",
   "&&",
   "archiveParentDir",
   ".",
   "mkdirs",
   "(",
   ")",
   "==",
   "false",
   ")",
   "throw",
   "new",
   "IOException",
   "(",
   "\"Failed to create parent directory for archive, path=\"",
   "+",
   "archiveParentDir",
   ".",
   "getAbsolutePath",
   "(",
   ")",
   ")",
   ";",
   "InputStream",
   "archiveIS",
   "=",
   "jarConn",
   ".",
   "getInputStream",
   "(",
   ")",
   ";",
   "FileOutputStream",
   "fos",
   "=",
   "new",
   "FileOutputStream",
   "(",
   "archiveFile",
   ")",
   ";",
   "BufferedOutputStream",
   "bos",
   "=",
   "new",
   "BufferedOutputStream",
   "(",
   "fos",
   ")",
   ";",
   "byte",
   "[",
   "]",
   "buffer",
   "=",
   "new",
   "byte",
   "[",
   "4096",
   "]",
   ";",
   "int",
   "read",
   ";",
   "while",
   "(",
   "(",
   "read",
   "=",
   "archiveIS",
   ".",
   "read",
   "(",
   "buffer",
   ")",
   ")",
   ">",
   "0",
   ")",
   "{",
   "bos",
   ".",
   "write",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "read",
   ")",
   ";",
   "}",
   "archiveIS",
   ".",
   "close",
   "(",
   ")",
   ";",
   "bos",
   ".",
   "close",
   "(",
   ")",
   ";",
   "// Return the file url to the extracted jar",
   "return",
   "archiveFile",
   ".",
   "toURL",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-221",
  "nl_tokens": [
   "Check",
   "if",
   "the",
   "given",
   "point",
   "is",
   "contained",
   "in",
   "already",
   "drawn",
   "object"
  ],
  "pl_tokens": [
   "public",
   "Object",
   "findIntersection",
   "(",
   "Point2D",
   "p",
   ")",
   "{",
   "int",
   "indexX",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "p",
   ".",
   "getX",
   "(",
   ")",
   "-",
   "offsetX",
   ")",
   "/",
   "gridWidth",
   ")",
   ";",
   "int",
   "indexY",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "p",
   ".",
   "getY",
   "(",
   ")",
   "-",
   "offsetY",
   ")",
   "/",
   "gridHeight",
   ")",
   ";",
   "// outside box",
   "if",
   "(",
   "(",
   "indexX",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexX",
   ">=",
   "countX",
   ")",
   "||",
   "(",
   "indexY",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexY",
   ">=",
   "countY",
   ")",
   ")",
   "return",
   "null",
   ";",
   "// check the surrounding points",
   "for",
   "(",
   "int",
   "y",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "indexY",
   "-",
   "1",
   ")",
   ";",
   "y",
   "<=",
   "Math",
   ".",
   "min",
   "(",
   "countY",
   "-",
   "1",
   ",",
   "indexY",
   "+",
   "1",
   ")",
   ";",
   "y",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "indexX",
   "-",
   "1",
   ")",
   ";",
   "x",
   "<=",
   "Math",
   ".",
   "min",
   "(",
   "countX",
   "-",
   "1",
   ",",
   "indexX",
   "+",
   "1",
   ")",
   ";",
   "x",
   "++",
   ")",
   "{",
   "GridCell",
   "gtest",
   "=",
   "gridArray",
   "[",
   "y",
   "]",
   "[",
   "x",
   "]",
   ";",
   "if",
   "(",
   "!",
   "gtest",
   ".",
   "used",
   ")",
   "continue",
   ";",
   "if",
   "(",
   "gtest",
   ".",
   "objectBB",
   ".",
   "contains",
   "(",
   "p",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "p",
   ".",
   "getY",
   "(",
   ")",
   ")",
   ")",
   "return",
   "gtest",
   ".",
   "o",
   ";",
   "}",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-222",
  "nl_tokens": [
   "Create",
   "or",
   "retrieve",
   "from",
   "cache",
   "an",
   "icon",
   "bitmap",
   "for",
   "the",
   "icon",
   "row"
  ],
  "pl_tokens": [
   "public",
   "static",
   "Bitmap",
   "createIcon",
   "(",
   "IconRow",
   "icon",
   ",",
   "float",
   "density",
   ",",
   "IconCache",
   "iconCache",
   ")",
   "{",
   "Bitmap",
   "iconImage",
   "=",
   "null",
   ";",
   "if",
   "(",
   "icon",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "iconCache",
   "!=",
   "null",
   ")",
   "{",
   "iconImage",
   "=",
   "iconCache",
   ".",
   "get",
   "(",
   "icon",
   ".",
   "getId",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "iconImage",
   "==",
   "null",
   ")",
   "{",
   "BitmapFactory",
   ".",
   "Options",
   "options",
   "=",
   "icon",
   ".",
   "getDataBounds",
   "(",
   ")",
   ";",
   "int",
   "dataWidth",
   "=",
   "options",
   ".",
   "outWidth",
   ";",
   "int",
   "dataHeight",
   "=",
   "options",
   ".",
   "outHeight",
   ";",
   "double",
   "styleWidth",
   "=",
   "dataWidth",
   ";",
   "double",
   "styleHeight",
   "=",
   "dataHeight",
   ";",
   "double",
   "widthDensity",
   "=",
   "DisplayMetrics",
   ".",
   "DENSITY_DEFAULT",
   ";",
   "double",
   "heightDensity",
   "=",
   "DisplayMetrics",
   ".",
   "DENSITY_DEFAULT",
   ";",
   "if",
   "(",
   "icon",
   ".",
   "getWidth",
   "(",
   ")",
   "!=",
   "null",
   ")",
   "{",
   "styleWidth",
   "=",
   "icon",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "double",
   "widthRatio",
   "=",
   "dataWidth",
   "/",
   "styleWidth",
   ";",
   "widthDensity",
   "*=",
   "widthRatio",
   ";",
   "if",
   "(",
   "icon",
   ".",
   "getHeight",
   "(",
   ")",
   "==",
   "null",
   ")",
   "{",
   "heightDensity",
   "=",
   "widthDensity",
   ";",
   "}",
   "}",
   "if",
   "(",
   "icon",
   ".",
   "getHeight",
   "(",
   ")",
   "!=",
   "null",
   ")",
   "{",
   "styleHeight",
   "=",
   "icon",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "double",
   "heightRatio",
   "=",
   "dataHeight",
   "/",
   "styleHeight",
   ";",
   "heightDensity",
   "*=",
   "heightRatio",
   ";",
   "if",
   "(",
   "icon",
   ".",
   "getWidth",
   "(",
   ")",
   "==",
   "null",
   ")",
   "{",
   "widthDensity",
   "=",
   "heightDensity",
   ";",
   "}",
   "}",
   "options",
   "=",
   "new",
   "BitmapFactory",
   ".",
   "Options",
   "(",
   ")",
   ";",
   "options",
   ".",
   "inDensity",
   "=",
   "(",
   "int",
   ")",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "widthDensity",
   ",",
   "heightDensity",
   ")",
   "+",
   "0.5f",
   ")",
   ";",
   "options",
   ".",
   "inTargetDensity",
   "=",
   "(",
   "int",
   ")",
   "(",
   "DisplayMetrics",
   ".",
   "DENSITY_DEFAULT",
   "*",
   "density",
   "+",
   "0.5f",
   ")",
   ";",
   "iconImage",
   "=",
   "icon",
   ".",
   "getDataBitmap",
   "(",
   "options",
   ")",
   ";",
   "if",
   "(",
   "widthDensity",
   "!=",
   "heightDensity",
   ")",
   "{",
   "int",
   "width",
   "=",
   "(",
   "int",
   ")",
   "(",
   "styleWidth",
   "*",
   "density",
   "+",
   "0.5f",
   ")",
   ";",
   "int",
   "height",
   "=",
   "(",
   "int",
   ")",
   "(",
   "styleHeight",
   "*",
   "density",
   "+",
   "0.5f",
   ")",
   ";",
   "if",
   "(",
   "width",
   "!=",
   "iconImage",
   ".",
   "getWidth",
   "(",
   ")",
   "||",
   "height",
   "!=",
   "iconImage",
   ".",
   "getHeight",
   "(",
   ")",
   ")",
   "{",
   "Bitmap",
   "scaledBitmap",
   "=",
   "Bitmap",
   ".",
   "createScaledBitmap",
   "(",
   "iconImage",
   ",",
   "width",
   ",",
   "height",
   ",",
   "false",
   ")",
   ";",
   "iconImage",
   ".",
   "recycle",
   "(",
   ")",
   ";",
   "iconImage",
   "=",
   "scaledBitmap",
   ";",
   "}",
   "}",
   "if",
   "(",
   "iconCache",
   "!=",
   "null",
   ")",
   "{",
   "iconCache",
   ".",
   "put",
   "(",
   "icon",
   ".",
   "getId",
   "(",
   ")",
   ",",
   "iconImage",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "iconImage",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-223",
  "nl_tokens": [
   "/",
   "*",
   "can",
   "return",
   "a",
   "smaller",
   "subset",
   "than",
   "requested",
   "because",
   "one",
   "axiom",
   "can",
   "be",
   "randomly",
   "picked",
   "more",
   "than",
   "once"
  ],
  "pl_tokens": [
   "protected",
   "Set",
   "<",
   "ElkAxiom",
   ">",
   "getRandomSubset",
   "(",
   "List",
   "<",
   "ElkAxiom",
   ">",
   "axioms",
   ",",
   "Random",
   "rnd",
   ")",
   "{",
   "int",
   "size",
   "=",
   "axiomsToChange",
   ">",
   "0",
   "?",
   "axiomsToChange",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "axioms",
   ".",
   "size",
   "(",
   ")",
   "/",
   "100",
   ")",
   ";",
   "Set",
   "<",
   "ElkAxiom",
   ">",
   "subset",
   "=",
   "new",
   "ArrayHashSet",
   "<",
   "ElkAxiom",
   ">",
   "(",
   "size",
   ")",
   ";",
   "if",
   "(",
   "size",
   ">=",
   "axioms",
   ".",
   "size",
   "(",
   ")",
   ")",
   "{",
   "subset",
   ".",
   "addAll",
   "(",
   "axioms",
   ")",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ElkAxiom",
   "axiom",
   "=",
   "axioms",
   ".",
   "get",
   "(",
   "rnd",
   ".",
   "nextInt",
   "(",
   "size",
   ")",
   ")",
   ";",
   "subset",
   ".",
   "add",
   "(",
   "axiom",
   ")",
   ";",
   "}",
   "}",
   "return",
   "subset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-224",
  "nl_tokens": [
   "Merge",
   "two",
   "profiles",
   "."
  ],
  "pl_tokens": [
   "public",
   "ImageApiProfile",
   "merge",
   "(",
   "ImageApiProfile",
   "other",
   ")",
   "{",
   "ImageApiProfile",
   "merged",
   "=",
   "new",
   "ImageApiProfile",
   "(",
   ")",
   ";",
   "streamNotNull",
   "(",
   "this",
   ".",
   "features",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addFeature",
   ")",
   ";",
   "streamNotNull",
   "(",
   "other",
   ".",
   "features",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addFeature",
   ")",
   ";",
   "streamNotNull",
   "(",
   "this",
   ".",
   "formats",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addFormat",
   ")",
   ";",
   "streamNotNull",
   "(",
   "other",
   ".",
   "formats",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addFormat",
   ")",
   ";",
   "streamNotNull",
   "(",
   "this",
   ".",
   "qualities",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addQuality",
   ")",
   ";",
   "streamNotNull",
   "(",
   "other",
   ".",
   "qualities",
   ")",
   ".",
   "forEach",
   "(",
   "merged",
   "::",
   "addQuality",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "maxWidth",
   "!=",
   "null",
   "&&",
   "other",
   ".",
   "maxWidth",
   "==",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxWidth",
   "=",
   "this",
   ".",
   "maxWidth",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxWidth",
   "==",
   "null",
   "&&",
   "other",
   ".",
   "maxWidth",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxWidth",
   "=",
   "other",
   ".",
   "maxWidth",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxWidth",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxWidth",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "maxWidth",
   ",",
   "other",
   ".",
   "maxWidth",
   ")",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "maxHeight",
   "!=",
   "null",
   "&&",
   "other",
   ".",
   "maxHeight",
   "==",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxHeight",
   "=",
   "this",
   ".",
   "maxHeight",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxHeight",
   "==",
   "null",
   "&&",
   "other",
   ".",
   "maxHeight",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxHeight",
   "=",
   "other",
   ".",
   "maxHeight",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxHeight",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxHeight",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "maxHeight",
   ",",
   "other",
   ".",
   "maxHeight",
   ")",
   ";",
   "}",
   "if",
   "(",
   "this",
   ".",
   "maxArea",
   "!=",
   "null",
   "&&",
   "other",
   ".",
   "maxArea",
   "==",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxArea",
   "=",
   "this",
   ".",
   "maxArea",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxArea",
   "==",
   "null",
   "&&",
   "other",
   ".",
   "maxArea",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxArea",
   "=",
   "other",
   ".",
   "maxArea",
   ";",
   "}",
   "else",
   "if",
   "(",
   "this",
   ".",
   "maxArea",
   "!=",
   "null",
   ")",
   "{",
   "merged",
   ".",
   "maxArea",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "maxArea",
   ",",
   "other",
   ".",
   "maxArea",
   ")",
   ";",
   "}",
   "return",
   "merged",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-225",
  "nl_tokens": [
   "Broadcast",
   "max",
   "op",
   ".",
   "See",
   ":",
   "{"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "x",
   ",",
   "INDArray",
   "y",
   ",",
   "INDArray",
   "z",
   ",",
   "int",
   "...",
   "dimensions",
   ")",
   "{",
   "if",
   "(",
   "dimensions",
   "==",
   "null",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "Arrays",
   ".",
   "equals",
   "(",
   "x",
   ".",
   "shape",
   "(",
   ")",
   ",",
   "y",
   ".",
   "shape",
   "(",
   ")",
   ")",
   ",",
   "getFormattedShapeErrorMessageXy",
   "(",
   "x",
   ",",
   "y",
   ")",
   ")",
   ";",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "Arrays",
   ".",
   "equals",
   "(",
   "x",
   ".",
   "shape",
   "(",
   ")",
   ",",
   "z",
   ".",
   "shape",
   "(",
   ")",
   ")",
   ",",
   "getFormattedShapeErrorMessageXResult",
   "(",
   "x",
   ",",
   "z",
   ")",
   ")",
   ";",
   "return",
   "Nd4j",
   ".",
   "getExecutioner",
   "(",
   ")",
   ".",
   "execAndReturn",
   "(",
   "new",
   "OldMax",
   "(",
   "x",
   ",",
   "y",
   ",",
   "z",
   ",",
   "x",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "Nd4j",
   ".",
   "getExecutioner",
   "(",
   ")",
   ".",
   "execAndReturn",
   "(",
   "new",
   "BroadcastMax",
   "(",
   "x",
   ",",
   "y",
   ",",
   "z",
   ",",
   "dimensions",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-226",
  "nl_tokens": [
   "Resolve",
   "the",
   "request",
   "to",
   "dimensions",
   "that",
   "can",
   "be",
   "used",
   "for",
   "scaling",
   "based",
   "on",
   "the",
   "native",
   "size",
   "of",
   "the",
   "image",
   "region",
   "and",
   "the",
   "available",
   "profile",
   "."
  ],
  "pl_tokens": [
   "public",
   "Dimension",
   "resolve",
   "(",
   "Dimension",
   "nativeSize",
   ",",
   "List",
   "<",
   "Dimension",
   ">",
   "availableSizes",
   ",",
   "ImageApiProfile",
   "profile",
   ")",
   "throws",
   "ResolvingException",
   "{",
   "double",
   "aspect",
   "=",
   "(",
   "double",
   ")",
   "nativeSize",
   ".",
   "width",
   "/",
   "(",
   "double",
   ")",
   "nativeSize",
   ".",
   "height",
   ";",
   "// \"max\"",
   "if",
   "(",
   "<mask>",
   ")",
   "{",
   "// By default, identical to the largest available size or the native size if no sizes were specified",
   "Dimension",
   "dim",
   "=",
   "availableSizes",
   ".",
   "stream",
   "(",
   ")",
   "// Avoid upscaling when dealing with region requests",
   ".",
   "filter",
   "(",
   "s",
   "->",
   "s",
   ".",
   "width",
   "<=",
   "nativeSize",
   ".",
   "width",
   "&&",
   "s",
   ".",
   "height",
   "<=",
   "nativeSize",
   ".",
   "height",
   ")",
   "// Select the largest available size",
   ".",
   "max",
   "(",
   "Comparator",
   ".",
   "comparing",
   "(",
   "Dimension",
   "::",
   "getWidth",
   ")",
   ".",
   "thenComparing",
   "(",
   "Dimension",
   "::",
   "getHeight",
   ")",
   ")",
   "// Otherwise, fall back to the native size",
   ".",
   "orElse",
   "(",
   "new",
   "Dimension",
   "(",
   "nativeSize",
   ".",
   "width",
   ",",
   "nativeSize",
   ".",
   "height",
   ")",
   ")",
   ";",
   "if",
   "(",
   "profile",
   "!=",
   "null",
   "&&",
   "profile",
   ".",
   "maxWidth",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "dim",
   ".",
   "width",
   ">",
   "profile",
   ".",
   "maxWidth",
   ")",
   "{",
   "// If maximum width is set, width cannot exceed it",
   "dim",
   ".",
   "width",
   "=",
   "profile",
   ".",
   "maxWidth",
   ";",
   "dim",
   ".",
   "height",
   "=",
   "(",
   "int",
   ")",
   "(",
   "profile",
   ".",
   "maxWidth",
   "/",
   "aspect",
   ")",
   ";",
   "}",
   "int",
   "maxHeight",
   "=",
   "profile",
   ".",
   "maxHeight",
   "!=",
   "null",
   "?",
   "profile",
   ".",
   "maxHeight",
   ":",
   "profile",
   ".",
   "maxWidth",
   ";",
   "if",
   "(",
   "dim",
   ".",
   "height",
   ">",
   "maxHeight",
   ")",
   "{",
   "// Adjust height if it exceeds maximum height",
   "dim",
   ".",
   "height",
   "=",
   "maxHeight",
   ";",
   "dim",
   ".",
   "width",
   "=",
   "(",
   "int",
   ")",
   "(",
   "aspect",
   "*",
   "dim",
   ".",
   "height",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "profile",
   "!=",
   "null",
   "&&",
   "profile",
   ".",
   "maxArea",
   "!=",
   "null",
   ")",
   "{",
   "// Fit width and height into the maximum available area, preserving the aspect ratio",
   "long",
   "currentArea",
   "=",
   "(",
   "long",
   ")",
   "dim",
   ".",
   "width",
   "*",
   "(",
   "long",
   ")",
   "dim",
   ".",
   "height",
   ";",
   "if",
   "(",
   "currentArea",
   ">",
   "profile",
   ".",
   "maxArea",
   ")",
   "{",
   "dim",
   ".",
   "width",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "sqrt",
   "(",
   "aspect",
   "*",
   "(",
   "double",
   ")",
   "profile",
   ".",
   "maxArea",
   ")",
   ";",
   "dim",
   ".",
   "height",
   "=",
   "(",
   "int",
   ")",
   "(",
   "dim",
   ".",
   "width",
   "/",
   "aspect",
   ")",
   ";",
   "if",
   "(",
   "dim",
   ".",
   "width",
   "<=",
   "0",
   "||",
   "dim",
   ".",
   "height",
   "<=",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "ResolvingException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Cannot fit image with dimensions %dx%d into maximum area of %d pixels.\"",
   ",",
   "nativeSize",
   ".",
   "width",
   ",",
   "nativeSize",
   ".",
   "height",
   ",",
   "profile",
   ".",
   "maxArea",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "dim",
   ";",
   "}",
   "Dimension",
   "out",
   ";",
   "if",
   "(",
   "percentage",
   "!=",
   "null",
   "||",
   "bestFit",
   ")",
   "{",
   "// \"pct:\"",
   "double",
   "ratio",
   ";",
   "if",
   "(",
   "percentage",
   "!=",
   "null",
   ")",
   "{",
   "ratio",
   "=",
   "percentage",
   ".",
   "doubleValue",
   "(",
   ")",
   "/",
   "100.0",
   ";",
   "}",
   "else",
   "{",
   "ratio",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "width",
   "/",
   "nativeSize",
   ".",
   "getWidth",
   "(",
   ")",
   ",",
   "height",
   "/",
   "nativeSize",
   ".",
   "getHeight",
   "(",
   ")",
   ")",
   ";",
   "}",
   "out",
   "=",
   "new",
   "Dimension",
   "(",
   "(",
   "int",
   ")",
   "(",
   "ratio",
   "*",
   "nativeSize",
   ".",
   "width",
   ")",
   ",",
   "(",
   "int",
   ")",
   "(",
   "ratio",
   "*",
   "nativeSize",
   ".",
   "height",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "width",
   "==",
   "null",
   "&&",
   "height",
   "==",
   "null",
   ")",
   "{",
   "// \"full\"",
   "out",
   "=",
   "nativeSize",
   ";",
   "}",
   "else",
   "{",
   "out",
   "=",
   "new",
   "Dimension",
   "(",
   ")",
   ";",
   "if",
   "(",
   "width",
   "!=",
   "null",
   ")",
   "{",
   "out",
   ".",
   "width",
   "=",
   "width",
   ";",
   "}",
   "if",
   "(",
   "height",
   "!=",
   "null",
   ")",
   "{",
   "out",
   ".",
   "height",
   "=",
   "height",
   ";",
   "}",
   "if",
   "(",
   "width",
   "==",
   "null",
   ")",
   "{",
   "// \",h\"",
   "out",
   ".",
   "width",
   "=",
   "(",
   "int",
   ")",
   "(",
   "out",
   ".",
   "height",
   "*",
   "aspect",
   ")",
   ";",
   "}",
   "if",
   "(",
   "height",
   "==",
   "null",
   ")",
   "{",
   "// \"w,\"",
   "out",
   ".",
   "height",
   "=",
   "(",
   "int",
   ")",
   "(",
   "out",
   ".",
   "width",
   "/",
   "aspect",
   ")",
   ";",
   "}",
   "}",
   "Integer",
   "maxHeight",
   "=",
   "profile",
   ".",
   "maxHeight",
   "!=",
   "null",
   "?",
   "profile",
   ".",
   "maxHeight",
   ":",
   "profile",
   ".",
   "maxWidth",
   ";",
   "if",
   "(",
   "profile",
   ".",
   "maxWidth",
   "!=",
   "null",
   "&&",
   "out",
   ".",
   "width",
   ">",
   "profile",
   ".",
   "maxWidth",
   ")",
   "{",
   "throw",
   "new",
   "ResolvingException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Requested width (%d) exceeds maximum width (%d) as specified in the profile.\"",
   ",",
   "out",
   ".",
   "width",
   ",",
   "profile",
   ".",
   "maxWidth",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "maxHeight",
   "!=",
   "null",
   "&&",
   "out",
   ".",
   "height",
   ">",
   "maxHeight",
   ")",
   "{",
   "throw",
   "new",
   "ResolvingException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Requested height (%d) exceeds maximum height (%d) as specified in the profile.\"",
   ",",
   "out",
   ".",
   "height",
   ",",
   "maxHeight",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "profile",
   ".",
   "maxArea",
   "!=",
   "null",
   "&&",
   "out",
   ".",
   "height",
   "*",
   "out",
   ".",
   "width",
   ">",
   "profile",
   ".",
   "maxArea",
   ")",
   "{",
   "throw",
   "new",
   "ResolvingException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Requested area (%d*%d = %d) exceeds maximum area (%d) as specified in the profile\"",
   ",",
   "out",
   ".",
   "width",
   ",",
   "out",
   ".",
   "height",
   ",",
   "out",
   ".",
   "width",
   "*",
   "out",
   ".",
   "height",
   ",",
   "profile",
   ".",
   "maxArea",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "profile",
   ".",
   "features",
   "==",
   "null",
   "||",
   "!",
   "profile",
   ".",
   "features",
   ".",
   "contains",
   "(",
   "ImageApiProfile",
   ".",
   "Feature",
   ".",
   "SIZE_ABOVE_FULL",
   ")",
   ")",
   "&&",
   "(",
   "out",
   ".",
   "width",
   ">",
   "nativeSize",
   ".",
   "width",
   "||",
   "out",
   ".",
   "height",
   ">",
   "nativeSize",
   ".",
   "height",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "ResolvingException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Requested dimensions (%dx%d) exceed native dimensions (%dx%d), profile states that upscaling is not supported.\"",
   ",",
   "out",
   ".",
   "width",
   ",",
   "out",
   ".",
   "height",
   ",",
   "nativeSize",
   ".",
   "width",
   ",",
   "nativeSize",
   ".",
   "height",
   ")",
   ")",
   ";",
   "}",
   "return",
   "out",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-227",
  "nl_tokens": [
   "\u83b7\u53d6\u6700\u63a5\u8fd1digit\u4f4d\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6570\uff08\u4e00\u5b9a\u5927\u4e8edigit\u4f4d\u7684\u6570\u5b57\uff09\u7684\u5927\u5c0f",
   "\u4f8b\u5982\uff0c\u5982\u679cdigit\u4e3a6\uff0c\u90a3\u4e48\u8868\u793a999999\u6700\u63a5\u8fd1\u7684\u4e8c\u8fdb\u5236\u6570\u5b57\u4e3a1048576",
   "(",
   "2\u768420\u6b21\u65b9",
   ")",
   "\uff0c\u7ed3\u679c\u8fd4\u56de20",
   "<br",
   ">",
   "2014",
   "-",
   "1",
   "-",
   "21",
   "\u4e0b\u53485",
   ":",
   "27",
   ":",
   "53"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "minApproach",
   "(",
   "int",
   "digit",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "(",
   "int",
   ")",
   "(",
   "Math",
   ".",
   "pow",
   "(",
   "10",
   ",",
   "digit",
   ")",
   "-",
   "1",
   ")",
   ";",
   "//\tSystem.out.println(max);",
   "int",
   "i",
   "=",
   "0",
   ";",
   "while",
   "(",
   "max",
   ">",
   "0",
   ")",
   "{",
   "max",
   ">>=",
   "1",
   ";",
   "i",
   "++",
   ";",
   "}",
   "//\tint k = 1 << i;",
   "//\tSystem.out.println(k);",
   "//\tSystem.out.println(i);",
   "return",
   "i",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-228",
  "nl_tokens": [
   "Get",
   "an",
   "array",
   "of",
   "arguments",
   "suitable",
   "for",
   "a",
   "method",
   "invocation",
   ".",
   "This",
   "method",
   "did",
   "its",
   "best",
   "to",
   "fill",
   "the",
   "arguments",
   "array",
   ".",
   "The",
   "logic",
   "is",
   "simple",
   ":",
   "ignore",
   "query",
   "extra",
   "parameters",
   "and",
   "set",
   "to",
   "null",
   "the",
   "missing",
   "ones",
   ".",
   "Both",
   "cases",
   "are",
   "recorded",
   "to",
   "debug",
   "log",
   ".",
   "Returned",
   "arguments",
   "array",
   "has",
   "the",
   "same",
   "size",
   "as",
   "requested",
   "formal",
   "parameters",
   "array",
   ".",
   "<p",
   ">",
   "Parameter",
   "values",
   "from",
   "parsed",
   "{",
   "@link",
   "#parameters",
   "}",
   "are",
   "converted",
   "to",
   "requested",
   "type",
   "using",
   "{",
   "@link",
   "#asObject",
   "(",
   "String",
   "Type",
   ")",
   "}",
   "utility",
   "method",
   ".",
   "If",
   "formal",
   "parameters",
   "has",
   "a",
   "single",
   "type",
   "that",
   "has",
   "no",
   "converter",
   "uses",
   "reflection",
   "to",
   "map",
   "query",
   "parameters",
   "to",
   "object",
   "field",
   "by",
   "name",
   ".",
   "<p",
   ">",
   "Note",
   "that",
   "because",
   "parameter",
   "names",
   "are",
   "not",
   "preserved",
   "on",
   "run",
   "-",
   "time",
   "query",
   "parameters",
   "are",
   "mapped",
   "by",
   "position",
   "to",
   "invocation",
   "arguments",
   ".",
   "This",
   "means",
   "is",
   "caller",
   "responsibility",
   "to",
   "match",
   "formal",
   "parameters",
   "order",
   "and",
   "type",
   "with",
   "actual",
   "query",
   "string",
   "parameters",
   "."
  ],
  "pl_tokens": [
   "public",
   "Object",
   "[",
   "]",
   "getArguments",
   "(",
   "Type",
   "[",
   "]",
   "formalParameters",
   ")",
   "{",
   "if",
   "(",
   "formalParameters",
   ".",
   "length",
   "==",
   "0",
   ")",
   "{",
   "return",
   "new",
   "Object",
   "[",
   "0",
   "]",
   ";",
   "}",
   "Object",
   "[",
   "]",
   "arguments",
   "=",
   "new",
   "Object",
   "[",
   "formalParameters",
   ".",
   "length",
   "]",
   ";",
   "if",
   "(",
   "isObject",
   "(",
   "formalParameters",
   ")",
   ")",
   "{",
   "// if there is single formal parameter and it is not a value type create object instance and initialize fields from\r",
   "// request parameters; object class should have no arguments constructor\r",
   "Class",
   "<",
   "?",
   ">",
   "type",
   "=",
   "(",
   "Class",
   "<",
   "?",
   ">",
   ")",
   "formalParameters",
   "[",
   "0",
   "]",
   ";",
   "Object",
   "object",
   "=",
   "Classes",
   ".",
   "newInstance",
   "(",
   "type",
   ")",
   ";",
   "for",
   "(",
   "Parameter",
   "parameter",
   ":",
   "parameters",
   ")",
   "{",
   "Field",
   "field",
   "=",
   "Classes",
   ".",
   "getField",
   "(",
   "type",
   ",",
   "Strings",
   ".",
   "toMemberName",
   "(",
   "parameter",
   ".",
   "getName",
   "(",
   ")",
   ")",
   ")",
   ";",
   "Classes",
   ".",
   "setFieldValue",
   "(",
   "object",
   ",",
   "field",
   ",",
   "asObject",
   "(",
   "parameter",
   ".",
   "getValue",
   "(",
   ")",
   ",",
   "field",
   ".",
   "getType",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "new",
   "Object",
   "[",
   "]",
   "{",
   "object",
   "}",
   ";",
   "}",
   "int",
   "i",
   "=",
   "0",
   ",",
   "argumentsCount",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "formalParameters",
   ".",
   "length",
   ",",
   "parameters",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "argumentsCount",
   ";",
   "++",
   "i",
   ")",
   "{",
   "arguments",
   "[",
   "i",
   "]",
   "=",
   "asObject",
   "(",
   "parameters",
   ".",
   "get",
   "(",
   "i",
   ")",
   ".",
   "getValue",
   "(",
   ")",
   ",",
   "formalParameters",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "for",
   "(",
   ";",
   "i",
   "<",
   "formalParameters",
   ".",
   "length",
   ";",
   "++",
   "i",
   ")",
   "{",
   "log",
   ".",
   "debug",
   "(",
   "\"Missing request parameter |%s|. Set it to null.\"",
   ",",
   "i",
   ",",
   "formalParameters",
   "[",
   "i",
   "]",
   ")",
   ";",
   "arguments",
   "[",
   "i",
   "]",
   "=",
   "null",
   ";",
   "}",
   "for",
   "(",
   ";",
   "i",
   "<",
   "parameters",
   ".",
   "size",
   "(",
   ")",
   ";",
   "++",
   "i",
   ")",
   "{",
   "log",
   ".",
   "debug",
   "(",
   "\"Unused request parameter |%s|. Ignore it.\"",
   ",",
   "parameters",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "return",
   "arguments",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-229",
  "nl_tokens": [
   "Interleaves",
   "audio",
   "samples",
   "in",
   "ins",
   "into",
   "outb",
   "using",
   "sample",
   "size",
   "from",
   "the",
   "format"
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "interleave",
   "(",
   "AudioFormat",
   "format",
   ",",
   "ByteBuffer",
   "[",
   "]",
   "ins",
   ",",
   "ByteBuffer",
   "outb",
   ")",
   "{",
   "int",
   "bytesPerSample",
   "=",
   "format",
   ".",
   "getSampleSizeInBits",
   "(",
   ")",
   ">>",
   "3",
   ";",
   "int",
   "bytesPerFrame",
   "=",
   "bytesPerSample",
   "*",
   "ins",
   ".",
   "length",
   ";",
   "int",
   "<mask>",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "ins",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "if",
   "(",
   "ins",
   "[",
   "i",
   "]",
   ".",
   "remaining",
   "(",
   ")",
   ">",
   "max",
   ")",
   "max",
   "=",
   "ins",
   "[",
   "i",
   "]",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "frames",
   "=",
   "0",
   ";",
   "frames",
   "<",
   "max",
   "&&",
   "outb",
   ".",
   "remaining",
   "(",
   ")",
   ">=",
   "bytesPerFrame",
   ";",
   "frames",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "ins",
   ".",
   "length",
   ";",
   "j",
   "++",
   ")",
   "{",
   "if",
   "(",
   "ins",
   "[",
   "j",
   "]",
   ".",
   "remaining",
   "(",
   ")",
   "<",
   "bytesPerSample",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "bytesPerSample",
   ";",
   "i",
   "++",
   ")",
   "outb",
   ".",
   "put",
   "(",
   "(",
   "byte",
   ")",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "bytesPerSample",
   ";",
   "i",
   "++",
   ")",
   "{",
   "outb",
   ".",
   "put",
   "(",
   "ins",
   "[",
   "j",
   "]",
   ".",
   "get",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-230",
  "nl_tokens": [
   "Visible",
   "for",
   "testing"
  ],
  "pl_tokens": [
   "static",
   "int",
   "readDirectBuffer",
   "(",
   "InputStream",
   "f",
   ",",
   "ByteBuffer",
   "buf",
   ",",
   "byte",
   "[",
   "]",
   "temp",
   ")",
   "throws",
   "IOException",
   "{",
   "// copy all the bytes that return immediately, stopping at the first",
   "// read that doesn't return a full buffer.",
   "int",
   "nextReadLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   ",",
   "temp",
   ".",
   "length",
   ")",
   ";",
   "int",
   "totalBytesRead",
   "=",
   "0",
   ";",
   "int",
   "bytesRead",
   ";",
   "while",
   "(",
   "(",
   "bytesRead",
   "=",
   "f",
   ".",
   "read",
   "(",
   "temp",
   ",",
   "0",
   ",",
   "nextReadLength",
   ")",
   ")",
   "==",
   "temp",
   ".",
   "length",
   ")",
   "{",
   "buf",
   ".",
   "put",
   "(",
   "temp",
   ")",
   ";",
   "totalBytesRead",
   "+=",
   "bytesRead",
   ";",
   "nextReadLength",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   ",",
   "temp",
   ".",
   "length",
   ")",
   ";",
   "}",
   "if",
   "(",
   "bytesRead",
   "<",
   "0",
   ")",
   "{",
   "// return -1 if nothing was read",
   "return",
   "totalBytesRead",
   "==",
   "0",
   "?",
   "-",
   "1",
   ":",
   "totalBytesRead",
   ";",
   "}",
   "else",
   "{",
   "// copy the last partial buffer",
   "buf",
   ".",
   "put",
   "(",
   "temp",
   ",",
   "0",
   ",",
   "bytesRead",
   ")",
   ";",
   "totalBytesRead",
   "+=",
   "bytesRead",
   ";",
   "return",
   "totalBytesRead",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-231",
  "nl_tokens": [
   "/",
   "*",
   "Compute",
   "the",
   "sample",
   "size",
   "as",
   "a",
   "function",
   "of",
   "minSideLength",
   "and",
   "maxNumOfPixels",
   ".",
   "minSideLength",
   "is",
   "used",
   "to",
   "specify",
   "that",
   "minimal",
   "width",
   "or",
   "height",
   "of",
   "a",
   "bitmap",
   ".",
   "maxNumOfPixels",
   "is",
   "used",
   "to",
   "specify",
   "the",
   "maximal",
   "size",
   "in",
   "pixels",
   "that",
   "are",
   "tolerable",
   "in",
   "terms",
   "of",
   "memory",
   "usage",
   "."
  ],
  "pl_tokens": [
   "private",
   "Bitmap",
   "transform",
   "(",
   "Matrix",
   "scaler",
   ",",
   "Bitmap",
   "source",
   ",",
   "int",
   "targetWidth",
   ",",
   "int",
   "targetHeight",
   ",",
   "boolean",
   "scaleUp",
   ")",
   "{",
   "int",
   "deltaX",
   "=",
   "source",
   ".",
   "getWidth",
   "(",
   ")",
   "-",
   "targetWidth",
   ";",
   "int",
   "deltaY",
   "=",
   "source",
   ".",
   "getHeight",
   "(",
   ")",
   "-",
   "targetHeight",
   ";",
   "if",
   "(",
   "!",
   "scaleUp",
   "&&",
   "(",
   "deltaX",
   "<",
   "0",
   "||",
   "deltaY",
   "<",
   "0",
   ")",
   ")",
   "{",
   "/*\n             * In this case the bitmap is smaller, at least in one dimension,\n             * than the target. Transform it by placing as much of the image as\n             * possible into the target and leaving the top/bottom or left/right\n             * (or both) black.\n             */",
   "Bitmap",
   "b2",
   "=",
   "Bitmap",
   ".",
   "createBitmap",
   "(",
   "targetWidth",
   ",",
   "targetHeight",
   ",",
   "Bitmap",
   ".",
   "Config",
   ".",
   "ARGB_8888",
   ")",
   ";",
   "Canvas",
   "c",
   "=",
   "new",
   "Canvas",
   "(",
   "b2",
   ")",
   ";",
   "int",
   "deltaXHalf",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "deltaX",
   "/",
   "2",
   ")",
   ";",
   "int",
   "deltaYHalf",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "deltaY",
   "/",
   "2",
   ")",
   ";",
   "Rect",
   "src",
   "=",
   "new",
   "Rect",
   "(",
   "deltaXHalf",
   ",",
   "deltaYHalf",
   ",",
   "deltaXHalf",
   "+",
   "Math",
   ".",
   "min",
   "(",
   "targetWidth",
   ",",
   "source",
   ".",
   "getWidth",
   "(",
   ")",
   ")",
   ",",
   "deltaYHalf",
   "+",
   "Math",
   ".",
   "min",
   "(",
   "targetHeight",
   ",",
   "source",
   ".",
   "getHeight",
   "(",
   ")",
   ")",
   ")",
   ";",
   "int",
   "dstX",
   "=",
   "(",
   "targetWidth",
   "-",
   "src",
   ".",
   "width",
   "(",
   ")",
   ")",
   "/",
   "2",
   ";",
   "int",
   "dstY",
   "=",
   "(",
   "targetHeight",
   "-",
   "src",
   ".",
   "height",
   "(",
   ")",
   ")",
   "/",
   "2",
   ";",
   "Rect",
   "dst",
   "=",
   "new",
   "Rect",
   "(",
   "dstX",
   ",",
   "dstY",
   ",",
   "targetWidth",
   "-",
   "dstX",
   ",",
   "targetHeight",
   "-",
   "dstY",
   ")",
   ";",
   "c",
   ".",
   "drawBitmap",
   "(",
   "source",
   ",",
   "src",
   ",",
   "dst",
   ",",
   "null",
   ")",
   ";",
   "return",
   "b2",
   ";",
   "}",
   "float",
   "bitmapWidthF",
   "=",
   "source",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "float",
   "bitmapHeightF",
   "=",
   "source",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "float",
   "bitmapAspect",
   "=",
   "bitmapWidthF",
   "/",
   "bitmapHeightF",
   ";",
   "float",
   "viewAspect",
   "=",
   "(",
   "float",
   ")",
   "targetWidth",
   "/",
   "targetHeight",
   ";",
   "if",
   "(",
   "bitmapAspect",
   ">",
   "viewAspect",
   ")",
   "{",
   "float",
   "scale",
   "=",
   "targetHeight",
   "/",
   "bitmapHeightF",
   ";",
   "if",
   "(",
   "scale",
   "<",
   ".9F",
   "||",
   "scale",
   ">",
   "1F",
   ")",
   "{",
   "scaler",
   ".",
   "setScale",
   "(",
   "scale",
   ",",
   "scale",
   ")",
   ";",
   "}",
   "else",
   "{",
   "scaler",
   "=",
   "null",
   ";",
   "}",
   "}",
   "else",
   "{",
   "float",
   "scale",
   "=",
   "targetWidth",
   "/",
   "bitmapWidthF",
   ";",
   "if",
   "(",
   "scale",
   "<",
   ".9F",
   "||",
   "scale",
   ">",
   "1F",
   ")",
   "{",
   "scaler",
   ".",
   "setScale",
   "(",
   "scale",
   ",",
   "scale",
   ")",
   ";",
   "}",
   "else",
   "{",
   "scaler",
   "=",
   "null",
   ";",
   "}",
   "}",
   "Bitmap",
   "b1",
   ";",
   "if",
   "(",
   "scaler",
   "!=",
   "null",
   ")",
   "{",
   "// this is used for minithumb and crop, so we want to mFilter here.",
   "b1",
   "=",
   "Bitmap",
   ".",
   "createBitmap",
   "(",
   "source",
   ",",
   "0",
   ",",
   "0",
   ",",
   "source",
   ".",
   "getWidth",
   "(",
   ")",
   ",",
   "source",
   ".",
   "getHeight",
   "(",
   ")",
   ",",
   "scaler",
   ",",
   "true",
   ")",
   ";",
   "}",
   "else",
   "{",
   "b1",
   "=",
   "source",
   ";",
   "}",
   "int",
   "dx1",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "b1",
   ".",
   "getWidth",
   "(",
   ")",
   "-",
   "targetWidth",
   ")",
   ";",
   "int",
   "dy1",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "b1",
   ".",
   "getHeight",
   "(",
   ")",
   "-",
   "targetHeight",
   ")",
   ";",
   "Bitmap",
   "b2",
   "=",
   "Bitmap",
   ".",
   "createBitmap",
   "(",
   "b1",
   ",",
   "dx1",
   "/",
   "2",
   ",",
   "dy1",
   "/",
   "2",
   ",",
   "targetWidth",
   ",",
   "targetHeight",
   ")",
   ";",
   "if",
   "(",
   "b1",
   "!=",
   "source",
   ")",
   "{",
   "b1",
   ".",
   "recycle",
   "(",
   ")",
   ";",
   "}",
   "return",
   "b2",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-232",
  "nl_tokens": [
   "Convert",
   "a",
   "world",
   "coordinate",
   "bounding",
   "box",
   "to",
   "a",
   "lat",
   "/",
   "lon",
   "bounding",
   "box",
   "by",
   "finding",
   "the",
   "minimum",
   "enclosing",
   "box",
   "."
  ],
  "pl_tokens": [
   "public",
   "LatLonRect",
   "projToLatLonBBold",
   "(",
   "ProjectionRect",
   "world",
   ")",
   "{",
   "//System.out.println(\"world = \" + world);\r",
   "ProjectionPoint",
   "<mask>",
   "=",
   "world",
   ".",
   "getMinPoint",
   "(",
   ")",
   ";",
   "ProjectionPoint",
   "max",
   "=",
   "world",
   ".",
   "getMaxPoint",
   "(",
   ")",
   ";",
   "//System.out.println(\"min = \" + min);\r",
   "//System.out.println(\"max = \" + max);\r",
   "LatLonRect",
   "llbb",
   ";",
   "LatLonPointImpl",
   "llmin",
   "=",
   "new",
   "LatLonPointImpl",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "llmax",
   "=",
   "new",
   "LatLonPointImpl",
   "(",
   ")",
   ";",
   "// make bounding box out of the min, max corners\r",
   "projToLatLon",
   "(",
   "min",
   ",",
   "llmin",
   ")",
   ";",
   "projToLatLon",
   "(",
   "max",
   ",",
   "llmax",
   ")",
   ";",
   "llbb",
   "=",
   "new",
   "LatLonRect",
   "(",
   "llmin",
   ",",
   "llmax",
   ")",
   ";",
   "//System.out.println(\"llbb = \" + llbb);\r",
   "/*\r\n   double lona = la.getLongitude();\r\n   double lonb = lb.getLongitude();\r\n\r\n   if (((lona < lonb) && (lonb - lona <= 180.0))\r\n           || ((lona > lonb) && (lona - lonb >= 180.0))) {\r\n       llbb = new LatLonRect(la, lb);\r\n   } else {\r\n       llbb = new LatLonRect(lb, la);\r\n   } */",
   "ProjectionPointImpl",
   "w1",
   "=",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ";",
   "ProjectionPointImpl",
   "w2",
   "=",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ";",
   "// now extend if needed using the other two corners\r",
   "w1",
   ".",
   "setLocation",
   "(",
   "min",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "max",
   ".",
   "getY",
   "(",
   ")",
   ")",
   ";",
   "projToLatLon",
   "(",
   "w1",
   ",",
   "llmin",
   ")",
   ";",
   "llbb",
   ".",
   "extend",
   "(",
   "llmin",
   ")",
   ";",
   "w2",
   ".",
   "setLocation",
   "(",
   "max",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "min",
   ".",
   "getY",
   "(",
   ")",
   ")",
   ";",
   "projToLatLon",
   "(",
   "w2",
   ",",
   "llmax",
   ")",
   ";",
   "llbb",
   ".",
   "extend",
   "(",
   "llmax",
   ")",
   ";",
   "return",
   "llbb",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-233",
  "nl_tokens": [
   "Sets",
   "the",
   "distance",
   "that",
   "a",
   "turtle",
   "instance",
   "moves",
   "in",
   "pixels",
   "<p",
   ">",
   "<b",
   ">",
   "Example",
   ":",
   "<",
   "/",
   "b",
   ">",
   "{",
   "@code",
   "myTurtle",
   ".",
   "move",
   "(",
   "100",
   ")",
   "}",
   "<",
   "/",
   "p",
   ">"
  ],
  "pl_tokens": [
   "public",
   "void",
   "move",
   "(",
   "Number",
   "amount",
   ")",
   "{",
   "double",
   "<mask>",
   "=",
   "MAX_MOVE_AMOUNT",
   ";",
   "Saver",
   "<",
   "Double",
   ">",
   "s",
   "=",
   "penDown",
   "?",
   "new",
   "Mover",
   "(",
   "new",
   "Point",
   "(",
   "getX",
   "(",
   ")",
   ",",
   "getY",
   "(",
   ")",
   ")",
   ")",
   ":",
   "new",
   "EmptyMover",
   "(",
   ")",
   ";",
   "animate",
   "(",
   "amount",
   ".",
   "doubleValue",
   "(",
   ")",
   ",",
   "max",
   ",",
   "s",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-234",
  "nl_tokens": [
   "Write",
   "a",
   "portion",
   "of",
   "an",
   "array",
   "of",
   "characters",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "write",
   "(",
   "char",
   "cbuf",
   "[",
   "]",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "ensureOpen",
   "(",
   ")",
   ";",
   "if",
   "(",
   "bufferSize",
   "==",
   "0",
   ")",
   "{",
   "initOut",
   "(",
   ")",
   ";",
   "out",
   ".",
   "write",
   "(",
   "cbuf",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "(",
   "off",
   "<",
   "0",
   ")",
   "||",
   "(",
   "off",
   ">",
   "cbuf",
   ".",
   "length",
   ")",
   "||",
   "(",
   "len",
   "<",
   "0",
   ")",
   "||",
   "(",
   "(",
   "off",
   "+",
   "len",
   ")",
   ">",
   "cbuf",
   ".",
   "length",
   ")",
   "||",
   "(",
   "(",
   "off",
   "+",
   "len",
   ")",
   "<",
   "0",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IndexOutOfBoundsException",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   ";",
   "}",
   "if",
   "(",
   "len",
   ">=",
   "bufferSize",
   ")",
   "{",
   "/* If the request length exceeds the size of the output buffer,\n               flush the buffer and then write the data directly.  In this\n               way buffered streams will cascade harmlessly. */",
   "if",
   "(",
   "autoFlush",
   ")",
   "flushBuffer",
   "(",
   ")",
   ";",
   "else",
   "bufferOverflow",
   "(",
   ")",
   ";",
   "initOut",
   "(",
   ")",
   ";",
   "out",
   ".",
   "write",
   "(",
   "cbuf",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "return",
   ";",
   "}",
   "int",
   "b",
   "=",
   "off",
   ",",
   "t",
   "=",
   "off",
   "+",
   "len",
   ";",
   "while",
   "(",
   "b",
   "<",
   "t",
   ")",
   "{",
   "int",
   "d",
   "=",
   "<mask>",
   "(",
   "getRemaining",
   "(",
   ")",
   ",",
   "t",
   "-",
   "b",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "cbuf",
   ",",
   "b",
   ",",
   "buf",
   ".",
   "buf",
   ",",
   "buf",
   ".",
   "pos",
   ",",
   "d",
   ")",
   ";",
   "b",
   "+=",
   "d",
   ";",
   "buf",
   ".",
   "pos",
   "+=",
   "d",
   ";",
   "if",
   "(",
   "getRemaining",
   "(",
   ")",
   "==",
   "0",
   ")",
   "if",
   "(",
   "autoFlush",
   ")",
   "flushBuffer",
   "(",
   ")",
   ";",
   "else",
   "bufferOverflow",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-235",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "OIndexRIDContainer",
   "deserializeFromByteBufferObject",
   "(",
   "ByteBuffer",
   "buffer",
   ",",
   "OWALChanges",
   "walChanges",
   ",",
   "int",
   "offset",
   ")",
   "{",
   "final",
   "long",
   "fileId",
   "=",
   "walChanges",
   ".",
   "getLongValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "FILE_ID_OFFSET",
   ")",
   ";",
   "final",
   "boolean",
   "durable",
   "=",
   "walChanges",
   ".",
   "getByteValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "DURABLE_OFFSET",
   ")",
   ">",
   "0",
   ";",
   "if",
   "(",
   "walChanges",
   ".",
   "getByteValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "EMBEDDED_OFFSET",
   ")",
   ">",
   "0",
   ")",
   "{",
   "final",
   "int",
   "size",
   "=",
   "walChanges",
   ".",
   "getIntValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "EMBEDDED_SIZE_OFFSET",
   ")",
   ";",
   "final",
   "Set",
   "<",
   "OIdentifiable",
   ">",
   "underlying",
   "=",
   "new",
   "HashSet",
   "<",
   "OIdentifiable",
   ">",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "int",
   ")",
   "(",
   "size",
   "/",
   ".75f",
   ")",
   "+",
   "1",
   ",",
   "16",
   ")",
   ")",
   ";",
   "int",
   "p",
   "=",
   "offset",
   "+",
   "EMBEDDED_VALUES_OFFSET",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "underlying",
   ".",
   "add",
   "(",
   "LINK_SERIALIZER",
   ".",
   "deserializeFromByteBufferObject",
   "(",
   "buffer",
   ",",
   "walChanges",
   ",",
   "p",
   ")",
   ")",
   ";",
   "p",
   "+=",
   "RID_SIZE",
   ";",
   "}",
   "return",
   "new",
   "OIndexRIDContainer",
   "(",
   "fileId",
   ",",
   "underlying",
   ",",
   "durable",
   ")",
   ";",
   "}",
   "else",
   "{",
   "final",
   "long",
   "pageIndex",
   "=",
   "walChanges",
   ".",
   "getLongValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "SBTREE_ROOTINDEX_OFFSET",
   ")",
   ";",
   "final",
   "int",
   "pageOffset",
   "=",
   "walChanges",
   ".",
   "getIntValue",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "SBTREE_ROOTOFFSET_OFFSET",
   ")",
   ";",
   "final",
   "OBonsaiBucketPointer",
   "rootPointer",
   "=",
   "new",
   "OBonsaiBucketPointer",
   "(",
   "pageIndex",
   ",",
   "pageOffset",
   ")",
   ";",
   "final",
   "ODatabaseDocumentInternal",
   "db",
   "=",
   "ODatabaseRecordThreadLocal",
   ".",
   "instance",
   "(",
   ")",
   ".",
   "get",
   "(",
   ")",
   ";",
   "final",
   "OIndexRIDContainerSBTree",
   "underlying",
   "=",
   "new",
   "OIndexRIDContainerSBTree",
   "(",
   "fileId",
   ",",
   "rootPointer",
   ",",
   "(",
   "OAbstractPaginatedStorage",
   ")",
   "db",
   ".",
   "getStorage",
   "(",
   ")",
   ".",
   "getUnderlying",
   "(",
   ")",
   ")",
   ";",
   "return",
   "new",
   "OIndexRIDContainer",
   "(",
   "fileId",
   ",",
   "underlying",
   ",",
   "durable",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-236",
  "nl_tokens": [
   "Returns",
   "the",
   "area",
   "of",
   "the",
   "intersection",
   "of",
   "two",
   "rectangles",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "intersectionArea",
   "(",
   "Rectangle2D_F64",
   "a",
   ",",
   "Rectangle2D_F64",
   "b",
   ")",
   "{",
   "if",
   "(",
   "!",
   "intersects",
   "(",
   "a",
   ",",
   "b",
   ")",
   ")",
   "return",
   "0",
   ";",
   "double",
   "x0",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "p0",
   ".",
   "x",
   ",",
   "b",
   ".",
   "p0",
   ".",
   "x",
   ")",
   ";",
   "double",
   "x1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "p1",
   ".",
   "x",
   ",",
   "b",
   ".",
   "p1",
   ".",
   "x",
   ")",
   ";",
   "double",
   "y0",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "a",
   ".",
   "p0",
   ".",
   "y",
   ",",
   "b",
   ".",
   "p0",
   ".",
   "y",
   ")",
   ";",
   "double",
   "y1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "p1",
   ".",
   "y",
   ",",
   "b",
   ".",
   "p1",
   ".",
   "y",
   ")",
   ";",
   "return",
   "(",
   "x1",
   "-",
   "x0",
   ")",
   "*",
   "(",
   "y1",
   "-",
   "y0",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-237",
  "nl_tokens": [
   "/",
   "*",
   "version",
   "for",
   "bs_freq_scale",
   ">",
   "0"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "master_frequency_table",
   "(",
   "SBR",
   "sbr",
   ",",
   "int",
   "k0",
   ",",
   "int",
   "k2",
   ",",
   "int",
   "bs_freq_scale",
   ",",
   "boolean",
   "bs_alter_scale",
   ")",
   "{",
   "int",
   "k",
   ",",
   "bands",
   ";",
   "boolean",
   "twoRegions",
   ";",
   "int",
   "k1",
   ";",
   "int",
   "nrBand0",
   ",",
   "nrBand1",
   ";",
   "int",
   "[",
   "]",
   "vDk0",
   "=",
   "new",
   "int",
   "[",
   "64",
   "]",
   ",",
   "vDk1",
   "=",
   "new",
   "int",
   "[",
   "64",
   "]",
   ";",
   "int",
   "[",
   "]",
   "vk0",
   "=",
   "new",
   "int",
   "[",
   "64",
   "]",
   ",",
   "vk1",
   "=",
   "new",
   "int",
   "[",
   "64",
   "]",
   ";",
   "int",
   "[",
   "]",
   "temp1",
   "=",
   "{",
   "6",
   ",",
   "5",
   ",",
   "4",
   "}",
   ";",
   "float",
   "q",
   ",",
   "qk",
   ";",
   "int",
   "A_1",
   ";",
   "/* mft only defined for k2 > k0 */",
   "if",
   "(",
   "k2",
   "<=",
   "k0",
   ")",
   "{",
   "sbr",
   ".",
   "N_master",
   "=",
   "0",
   ";",
   "return",
   "1",
   ";",
   "}",
   "bands",
   "=",
   "temp1",
   "[",
   "bs_freq_scale",
   "-",
   "1",
   "]",
   ";",
   "if",
   "(",
   "(",
   "float",
   ")",
   "k2",
   "/",
   "(",
   "float",
   ")",
   "k0",
   ">",
   "2.2449",
   ")",
   "{",
   "twoRegions",
   "=",
   "true",
   ";",
   "k1",
   "=",
   "k0",
   "<<",
   "1",
   ";",
   "}",
   "else",
   "{",
   "twoRegions",
   "=",
   "false",
   ";",
   "k1",
   "=",
   "k2",
   ";",
   "}",
   "nrBand0",
   "=",
   "(",
   "2",
   "*",
   "find_bands",
   "(",
   "0",
   ",",
   "bands",
   ",",
   "k0",
   ",",
   "k1",
   ")",
   ")",
   ";",
   "nrBand0",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "nrBand0",
   ",",
   "63",
   ")",
   ";",
   "if",
   "(",
   "nrBand0",
   "<=",
   "0",
   ")",
   "return",
   "1",
   ";",
   "q",
   "=",
   "find_initial_power",
   "(",
   "nrBand0",
   ",",
   "k0",
   ",",
   "k1",
   ")",
   ";",
   "qk",
   "=",
   "k0",
   ";",
   "A_1",
   "=",
   "(",
   "int",
   ")",
   "(",
   "qk",
   "+",
   "0.5f",
   ")",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "nrBand0",
   ";",
   "k",
   "++",
   ")",
   "{",
   "int",
   "A_0",
   "=",
   "A_1",
   ";",
   "qk",
   "*=",
   "q",
   ";",
   "A_1",
   "=",
   "(",
   "int",
   ")",
   "(",
   "qk",
   "+",
   "0.5f",
   ")",
   ";",
   "vDk0",
   "[",
   "k",
   "]",
   "=",
   "A_1",
   "-",
   "A_0",
   ";",
   "}",
   "/* needed? */",
   "//qsort(vDk0, nrBand0, sizeof(vDk0[0]), longcmp);",
   "Arrays",
   ".",
   "sort",
   "(",
   "vDk0",
   ",",
   "0",
   ",",
   "nrBand0",
   ")",
   ";",
   "vk0",
   "[",
   "0",
   "]",
   "=",
   "k0",
   ";",
   "for",
   "(",
   "k",
   "=",
   "1",
   ";",
   "k",
   "<=",
   "nrBand0",
   ";",
   "k",
   "++",
   ")",
   "{",
   "vk0",
   "[",
   "k",
   "]",
   "=",
   "vk0",
   "[",
   "k",
   "-",
   "1",
   "]",
   "+",
   "vDk0",
   "[",
   "k",
   "-",
   "1",
   "]",
   ";",
   "if",
   "(",
   "vDk0",
   "[",
   "k",
   "-",
   "1",
   "]",
   "==",
   "0",
   ")",
   "return",
   "1",
   ";",
   "}",
   "if",
   "(",
   "!",
   "twoRegions",
   ")",
   "{",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "nrBand0",
   ";",
   "k",
   "++",
   ")",
   "{",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "]",
   "=",
   "vk0",
   "[",
   "k",
   "]",
   ";",
   "}",
   "sbr",
   ".",
   "N_master",
   "=",
   "nrBand0",
   ";",
   "sbr",
   ".",
   "N_master",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "sbr",
   ".",
   "N_master",
   ",",
   "64",
   ")",
   ";",
   "return",
   "0",
   ";",
   "}",
   "nrBand1",
   "=",
   "(",
   "2",
   "*",
   "find_bands",
   "(",
   "1",
   "/* warped */",
   ",",
   "bands",
   ",",
   "k1",
   ",",
   "k2",
   ")",
   ")",
   ";",
   "nrBand1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "nrBand1",
   ",",
   "63",
   ")",
   ";",
   "q",
   "=",
   "find_initial_power",
   "(",
   "nrBand1",
   ",",
   "k1",
   ",",
   "k2",
   ")",
   ";",
   "qk",
   "=",
   "k1",
   ";",
   "A_1",
   "=",
   "(",
   "int",
   ")",
   "(",
   "qk",
   "+",
   "0.5f",
   ")",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "nrBand1",
   "-",
   "1",
   ";",
   "k",
   "++",
   ")",
   "{",
   "int",
   "A_0",
   "=",
   "A_1",
   ";",
   "qk",
   "*=",
   "q",
   ";",
   "A_1",
   "=",
   "(",
   "int",
   ")",
   "(",
   "qk",
   "+",
   "0.5f",
   ")",
   ";",
   "vDk1",
   "[",
   "k",
   "]",
   "=",
   "A_1",
   "-",
   "A_0",
   ";",
   "}",
   "if",
   "(",
   "vDk1",
   "[",
   "0",
   "]",
   "<",
   "vDk0",
   "[",
   "nrBand0",
   "-",
   "1",
   "]",
   ")",
   "{",
   "int",
   "change",
   ";",
   "/* needed? */",
   "//qsort(vDk1, nrBand1+1, sizeof(vDk1[0]), longcmp);",
   "Arrays",
   ".",
   "sort",
   "(",
   "vDk1",
   ",",
   "0",
   ",",
   "nrBand1",
   "+",
   "1",
   ")",
   ";",
   "change",
   "=",
   "vDk0",
   "[",
   "nrBand0",
   "-",
   "1",
   "]",
   "-",
   "vDk1",
   "[",
   "0",
   "]",
   ";",
   "vDk1",
   "[",
   "0",
   "]",
   "=",
   "vDk0",
   "[",
   "nrBand0",
   "-",
   "1",
   "]",
   ";",
   "vDk1",
   "[",
   "nrBand1",
   "-",
   "1",
   "]",
   "=",
   "vDk1",
   "[",
   "nrBand1",
   "-",
   "1",
   "]",
   "-",
   "change",
   ";",
   "}",
   "/* needed? */",
   "//qsort(vDk1, nrBand1, sizeof(vDk1[0]), longcmp);",
   "Arrays",
   ".",
   "sort",
   "(",
   "vDk1",
   ",",
   "0",
   ",",
   "nrBand1",
   ")",
   ";",
   "vk1",
   "[",
   "0",
   "]",
   "=",
   "k1",
   ";",
   "for",
   "(",
   "k",
   "=",
   "1",
   ";",
   "k",
   "<=",
   "nrBand1",
   ";",
   "k",
   "++",
   ")",
   "{",
   "vk1",
   "[",
   "k",
   "]",
   "=",
   "vk1",
   "[",
   "k",
   "-",
   "1",
   "]",
   "+",
   "vDk1",
   "[",
   "k",
   "-",
   "1",
   "]",
   ";",
   "if",
   "(",
   "vDk1",
   "[",
   "k",
   "-",
   "1",
   "]",
   "==",
   "0",
   ")",
   "return",
   "1",
   ";",
   "}",
   "sbr",
   ".",
   "N_master",
   "=",
   "nrBand0",
   "+",
   "nrBand1",
   ";",
   "sbr",
   ".",
   "N_master",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "sbr",
   ".",
   "N_master",
   ",",
   "64",
   ")",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "nrBand0",
   ";",
   "k",
   "++",
   ")",
   "{",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "]",
   "=",
   "vk0",
   "[",
   "k",
   "]",
   ";",
   "}",
   "for",
   "(",
   "k",
   "=",
   "nrBand0",
   "+",
   "1",
   ";",
   "k",
   "<=",
   "sbr",
   ".",
   "N_master",
   ";",
   "k",
   "++",
   ")",
   "{",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "]",
   "=",
   "vk1",
   "[",
   "k",
   "-",
   "nrBand0",
   "]",
   ";",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-238",
  "nl_tokens": [
   "Create",
   "a",
   "new",
   "Range",
   "by",
   "intersecting",
   "with",
   "a",
   "Range",
   "using",
   "same",
   "interval",
   "as",
   "this",
   "Range",
   ".",
   "NOTE",
   ":",
   "we",
   "dont",
   "yet",
   "support",
   "intersection",
   "when",
   "both",
   "Ranges",
   "have",
   "strides"
  ],
  "pl_tokens": [
   "public",
   "Range",
   "intersect",
   "(",
   "Range",
   "r",
   ")",
   "throws",
   "InvalidRangeException",
   "{",
   "if",
   "(",
   "(",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "||",
   "(",
   "r",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   ")",
   "return",
   "EMPTY",
   ";",
   "if",
   "(",
   "this",
   "==",
   "VLEN",
   "||",
   "r",
   "==",
   "VLEN",
   ")",
   "return",
   "VLEN",
   ";",
   "int",
   "last",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "last",
   "(",
   ")",
   ",",
   "r",
   ".",
   "last",
   "(",
   ")",
   ")",
   ";",
   "int",
   "resultStride",
   "=",
   "stride",
   "*",
   "r",
   ".",
   "stride",
   "(",
   ")",
   ";",
   "int",
   "useFirst",
   ";",
   "if",
   "(",
   "resultStride",
   "==",
   "1",
   ")",
   "{",
   "// both strides are 1",
   "useFirst",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "first",
   "(",
   ")",
   ",",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "stride",
   "==",
   "1",
   ")",
   "{",
   "// then r has a stride",
   "if",
   "(",
   "r",
   ".",
   "first",
   "(",
   ")",
   ">=",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "=",
   "r",
   ".",
   "first",
   "(",
   ")",
   ";",
   "else",
   "{",
   "int",
   "incr",
   "=",
   "(",
   "first",
   "(",
   ")",
   "-",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "/",
   "resultStride",
   ";",
   "useFirst",
   "=",
   "r",
   ".",
   "first",
   "(",
   ")",
   "+",
   "incr",
   "*",
   "resultStride",
   ";",
   "if",
   "(",
   "useFirst",
   "<",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "+=",
   "resultStride",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "r",
   ".",
   "stride",
   "==",
   "1",
   ")",
   "{",
   "// then this has a stride",
   "if",
   "(",
   "first",
   "(",
   ")",
   ">=",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "=",
   "first",
   "(",
   ")",
   ";",
   "else",
   "{",
   "int",
   "incr",
   "=",
   "(",
   "r",
   ".",
   "first",
   "(",
   ")",
   "-",
   "first",
   "(",
   ")",
   ")",
   "/",
   "resultStride",
   ";",
   "useFirst",
   "=",
   "first",
   "(",
   ")",
   "+",
   "incr",
   "*",
   "resultStride",
   ";",
   "if",
   "(",
   "useFirst",
   "<",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "+=",
   "resultStride",
   ";",
   "}",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"Intersection when both ranges have a stride\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "useFirst",
   ">",
   "last",
   ")",
   "return",
   "EMPTY",
   ";",
   "return",
   "new",
   "Range",
   "(",
   "name",
   ",",
   "useFirst",
   ",",
   "last",
   ",",
   "resultStride",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-239",
  "nl_tokens": [
   "Return",
   "an",
   "red",
   "image",
   "with",
   "the",
   "given",
   "text",
   "auto",
   "-",
   "sized",
   "to",
   "fit",
   "the",
   "current",
   "imageWidthximageHeight"
  ],
  "pl_tokens": [
   "public",
   "BufferedImage",
   "errorImage",
   "(",
   "String",
   "...",
   "lines",
   ")",
   "{",
   "if",
   "(",
   "imageBuffer",
   "==",
   "null",
   "||",
   "imageBuffer",
   ".",
   "getWidth",
   "(",
   ")",
   "!=",
   "imageWidth",
   "||",
   "imageBuffer",
   ".",
   "getHeight",
   "(",
   ")",
   "!=",
   "imageHeight",
   ")",
   "{",
   "imageBuffer",
   "=",
   "new",
   "BufferedImage",
   "(",
   "imageWidth",
   ",",
   "imageHeight",
   ",",
   "BufferedImage",
   ".",
   "TYPE_INT_RGB",
   ")",
   ";",
   "}",
   "Graphics2D",
   "g",
   "=",
   "(",
   "Graphics2D",
   ")",
   "imageBuffer",
   ".",
   "getGraphics",
   "(",
   ")",
   ";",
   "g",
   ".",
   "setBackground",
   "(",
   "new",
   "Color",
   "(",
   "64",
   ",",
   "32",
   ",",
   "32",
   ")",
   ")",
   ";",
   "g",
   ".",
   "setColor",
   "(",
   "new",
   "Color",
   "(",
   "255",
   ",",
   "64",
   ",",
   "64",
   ")",
   ")",
   ";",
   "g",
   ".",
   "clearRect",
   "(",
   "0",
   ",",
   "0",
   ",",
   "imageWidth",
   ",",
   "imageHeight",
   ")",
   ";",
   "int",
   "maxLen",
   "=",
   "0",
   ";",
   "for",
   "(",
   "String",
   "line",
   ":",
   "lines",
   ")",
   "{",
   "if",
   "(",
   "line",
   "!=",
   "null",
   ")",
   "{",
   "for",
   "(",
   "String",
   "innerLine",
   ":",
   "line",
   ".",
   "split",
   "(",
   "\"\\n\"",
   ")",
   ")",
   "{",
   "maxLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "innerLine",
   ".",
   "length",
   "(",
   ")",
   ",",
   "maxLen",
   ")",
   ";",
   "}",
   "}",
   "}",
   "int",
   "padding",
   "=",
   "20",
   ";",
   "float",
   "sizeForWidth",
   "=",
   "1.8f",
   "*",
   "(",
   "imageWidth",
   "-",
   "padding",
   "-",
   "padding",
   ")",
   "/",
   "maxLen",
   ";",
   "// should use TextLayout",
   "float",
   "sizeForHeight",
   "=",
   "(",
   "imageHeight",
   "-",
   "padding",
   "-",
   "padding",
   ")",
   "/",
   "lines",
   ".",
   "length",
   ";",
   "float",
   "lineHeight",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "80",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "12",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "sizeForWidth",
   ",",
   "sizeForHeight",
   ")",
   ")",
   ")",
   ";",
   "float",
   "fontSize",
   "=",
   "0.8f",
   "*",
   "lineHeight",
   ";",
   "Font",
   "font",
   "=",
   "g",
   ".",
   "getFont",
   "(",
   ")",
   ".",
   "deriveFont",
   "(",
   "fontSize",
   ")",
   ";",
   "g",
   ".",
   "setFont",
   "(",
   "font",
   ")",
   ";",
   "float",
   "y",
   "=",
   "fontSize",
   "+",
   "padding",
   ";",
   "for",
   "(",
   "String",
   "line",
   ":",
   "lines",
   ")",
   "{",
   "if",
   "(",
   "line",
   "!=",
   "null",
   ")",
   "{",
   "g",
   ".",
   "drawString",
   "(",
   "line",
   ",",
   "padding",
   ",",
   "y",
   ")",
   ";",
   "y",
   "+=",
   "lineHeight",
   ";",
   "}",
   "}",
   "return",
   "imageBuffer",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-240",
  "nl_tokens": [
   "Computes",
   "and",
   "returns",
   "the",
   "Damerau",
   "-",
   "Levenshtein",
   "distance",
   "between",
   "the",
   "given",
   "{",
   "@code",
   "String",
   "}",
   "s",
   ".",
   "This",
   "distance",
   "is",
   "obtained",
   "by",
   "counting",
   "the",
   "minimum",
   "number",
   "of",
   "operations",
   "needed",
   "to",
   "transform",
   "one",
   "{",
   "@code",
   "String",
   "}",
   "into",
   "the",
   "other",
   "where",
   "an",
   "operation",
   "is",
   "defined",
   "as",
   "an",
   "insertion",
   "deletion",
   "or",
   "substitution",
   "of",
   "a",
   "single",
   "character",
   "or",
   "a",
   "transposition",
   "of",
   "two",
   "adjacent",
   "characters",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "distance",
   "(",
   "String",
   "str1",
   ",",
   "String",
   "str2",
   ")",
   "{",
   "char",
   "[",
   "]",
   "s1",
   "=",
   "str1",
   ".",
   "toCharArray",
   "(",
   ")",
   ";",
   "char",
   "[",
   "]",
   "s2",
   "=",
   "str2",
   ".",
   "toCharArray",
   "(",
   ")",
   ";",
   "int",
   "[",
   "]",
   "[",
   "]",
   "d",
   "=",
   "new",
   "int",
   "[",
   "s1",
   ".",
   "length",
   "+",
   "1",
   "]",
   "[",
   "s2",
   ".",
   "length",
   "+",
   "1",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<=",
   "s1",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "d",
   "[",
   "i",
   "]",
   "[",
   "0",
   "]",
   "=",
   "i",
   ";",
   "}",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<=",
   "s2",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "d",
   "[",
   "0",
   "]",
   "[",
   "i",
   "]",
   "=",
   "i",
   ";",
   "}",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<=",
   "s1",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "j",
   "=",
   "1",
   ";",
   "j",
   "<=",
   "s2",
   ".",
   "length",
   ";",
   "j",
   "++",
   ")",
   "{",
   "int",
   "c",
   "=",
   "s1",
   "[",
   "i",
   "-",
   "1",
   "]",
   "==",
   "s2",
   "[",
   "j",
   "-",
   "1",
   "]",
   "?",
   "0",
   ":",
   "1",
   ";",
   "d",
   "[",
   "i",
   "]",
   "[",
   "j",
   "]",
   "=",
   "<mask>",
   "(",
   "d",
   "[",
   "i",
   "-",
   "1",
   "]",
   "[",
   "j",
   "]",
   "+",
   "1",
   ",",
   "d",
   "[",
   "i",
   "]",
   "[",
   "j",
   "-",
   "1",
   "]",
   "+",
   "1",
   ",",
   "d",
   "[",
   "i",
   "-",
   "1",
   "]",
   "[",
   "j",
   "-",
   "1",
   "]",
   "+",
   "c",
   ")",
   ";",
   "if",
   "(",
   "i",
   ">",
   "1",
   "&&",
   "j",
   ">",
   "1",
   "&&",
   "s1",
   "[",
   "i",
   "-",
   "1",
   "]",
   "==",
   "s2",
   "[",
   "j",
   "-",
   "2",
   "]",
   "&&",
   "s1",
   "[",
   "i",
   "-",
   "2",
   "]",
   "==",
   "s2",
   "[",
   "j",
   "-",
   "1",
   "]",
   ")",
   "{",
   "d",
   "[",
   "i",
   "]",
   "[",
   "j",
   "]",
   "=",
   "min",
   "(",
   "d",
   "[",
   "i",
   "]",
   "[",
   "j",
   "]",
   ",",
   "d",
   "[",
   "i",
   "-",
   "2",
   "]",
   "[",
   "j",
   "-",
   "2",
   "]",
   "+",
   "c",
   ")",
   ";",
   "}",
   "}",
   "}",
   "return",
   "d",
   "[",
   "s1",
   ".",
   "length",
   "]",
   "[",
   "s2",
   ".",
   "length",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-241",
  "nl_tokens": [
   "Appends",
   "the",
   "content",
   "of",
   "a",
   "specified",
   "buffer",
   "to",
   "the",
   "end",
   "of",
   "the",
   "currently",
   "represented",
   "stream",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "int",
   "write",
   "(",
   "final",
   "ByteBuffer",
   "byteBuffer",
   ")",
   "throws",
   "IOException",
   "{",
   "ensureOpen",
   "(",
   ")",
   ";",
   "final",
   "int",
   "remaining",
   "=",
   "byteBuffer",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "if",
   "(",
   "inspectable",
   "<",
   "buffer",
   ".",
   "length",
   ")",
   "{",
   "// Still some space in the inspectable buffer.",
   "final",
   "int",
   "toBuffer",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buffer",
   ".",
   "length",
   "-",
   "inspectable",
   ",",
   "remaining",
   ")",
   ";",
   "byteBuffer",
   ".",
   "get",
   "(",
   "buffer",
   ",",
   "inspectable",
   ",",
   "toBuffer",
   ")",
   ";",
   "inspectable",
   "+=",
   "toBuffer",
   ";",
   "}",
   "if",
   "(",
   "byteBuffer",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "fileChannel",
   ".",
   "position",
   "(",
   "writePosition",
   ")",
   ";",
   "writePosition",
   "+=",
   "fileChannel",
   ".",
   "write",
   "(",
   "byteBuffer",
   ")",
   ";",
   "}",
   "return",
   "remaining",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-242",
  "nl_tokens": [
   "Decompresses",
   "into",
   "an",
   "array",
   "of",
   "bytes",
   ".",
   "<p",
   ">",
   "If",
   "<code",
   ">",
   "len<",
   "/",
   "code",
   ">",
   "is",
   "zero",
   "no",
   "bytes",
   "are",
   "read",
   "and",
   "<code",
   ">",
   "0<",
   "/",
   "code",
   ">",
   "is",
   "returned",
   ".",
   "Otherwise",
   "this",
   "will",
   "block",
   "until",
   "<code",
   ">",
   "len<",
   "/",
   "code",
   ">",
   "bytes",
   "have",
   "been",
   "decompressed",
   "the",
   "end",
   "of",
   "the",
   "LZMA2",
   "stream",
   "is",
   "reached",
   "or",
   "an",
   "exception",
   "is",
   "thrown",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "read",
   "(",
   "byte",
   "[",
   "]",
   "buf",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "off",
   "<",
   "0",
   "||",
   "len",
   "<",
   "0",
   "||",
   "off",
   "+",
   "len",
   "<",
   "0",
   "||",
   "off",
   "+",
   "len",
   ">",
   "buf",
   ".",
   "length",
   ")",
   "throw",
   "new",
   "IndexOutOfBoundsException",
   "(",
   ")",
   ";",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "return",
   "0",
   ";",
   "if",
   "(",
   "in",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "XZIOException",
   "(",
   "\"Stream closed\"",
   ")",
   ";",
   "if",
   "(",
   "exception",
   "!=",
   "null",
   ")",
   "throw",
   "exception",
   ";",
   "if",
   "(",
   "endReached",
   ")",
   "return",
   "-",
   "1",
   ";",
   "try",
   "{",
   "int",
   "size",
   "=",
   "0",
   ";",
   "while",
   "(",
   "len",
   ">",
   "0",
   ")",
   "{",
   "if",
   "(",
   "uncompressedSize",
   "==",
   "0",
   ")",
   "{",
   "decodeChunkHeader",
   "(",
   ")",
   ";",
   "if",
   "(",
   "endReached",
   ")",
   "return",
   "size",
   "==",
   "0",
   "?",
   "-",
   "1",
   ":",
   "size",
   ";",
   "}",
   "int",
   "copySizeMax",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "uncompressedSize",
   ",",
   "len",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isLZMAChunk",
   ")",
   "{",
   "lz",
   ".",
   "copyUncompressed",
   "(",
   "in",
   ",",
   "copySizeMax",
   ")",
   ";",
   "}",
   "else",
   "{",
   "lz",
   ".",
   "setLimit",
   "(",
   "copySizeMax",
   ")",
   ";",
   "lzma",
   ".",
   "decode",
   "(",
   ")",
   ";",
   "}",
   "int",
   "copiedSize",
   "=",
   "lz",
   ".",
   "flush",
   "(",
   "buf",
   ",",
   "off",
   ")",
   ";",
   "off",
   "+=",
   "copiedSize",
   ";",
   "len",
   "-=",
   "copiedSize",
   ";",
   "size",
   "+=",
   "copiedSize",
   ";",
   "uncompressedSize",
   "-=",
   "copiedSize",
   ";",
   "if",
   "(",
   "uncompressedSize",
   "==",
   "0",
   ")",
   "if",
   "(",
   "!",
   "rc",
   ".",
   "isFinished",
   "(",
   ")",
   "||",
   "lz",
   ".",
   "hasPending",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "CorruptedInputException",
   "(",
   ")",
   ";",
   "}",
   "return",
   "size",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "exception",
   "=",
   "e",
   ";",
   "throw",
   "e",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-243",
  "nl_tokens": [
   "/",
   "*",
   "Calculates",
   "each",
   "stat",
   "given",
   "the",
   "result",
   "of",
   "calling",
   "getSnapshots"
  ],
  "pl_tokens": [
   "protected",
   "void",
   "calcStats",
   "(",
   "double",
   "[",
   "]",
   "values",
   ")",
   "{",
   "if",
   "(",
   "statsValid",
   ")",
   "{",
   "return",
   ";",
   "}",
   "size",
   "=",
   "values",
   ".",
   "length",
   ";",
   "if",
   "(",
   "size",
   "==",
   "0",
   ")",
   "{",
   "<mask>",
   "=",
   "0.0",
   ";",
   "max",
   "=",
   "0.0",
   ";",
   "avg",
   "=",
   "0.0",
   ";",
   "stddev",
   "=",
   "0.0",
   ";",
   "mostRecent",
   "=",
   "0.0",
   ";",
   "}",
   "else",
   "{",
   "min",
   "=",
   "values",
   "[",
   "0",
   "]",
   ";",
   "max",
   "=",
   "values",
   "[",
   "0",
   "]",
   ";",
   "mostRecent",
   "=",
   "values",
   "[",
   "values",
   ".",
   "length",
   "-",
   "1",
   "]",
   ";",
   "double",
   "total",
   "=",
   "values",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "total",
   "+=",
   "values",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "values",
   "[",
   "i",
   "]",
   "<",
   "min",
   ")",
   "{",
   "min",
   "=",
   "values",
   "[",
   "i",
   "]",
   ";",
   "}",
   "else",
   "if",
   "(",
   "values",
   "[",
   "i",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "values",
   "[",
   "i",
   "]",
   ";",
   "}",
   "}",
   "avg",
   "=",
   "total",
   "/",
   "size",
   ";",
   "stddev",
   "=",
   "0.0",
   ";",
   "if",
   "(",
   "size",
   ">",
   "1",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "double",
   "dv",
   "=",
   "values",
   "[",
   "i",
   "]",
   "-",
   "avg",
   ";",
   "stddev",
   "+=",
   "(",
   "dv",
   "*",
   "dv",
   ")",
   ";",
   "}",
   "stddev",
   "/=",
   "(",
   "size",
   "-",
   "1",
   ")",
   ";",
   "stddev",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "stddev",
   ")",
   ";",
   "}",
   "}",
   "statsValid",
   "=",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-244",
  "nl_tokens": [
   "Manually",
   "query",
   "for",
   "rows",
   "within",
   "the",
   "bounds"
  ],
  "pl_tokens": [
   "public",
   "ManualFeatureQueryResults",
   "query",
   "(",
   "double",
   "minX",
   ",",
   "double",
   "minY",
   ",",
   "double",
   "maxX",
   ",",
   "double",
   "maxY",
   ")",
   "{",
   "List",
   "<",
   "Long",
   ">",
   "featureIds",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "long",
   "offset",
   "=",
   "0",
   ";",
   "boolean",
   "hasResults",
   "=",
   "true",
   ";",
   "minX",
   "-=",
   "tolerance",
   ";",
   "maxX",
   "+=",
   "tolerance",
   ";",
   "minY",
   "-=",
   "tolerance",
   ";",
   "maxY",
   "+=",
   "tolerance",
   ";",
   "while",
   "(",
   "hasResults",
   ")",
   "{",
   "hasResults",
   "=",
   "false",
   ";",
   "FeatureCursor",
   "featureCursor",
   "=",
   "featureDao",
   ".",
   "queryForChunk",
   "(",
   "chunkLimit",
   ",",
   "offset",
   ")",
   ";",
   "try",
   "{",
   "while",
   "(",
   "featureCursor",
   ".",
   "moveToNext",
   "(",
   ")",
   ")",
   "{",
   "hasResults",
   "=",
   "true",
   ";",
   "FeatureRow",
   "featureRow",
   "=",
   "featureCursor",
   ".",
   "getRow",
   "(",
   ")",
   ";",
   "GeometryEnvelope",
   "envelope",
   "=",
   "featureRow",
   ".",
   "getGeometryEnvelope",
   "(",
   ")",
   ";",
   "if",
   "(",
   "envelope",
   "!=",
   "null",
   ")",
   "{",
   "double",
   "minXMax",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minX",
   ",",
   "envelope",
   ".",
   "getMinX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "maxXMin",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxX",
   ",",
   "envelope",
   ".",
   "getMaxX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "minYMax",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "minY",
   ",",
   "envelope",
   ".",
   "getMinY",
   "(",
   ")",
   ")",
   ";",
   "double",
   "maxYMin",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "maxY",
   ",",
   "envelope",
   ".",
   "getMaxY",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "minXMax",
   "<=",
   "maxXMin",
   "&&",
   "minYMax",
   "<=",
   "maxYMin",
   ")",
   "{",
   "featureIds",
   ".",
   "add",
   "(",
   "featureRow",
   ".",
   "getId",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}",
   "finally",
   "{",
   "featureCursor",
   ".",
   "close",
   "(",
   ")",
   ";",
   "}",
   "offset",
   "+=",
   "chunkLimit",
   ";",
   "}",
   "ManualFeatureQueryResults",
   "results",
   "=",
   "new",
   "ManualFeatureQueryResults",
   "(",
   "featureDao",
   ",",
   "featureIds",
   ")",
   ";",
   "return",
   "results",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-245",
  "nl_tokens": [
   "Returns",
   "the",
   "Euclidean",
   "distance",
   "squared",
   "of",
   "the",
   "closest",
   "point",
   "on",
   "the",
   "quadrilateral",
   "to",
   "the",
   "provided",
   "point",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "distanceSq",
   "(",
   "Quadrilateral_F64",
   "quad",
   ",",
   "Point2D_F64",
   "p",
   ")",
   "{",
   "LineSegment2D_F64",
   "seg",
   "=",
   "LineSegment2D_F64",
   ".",
   "wrap",
   "(",
   "quad",
   ".",
   "a",
   ",",
   "quad",
   ".",
   "b",
   ")",
   ";",
   "double",
   "a",
   "=",
   "distanceSq",
   "(",
   "seg",
   ",",
   "p",
   ")",
   ";",
   "seg",
   ".",
   "a",
   "=",
   "quad",
   ".",
   "b",
   ";",
   "seg",
   ".",
   "b",
   "=",
   "quad",
   ".",
   "c",
   ";",
   "a",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ",",
   "distanceSq",
   "(",
   "seg",
   ",",
   "p",
   ")",
   ")",
   ";",
   "seg",
   ".",
   "a",
   "=",
   "quad",
   ".",
   "c",
   ";",
   "seg",
   ".",
   "b",
   "=",
   "quad",
   ".",
   "d",
   ";",
   "a",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ",",
   "distanceSq",
   "(",
   "seg",
   ",",
   "p",
   ")",
   ")",
   ";",
   "seg",
   ".",
   "a",
   "=",
   "quad",
   ".",
   "d",
   ";",
   "seg",
   ".",
   "b",
   "=",
   "quad",
   ".",
   "a",
   ";",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ",",
   "distanceSq",
   "(",
   "seg",
   ",",
   "p",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-246",
  "nl_tokens": [
   "Takes",
   "up",
   "to",
   "maxElements",
   "available",
   "data",
   "items",
   "from",
   "the",
   "queue",
   "or",
   "blocks",
   "until",
   "some",
   "become",
   "available",
   ".",
   "The",
   "returned",
   "items",
   "are",
   "wrapped",
   "in",
   "a",
   "{",
   "@link",
   "SynchRecord",
   "}",
   "which",
   "provides",
   "an",
   "interface",
   "to",
   "requeue",
   "them",
   "or",
   "send",
   "errors",
   "to",
   "their",
   "producers",
   "where",
   "the",
   "producers",
   "are",
   "still",
   "blocked",
   "."
  ],
  "pl_tokens": [
   "public",
   "SynchRef",
   "drainTo",
   "(",
   "Collection",
   "<",
   "SynchRecord",
   "<",
   "E",
   ">",
   ">",
   "collection",
   ",",
   "int",
   "maxElements",
   ",",
   "boolean",
   "unblock",
   ")",
   "{",
   "if",
   "(",
   "collection",
   "==",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The 'collection' parameter may not be null.\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "collection",
   "==",
   "this",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The 'collection' parameter may not be this object.\"",
   ")",
   ";",
   "}",
   "// final Queue<E> items = this.buffer;",
   "ReentrantLock",
   "lock",
   "=",
   "this",
   ".",
   "lock",
   ";",
   "lock",
   ".",
   "lock",
   "(",
   ")",
   ";",
   "try",
   "{",
   "int",
   "n",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "<mask>",
   "=",
   "(",
   "(",
   "maxElements",
   ">=",
   "count",
   ")",
   "||",
   "(",
   "maxElements",
   "<",
   "0",
   ")",
   ")",
   "?",
   "count",
   ":",
   "maxElements",
   ";",
   "n",
   "<",
   "max",
   ";",
   "n",
   "++",
   ")",
   "{",
   "// Extract the next record from the queue, don't signal the not full condition yet and release",
   "// producers depending on whether the caller wants to or not.",
   "collection",
   ".",
   "add",
   "(",
   "extract",
   "(",
   "false",
   ",",
   "unblock",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "n",
   ">",
   "0",
   ")",
   "{",
   "// count -= n;",
   "notFull",
   ".",
   "signalAll",
   "(",
   ")",
   ";",
   "}",
   "return",
   "new",
   "SynchRefImpl",
   "(",
   "n",
   ",",
   "collection",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "lock",
   ".",
   "unlock",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-247",
  "nl_tokens": [
   "Return",
   "an",
   "integer",
   "in",
   "range",
   "1",
   "..",
   "max",
   "inclusive",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "nextCount",
   "(",
   "int",
   "<mask>",
   ")",
   "throws",
   "DapException",
   "{",
   "int",
   "min",
   "=",
   "1",
   ";",
   "if",
   "(",
   "max",
   "<",
   "min",
   "||",
   "min",
   "<",
   "1",
   ")",
   "throw",
   "new",
   "DapException",
   "(",
   "\"bad range\"",
   ")",
   ";",
   "int",
   "range",
   "=",
   "(",
   "max",
   "+",
   "1",
   ")",
   "-",
   "min",
   ";",
   "// min..max+1 -> 0..(max+1)-min",
   "int",
   "n",
   "=",
   "random",
   ".",
   "nextInt",
   "(",
   "range",
   ")",
   ";",
   "//  0..(max+1)-min",
   "n",
   "=",
   "n",
   "+",
   "min",
   ";",
   "// min..(max+1)",
   "if",
   "(",
   "DEBUG",
   ")",
   "System",
   ".",
   "err",
   ".",
   "println",
   "(",
   "\"RandomValue.nextCount: \"",
   "+",
   "n",
   ")",
   ";",
   "return",
   "n",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-248",
  "nl_tokens": [
   "Minimum",
   "function",
   "with",
   "a",
   "scalar"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "ndArray",
   ",",
   "double",
   "k",
   ",",
   "boolean",
   "dup",
   ")",
   "{",
   "return",
   "exec",
   "(",
   "dup",
   "?",
   "new",
   "ScalarMin",
   "(",
   "ndArray",
   ".",
   "dup",
   "(",
   ")",
   ",",
   "k",
   ")",
   ":",
   "new",
   "ScalarMin",
   "(",
   "ndArray",
   ",",
   "k",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-249",
  "nl_tokens": [
   "Check",
   "if",
   "the",
   "given",
   "rect",
   "intersects",
   "an",
   "already",
   "drawn",
   "object"
  ],
  "pl_tokens": [
   "public",
   "Object",
   "findIntersection",
   "(",
   "Rectangle2D",
   "rect",
   ")",
   "{",
   "double",
   "centerX",
   "=",
   "rect",
   ".",
   "getX",
   "(",
   ")",
   "+",
   "rect",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "2",
   ";",
   "double",
   "centerY",
   "=",
   "rect",
   ".",
   "getY",
   "(",
   ")",
   "+",
   "rect",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "2",
   ";",
   "int",
   "indexX",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "centerX",
   "-",
   "offsetX",
   ")",
   "/",
   "gridWidth",
   ")",
   ";",
   "int",
   "indexY",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "centerY",
   "-",
   "offsetY",
   ")",
   "/",
   "gridHeight",
   ")",
   ";",
   "// outside box",
   "if",
   "(",
   "(",
   "indexX",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexX",
   ">=",
   "countX",
   ")",
   "||",
   "(",
   "indexY",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexY",
   ">=",
   "countY",
   ")",
   ")",
   "return",
   "null",
   ";",
   "// check the surrounding points",
   "for",
   "(",
   "int",
   "y",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "indexY",
   "-",
   "1",
   ")",
   ";",
   "y",
   "<=",
   "Math",
   ".",
   "min",
   "(",
   "countY",
   "-",
   "1",
   ",",
   "indexY",
   "+",
   "1",
   ")",
   ";",
   "y",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "indexX",
   "-",
   "1",
   ")",
   ";",
   "x",
   "<=",
   "Math",
   ".",
   "min",
   "(",
   "countX",
   "-",
   "1",
   ",",
   "indexX",
   "+",
   "1",
   ")",
   ";",
   "x",
   "++",
   ")",
   "{",
   "GridCell",
   "gtest",
   "=",
   "gridArray",
   "[",
   "y",
   "]",
   "[",
   "x",
   "]",
   ";",
   "if",
   "(",
   "!",
   "gtest",
   ".",
   "used",
   ")",
   "continue",
   ";",
   "if",
   "(",
   "intersectsOverlap",
   "(",
   "rect",
   ",",
   "gtest",
   ".",
   "objectBB",
   ")",
   ")",
   "// hits an adjacent rectangle",
   "return",
   "gtest",
   ".",
   "o",
   ";",
   "}",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-250",
  "nl_tokens": [
   "Create",
   "the",
   "instersection",
   "of",
   "this",
   "LatLon",
   "with",
   "the",
   "given",
   "one"
  ],
  "pl_tokens": [
   "public",
   "LatLonRect",
   "intersect",
   "(",
   "LatLonRect",
   "clip",
   ")",
   "{",
   "double",
   "latMin",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getLatMin",
   "(",
   ")",
   ",",
   "clip",
   ".",
   "getLatMin",
   "(",
   ")",
   ")",
   ";",
   "double",
   "latMax",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "getLatMax",
   "(",
   ")",
   ",",
   "clip",
   ".",
   "getLatMax",
   "(",
   ")",
   ")",
   ";",
   "double",
   "deltaLat",
   "=",
   "latMax",
   "-",
   "latMin",
   ";",
   "if",
   "(",
   "deltaLat",
   "<",
   "0",
   ")",
   "return",
   "null",
   ";",
   "// lon as always is a pain : if not intersection, try +/- 360\r",
   "double",
   "lon1min",
   "=",
   "getLonMin",
   "(",
   ")",
   ";",
   "double",
   "lon1max",
   "=",
   "getLonMax",
   "(",
   ")",
   ";",
   "double",
   "lon2min",
   "=",
   "clip",
   ".",
   "getLonMin",
   "(",
   ")",
   ";",
   "double",
   "lon2max",
   "=",
   "clip",
   ".",
   "getLonMax",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "intersect",
   "(",
   "lon1min",
   ",",
   "lon1max",
   ",",
   "lon2min",
   ",",
   "lon2max",
   ")",
   ")",
   "{",
   "lon2min",
   "=",
   "clip",
   ".",
   "getLonMin",
   "(",
   ")",
   "+",
   "360",
   ";",
   "lon2max",
   "=",
   "clip",
   ".",
   "getLonMax",
   "(",
   ")",
   "+",
   "360",
   ";",
   "if",
   "(",
   "!",
   "intersect",
   "(",
   "lon1min",
   ",",
   "lon1max",
   ",",
   "lon2min",
   ",",
   "lon2max",
   ")",
   ")",
   "{",
   "lon2min",
   "=",
   "clip",
   ".",
   "getLonMin",
   "(",
   ")",
   "-",
   "360",
   ";",
   "lon2max",
   "=",
   "clip",
   ".",
   "getLonMax",
   "(",
   ")",
   "-",
   "360",
   ";",
   "}",
   "}",
   "// we did our best to find an intersection\r",
   "double",
   "lonMin",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "lon1min",
   ",",
   "lon2min",
   ")",
   ";",
   "double",
   "lonMax",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "lon1max",
   ",",
   "lon2max",
   ")",
   ";",
   "double",
   "deltaLon",
   "=",
   "lonMax",
   "-",
   "lonMin",
   ";",
   "if",
   "(",
   "deltaLon",
   "<",
   "0",
   ")",
   "return",
   "null",
   ";",
   "return",
   "new",
   "LatLonRect",
   "(",
   "new",
   "LatLonPointImpl",
   "(",
   "latMin",
   ",",
   "lonMin",
   ")",
   ",",
   "deltaLat",
   ",",
   "deltaLon",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-251",
  "nl_tokens": [
   "Calculates",
   "required",
   "radius",
   "of",
   "shadow",
   "."
  ],
  "pl_tokens": [
   "protected",
   "static",
   "int",
   "getShadowRadius",
   "(",
   "Drawable",
   "shadow",
   ",",
   "Drawable",
   "circle",
   ")",
   "{",
   "int",
   "radius",
   "=",
   "0",
   ";",
   "if",
   "(",
   "shadow",
   "!=",
   "null",
   "&&",
   "circle",
   "!=",
   "null",
   ")",
   "{",
   "Rect",
   "rect",
   "=",
   "new",
   "Rect",
   "(",
   ")",
   ";",
   "radius",
   "=",
   "(",
   "circle",
   ".",
   "getIntrinsicWidth",
   "(",
   ")",
   "+",
   "(",
   "shadow",
   ".",
   "getPadding",
   "(",
   "rect",
   ")",
   "?",
   "rect",
   ".",
   "left",
   "+",
   "rect",
   ".",
   "right",
   ":",
   "0",
   ")",
   ")",
   "/",
   "2",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "radius",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-252",
  "nl_tokens": [
   "Returns",
   "the",
   "max",
   "value",
   "of",
   "the",
   "object",
   "with",
   "the",
   "property",
   "given",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "List",
   "<",
   "T",
   ">",
   "list",
   ",",
   "String",
   "sortBy",
   ")",
   "{",
   "if",
   "(",
   "list",
   ".",
   "size",
   "(",
   ")",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sortDesc",
   "(",
   "list",
   ",",
   "sortBy",
   ")",
   ";",
   "return",
   "list",
   ".",
   "get",
   "(",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-253",
  "nl_tokens": [
   "Returns",
   "the",
   "product",
   "of",
   "{",
   "@code",
   "a",
   "}",
   "and",
   "{",
   "@code",
   "b",
   "}",
   "provided",
   "the",
   "result",
   "fits",
   "into",
   "an",
   "{",
   "@code",
   "int",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "safeMultiply",
   "(",
   "int",
   "a",
   ",",
   "int",
   "b",
   ")",
   "{",
   "if",
   "(",
   "a",
   "==",
   "0",
   "||",
   "b",
   "==",
   "0",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "long",
   "<mask>",
   "=",
   "a",
   "<",
   "0",
   "==",
   "b",
   "<",
   "0",
   "?",
   "Integer",
   ".",
   "MAX_VALUE",
   ":",
   "Integer",
   ".",
   "MIN_VALUE",
   ";",
   "if",
   "(",
   "(",
   "b",
   ">",
   "0",
   "&&",
   "b",
   ">",
   "max",
   "/",
   "a",
   ")",
   "||",
   "(",
   "b",
   "<",
   "0",
   "&&",
   "b",
   "<",
   "max",
   "/",
   "a",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "ArithmeticException",
   "(",
   "\"Int overflow: \"",
   "+",
   "a",
   "+",
   "\" * \"",
   "+",
   "b",
   ")",
   ";",
   "}",
   "return",
   "a",
   "*",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-254",
  "nl_tokens": [
   "Append",
   "a",
   "fragmented",
   "message",
   "to",
   "the",
   "the",
   "term",
   "buffer",
   ".",
   "The",
   "message",
   "will",
   "be",
   "split",
   "up",
   "into",
   "fragments",
   "of",
   "MTU",
   "length",
   "minus",
   "header",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "appendFragmentedMessage",
   "(",
   "final",
   "int",
   "termId",
   ",",
   "final",
   "int",
   "termOffset",
   ",",
   "final",
   "HeaderWriter",
   "header",
   ",",
   "final",
   "DirectBufferVector",
   "[",
   "]",
   "vectors",
   ",",
   "final",
   "int",
   "length",
   ",",
   "final",
   "int",
   "maxPayloadLength",
   ",",
   "final",
   "ReservedValueSupplier",
   "reservedValueSupplier",
   ")",
   "{",
   "final",
   "int",
   "numMaxPayloads",
   "=",
   "length",
   "/",
   "maxPayloadLength",
   ";",
   "final",
   "int",
   "remainingPayload",
   "=",
   "length",
   "%",
   "maxPayloadLength",
   ";",
   "final",
   "int",
   "lastFrameLength",
   "=",
   "remainingPayload",
   ">",
   "0",
   "?",
   "align",
   "(",
   "remainingPayload",
   "+",
   "HEADER_LENGTH",
   ",",
   "FRAME_ALIGNMENT",
   ")",
   ":",
   "0",
   ";",
   "final",
   "int",
   "requiredLength",
   "=",
   "(",
   "numMaxPayloads",
   "*",
   "(",
   "maxPayloadLength",
   "+",
   "HEADER_LENGTH",
   ")",
   ")",
   "+",
   "lastFrameLength",
   ";",
   "final",
   "UnsafeBuffer",
   "termBuffer",
   "=",
   "this",
   ".",
   "termBuffer",
   ";",
   "final",
   "int",
   "termLength",
   "=",
   "termBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ";",
   "int",
   "resultingOffset",
   "=",
   "termOffset",
   "+",
   "requiredLength",
   ";",
   "putRawTailOrdered",
   "(",
   "termId",
   ",",
   "resultingOffset",
   ")",
   ";",
   "if",
   "(",
   "resultingOffset",
   ">",
   "termLength",
   ")",
   "{",
   "resultingOffset",
   "=",
   "handleEndOfLogCondition",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "header",
   ",",
   "termLength",
   ",",
   "termId",
   ")",
   ";",
   "}",
   "else",
   "{",
   "int",
   "frameOffset",
   "=",
   "termOffset",
   ";",
   "byte",
   "flags",
   "=",
   "BEGIN_FRAG_FLAG",
   ";",
   "int",
   "remaining",
   "=",
   "length",
   ";",
   "int",
   "vectorIndex",
   "=",
   "0",
   ";",
   "int",
   "vectorOffset",
   "=",
   "0",
   ";",
   "do",
   "{",
   "final",
   "int",
   "bytesToWrite",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remaining",
   ",",
   "maxPayloadLength",
   ")",
   ";",
   "final",
   "int",
   "frameLength",
   "=",
   "bytesToWrite",
   "+",
   "HEADER_LENGTH",
   ";",
   "final",
   "int",
   "alignedLength",
   "=",
   "align",
   "(",
   "frameLength",
   ",",
   "FRAME_ALIGNMENT",
   ")",
   ";",
   "header",
   ".",
   "write",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ",",
   "termId",
   ")",
   ";",
   "int",
   "bytesWritten",
   "=",
   "0",
   ";",
   "int",
   "payloadOffset",
   "=",
   "frameOffset",
   "+",
   "HEADER_LENGTH",
   ";",
   "do",
   "{",
   "final",
   "DirectBufferVector",
   "vector",
   "=",
   "vectors",
   "[",
   "vectorIndex",
   "]",
   ";",
   "final",
   "int",
   "vectorRemaining",
   "=",
   "vector",
   ".",
   "length",
   "-",
   "vectorOffset",
   ";",
   "final",
   "int",
   "numBytes",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "bytesToWrite",
   "-",
   "bytesWritten",
   ",",
   "vectorRemaining",
   ")",
   ";",
   "termBuffer",
   ".",
   "putBytes",
   "(",
   "payloadOffset",
   ",",
   "vector",
   ".",
   "buffer",
   ",",
   "vector",
   ".",
   "offset",
   "+",
   "vectorOffset",
   ",",
   "numBytes",
   ")",
   ";",
   "bytesWritten",
   "+=",
   "numBytes",
   ";",
   "payloadOffset",
   "+=",
   "numBytes",
   ";",
   "vectorOffset",
   "+=",
   "numBytes",
   ";",
   "if",
   "(",
   "vectorRemaining",
   "<=",
   "numBytes",
   ")",
   "{",
   "vectorIndex",
   "++",
   ";",
   "vectorOffset",
   "=",
   "0",
   ";",
   "}",
   "}",
   "while",
   "(",
   "bytesWritten",
   "<",
   "bytesToWrite",
   ")",
   ";",
   "if",
   "(",
   "remaining",
   "<=",
   "maxPayloadLength",
   ")",
   "{",
   "flags",
   "|=",
   "END_FRAG_FLAG",
   ";",
   "}",
   "frameFlags",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "flags",
   ")",
   ";",
   "if",
   "(",
   "null",
   "!=",
   "reservedValueSupplier",
   ")",
   "{",
   "final",
   "long",
   "reservedValue",
   "=",
   "reservedValueSupplier",
   ".",
   "get",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ")",
   ";",
   "termBuffer",
   ".",
   "putLong",
   "(",
   "frameOffset",
   "+",
   "RESERVED_VALUE_OFFSET",
   ",",
   "reservedValue",
   ",",
   "LITTLE_ENDIAN",
   ")",
   ";",
   "}",
   "frameLengthOrdered",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ")",
   ";",
   "flags",
   "=",
   "0",
   ";",
   "frameOffset",
   "+=",
   "alignedLength",
   ";",
   "remaining",
   "-=",
   "bytesToWrite",
   ";",
   "}",
   "while",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   ";",
   "}",
   "return",
   "resultingOffset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-255",
  "nl_tokens": [
   "Set",
   "this",
   "matrix",
   "from",
   "a",
   "2",
   "-",
   "d",
   "array",
   "of",
   "values",
   ".",
   "If",
   "the",
   "rows",
   "do",
   "not",
   "have",
   "the",
   "same",
   "length",
   "then",
   "the",
   "matrix",
   "column",
   "count",
   "is",
   "the",
   "length",
   "of",
   "the",
   "shortest",
   "row",
   "."
  ],
  "pl_tokens": [
   "protected",
   "void",
   "set",
   "(",
   "final",
   "float",
   "values",
   "[",
   "]",
   "[",
   "]",
   ")",
   "{",
   "m_nRows",
   "=",
   "values",
   ".",
   "length",
   ";",
   "m_nCols",
   "=",
   "values",
   "[",
   "0",
   "]",
   ".",
   "length",
   ";",
   "m_aValues",
   "=",
   "values",
   ";",
   "for",
   "(",
   "int",
   "r",
   "=",
   "1",
   ";",
   "r",
   "<",
   "m_nRows",
   ";",
   "++",
   "r",
   ")",
   "{",
   "m_nCols",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "m_nCols",
   ",",
   "values",
   "[",
   "r",
   "]",
   ".",
   "length",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-256",
  "nl_tokens": [
   "Prepares",
   "next",
   "chunk",
   "to",
   "match",
   "new",
   "size",
   ".",
   "The",
   "minimal",
   "length",
   "of",
   "new",
   "chunk",
   "is",
   "<code",
   ">",
   "minChunkLen<",
   "/",
   "code",
   ">",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "needNewBuffer",
   "(",
   "int",
   "newSize",
   ")",
   "{",
   "int",
   "delta",
   "=",
   "newSize",
   "-",
   "size",
   ";",
   "int",
   "newBufferSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minChunkLen",
   ",",
   "delta",
   ")",
   ";",
   "currentBufferIndex",
   "++",
   ";",
   "currentBuffer",
   "=",
   "(",
   "E",
   "[",
   "]",
   ")",
   "new",
   "Object",
   "[",
   "newBufferSize",
   "]",
   ";",
   "offset",
   "=",
   "0",
   ";",
   "// add buffer",
   "if",
   "(",
   "currentBufferIndex",
   ">=",
   "buffers",
   ".",
   "length",
   ")",
   "{",
   "int",
   "newLen",
   "=",
   "buffers",
   ".",
   "length",
   "<<",
   "1",
   ";",
   "E",
   "[",
   "]",
   "[",
   "]",
   "newBuffers",
   "=",
   "(",
   "E",
   "[",
   "]",
   "[",
   "]",
   ")",
   "new",
   "Object",
   "[",
   "newLen",
   "]",
   "[",
   "",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "buffers",
   ",",
   "0",
   ",",
   "newBuffers",
   ",",
   "0",
   ",",
   "buffers",
   ".",
   "length",
   ")",
   ";",
   "buffers",
   "=",
   "newBuffers",
   ";",
   "}",
   "buffers",
   "[",
   "currentBufferIndex",
   "]",
   "=",
   "currentBuffer",
   ";",
   "buffersCount",
   "++",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-257",
  "nl_tokens": [
   "Gets",
   "the",
   "curent",
   "contents",
   "of",
   "this",
   "byte",
   "stream",
   "as",
   "a",
   "byte",
   "array",
   ".",
   "The",
   "result",
   "is",
   "independent",
   "of",
   "this",
   "stream",
   "."
  ],
  "pl_tokens": [
   "public",
   "synchronized",
   "byte",
   "[",
   "]",
   "toByteArray",
   "(",
   ")",
   "{",
   "int",
   "remaining",
   "=",
   "count",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "return",
   "EMPTY_BYTE_ARRAY",
   ";",
   "}",
   "byte",
   "newbuf",
   "[",
   "]",
   "=",
   "new",
   "byte",
   "[",
   "remaining",
   "]",
   ";",
   "int",
   "pos",
   "=",
   "0",
   ";",
   "for",
   "(",
   "byte",
   "[",
   "]",
   "buf",
   ":",
   "buffers",
   ")",
   "{",
   "int",
   "c",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "length",
   ",",
   "remaining",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "buf",
   ",",
   "0",
   ",",
   "newbuf",
   ",",
   "pos",
   ",",
   "c",
   ")",
   ";",
   "pos",
   "+=",
   "c",
   ";",
   "remaining",
   "-=",
   "c",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "return",
   "newbuf",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-258",
  "nl_tokens": [
   "obtains",
   "from",
   "http",
   ":",
   "//",
   "theory",
   ".",
   "stanford",
   ".",
   "edu",
   "/",
   "~amitp",
   "/",
   "GameProgramming",
   "/",
   "Heuristics",
   ".",
   "html"
  ],
  "pl_tokens": [
   "protected",
   "double",
   "getDiagonalHeuristicCost",
   "(",
   "double",
   "x",
   ",",
   "double",
   "y",
   ",",
   "double",
   "gx",
   ",",
   "double",
   "gy",
   ",",
   "double",
   "dFactor",
   ")",
   "{",
   "double",
   "dx",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "x",
   "-",
   "gx",
   ")",
   ";",
   "double",
   "dy",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "y",
   "-",
   "gy",
   ")",
   ";",
   "double",
   "h_diagonal",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dx",
   ",",
   "dy",
   ")",
   ";",
   "double",
   "h_straight",
   "=",
   "dx",
   "+",
   "dy",
   ";",
   "return",
   "(",
   "dFactor",
   "*",
   "2",
   ")",
   "*",
   "h_diagonal",
   "+",
   "dFactor",
   "*",
   "(",
   "h_straight",
   "-",
   "2",
   "*",
   "h_diagonal",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-259",
  "nl_tokens": [
   "Truncates",
   "the",
   "overflow",
   "file",
   "to",
   "a",
   "given",
   "size",
   "if",
   "possible",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "truncate",
   "(",
   "final",
   "long",
   "size",
   ")",
   "throws",
   "FileNotFoundException",
   ",",
   "IOException",
   "{",
   "fileChannel",
   ".",
   "truncate",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "size",
   ",",
   "writePosition",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-260",
  "nl_tokens": [
   "Append",
   "a",
   "fragmented",
   "message",
   "to",
   "the",
   "the",
   "term",
   "buffer",
   ".",
   "The",
   "message",
   "will",
   "be",
   "split",
   "up",
   "into",
   "fragments",
   "of",
   "MTU",
   "length",
   "minus",
   "header",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "appendFragmentedMessage",
   "(",
   "final",
   "HeaderWriter",
   "header",
   ",",
   "final",
   "DirectBuffer",
   "bufferOne",
   ",",
   "final",
   "int",
   "offsetOne",
   ",",
   "final",
   "int",
   "lengthOne",
   ",",
   "final",
   "DirectBuffer",
   "bufferTwo",
   ",",
   "final",
   "int",
   "offsetTwo",
   ",",
   "final",
   "int",
   "lengthTwo",
   ",",
   "final",
   "int",
   "maxPayloadLength",
   ",",
   "final",
   "ReservedValueSupplier",
   "reservedValueSupplier",
   ",",
   "final",
   "int",
   "activeTermId",
   ")",
   "{",
   "final",
   "int",
   "length",
   "=",
   "lengthOne",
   "+",
   "lengthTwo",
   ";",
   "final",
   "int",
   "numMaxPayloads",
   "=",
   "length",
   "/",
   "maxPayloadLength",
   ";",
   "final",
   "int",
   "remainingPayload",
   "=",
   "length",
   "%",
   "maxPayloadLength",
   ";",
   "final",
   "int",
   "lastFrameLength",
   "=",
   "remainingPayload",
   ">",
   "0",
   "?",
   "align",
   "(",
   "remainingPayload",
   "+",
   "HEADER_LENGTH",
   ",",
   "FRAME_ALIGNMENT",
   ")",
   ":",
   "0",
   ";",
   "final",
   "int",
   "requiredLength",
   "=",
   "(",
   "numMaxPayloads",
   "*",
   "(",
   "maxPayloadLength",
   "+",
   "HEADER_LENGTH",
   ")",
   ")",
   "+",
   "lastFrameLength",
   ";",
   "final",
   "UnsafeBuffer",
   "termBuffer",
   "=",
   "this",
   ".",
   "termBuffer",
   ";",
   "final",
   "int",
   "termLength",
   "=",
   "termBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ";",
   "final",
   "long",
   "rawTail",
   "=",
   "getAndAddRawTail",
   "(",
   "requiredLength",
   ")",
   ";",
   "final",
   "int",
   "termId",
   "=",
   "termId",
   "(",
   "rawTail",
   ")",
   ";",
   "final",
   "long",
   "termOffset",
   "=",
   "rawTail",
   "&",
   "0xFFFF_FFFF",
   "",
   "L",
   ";",
   "checkTerm",
   "(",
   "activeTermId",
   ",",
   "termId",
   ")",
   ";",
   "long",
   "resultingOffset",
   "=",
   "termOffset",
   "+",
   "requiredLength",
   ";",
   "if",
   "(",
   "resultingOffset",
   ">",
   "termLength",
   ")",
   "{",
   "resultingOffset",
   "=",
   "handleEndOfLogCondition",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "header",
   ",",
   "termLength",
   ",",
   "termId",
   ")",
   ";",
   "}",
   "else",
   "{",
   "int",
   "frameOffset",
   "=",
   "(",
   "int",
   ")",
   "termOffset",
   ";",
   "byte",
   "flags",
   "=",
   "BEGIN_FRAG_FLAG",
   ";",
   "int",
   "remaining",
   "=",
   "length",
   ";",
   "int",
   "positionOne",
   "=",
   "0",
   ";",
   "int",
   "positionTwo",
   "=",
   "0",
   ";",
   "do",
   "{",
   "final",
   "int",
   "bytesToWrite",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remaining",
   ",",
   "maxPayloadLength",
   ")",
   ";",
   "final",
   "int",
   "frameLength",
   "=",
   "bytesToWrite",
   "+",
   "HEADER_LENGTH",
   ";",
   "final",
   "int",
   "alignedLength",
   "=",
   "align",
   "(",
   "frameLength",
   ",",
   "FRAME_ALIGNMENT",
   ")",
   ";",
   "header",
   ".",
   "write",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ",",
   "termId",
   ")",
   ";",
   "int",
   "bytesWritten",
   "=",
   "0",
   ";",
   "int",
   "payloadOffset",
   "=",
   "frameOffset",
   "+",
   "HEADER_LENGTH",
   ";",
   "do",
   "{",
   "final",
   "int",
   "remainingOne",
   "=",
   "lengthOne",
   "-",
   "positionOne",
   ";",
   "if",
   "(",
   "remainingOne",
   ">",
   "0",
   ")",
   "{",
   "final",
   "int",
   "numBytes",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "bytesToWrite",
   "-",
   "bytesWritten",
   ",",
   "remainingOne",
   ")",
   ";",
   "termBuffer",
   ".",
   "putBytes",
   "(",
   "payloadOffset",
   ",",
   "bufferOne",
   ",",
   "offsetOne",
   "+",
   "positionOne",
   ",",
   "numBytes",
   ")",
   ";",
   "bytesWritten",
   "+=",
   "numBytes",
   ";",
   "payloadOffset",
   "+=",
   "numBytes",
   ";",
   "positionOne",
   "+=",
   "numBytes",
   ";",
   "}",
   "else",
   "{",
   "final",
   "int",
   "numBytes",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "bytesToWrite",
   "-",
   "bytesWritten",
   ",",
   "lengthTwo",
   "-",
   "positionTwo",
   ")",
   ";",
   "termBuffer",
   ".",
   "putBytes",
   "(",
   "payloadOffset",
   ",",
   "bufferTwo",
   ",",
   "offsetTwo",
   "+",
   "positionTwo",
   ",",
   "numBytes",
   ")",
   ";",
   "bytesWritten",
   "+=",
   "numBytes",
   ";",
   "payloadOffset",
   "+=",
   "numBytes",
   ";",
   "positionTwo",
   "+=",
   "numBytes",
   ";",
   "}",
   "}",
   "while",
   "(",
   "bytesWritten",
   "<",
   "bytesToWrite",
   ")",
   ";",
   "if",
   "(",
   "remaining",
   "<=",
   "maxPayloadLength",
   ")",
   "{",
   "flags",
   "|=",
   "END_FRAG_FLAG",
   ";",
   "}",
   "frameFlags",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "flags",
   ")",
   ";",
   "if",
   "(",
   "null",
   "!=",
   "reservedValueSupplier",
   ")",
   "{",
   "final",
   "long",
   "reservedValue",
   "=",
   "reservedValueSupplier",
   ".",
   "get",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ")",
   ";",
   "termBuffer",
   ".",
   "putLong",
   "(",
   "frameOffset",
   "+",
   "RESERVED_VALUE_OFFSET",
   ",",
   "reservedValue",
   ",",
   "LITTLE_ENDIAN",
   ")",
   ";",
   "}",
   "frameLengthOrdered",
   "(",
   "termBuffer",
   ",",
   "frameOffset",
   ",",
   "frameLength",
   ")",
   ";",
   "flags",
   "=",
   "0",
   ";",
   "frameOffset",
   "+=",
   "alignedLength",
   ";",
   "remaining",
   "-=",
   "bytesToWrite",
   ";",
   "}",
   "while",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   ";",
   "}",
   "return",
   "(",
   "int",
   ")",
   "resultingOffset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-261",
  "nl_tokens": [
   "Peg",
   "a",
   "value",
   "to",
   "either",
   "the",
   "min",
   "or",
   "max",
   "depending",
   "on",
   "sign",
   "."
  ],
  "pl_tokens": [
   "static",
   "protected",
   "long",
   "minmax",
   "(",
   "long",
   "value",
   ",",
   "long",
   "<mask>",
   ",",
   "long",
   "max",
   ")",
   "{",
   "if",
   "(",
   "value",
   "<",
   "min",
   ")",
   "return",
   "min",
   ";",
   "if",
   "(",
   "value",
   ">",
   "max",
   ")",
   "return",
   "max",
   ";",
   "return",
   "value",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-262",
  "nl_tokens": [
   "Identical",
   "File",
   "Contents"
  ],
  "pl_tokens": [
   "public",
   "static",
   "Boolean",
   "contentEquals",
   "(",
   "Path",
   "file1",
   ",",
   "Path",
   "file2",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "!",
   "java",
   ".",
   "nio",
   ".",
   "file",
   ".",
   "Files",
   ".",
   "isRegularFile",
   "(",
   "file1",
   ")",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "file1",
   "+",
   "\"is not a regular file\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "java",
   ".",
   "nio",
   ".",
   "file",
   ".",
   "Files",
   ".",
   "isRegularFile",
   "(",
   "file2",
   ")",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "file2",
   "+",
   "\"is not a regular file\"",
   ")",
   ";",
   "FileChannel",
   "channel1",
   "=",
   "null",
   ";",
   "FileChannel",
   "channel2",
   "=",
   "null",
   ";",
   "MappedByteBuffer",
   "buffer1",
   "=",
   "null",
   ";",
   "MappedByteBuffer",
   "buffer2",
   "=",
   "null",
   ";",
   "try",
   "{",
   "long",
   "size1",
   "=",
   "java",
   ".",
   "nio",
   ".",
   "file",
   ".",
   "Files",
   ".",
   "size",
   "(",
   "file1",
   ")",
   ";",
   "long",
   "size2",
   "=",
   "java",
   ".",
   "nio",
   ".",
   "file",
   ".",
   "Files",
   ".",
   "size",
   "(",
   "file2",
   ")",
   ";",
   "if",
   "(",
   "size1",
   "!=",
   "size2",
   ")",
   "return",
   "false",
   ";",
   "long",
   "position",
   "=",
   "0",
   ";",
   "long",
   "length",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Integer",
   ".",
   "MAX_VALUE",
   ",",
   "size1",
   "-",
   "position",
   ")",
   ";",
   "channel1",
   "=",
   "FileChannel",
   ".",
   "open",
   "(",
   "file1",
   ")",
   ";",
   "channel2",
   "=",
   "FileChannel",
   ".",
   "open",
   "(",
   "file2",
   ")",
   ";",
   "// Cannot map files larger than Integer.MAX_VALUE,",
   "// so we have to do it in pieces.",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "buffer1",
   "=",
   "channel1",
   ".",
   "map",
   "(",
   "MapMode",
   ".",
   "READ_ONLY",
   ",",
   "position",
   ",",
   "length",
   ")",
   ";",
   "buffer2",
   "=",
   "channel2",
   ".",
   "map",
   "(",
   "MapMode",
   ".",
   "READ_ONLY",
   ",",
   "position",
   ",",
   "length",
   ")",
   ";",
   "// if (!buffer1.equals(buffer2)) return false;",
   "// The line above is much slower than the line below.",
   "// It should not be, but it is, possibly because it is",
   "// loading the entire buffer into memory before comparing",
   "// the contents. See the corresponding unit test. EK",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "length",
   ";",
   "i",
   "++",
   ")",
   "if",
   "(",
   "buffer1",
   ".",
   "get",
   "(",
   ")",
   "!=",
   "buffer2",
   ".",
   "get",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "position",
   "+=",
   "length",
   ";",
   "length",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "Integer",
   ".",
   "MAX_VALUE",
   ",",
   "size1",
   "-",
   "position",
   ")",
   ";",
   "cleanDirectByteBuffer",
   "(",
   "buffer1",
   ")",
   ";",
   "buffer1",
   "=",
   "null",
   ";",
   "cleanDirectByteBuffer",
   "(",
   "buffer2",
   ")",
   ";",
   "buffer2",
   "=",
   "null",
   ";",
   "}",
   "}",
   "finally",
   "{",
   "// Is is important to clean up so we do not hold any",
   "// file locks, in case the caller wants to do something",
   "// else with the files.",
   "// In terms of functional programming, holding a lock after",
   "// returning to the caller would be an unwelcome side-effect.",
   "cleanDirectByteBuffer",
   "(",
   "buffer1",
   ")",
   ";",
   "cleanDirectByteBuffer",
   "(",
   "buffer2",
   ")",
   ";",
   "if",
   "(",
   "channel1",
   "!=",
   "null",
   ")",
   "try",
   "{",
   "channel1",
   ".",
   "close",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "if",
   "(",
   "channel2",
   "!=",
   "null",
   ")",
   "channel2",
   ".",
   "close",
   "(",
   ")",
   ";",
   "throw",
   "e",
   ";",
   "}",
   "if",
   "(",
   "channel2",
   "!=",
   "null",
   ")",
   "channel2",
   ".",
   "close",
   "(",
   ")",
   ";",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-263",
  "nl_tokens": [
   "older",
   "opendap",
   "servers",
   "send",
   "netcdf",
   "char",
   "data",
   "as",
   "Strings",
   "of",
   "length",
   "1",
   "(",
   "!!",
   ")"
  ],
  "pl_tokens": [
   "private",
   "Array",
   "convertStringArray",
   "(",
   "Array",
   "data",
   ",",
   "Variable",
   "ncVar",
   ")",
   "{",
   "String",
   "[",
   "]",
   "storage",
   "=",
   "(",
   "String",
   "[",
   "]",
   ")",
   "data",
   ".",
   "getStorage",
   "(",
   ")",
   ";",
   "int",
   "max_len",
   "=",
   "0",
   ";",
   "for",
   "(",
   "String",
   "s",
   ":",
   "storage",
   ")",
   "{",
   "max_len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "max_len",
   ",",
   "s",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "max_len",
   ">",
   "1",
   ")",
   "return",
   "data",
   ";",
   "// below is the length=1 barfalloney\r",
   "int",
   "count",
   "=",
   "0",
   ";",
   "int",
   "n",
   "=",
   "(",
   "int",
   ")",
   "data",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "char",
   "[",
   "]",
   "charStorage",
   "=",
   "new",
   "char",
   "[",
   "n",
   "]",
   ";",
   "for",
   "(",
   "String",
   "s",
   ":",
   "storage",
   ")",
   "{",
   "if",
   "(",
   "s",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "charStorage",
   "[",
   "count",
   "++",
   "]",
   "=",
   "s",
   ".",
   "charAt",
   "(",
   "0",
   ")",
   ";",
   "}",
   "// change it to a char (!!). Since its no longer a String, this code wont get called again for this variable.\r",
   "ncVar",
   ".",
   "setDataType",
   "(",
   "DataType",
   ".",
   "CHAR",
   ")",
   ";",
   "// return data thats been changed to chars\r",
   "return",
   "Array",
   ".",
   "factory",
   "(",
   "DataType",
   ".",
   "CHAR",
   ",",
   "data",
   ".",
   "getShape",
   "(",
   ")",
   ",",
   "charStorage",
   ")",
   ";",
   "/* if (section == null)\r\n      section = ncVar.getRanges();\r\n\r\n    // add the strLen dimension back to the array\r\n    int[] varShape = ncVar.getShape();\r\n    int strLen = varShape[ ncVar.getRank()-1];\r\n    int total = (int) Range.computeSize(section);\r\n    int newSize = total/strLen;\r\n    String[] newStorage = new String[newSize];\r\n\r\n    // merge last dimension\r\n    StringBuffer sbuff = new StringBuffer();\r\n    int newCount = 0;\r\n    while (newCount < newSize) {\r\n      int mergeCount = 0;\r\n      sbuff.setLength(0);\r\n      while (mergeCount < strLen) {\r\n        String s = storage[strLen * newCount + mergeCount];\r\n        if (s.length() == 0) break;\r\n        sbuff.append( s);\r\n        mergeCount++;\r\n      }\r\n      newStorage[ newCount++] = sbuff.toString();\r\n    }\r\n\r\n\r\n    /* List dims = ncVar.getDimensions();\r\n    ncVar.setDimensions( dims.subList(0, ncVar.getRank()-1)); // LOOK is this dangerous or what ???\r\n    int[] newShape = ncVar.getShape();\r\n    return Array.factory( DataType.STRING.getPrimitiveClassType(), newShape, newStorage); */",
   "}"
  ]
 },
 {
  "idx": "maxmin-264",
  "nl_tokens": [
   "/",
   "*",
   "Apply",
   "our",
   "current",
   "retry",
   "policy",
   "to",
   "the",
   "insert",
   "behavior"
  ],
  "pl_tokens": [
   "private",
   "<",
   "T",
   ">",
   "Observable",
   ".",
   "Transformer",
   "<",
   "T",
   ",",
   "T",
   ">",
   "applyInsertRetryPolicy",
   "(",
   ")",
   "{",
   "return",
   "tObservable",
   "->",
   "tObservable",
   ".",
   "retryWhen",
   "(",
   "errors",
   "->",
   "{",
   "Observable",
   "<",
   "Integer",
   ">",
   "range",
   "=",
   "Observable",
   ".",
   "range",
   "(",
   "1",
   ",",
   "2",
   ")",
   ";",
   "return",
   "errors",
   ".",
   "zipWith",
   "(",
   "range",
   ",",
   "(",
   "t",
   ",",
   "i",
   ")",
   "->",
   "{",
   "if",
   "(",
   "t",
   "instanceof",
   "DriverException",
   ")",
   "{",
   "return",
   "i",
   ";",
   "}",
   "throw",
   "Exceptions",
   ".",
   "propagate",
   "(",
   "t",
   ")",
   ";",
   "}",
   ")",
   ".",
   "flatMap",
   "(",
   "retryCount",
   "->",
   "{",
   "long",
   "delay",
   "=",
   "(",
   "long",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "pow",
   "(",
   "2",
   ",",
   "retryCount",
   ")",
   "*",
   "1000",
   ",",
   "3000",
   ")",
   ";",
   "log",
   ".",
   "debug",
   "(",
   "\"Retrying batch insert in \"",
   "+",
   "delay",
   "+",
   "\" ms\"",
   ")",
   ";",
   "return",
   "Observable",
   ".",
   "timer",
   "(",
   "delay",
   ",",
   "TimeUnit",
   ".",
   "MILLISECONDS",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-265",
  "nl_tokens": [
   "Removes",
   "at",
   "most",
   "the",
   "given",
   "number",
   "of",
   "available",
   "elements",
   "from",
   "this",
   "queue",
   "and",
   "adds",
   "them",
   "into",
   "the",
   "given",
   "collection",
   ".",
   "A",
   "failure",
   "encountered",
   "while",
   "attempting",
   "to",
   "<tt",
   ">",
   "add<",
   "/",
   "tt",
   ">",
   "elements",
   "to",
   "collection",
   "<tt",
   ">",
   "c<",
   "/",
   "tt",
   ">",
   "may",
   "result",
   "in",
   "elements",
   "being",
   "in",
   "neither",
   "either",
   "or",
   "both",
   "collections",
   "when",
   "the",
   "associated",
   "exception",
   "is",
   "thrown",
   ".",
   "Attempts",
   "to",
   "drain",
   "a",
   "queue",
   "to",
   "itself",
   "result",
   "in",
   "<tt",
   ">",
   "IllegalArgumentException<",
   "/",
   "tt",
   ">",
   ".",
   "Further",
   "the",
   "behavior",
   "of",
   "this",
   "operation",
   "is",
   "undefined",
   "if",
   "the",
   "specified",
   "collection",
   "is",
   "modified",
   "while",
   "the",
   "operation",
   "is",
   "in",
   "progress",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "drainTo",
   "(",
   "Collection",
   "<",
   "?",
   "super",
   "E",
   ">",
   "collection",
   ",",
   "int",
   "maxElements",
   ")",
   "{",
   "if",
   "(",
   "collection",
   "==",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The 'collection' parameter may not be null.\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "collection",
   "==",
   "this",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The 'collection' parameter may not be this object.\"",
   ")",
   ";",
   "}",
   "// final Queue<E> items = this.buffer;",
   "ReentrantLock",
   "lock",
   "=",
   "this",
   ".",
   "lock",
   ";",
   "lock",
   ".",
   "lock",
   "(",
   ")",
   ";",
   "try",
   "{",
   "int",
   "n",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "<mask>",
   "=",
   "(",
   "(",
   "maxElements",
   ">=",
   "count",
   ")",
   "||",
   "(",
   "maxElements",
   "<",
   "0",
   ")",
   ")",
   "?",
   "count",
   ":",
   "maxElements",
   ";",
   "n",
   "<",
   "max",
   ";",
   "n",
   "++",
   ")",
   "{",
   "// Take items from the queue, do unblock the producers, but don't send not full signals yet.",
   "collection",
   ".",
   "add",
   "(",
   "extract",
   "(",
   "true",
   ",",
   "false",
   ")",
   ".",
   "getElement",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "n",
   ">",
   "0",
   ")",
   "{",
   "// count -= n;",
   "notFull",
   ".",
   "signalAll",
   "(",
   ")",
   ";",
   "}",
   "return",
   "n",
   ";",
   "}",
   "finally",
   "{",
   "lock",
   ".",
   "unlock",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-266",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "String",
   "produce",
   "(",
   "String",
   "lastSourceOffset",
   ",",
   "int",
   "maxBatchSize",
   ",",
   "BatchMaker",
   "batchMaker",
   ")",
   "throws",
   "StageException",
   "{",
   "String",
   "nextSourceOffset",
   "=",
   "null",
   ";",
   "LOG",
   ".",
   "debug",
   "(",
   "\"lastSourceOffset: {}\"",
   ",",
   "lastSourceOffset",
   ")",
   ";",
   "// send event only once for each time we run out of data.",
   "if",
   "(",
   "shouldSendNoMoreDataEvent",
   ")",
   "{",
   "CommonEvents",
   ".",
   "NO_MORE_DATA",
   ".",
   "create",
   "(",
   "getContext",
   "(",
   ")",
   ")",
   ".",
   "createAndSend",
   "(",
   ")",
   ";",
   "shouldSendNoMoreDataEvent",
   "=",
   "false",
   ";",
   "return",
   "lastSourceOffset",
   ";",
   "}",
   "int",
   "batchSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "conf",
   ".",
   "basicConfig",
   ".",
   "maxBatchSize",
   ",",
   "maxBatchSize",
   ")",
   ";",
   "if",
   "(",
   "!",
   "conf",
   ".",
   "queryExistingData",
   "||",
   "(",
   "null",
   "!=",
   "lastSourceOffset",
   "&&",
   "lastSourceOffset",
   ".",
   "startsWith",
   "(",
   "EVENT_ID_OFFSET_PREFIX",
   ")",
   ")",
   ")",
   "{",
   "if",
   "(",
   "conf",
   ".",
   "subscribeToStreaming",
   ")",
   "{",
   "nextSourceOffset",
   "=",
   "streamingProduce",
   "(",
   "lastSourceOffset",
   ",",
   "batchSize",
   ",",
   "batchMaker",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// We're done reading existing data, but we don't want to subscribe to Streaming API",
   "return",
   "null",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "conf",
   ".",
   "queryExistingData",
   ")",
   "{",
   "if",
   "(",
   "!",
   "queryInProgress",
   "(",
   ")",
   ")",
   "{",
   "long",
   "now",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "long",
   "delay",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "(",
   "lastQueryCompletedTime",
   "+",
   "(",
   "1000",
   "*",
   "conf",
   ".",
   "queryInterval",
   ")",
   ")",
   "-",
   "now",
   ")",
   ";",
   "if",
   "(",
   "delay",
   ">",
   "0",
   ")",
   "{",
   "// Sleep in one second increments so we don't tie up the app.",
   "LOG",
   ".",
   "info",
   "(",
   "\"{}ms remaining until next fetch.\"",
   ",",
   "delay",
   ")",
   ";",
   "ThreadUtil",
   ".",
   "sleep",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "delay",
   ",",
   "1000",
   ")",
   ")",
   ";",
   "return",
   "lastSourceOffset",
   ";",
   "}",
   "}",
   "if",
   "(",
   "conf",
   ".",
   "useBulkAPI",
   ")",
   "{",
   "nextSourceOffset",
   "=",
   "bulkProduce",
   "(",
   "lastSourceOffset",
   ",",
   "batchSize",
   ",",
   "batchMaker",
   ")",
   ";",
   "}",
   "else",
   "{",
   "nextSourceOffset",
   "=",
   "soapProduce",
   "(",
   "lastSourceOffset",
   ",",
   "batchSize",
   ",",
   "batchMaker",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "conf",
   ".",
   "subscribeToStreaming",
   ")",
   "{",
   "// No offset, and we're not querying existing data, so switch to streaming",
   "nextSourceOffset",
   "=",
   "READ_EVENTS_FROM_NOW",
   ";",
   "}",
   "LOG",
   ".",
   "debug",
   "(",
   "\"nextSourceOffset: {}\"",
   ",",
   "nextSourceOffset",
   ")",
   ";",
   "return",
   "nextSourceOffset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-267",
  "nl_tokens": [
   "Verifies",
   "that",
   "the",
   "matches",
   "returned",
   "by",
   "the",
   "match",
   "finder",
   "are",
   "valid",
   ".",
   "This",
   "is",
   "meant",
   "to",
   "be",
   "used",
   "in",
   "an",
   "assert",
   "statement",
   ".",
   "This",
   "is",
   "totally",
   "useless",
   "for",
   "actual",
   "encoding",
   "since",
   "match",
   "finder",
   "s",
   "results",
   "should",
   "naturally",
   "always",
   "be",
   "valid",
   "if",
   "it",
   "isn",
   "t",
   "broken",
   "."
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "verifyMatches",
   "(",
   "Matches",
   "matches",
   ")",
   "{",
   "int",
   "lenLimit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getAvail",
   "(",
   ")",
   ",",
   "matchLenMax",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "matches",
   ".",
   "count",
   ";",
   "++",
   "i",
   ")",
   "if",
   "(",
   "getMatchLen",
   "(",
   "matches",
   ".",
   "dist",
   "[",
   "i",
   "]",
   ",",
   "lenLimit",
   ")",
   "!=",
   "matches",
   ".",
   "len",
   "[",
   "i",
   "]",
   ")",
   "return",
   "false",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-268",
  "nl_tokens": [
   "Poll",
   "for",
   "new",
   "messages",
   "in",
   "a",
   "stream",
   ".",
   "If",
   "new",
   "messages",
   "are",
   "found",
   "beyond",
   "the",
   "last",
   "consumed",
   "position",
   "then",
   "they",
   "will",
   "be",
   "delivered",
   "to",
   "the",
   "{",
   "@link",
   "RawBlockHandler",
   "}",
   "up",
   "to",
   "a",
   "limited",
   "number",
   "of",
   "bytes",
   ".",
   "<p",
   ">",
   "This",
   "method",
   "is",
   "useful",
   "for",
   "operations",
   "like",
   "bulk",
   "archiving",
   "a",
   "stream",
   "to",
   "file",
   ".",
   "<p",
   ">",
   "A",
   "scan",
   "will",
   "terminate",
   "if",
   "a",
   "padding",
   "frame",
   "is",
   "encountered",
   ".",
   "If",
   "first",
   "frame",
   "in",
   "a",
   "scan",
   "is",
   "padding",
   "then",
   "a",
   "block",
   "for",
   "the",
   "padding",
   "is",
   "notified",
   ".",
   "If",
   "the",
   "padding",
   "comes",
   "after",
   "the",
   "first",
   "frame",
   "in",
   "a",
   "scan",
   "then",
   "the",
   "scan",
   "terminates",
   "at",
   "the",
   "offset",
   "the",
   "padding",
   "frame",
   "begins",
   ".",
   "Padding",
   "frames",
   "are",
   "delivered",
   "singularly",
   "in",
   "a",
   "block",
   ".",
   "<p",
   ">",
   "Padding",
   "frames",
   "may",
   "be",
   "for",
   "a",
   "greater",
   "range",
   "than",
   "the",
   "limit",
   "offset",
   "but",
   "only",
   "the",
   "header",
   "needs",
   "to",
   "be",
   "valid",
   "so",
   "relevant",
   "length",
   "of",
   "the",
   "frame",
   "is",
   "{",
   "@link",
   "io",
   ".",
   "aeron",
   ".",
   "protocol",
   ".",
   "DataHeaderFlyweight#HEADER_LENGTH",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "rawPoll",
   "(",
   "final",
   "RawBlockHandler",
   "handler",
   ",",
   "final",
   "int",
   "blockLengthLimit",
   ")",
   "{",
   "if",
   "(",
   "isClosed",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "final",
   "long",
   "position",
   "=",
   "subscriberPosition",
   ".",
   "get",
   "(",
   ")",
   ";",
   "final",
   "int",
   "termOffset",
   "=",
   "(",
   "int",
   ")",
   "position",
   "&",
   "termLengthMask",
   ";",
   "final",
   "int",
   "activeIndex",
   "=",
   "indexByPosition",
   "(",
   "position",
   ",",
   "positionBitsToShift",
   ")",
   ";",
   "final",
   "UnsafeBuffer",
   "termBuffer",
   "=",
   "termBuffers",
   "[",
   "activeIndex",
   "]",
   ";",
   "final",
   "int",
   "capacity",
   "=",
   "termBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ";",
   "final",
   "int",
   "limitOffset",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "termOffset",
   "+",
   "blockLengthLimit",
   ",",
   "capacity",
   ")",
   ";",
   "final",
   "int",
   "resultingOffset",
   "=",
   "TermBlockScanner",
   ".",
   "scan",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "limitOffset",
   ")",
   ";",
   "final",
   "int",
   "length",
   "=",
   "resultingOffset",
   "-",
   "termOffset",
   ";",
   "if",
   "(",
   "resultingOffset",
   ">",
   "termOffset",
   ")",
   "{",
   "try",
   "{",
   "final",
   "long",
   "fileOffset",
   "=",
   "(",
   "(",
   "long",
   ")",
   "capacity",
   "*",
   "activeIndex",
   ")",
   "+",
   "termOffset",
   ";",
   "final",
   "int",
   "termId",
   "=",
   "termBuffer",
   ".",
   "getInt",
   "(",
   "termOffset",
   "+",
   "TERM_ID_FIELD_OFFSET",
   ",",
   "LITTLE_ENDIAN",
   ")",
   ";",
   "handler",
   ".",
   "onBlock",
   "(",
   "logBuffers",
   ".",
   "fileChannel",
   "(",
   ")",
   ",",
   "fileOffset",
   ",",
   "termBuffer",
   ",",
   "termOffset",
   ",",
   "length",
   ",",
   "sessionId",
   ",",
   "termId",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "final",
   "Throwable",
   "t",
   ")",
   "{",
   "errorHandler",
   ".",
   "onError",
   "(",
   "t",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "subscriberPosition",
   ".",
   "setOrdered",
   "(",
   "position",
   "+",
   "length",
   ")",
   ";",
   "}",
   "}",
   "return",
   "length",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-269",
  "nl_tokens": [
   "Create",
   "an",
   "ArrayChar",
   "from",
   "a",
   "String"
  ],
  "pl_tokens": [
   "public",
   "static",
   "ArrayChar",
   "makeFromString",
   "(",
   "String",
   "s",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "ArrayChar",
   "result",
   "=",
   "new",
   "ArrayChar",
   ".",
   "D1",
   "(",
   "max",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "max",
   "&&",
   "i",
   "<",
   "s",
   ".",
   "length",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "result",
   ".",
   "setChar",
   "(",
   "i",
   ",",
   "s",
   ".",
   "charAt",
   "(",
   "i",
   ")",
   ")",
   ";",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-270",
  "nl_tokens": [
   "Returns",
   "the",
   "minimum",
   "of",
   "the",
   "given",
   "values",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "<mask>",
   "(",
   "long",
   "...",
   "values",
   ")",
   "{",
   "Parameters",
   ".",
   "checkCondition",
   "(",
   "values",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "long",
   "min",
   "=",
   "values",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "values",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "min",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "min",
   ",",
   "values",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-271",
  "nl_tokens": [
   "view",
   "s",
   "center",
   "and",
   "scale",
   "according",
   "to",
   "the",
   "cropping",
   "rectangle",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "centerBasedOnHighlightView",
   "(",
   "HighlightView",
   "hv",
   ")",
   "{",
   "Rect",
   "drawRect",
   "=",
   "hv",
   ".",
   "mDrawRect",
   ";",
   "float",
   "width",
   "=",
   "drawRect",
   ".",
   "width",
   "(",
   ")",
   ";",
   "float",
   "height",
   "=",
   "drawRect",
   ".",
   "height",
   "(",
   ")",
   ";",
   "float",
   "thisWidth",
   "=",
   "getWidth",
   "(",
   ")",
   ";",
   "float",
   "thisHeight",
   "=",
   "getHeight",
   "(",
   ")",
   ";",
   "float",
   "z1",
   "=",
   "thisWidth",
   "/",
   "width",
   "*",
   ".8F",
   ";",
   "float",
   "z2",
   "=",
   "thisHeight",
   "/",
   "height",
   "*",
   ".8F",
   ";",
   "float",
   "zoom",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "z1",
   ",",
   "z2",
   ")",
   ";",
   "zoom",
   "=",
   "zoom",
   "*",
   "this",
   ".",
   "getScale",
   "(",
   ")",
   ";",
   "zoom",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "1F",
   ",",
   "zoom",
   ")",
   ";",
   "if",
   "(",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "zoom",
   "-",
   "getScale",
   "(",
   ")",
   ")",
   "/",
   "zoom",
   ")",
   ">",
   ".1",
   ")",
   "{",
   "float",
   "[",
   "]",
   "coordinates",
   "=",
   "new",
   "float",
   "[",
   "]",
   "{",
   "hv",
   ".",
   "mCropRect",
   ".",
   "centerX",
   "(",
   ")",
   ",",
   "hv",
   ".",
   "mCropRect",
   ".",
   "centerY",
   "(",
   ")",
   "}",
   ";",
   "getImageMatrix",
   "(",
   ")",
   ".",
   "mapPoints",
   "(",
   "coordinates",
   ")",
   ";",
   "zoomTo",
   "(",
   "zoom",
   ",",
   "coordinates",
   "[",
   "0",
   "]",
   ",",
   "coordinates",
   "[",
   "1",
   "]",
   ",",
   "300F",
   ")",
   ";",
   "}",
   "ensureVisible",
   "(",
   "hv",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-272",
  "nl_tokens": [
   "Maximum",
   "function",
   "with",
   "a",
   "scalar"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "ndArray",
   ",",
   "double",
   "k",
   ",",
   "boolean",
   "dup",
   ")",
   "{",
   "return",
   "exec",
   "(",
   "dup",
   "?",
   "new",
   "ScalarMax",
   "(",
   "ndArray",
   ".",
   "dup",
   "(",
   ")",
   ",",
   "k",
   ")",
   ":",
   "new",
   "ScalarMax",
   "(",
   "ndArray",
   ",",
   "k",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-273",
  "nl_tokens": [
   "Write",
   "the",
   "bytes",
   "to",
   "byte",
   "array",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "write",
   "(",
   "byte",
   "[",
   "]",
   "b",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "{",
   "if",
   "(",
   "(",
   "off",
   "<",
   "0",
   ")",
   "||",
   "(",
   "off",
   ">",
   "b",
   ".",
   "length",
   ")",
   "||",
   "(",
   "len",
   "<",
   "0",
   ")",
   "||",
   "(",
   "(",
   "off",
   "+",
   "len",
   ")",
   ">",
   "b",
   ".",
   "length",
   ")",
   "||",
   "(",
   "(",
   "off",
   "+",
   "len",
   ")",
   "<",
   "0",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IndexOutOfBoundsException",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   ";",
   "}",
   "synchronized",
   "(",
   "this",
   ")",
   "{",
   "int",
   "newcount",
   "=",
   "count",
   "+",
   "len",
   ";",
   "int",
   "remaining",
   "=",
   "len",
   ";",
   "int",
   "inBufferPos",
   "=",
   "count",
   "-",
   "filledBufferSum",
   ";",
   "while",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   "{",
   "int",
   "part",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remaining",
   ",",
   "currentBuffer",
   ".",
   "length",
   "-",
   "inBufferPos",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "b",
   ",",
   "off",
   "+",
   "len",
   "-",
   "remaining",
   ",",
   "currentBuffer",
   ",",
   "inBufferPos",
   ",",
   "part",
   ")",
   ";",
   "remaining",
   "-=",
   "part",
   ";",
   "if",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   "{",
   "needNewBuffer",
   "(",
   "newcount",
   ")",
   ";",
   "inBufferPos",
   "=",
   "0",
   ";",
   "}",
   "}",
   "count",
   "=",
   "newcount",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-274",
  "nl_tokens": [
   "Returns",
   "a",
   "Maybe",
   "that",
   "emits",
   "{",
   "@code",
   "0L",
   "}",
   "after",
   "a",
   "specified",
   "delay",
   "on",
   "a",
   "specified",
   "Scheduler",
   ".",
   "<p",
   ">",
   "<img",
   "width",
   "=",
   "640",
   "height",
   "=",
   "200",
   "src",
   "=",
   "https",
   ":",
   "//",
   "raw",
   ".",
   "github",
   ".",
   "com",
   "/",
   "wiki",
   "/",
   "ReactiveX",
   "/",
   "RxJava",
   "/",
   "images",
   "/",
   "rx",
   "-",
   "operators",
   "/",
   "timer",
   ".",
   "s",
   ".",
   "png",
   "alt",
   "=",
   ">",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Scheduler",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "You",
   "specify",
   "which",
   "{",
   "@link",
   "Scheduler",
   "}",
   "this",
   "operator",
   "will",
   "use",
   ".",
   "<",
   "/",
   "dd",
   ">",
   "<",
   "/",
   "dl",
   ">"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "static",
   "Maybe",
   "<",
   "Long",
   ">",
   "timer",
   "(",
   "long",
   "delay",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "MaybeTimer",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "delay",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-275",
  "nl_tokens": [
   "/",
   "*",
   "(",
   "non",
   "-",
   "Javadoc",
   ")"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "<",
   "R",
   ">",
   "R",
   "transactNew",
   "(",
   "final",
   "ObjectifyImpl",
   "parent",
   ",",
   "int",
   "limitTries",
   ",",
   "final",
   "Work",
   "<",
   "R",
   ">",
   "work",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "limitTries",
   ">=",
   "1",
   ")",
   ";",
   "final",
   "int",
   "ORIGINAL_TRIES",
   "=",
   "limitTries",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "try",
   "{",
   "return",
   "transactOnce",
   "(",
   "parent",
   ",",
   "work",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "DatastoreException",
   "ex",
   ")",
   "{",
   "// This doesn't work because the SDK considers all transactions to be non-retryable. Objectify has always\r",
   "// assumed that transactions are idempotent and retries accordingly. So we have to explicitly check against\r",
   "// code 10, which is ABORTED. https://cloud.google.com/datastore/docs/concepts/errors\r",
   "//\t\t\t\tif (!ex.isRetryable())\r",
   "//\t\t\t\t\tthrow ex;\r",
   "// I hate this so much. Sometimes the transaction gets closed by the datastore during contention and\r",
   "// then it proceeds to freak out and 503.\r",
   "if",
   "(",
   "Code",
   ".",
   "ABORTED",
   ".",
   "getNumber",
   "(",
   ")",
   "==",
   "ex",
   ".",
   "getCode",
   "(",
   ")",
   "||",
   "(",
   "Code",
   ".",
   "INVALID_ARGUMENT",
   ".",
   "getNumber",
   "(",
   ")",
   "==",
   "ex",
   ".",
   "getCode",
   "(",
   ")",
   "&&",
   "ex",
   ".",
   "getMessage",
   "(",
   ")",
   ".",
   "contains",
   "(",
   "\"transaction closed\"",
   ")",
   ")",
   ")",
   "{",
   "// Continue to retry logic\r",
   "}",
   "else",
   "{",
   "throw",
   "ex",
   ";",
   "}",
   "if",
   "(",
   "--",
   "limitTries",
   ">",
   "0",
   ")",
   "{",
   "log",
   ".",
   "warn",
   "(",
   "\"Retrying {} failure for {}: {}\"",
   ",",
   "ex",
   ".",
   "getReason",
   "(",
   ")",
   ",",
   "work",
   ",",
   "ex",
   ")",
   ";",
   "log",
   ".",
   "trace",
   "(",
   "\"Details of transaction failure\"",
   ",",
   "ex",
   ")",
   ";",
   "try",
   "{",
   "// Do increasing backoffs with randomness\r",
   "Thread",
   ".",
   "sleep",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "10000",
   ",",
   "(",
   "long",
   ")",
   "(",
   "0.5",
   "*",
   "Math",
   ".",
   "random",
   "(",
   ")",
   "+",
   "0.5",
   ")",
   "*",
   "200",
   "*",
   "(",
   "ORIGINAL_TRIES",
   "-",
   "limitTries",
   "+",
   "2",
   ")",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "InterruptedException",
   "ignored",
   ")",
   "{",
   "}",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "DatastoreException",
   "(",
   "ex",
   ".",
   "getCode",
   "(",
   ")",
   ",",
   "\"Failed retrying datastore \"",
   "+",
   "ORIGINAL_TRIES",
   "+",
   "\" times \"",
   ",",
   "ex",
   ".",
   "getReason",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-276",
  "nl_tokens": [
   "Refreshes",
   "the",
   "<code",
   ">",
   "LiveFile<",
   "/",
   "code",
   ">",
   "if",
   "the",
   "file",
   "was",
   "renamed",
   "the",
   "path",
   "will",
   "have",
   "the",
   "new",
   "name",
   "."
  ],
  "pl_tokens": [
   "public",
   "LiveFile",
   "refresh",
   "(",
   ")",
   "throws",
   "IOException",
   "{",
   "LiveFile",
   "refresh",
   "=",
   "this",
   ";",
   "boolean",
   "changed",
   ";",
   "try",
   "{",
   "BasicFileAttributes",
   "attrs",
   "=",
   "Files",
   ".",
   "readAttributes",
   "(",
   "path",
   ",",
   "BasicFileAttributes",
   ".",
   "class",
   ")",
   ";",
   "String",
   "iNodeCurrent",
   "=",
   "attrs",
   ".",
   "fileKey",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "int",
   "headLenCurrent",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "headLen",
   ",",
   "attrs",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "String",
   "headHashCurrent",
   "=",
   "computeHash",
   "(",
   "path",
   ",",
   "headLenCurrent",
   ")",
   ";",
   "changed",
   "=",
   "!",
   "this",
   ".",
   "iNode",
   ".",
   "equals",
   "(",
   "iNodeCurrent",
   ")",
   "||",
   "!",
   "this",
   ".",
   "headHash",
   ".",
   "equals",
   "(",
   "headHashCurrent",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "NoSuchFileException",
   "ex",
   ")",
   "{",
   "changed",
   "=",
   "true",
   ";",
   "}",
   "if",
   "(",
   "changed",
   ")",
   "{",
   "try",
   "(",
   "DirectoryStream",
   "<",
   "Path",
   ">",
   "directoryStream",
   "=",
   "Files",
   ".",
   "newDirectoryStream",
   "(",
   "path",
   ".",
   "getParent",
   "(",
   ")",
   ")",
   ")",
   "{",
   "for",
   "(",
   "Path",
   "path",
   ":",
   "directoryStream",
   ")",
   "{",
   "BasicFileAttributes",
   "attrs",
   "=",
   "Files",
   ".",
   "readAttributes",
   "(",
   "path",
   ",",
   "BasicFileAttributes",
   ".",
   "class",
   ")",
   ";",
   "String",
   "iNode",
   "=",
   "attrs",
   ".",
   "fileKey",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "int",
   "headLen",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "min",
   "(",
   "this",
   ".",
   "headLen",
   ",",
   "attrs",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "String",
   "headHash",
   "=",
   "computeHash",
   "(",
   "path",
   ",",
   "headLen",
   ")",
   ";",
   "if",
   "(",
   "iNode",
   ".",
   "equals",
   "(",
   "this",
   ".",
   "iNode",
   ")",
   "&&",
   "headHash",
   ".",
   "equals",
   "(",
   "this",
   ".",
   "headHash",
   ")",
   ")",
   "{",
   "if",
   "(",
   "headLen",
   "==",
   "0",
   ")",
   "{",
   "headLen",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "min",
   "(",
   "HEAD_LEN",
   ",",
   "attrs",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "headHash",
   "=",
   "computeHash",
   "(",
   "path",
   ",",
   "headLen",
   ")",
   ";",
   "}",
   "refresh",
   "=",
   "new",
   "LiveFile",
   "(",
   "path",
   ",",
   "iNode",
   ",",
   "headHash",
   ",",
   "headLen",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "}",
   "}",
   "return",
   "refresh",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-277",
  "nl_tokens": [
   "This",
   "ensures",
   "that",
   "the",
   "capacity",
   "is",
   "at",
   "least",
   "minCapacity",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "ensureCapacity",
   "(",
   "long",
   "minCapacity",
   ")",
   "{",
   "if",
   "(",
   "array",
   ".",
   "length",
   "<",
   "minCapacity",
   ")",
   "{",
   "//ensure minCapacity is < Integer.MAX_VALUE",
   "ErddapMath2",
   ".",
   "ensureArraySizeOkay",
   "(",
   "minCapacity",
   ",",
   "\"StringArray\"",
   ")",
   ";",
   "//caller may know exact number needed, so don't double above 2x current size",
   "int",
   "newCapacity",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "Integer",
   ".",
   "MAX_VALUE",
   "-",
   "1",
   ",",
   "array",
   ".",
   "length",
   "+",
   "(",
   "long",
   ")",
   "array",
   ".",
   "length",
   ")",
   ";",
   "if",
   "(",
   "newCapacity",
   "<",
   "minCapacity",
   ")",
   "newCapacity",
   "=",
   "(",
   "int",
   ")",
   "minCapacity",
   ";",
   "//safe since checked above",
   "String",
   "[",
   "]",
   "newArray",
   "=",
   "new",
   "String",
   "[",
   "newCapacity",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "array",
   ",",
   "0",
   ",",
   "newArray",
   ",",
   "0",
   ",",
   "size",
   ")",
   ";",
   "array",
   "=",
   "newArray",
   ";",
   "//do last to minimize concurrency problems",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-278",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "String",
   "produce",
   "(",
   "String",
   "lastSourceOffset",
   ",",
   "int",
   "maxBatchSize",
   ",",
   "BatchMaker",
   "batchMaker",
   ")",
   "throws",
   "StageException",
   "{",
   "long",
   "start",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "int",
   "chunksToFetch",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "conf",
   ".",
   "basic",
   ".",
   "maxBatchSize",
   ",",
   "maxBatchSize",
   ")",
   ";",
   "Optional",
   "<",
   "String",
   ">",
   "newSourceOffset",
   "=",
   "Optional",
   ".",
   "empty",
   "(",
   ")",
   ";",
   "recordCount",
   "=",
   "0",
   ";",
   "setPageOffset",
   "(",
   "lastSourceOffset",
   ")",
   ";",
   "setResolvedUrl",
   "(",
   "resolveInitialUrl",
   "(",
   "lastSourceOffset",
   ")",
   ")",
   ";",
   "WebTarget",
   "target",
   "=",
   "client",
   ".",
   "target",
   "(",
   "getResolvedUrl",
   "(",
   ")",
   ")",
   ";",
   "// If the request (headers or body) contain a known sensitive EL and we're not using https then fail the request.",
   "if",
   "(",
   "requestContainsSensitiveInfo",
   "(",
   ")",
   "&&",
   "!",
   "target",
   ".",
   "getUri",
   "(",
   ")",
   ".",
   "getScheme",
   "(",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ".",
   "startsWith",
   "(",
   "\"https\"",
   ")",
   ")",
   "{",
   "LOG",
   ".",
   "error",
   "(",
   "Errors",
   ".",
   "HTTP_07",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "throw",
   "new",
   "StageException",
   "(",
   "Errors",
   ".",
   "HTTP_07",
   ")",
   ";",
   "}",
   "boolean",
   "uninterrupted",
   "=",
   "true",
   ";",
   "while",
   "(",
   "!",
   "waitTimeExpired",
   "(",
   "start",
   ")",
   "&&",
   "uninterrupted",
   "&&",
   "(",
   "recordCount",
   "<",
   "chunksToFetch",
   ")",
   ")",
   "{",
   "if",
   "(",
   "parser",
   "!=",
   "null",
   ")",
   "{",
   "// We already have an response that we haven't finished reading.",
   "newSourceOffset",
   "=",
   "Optional",
   ".",
   "of",
   "(",
   "parseResponse",
   "(",
   "start",
   ",",
   "chunksToFetch",
   ",",
   "batchMaker",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "shouldMakeRequest",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "conf",
   ".",
   "pagination",
   ".",
   "mode",
   "!=",
   "PaginationMode",
   ".",
   "NONE",
   ")",
   "{",
   "target",
   "=",
   "client",
   ".",
   "target",
   "(",
   "resolveNextPageUrl",
   "(",
   "newSourceOffset",
   ".",
   "orElse",
   "(",
   "null",
   ")",
   ")",
   ")",
   ";",
   "// Pause between paging requests so we don't get rate limited.",
   "uninterrupted",
   "=",
   "ThreadUtil",
   ".",
   "sleep",
   "(",
   "conf",
   ".",
   "pagination",
   ".",
   "rateLimit",
   ")",
   ";",
   "}",
   "makeRequest",
   "(",
   "target",
   ")",
   ";",
   "if",
   "(",
   "lastRequestTimedOut",
   ")",
   "{",
   "String",
   "actionName",
   "=",
   "conf",
   ".",
   "responseTimeoutActionConfig",
   ".",
   "getAction",
   "(",
   ")",
   ".",
   "name",
   "(",
   ")",
   ";",
   "LOG",
   ".",
   "warn",
   "(",
   "\"HTTPClient timed out after waiting {} ms for response from server;\"",
   "+",
   "\" reconnecting client and proceeding as per configured {} action\"",
   ",",
   "conf",
   ".",
   "client",
   ".",
   "readTimeoutMillis",
   ",",
   "actionName",
   ")",
   ";",
   "reconnectClient",
   "(",
   ")",
   ";",
   "return",
   "nonTerminating",
   "(",
   "lastSourceOffset",
   ")",
   ";",
   "}",
   "else",
   "{",
   "newSourceOffset",
   "=",
   "processResponse",
   "(",
   "start",
   ",",
   "chunksToFetch",
   ",",
   "batchMaker",
   ")",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "conf",
   ".",
   "httpMode",
   "==",
   "HttpClientMode",
   ".",
   "BATCH",
   ")",
   "{",
   "// We are done.",
   "return",
   "null",
   ";",
   "}",
   "else",
   "{",
   "// In polling mode, waiting for the next polling interval.",
   "uninterrupted",
   "=",
   "ThreadUtil",
   ".",
   "sleep",
   "(",
   "SLEEP_TIME_WAITING_FOR_BATCH_SIZE_MS",
   ")",
   ";",
   "}",
   "}",
   "return",
   "newSourceOffset",
   ".",
   "orElse",
   "(",
   "lastSourceOffset",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-279",
  "nl_tokens": [
   "Moves",
   "all",
   "<code",
   ">",
   "diagram<",
   "/",
   "code",
   ">",
   "nodes",
   "to",
   "upper",
   "left",
   "corner",
   "and",
   "shifting",
   "to",
   "right",
   "if",
   "neccessary",
   "to",
   "get",
   "rid",
   "of",
   "negative",
   "XY",
   "coordinates",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "zeroBaseDiagram",
   "(",
   "ReteGraph",
   "graph",
   ")",
   "{",
   "Dimension",
   "dim",
   "=",
   "rootEditPart",
   ".",
   "getContentPane",
   "(",
   ")",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "int",
   "minx",
   "=",
   "0",
   ",",
   "miny",
   "=",
   "0",
   ",",
   "maxx",
   "=",
   "0",
   ",",
   "x",
   "=",
   "dim",
   ".",
   "width",
   ";",
   "final",
   "Iterator",
   "<",
   "BaseVertex",
   ">",
   "nodeIter",
   "=",
   "graph",
   ".",
   "getChildren",
   "(",
   ")",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "nodeIter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "Point",
   "loc",
   "=",
   "nodeIter",
   ".",
   "next",
   "(",
   ")",
   ".",
   "getLocation",
   "(",
   ")",
   ";",
   "minx",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "loc",
   ".",
   "x",
   ",",
   "minx",
   ")",
   ";",
   "maxx",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "loc",
   ".",
   "x",
   ",",
   "maxx",
   ")",
   ";",
   "miny",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "loc",
   ".",
   "y",
   ",",
   "miny",
   ")",
   ";",
   "}",
   "int",
   "delta",
   "=",
   "(",
   "x",
   "-",
   "(",
   "maxx",
   "-",
   "minx",
   "+",
   "20",
   ")",
   ")",
   "/",
   "2",
   ";",
   "minx",
   "=",
   "minx",
   "-",
   "(",
   "delta",
   ")",
   ";",
   "final",
   "Iterator",
   "<",
   "BaseVertex",
   ">",
   "nodeIter2",
   "=",
   "graph",
   ".",
   "getChildren",
   "(",
   ")",
   ".",
   "iterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "nodeIter2",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "final",
   "BaseVertex",
   "vertex",
   "=",
   "nodeIter2",
   ".",
   "next",
   "(",
   ")",
   ";",
   "Point",
   "loc",
   "=",
   "vertex",
   ".",
   "getLocation",
   "(",
   ")",
   ";",
   "vertex",
   ".",
   "setLocation",
   "(",
   "new",
   "Point",
   "(",
   "loc",
   ".",
   "x",
   "-",
   "minx",
   ",",
   "loc",
   ".",
   "y",
   "-",
   "miny",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-280",
  "nl_tokens": [
   "Set",
   "the",
   "state",
   "from",
   "the",
   "last",
   "saved",
   "in",
   "the",
   "PreferencesExt",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "restoreState",
   "(",
   "PreferencesExt",
   "store",
   ")",
   "{",
   "if",
   "(",
   "store",
   "==",
   "null",
   ")",
   "return",
   ";",
   "int",
   "ncols",
   "=",
   "table",
   ".",
   "getColumnCount",
   "(",
   ")",
   ";",
   "// stored column order",
   "int",
   "[",
   "]",
   "modelIndex",
   "=",
   "(",
   "int",
   "[",
   "]",
   ")",
   "store",
   ".",
   "getBean",
   "(",
   "\"ColumnOrder\"",
   ",",
   "null",
   ")",
   ";",
   "if",
   "(",
   "(",
   "modelIndex",
   "!=",
   "null",
   ")",
   "&&",
   "(",
   "modelIndex",
   ".",
   "length",
   "==",
   "ncols",
   ")",
   ")",
   "{",
   "// what about invisible ??",
   "// make invisible any not stored",
   "boolean",
   "[",
   "]",
   "visible",
   "=",
   "new",
   "boolean",
   "[",
   "ncols",
   "]",
   ";",
   "for",
   "(",
   "int",
   "aModelIndex",
   ":",
   "modelIndex",
   ")",
   "if",
   "(",
   "aModelIndex",
   "<",
   "ncols",
   ")",
   "visible",
   "[",
   "aModelIndex",
   "]",
   "=",
   "true",
   ";",
   "// modify popup menu",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "ncols",
   ";",
   "i",
   "++",
   ")",
   "if",
   "(",
   "!",
   "visible",
   "[",
   "i",
   "]",
   ")",
   "{",
   "//System.out.println( colName[i]+\" hide \"+i);",
   "acts",
   "[",
   "i",
   "]",
   ".",
   "hideColumn",
   "(",
   ")",
   ";",
   "acts",
   "[",
   "i",
   "]",
   ".",
   "putValue",
   "(",
   "BAMutil",
   ".",
   "STATE",
   ",",
   "new",
   "Boolean",
   "(",
   "false",
   ")",
   ")",
   ";",
   "}",
   "// now set the header order",
   "TableColumnModel",
   "tcm",
   "=",
   "table",
   ".",
   "getColumnModel",
   "(",
   ")",
   ";",
   "int",
   "n",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "modelIndex",
   ".",
   "length",
   ",",
   "table",
   ".",
   "getColumnCount",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "TableColumn",
   "tc",
   "=",
   "tcm",
   ".",
   "getColumn",
   "(",
   "i",
   ")",
   ";",
   "tc",
   ".",
   "setModelIndex",
   "(",
   "modelIndex",
   "[",
   "i",
   "]",
   ")",
   ";",
   "String",
   "name",
   "=",
   "model",
   ".",
   "getColumnName",
   "(",
   "modelIndex",
   "[",
   "i",
   "]",
   ")",
   ";",
   "tc",
   ".",
   "setHeaderValue",
   "(",
   "name",
   ")",
   ";",
   "tc",
   ".",
   "setIdentifier",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "useThreads",
   "&&",
   "(",
   "modelIndex",
   "[",
   "i",
   "]",
   "==",
   "threadCol",
   ")",
   ")",
   "{",
   "threadHeaderRenderer",
   "=",
   "new",
   "ThreadHeaderRenderer",
   "(",
   "threadCol",
   ")",
   ";",
   "tc",
   ".",
   "setHeaderRenderer",
   "(",
   "threadHeaderRenderer",
   ")",
   ";",
   "}",
   "else",
   "tc",
   ".",
   "setHeaderRenderer",
   "(",
   "new",
   "SortedHeaderRenderer",
   "(",
   "name",
   ",",
   "modelIndex",
   "[",
   "i",
   "]",
   ")",
   ")",
   ";",
   "}",
   "}",
   "// set the column widths",
   "Object",
   "colWidths",
   "=",
   "store",
   ".",
   "getBean",
   "(",
   "\"ColumnWidths\"",
   ",",
   "null",
   ")",
   ";",
   "if",
   "(",
   "colWidths",
   "==",
   "null",
   ")",
   "return",
   ";",
   "int",
   "[",
   "]",
   "size",
   "=",
   "(",
   "int",
   "[",
   "]",
   ")",
   "colWidths",
   ";",
   "setColumnWidths",
   "(",
   "size",
   ")",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\" read widths = \"",
   ")",
   ";",
   "for",
   "(",
   "int",
   "aSize",
   ":",
   "size",
   ")",
   "System",
   ".",
   "out",
   ".",
   "print",
   "(",
   "\" \"",
   "+",
   "aSize",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   ")",
   ";",
   "}",
   "boolean",
   "isThreadsOn",
   "=",
   "store",
   ".",
   "getBoolean",
   "(",
   "\"isThreadsOn\"",
   ",",
   "false",
   ")",
   ";",
   "if",
   "(",
   "useThreads",
   ")",
   "{",
   "model",
   ".",
   "setThreadsOn",
   "(",
   "isThreadsOn",
   ")",
   ";",
   "threadHeaderRenderer",
   ".",
   "setOn",
   "(",
   "isThreadsOn",
   ")",
   ";",
   "}",
   "int",
   "colNo",
   "=",
   "store",
   ".",
   "getInt",
   "(",
   "\"SortOnCol\"",
   ",",
   "0",
   ")",
   ";",
   "boolean",
   "reverse",
   "=",
   "store",
   ".",
   "getBoolean",
   "(",
   "\"SortReverse\"",
   ",",
   "false",
   ")",
   ";",
   "model",
   ".",
   "setSortCol",
   "(",
   "colNo",
   ")",
   ";",
   "model",
   ".",
   "setReverse",
   "(",
   "reverse",
   ")",
   ";",
   "setSortCol",
   "(",
   "colNo",
   ",",
   "reverse",
   ")",
   ";",
   "model",
   ".",
   "sort",
   "(",
   ")",
   ";",
   "table",
   ".",
   "fireDataChanged",
   "(",
   ")",
   ";",
   "}",
   "private",
   "void",
   "setColumnWidths",
   "",
   "(",
   "int",
   "[",
   "]",
   "sizes",
   ")",
   "{",
   "TableColumnModel",
   "tcm",
   "=",
   "table",
   ".",
   "getColumnModel",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "table",
   ".",
   "getColumnCount",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "TableColumn",
   "tc",
   "=",
   "tcm",
   ".",
   "getColumn",
   "(",
   "i",
   ")",
   ";",
   "int",
   "maxw",
   "=",
   "(",
   "(",
   "sizes",
   "==",
   "null",
   ")",
   "||",
   "(",
   "i",
   ">=",
   "sizes",
   ".",
   "length",
   ")",
   ")",
   "?",
   "10",
   ":",
   "sizes",
   "[",
   "i",
   "]",
   ";",
   "//     model.getPreferredWidthForColumn(tc) : sizes[i];",
   "tc",
   ".",
   "setPreferredWidth",
   "(",
   "maxw",
   ")",
   ";",
   "}",
   "//table.sizeColumnsToFit(0);     //  must be called due to a JTable bug",
   "}",
   "public",
   "void",
   "setColOn",
   "",
   "(",
   "int",
   "colno",
   ",",
   "boolean",
   "state",
   ",",
   "int",
   "pos",
   ")",
   "{",
   "// System.out.println(\"setColOn \"+colno+\" \"+state+\" \"+pos);",
   "acts",
   "[",
   "colno",
   "]",
   ".",
   "putValue",
   "(",
   "BAMutil",
   ".",
   "STATE",
   ",",
   "new",
   "Boolean",
   "(",
   "state",
   ")",
   ")",
   ";",
   "if",
   "(",
   "state",
   ")",
   "acts",
   "[",
   "colno",
   "]",
   ".",
   "addAtPos",
   "(",
   "pos",
   ")",
   ";",
   "else",
   "acts",
   "[",
   "colno",
   "]",
   ".",
   "hideColumn",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-281",
  "nl_tokens": [
   "Broadcast",
   "min",
   "op",
   ".",
   "See",
   ":",
   "{"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "x",
   ",",
   "INDArray",
   "y",
   ",",
   "INDArray",
   "z",
   ",",
   "int",
   "...",
   "dimensions",
   ")",
   "{",
   "if",
   "(",
   "dimensions",
   "==",
   "null",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "Arrays",
   ".",
   "equals",
   "(",
   "x",
   ".",
   "shape",
   "(",
   ")",
   ",",
   "y",
   ".",
   "shape",
   "(",
   ")",
   ")",
   ",",
   "getFormattedShapeErrorMessageXy",
   "(",
   "x",
   ",",
   "y",
   ")",
   ")",
   ";",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "Arrays",
   ".",
   "equals",
   "(",
   "x",
   ".",
   "shape",
   "(",
   ")",
   ",",
   "z",
   ".",
   "shape",
   "(",
   ")",
   ")",
   ",",
   "getFormattedShapeErrorMessageXResult",
   "(",
   "x",
   ",",
   "z",
   ")",
   ")",
   ";",
   "return",
   "Nd4j",
   ".",
   "getExecutioner",
   "(",
   ")",
   ".",
   "execAndReturn",
   "(",
   "new",
   "OldMin",
   "(",
   "x",
   ",",
   "y",
   ",",
   "z",
   ",",
   "x",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "return",
   "Nd4j",
   ".",
   "getExecutioner",
   "(",
   ")",
   ".",
   "execAndReturn",
   "(",
   "new",
   "BroadcastMin",
   "(",
   "x",
   ",",
   "y",
   ",",
   "z",
   ",",
   "dimensions",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-282",
  "nl_tokens": [
   "Pushes",
   "the",
   "given",
   "abstract",
   "type",
   "on",
   "the",
   "output",
   "frame",
   "stack",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "push",
   "(",
   "final",
   "int",
   "abstractType",
   ")",
   "{",
   "// Create and/or resize the output stack array if necessary.",
   "if",
   "(",
   "outputStack",
   "==",
   "null",
   ")",
   "{",
   "outputStack",
   "=",
   "new",
   "int",
   "[",
   "10",
   "]",
   ";",
   "}",
   "int",
   "outputStackLength",
   "=",
   "outputStack",
   ".",
   "length",
   ";",
   "if",
   "(",
   "outputStackTop",
   ">=",
   "outputStackLength",
   ")",
   "{",
   "int",
   "[",
   "]",
   "newOutputStack",
   "=",
   "new",
   "int",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "outputStackTop",
   "+",
   "1",
   ",",
   "2",
   "*",
   "outputStackLength",
   ")",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "outputStack",
   ",",
   "0",
   ",",
   "newOutputStack",
   ",",
   "0",
   ",",
   "outputStackLength",
   ")",
   ";",
   "outputStack",
   "=",
   "newOutputStack",
   ";",
   "}",
   "// Pushes the abstract type on the output stack.",
   "outputStack",
   "[",
   "outputStackTop",
   "++",
   "]",
   "=",
   "abstractType",
   ";",
   "// Updates the maximum size reached by the output stack, if needed (note that this size is",
   "// relative to the input stack size, which is not known yet).",
   "short",
   "outputStackSize",
   "=",
   "(",
   "short",
   ")",
   "(",
   "outputStackStart",
   "+",
   "outputStackTop",
   ")",
   ";",
   "if",
   "(",
   "outputStackSize",
   ">",
   "owner",
   ".",
   "outputStackMax",
   ")",
   "{",
   "owner",
   ".",
   "outputStackMax",
   "=",
   "outputStackSize",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-283",
  "nl_tokens": [
   "/",
   "*",
   "(",
   "non",
   "-",
   "Javadoc",
   ")"
  ],
  "pl_tokens": [
   "public",
   "synchronized",
   "Charset",
   "detectCodepage",
   "(",
   "InputStream",
   "in",
   ",",
   "int",
   "length",
   ")",
   "throws",
   "IOException",
   "{",
   "this",
   ".",
   "Reset",
   "(",
   ")",
   ";",
   "int",
   "len",
   ";",
   "int",
   "read",
   "=",
   "0",
   ";",
   "boolean",
   "done",
   "=",
   "false",
   ";",
   "boolean",
   "isAscii",
   "=",
   "true",
   ";",
   "Charset",
   "ret",
   "=",
   "null",
   ";",
   "do",
   "{",
   "len",
   "=",
   "in",
   ".",
   "read",
   "(",
   "buf",
   ",",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "length",
   ",",
   "length",
   "-",
   "read",
   ")",
   ")",
   ";",
   "if",
   "(",
   "len",
   ">",
   "0",
   ")",
   "{",
   "read",
   "+=",
   "len",
   ";",
   "}",
   "if",
   "(",
   "!",
   "done",
   ")",
   "done",
   "=",
   "det",
   ".",
   "DoIt",
   "(",
   "buf",
   ",",
   "len",
   ",",
   "false",
   ")",
   ";",
   "}",
   "while",
   "(",
   "len",
   ">",
   "0",
   "&&",
   "!",
   "done",
   ")",
   ";",
   "det",
   ".",
   "DataEnd",
   "(",
   ")",
   ";",
   "if",
   "(",
   "this",
   ".",
   "codpage",
   "==",
   "null",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "m_guessing",
   ")",
   "{",
   "ret",
   "=",
   "guess",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ret",
   "=",
   "UnknownCharset",
   ".",
   "getInstance",
   "(",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "ret",
   "=",
   "this",
   ".",
   "codpage",
   ";",
   "}",
   "return",
   "ret",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-284",
  "nl_tokens": [
   "How",
   "far",
   "ahead",
   "a",
   "producer",
   "can",
   "get",
   "from",
   "a",
   "consumer",
   "position",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "producerWindowLength",
   "(",
   "final",
   "int",
   "termBufferLength",
   ",",
   "final",
   "int",
   "defaultTermWindowLength",
   ")",
   "{",
   "int",
   "termWindowLength",
   "=",
   "termBufferLength",
   "/",
   "2",
   ";",
   "if",
   "(",
   "0",
   "!=",
   "defaultTermWindowLength",
   ")",
   "{",
   "termWindowLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "defaultTermWindowLength",
   ",",
   "termWindowLength",
   ")",
   ";",
   "}",
   "return",
   "termWindowLength",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-285",
  "nl_tokens": [
   "/",
   "*",
   "Allows",
   "this",
   "base",
   "class",
   "to",
   "be",
   "initialized",
   "by",
   "the",
   "subclasses",
   "."
  ],
  "pl_tokens": [
   "protected",
   "void",
   "init",
   "(",
   "Comparable",
   "<mask>",
   ",",
   "Comparable",
   "max",
   ")",
   "{",
   "this",
   ".",
   "realMin",
   "=",
   "min",
   ";",
   "this",
   ".",
   "realMax",
   "=",
   "max",
   ";",
   "assert",
   "min",
   ".",
   "compareTo",
   "(",
   "max",
   ")",
   "<",
   "0",
   ";",
   "isInitialized",
   "=",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-286",
  "nl_tokens": [
   "Process",
   "{",
   "@link",
   "MetricTimeSeries",
   "}",
   "and",
   "{",
   "@link",
   "MetricValue",
   "}",
   "filtering",
   "out",
   "data",
   "point",
   "earlier",
   "or",
   "equal",
   "to",
   "timestamp",
   "that",
   "was",
   "marked",
   "as",
   "already",
   "sent",
   "."
  ],
  "pl_tokens": [
   "public",
   "List",
   "<",
   "SignalFxProtocolBuffers",
   ".",
   "DataPoint",
   ">",
   "process",
   "(",
   "MetricTimeSeries",
   "mts",
   ",",
   "List",
   "<",
   "MetricValue",
   ">",
   "metricValues",
   ")",
   "{",
   "Long",
   "lastTimestamp",
   "=",
   "mtsToLastTimestamp",
   ".",
   "get",
   "(",
   "mts",
   ")",
   ";",
   "Long",
   "latestTimestamp",
   "=",
   "lastTimestamp",
   ";",
   "List",
   "<",
   "SignalFxProtocolBuffers",
   ".",
   "DataPoint",
   ">",
   "dataPoints",
   "=",
   "new",
   "LinkedList",
   "<>",
   "(",
   ")",
   ";",
   "SignalFxProtocolBuffers",
   ".",
   "DataPoint",
   ".",
   "Builder",
   "dataPointBuilder",
   "=",
   "SignalFxProtocolBuffers",
   ".",
   "DataPoint",
   ".",
   "newBuilder",
   "(",
   ")",
   ".",
   "setMetric",
   "(",
   "mts",
   ".",
   "metricName",
   ")",
   ";",
   "if",
   "(",
   "mts",
   ".",
   "dimensions",
   "!=",
   "null",
   ")",
   "{",
   "for",
   "(",
   "Map",
   ".",
   "Entry",
   "<",
   "String",
   ",",
   "String",
   ">",
   "entry",
   ":",
   "mts",
   ".",
   "dimensions",
   ".",
   "entrySet",
   "(",
   ")",
   ")",
   "{",
   "dataPointBuilder",
   ".",
   "addDimensions",
   "(",
   "SignalFxProtocolBuffers",
   ".",
   "Dimension",
   ".",
   "newBuilder",
   "(",
   ")",
   ".",
   "setKey",
   "(",
   "entry",
   ".",
   "getKey",
   "(",
   ")",
   ")",
   ".",
   "setValue",
   "(",
   "entry",
   ".",
   "getValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "for",
   "(",
   "MetricValue",
   "metricValue",
   ":",
   "metricValues",
   ")",
   "{",
   "if",
   "(",
   "lastTimestamp",
   "==",
   "null",
   "||",
   "metricValue",
   ".",
   "startTimeInMillis",
   ">",
   "lastTimestamp",
   ")",
   "{",
   "SignalFxProtocolBuffers",
   ".",
   "DataPoint",
   "dataPoint",
   "=",
   "dataPointBuilder",
   ".",
   "setTimestamp",
   "(",
   "metricValue",
   ".",
   "startTimeInMillis",
   ")",
   ".",
   "setValue",
   "(",
   "SignalFxProtocolBuffers",
   ".",
   "Datum",
   ".",
   "newBuilder",
   "(",
   ")",
   ".",
   "setIntValue",
   "(",
   "metricValue",
   ".",
   "value",
   ")",
   ")",
   ".",
   "build",
   "(",
   ")",
   ";",
   "dataPoints",
   ".",
   "add",
   "(",
   "dataPoint",
   ")",
   ";",
   "latestTimestamp",
   "=",
   "lastTimestamp",
   "==",
   "null",
   "?",
   "metricValue",
   ".",
   "startTimeInMillis",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "metricValue",
   ".",
   "startTimeInMillis",
   ",",
   "latestTimestamp",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "lastTimestamp",
   "==",
   "null",
   "||",
   "latestTimestamp",
   ">",
   "lastTimestamp",
   ")",
   "{",
   "mtsToLastTimestamp",
   ".",
   "put",
   "(",
   "mts",
   ",",
   "latestTimestamp",
   ")",
   ";",
   "}",
   "return",
   "dataPoints",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-287",
  "nl_tokens": [
   "Load",
   "the",
   "stores",
   "."
  ],
  "pl_tokens": [
   "Optional",
   "<",
   "BigInteger",
   ">",
   "loadStores",
   "(",
   "Function",
   "<",
   "String",
   ",",
   "EntityStores",
   ">",
   "entityStoresByStoreName",
   ",",
   "BiFunction",
   "<",
   "SerializableSnapshot",
   ",",
   "String",
   ",",
   "SerializableSnapshot",
   ">",
   "snapshotPostProcessor",
   ")",
   "{",
   "Optional",
   "<",
   "BigInteger",
   ">",
   "latestSnapshotTxId",
   ";",
   "try",
   "{",
   "latestSnapshotTxId",
   "=",
   "m_snapshotStore",
   ".",
   "listSnapshots",
   "(",
   ")",
   ".",
   "stream",
   "(",
   ")",
   ".",
   "<mask>",
   "(",
   "BigInteger",
   "::",
   "compareTo",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "UnrecoverableStoreException",
   "(",
   "\"Error occurred when recovering from latest snapshot\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "latestSnapshotTxId",
   ".",
   "ifPresent",
   "(",
   "lastTx",
   "->",
   "{",
   "LOG",
   ".",
   "info",
   "(",
   "\"Recovering store from snapshot\"",
   ",",
   "args",
   "->",
   "args",
   ".",
   "add",
   "(",
   "\"transactionId\"",
   ",",
   "lastTx",
   ")",
   ")",
   ";",
   "var",
   "postProcess",
   "=",
   "new",
   "SnapshotPostProcessor",
   "(",
   "snapshotPostProcessor",
   ")",
   ";",
   "try",
   "{",
   "Flowable",
   ".",
   "fromPublisher",
   "(",
   "m_snapshotStore",
   ".",
   "createSnapshotReader",
   "(",
   "lastTx",
   ")",
   ")",
   "//",
   ".",
   "blockingForEach",
   "(",
   "reader",
   "->",
   "{",
   "String",
   "storeName",
   "=",
   "reader",
   ".",
   "storeName",
   "(",
   ")",
   ";",
   "EntityStores",
   "entityStores",
   "=",
   "entityStoresByStoreName",
   ".",
   "apply",
   "(",
   "storeName",
   ")",
   ";",
   "SerializableSnapshot",
   "serializableSnapshot",
   ";",
   "try",
   "(",
   "InputStream",
   "is",
   "=",
   "reader",
   ".",
   "inputStream",
   "(",
   ")",
   ")",
   "{",
   "serializableSnapshot",
   "=",
   "m_snapshotSerializer",
   ".",
   "deserializeSnapshot",
   "(",
   "storeName",
   ",",
   "is",
   ")",
   ";",
   "}",
   "if",
   "(",
   "serializableSnapshot",
   ".",
   "getSnapshotModelVersion",
   "(",
   ")",
   "!=",
   "SNAPSHOT_MODEL_VERSION",
   ")",
   "{",
   "throw",
   "new",
   "UnrecoverableStoreException",
   "(",
   "\"Snapshot serializable model version is not supported\"",
   ",",
   "args",
   "->",
   "args",
   ".",
   "add",
   "(",
   "\"version\"",
   ",",
   "serializableSnapshot",
   ".",
   "getSnapshotModelVersion",
   "(",
   ")",
   ")",
   ".",
   "add",
   "(",
   "\"expectedVersion\"",
   ",",
   "SNAPSHOT_MODEL_VERSION",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "lastTx",
   ".",
   "equals",
   "(",
   "serializableSnapshot",
   ".",
   "getTransactionId",
   "(",
   ")",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "UnrecoverableStoreException",
   "(",
   "\"Snapshot transaction id  mismatch with request transaction id\"",
   ",",
   "args",
   "->",
   "args",
   ".",
   "add",
   "(",
   "\"snapshotTransactionId\"",
   ",",
   "serializableSnapshot",
   ".",
   "getTransactionId",
   "(",
   ")",
   ")",
   ".",
   "add",
   "(",
   "\"requestTransactionId\"",
   ",",
   "lastTx",
   ")",
   ")",
   ";",
   "}",
   "SerializableSnapshot",
   "finalSnapshot",
   "=",
   "postProcess",
   ".",
   "apply",
   "(",
   "storeName",
   ",",
   "serializableSnapshot",
   ")",
   ";",
   "finalSnapshot",
   ".",
   "getEntities",
   "(",
   ")",
   ".",
   "forEach",
   "(",
   "serializableEntityInstances",
   "->",
   "{",
   "String",
   "entityName",
   "=",
   "serializableEntityInstances",
   ".",
   "getEntityName",
   "(",
   ")",
   ";",
   "EntityStore",
   "<",
   "?",
   ">",
   "entityStore",
   "=",
   "entityStores",
   ".",
   "getEntityStore",
   "(",
   "entityName",
   ")",
   ";",
   "checkArgument",
   "(",
   "entityStore",
   "!=",
   "null",
   ",",
   "\"Entity has not be registered in the store\"",
   ",",
   "args",
   "->",
   "args",
   ".",
   "add",
   "(",
   "\"entityName\"",
   ",",
   "entityName",
   ")",
   ")",
   ";",
   "entityStore",
   ".",
   "recover",
   "(",
   "serializableEntityInstances",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "UnrecoverableStoreException",
   "(",
   "\"Error occurred when recovering from latest snapshot\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "// update the applicationModelVersion if any consistent load/update",
   "m_applicationModelVersion",
   "=",
   "postProcess",
   ".",
   "getConsistentApplicationModelVersion",
   "(",
   ")",
   ";",
   "}",
   ")",
   ";",
   "if",
   "(",
   "!",
   "latestSnapshotTxId",
   ".",
   "isPresent",
   "(",
   ")",
   ")",
   "{",
   "LOG",
   ".",
   "info",
   "(",
   "\"Store has no snapshot, store is empty, creating it's first snapshot\"",
   ")",
   ";",
   "}",
   "return",
   "latestSnapshotTxId",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-288",
  "nl_tokens": [
   "Finds",
   "the",
   "minimum",
   "area",
   "bounding",
   "rectangle",
   "around",
   "the",
   "quadrilateral",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "bounding",
   "(",
   "Quadrilateral_F64",
   "quad",
   ",",
   "Rectangle2D_F64",
   "rectangle",
   ")",
   "{",
   "rectangle",
   ".",
   "p0",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "quad",
   ".",
   "a",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "b",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p0",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "rectangle",
   ".",
   "p0",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "c",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p0",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "rectangle",
   ".",
   "p0",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "d",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p0",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "quad",
   ".",
   "a",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "b",
   ".",
   "y",
   ")",
   ";",
   "rectangle",
   ".",
   "p0",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "rectangle",
   ".",
   "p0",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "c",
   ".",
   "y",
   ")",
   ";",
   "rectangle",
   ".",
   "p0",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "rectangle",
   ".",
   "p0",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "d",
   ".",
   "y",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "quad",
   ".",
   "a",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "b",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "rectangle",
   ".",
   "p1",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "c",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "x",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "rectangle",
   ".",
   "p1",
   ".",
   "x",
   ",",
   "quad",
   ".",
   "d",
   ".",
   "x",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "quad",
   ".",
   "a",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "b",
   ".",
   "y",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "rectangle",
   ".",
   "p1",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "c",
   ".",
   "y",
   ")",
   ";",
   "rectangle",
   ".",
   "p1",
   ".",
   "y",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "rectangle",
   ".",
   "p1",
   ".",
   "y",
   ",",
   "quad",
   ".",
   "d",
   ".",
   "y",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-289",
  "nl_tokens": [
   "Finds",
   "the",
   "intersection",
   "between",
   "two",
   "rectangles",
   ".",
   "If",
   "the",
   "rectangles",
   "don",
   "t",
   "intersect",
   "then",
   "false",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "intersection",
   "(",
   "Rectangle2D_I32",
   "a",
   ",",
   "Rectangle2D_I32",
   "b",
   ",",
   "Rectangle2D_I32",
   "result",
   ")",
   "{",
   "if",
   "(",
   "!",
   "intersects",
   "(",
   "a",
   ",",
   "b",
   ")",
   ")",
   "return",
   "false",
   ";",
   "result",
   ".",
   "x0",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "a",
   ".",
   "x0",
   ",",
   "b",
   ".",
   "x0",
   ")",
   ";",
   "result",
   ".",
   "x1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "x1",
   ",",
   "b",
   ".",
   "x1",
   ")",
   ";",
   "result",
   ".",
   "y0",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "a",
   ".",
   "y0",
   ",",
   "b",
   ".",
   "y0",
   ")",
   ";",
   "result",
   ".",
   "y1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "a",
   ".",
   "y1",
   ",",
   "b",
   ".",
   "y1",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-290",
  "nl_tokens": [
   "Q",
   "R",
   "DECOMP"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "sgeqrf",
   "(",
   "int",
   "M",
   ",",
   "int",
   "N",
   ",",
   "INDArray",
   "A",
   ",",
   "INDArray",
   "R",
   ",",
   "INDArray",
   "INFO",
   ")",
   "{",
   "INDArray",
   "tau",
   "=",
   "Nd4j",
   ".",
   "create",
   "(",
   "N",
   ")",
   ";",
   "int",
   "status",
   "=",
   "LAPACKE_sgeqrf",
   "(",
   "getColumnOrder",
   "(",
   "A",
   ")",
   ",",
   "M",
   ",",
   "N",
   ",",
   "(",
   "FloatPointer",
   ")",
   "A",
   ".",
   "data",
   "(",
   ")",
   ".",
   "addressPointer",
   "(",
   ")",
   ",",
   "getLda",
   "(",
   "A",
   ")",
   ",",
   "(",
   "FloatPointer",
   ")",
   "tau",
   ".",
   "data",
   "(",
   ")",
   ".",
   "addressPointer",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "status",
   "!=",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "BlasException",
   "(",
   "\"Failed to execute sgeqrf\"",
   ",",
   "status",
   ")",
   ";",
   "}",
   "// Copy R ( upper part of Q ) into result",
   "if",
   "(",
   "R",
   "!=",
   "null",
   ")",
   "{",
   "R",
   ".",
   "assign",
   "(",
   "A",
   ".",
   "get",
   "(",
   "NDArrayIndex",
   ".",
   "interval",
   "(",
   "0",
   ",",
   "A",
   ".",
   "columns",
   "(",
   ")",
   ")",
   ",",
   "NDArrayIndex",
   ".",
   "all",
   "(",
   ")",
   ")",
   ")",
   ";",
   "INDArrayIndex",
   "ix",
   "[",
   "]",
   "=",
   "new",
   "INDArrayIndex",
   "[",
   "2",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "A",
   ".",
   "rows",
   "(",
   ")",
   ",",
   "A",
   ".",
   "columns",
   "(",
   ")",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ix",
   "[",
   "0",
   "]",
   "=",
   "NDArrayIndex",
   ".",
   "point",
   "(",
   "i",
   ")",
   ";",
   "ix",
   "[",
   "1",
   "]",
   "=",
   "NDArrayIndex",
   ".",
   "interval",
   "(",
   "0",
   ",",
   "i",
   ")",
   ";",
   "R",
   ".",
   "put",
   "(",
   "ix",
   ",",
   "0",
   ")",
   ";",
   "}",
   "}",
   "status",
   "=",
   "LAPACKE_sorgqr",
   "(",
   "getColumnOrder",
   "(",
   "A",
   ")",
   ",",
   "M",
   ",",
   "N",
   ",",
   "N",
   ",",
   "(",
   "FloatPointer",
   ")",
   "A",
   ".",
   "data",
   "(",
   ")",
   ".",
   "addressPointer",
   "(",
   ")",
   ",",
   "getLda",
   "(",
   "A",
   ")",
   ",",
   "(",
   "FloatPointer",
   ")",
   "tau",
   ".",
   "data",
   "(",
   ")",
   ".",
   "addressPointer",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "status",
   "!=",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "BlasException",
   "(",
   "\"Failed to execute sorgqr\"",
   ",",
   "status",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-291",
  "nl_tokens": [
   "Calculates",
   "prices",
   "of",
   "a",
   "literal",
   "a",
   "short",
   "rep",
   "and",
   "literal",
   "+",
   "rep0",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "calc1BytePrices",
   "(",
   "int",
   "pos",
   ",",
   "int",
   "posState",
   ",",
   "int",
   "avail",
   ",",
   "int",
   "anyRepPrice",
   ")",
   "{",
   "// This will be set to true if using a literal or a short rep.",
   "boolean",
   "nextIsByte",
   "=",
   "false",
   ";",
   "int",
   "curByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "0",
   ")",
   ";",
   "int",
   "matchByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "reps",
   "[",
   "0",
   "]",
   "+",
   "1",
   ")",
   ";",
   "// Try a literal.",
   "int",
   "literalPrice",
   "=",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "price",
   "+",
   "literalEncoder",
   ".",
   "getPrice",
   "(",
   "curByte",
   ",",
   "matchByte",
   ",",
   "lz",
   ".",
   "getByte",
   "(",
   "1",
   ")",
   ",",
   "pos",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ")",
   ";",
   "if",
   "(",
   "literalPrice",
   "<",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "price",
   ")",
   "{",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "set1",
   "(",
   "literalPrice",
   ",",
   "optCur",
   ",",
   "-",
   "1",
   ")",
   ";",
   "nextIsByte",
   "=",
   "true",
   ";",
   "}",
   "// Try a short rep.",
   "if",
   "(",
   "matchByte",
   "==",
   "curByte",
   "&&",
   "(",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "optPrev",
   "==",
   "optCur",
   "||",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "backPrev",
   "!=",
   "0",
   ")",
   ")",
   "{",
   "int",
   "shortRepPrice",
   "=",
   "getShortRepPrice",
   "(",
   "anyRepPrice",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ",",
   "posState",
   ")",
   ";",
   "if",
   "(",
   "shortRepPrice",
   "<=",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "price",
   ")",
   "{",
   "opts",
   "[",
   "optCur",
   "+",
   "1",
   "]",
   ".",
   "set1",
   "(",
   "shortRepPrice",
   ",",
   "optCur",
   ",",
   "0",
   ")",
   ";",
   "nextIsByte",
   "=",
   "true",
   ";",
   "}",
   "}",
   "// If neither a literal nor a short rep was the cheapest choice,",
   "// try literal + long rep0.",
   "if",
   "(",
   "!",
   "nextIsByte",
   "&&",
   "matchByte",
   "!=",
   "curByte",
   "&&",
   "avail",
   ">",
   "MATCH_LEN_MIN",
   ")",
   "{",
   "int",
   "lenLimit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "niceLen",
   ",",
   "avail",
   "-",
   "1",
   ")",
   ";",
   "int",
   "len",
   "=",
   "lz",
   ".",
   "getMatchLen",
   "(",
   "1",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "reps",
   "[",
   "0",
   "]",
   ",",
   "lenLimit",
   ")",
   ";",
   "if",
   "(",
   "len",
   ">=",
   "MATCH_LEN_MIN",
   ")",
   "{",
   "nextState",
   ".",
   "set",
   "(",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ")",
   ";",
   "nextState",
   ".",
   "updateLiteral",
   "(",
   ")",
   ";",
   "int",
   "nextPosState",
   "=",
   "(",
   "pos",
   "+",
   "1",
   ")",
   "&",
   "posMask",
   ";",
   "int",
   "price",
   "=",
   "literalPrice",
   "+",
   "getLongRepAndLenPrice",
   "(",
   "0",
   ",",
   "len",
   ",",
   "nextState",
   ",",
   "nextPosState",
   ")",
   ";",
   "int",
   "i",
   "=",
   "optCur",
   "+",
   "1",
   "+",
   "len",
   ";",
   "while",
   "(",
   "optEnd",
   "<",
   "i",
   ")",
   "opts",
   "[",
   "++",
   "optEnd",
   "]",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "if",
   "(",
   "price",
   "<",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "price",
   ")",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "set2",
   "(",
   "price",
   ",",
   "optCur",
   ",",
   "0",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-292",
  "nl_tokens": [
   "Called",
   "from",
   "worker",
   "thread",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "processReadQueue",
   "(",
   ")",
   "throws",
   "InterruptedException",
   "{",
   "ReadStatus",
   "readStatus",
   "=",
   "new",
   "ReadStatus",
   "(",
   ")",
   ";",
   "while",
   "(",
   "true",
   ")",
   "{",
   "DataStoreRequest",
   "request",
   "=",
   "readOperationsQueue",
   ".",
   "poll",
   "(",
   "dataStoreConfig",
   ".",
   "pollTimeoutMS",
   "(",
   ")",
   ",",
   "TimeUnit",
   ".",
   "MILLISECONDS",
   ")",
   ";",
   "while",
   "(",
   "request",
   "!=",
   "null",
   ")",
   "{",
   "readStatus",
   ".",
   "tracker",
   ".",
   "addCall",
   "(",
   "request",
   ",",
   "outputDataQueue",
   ")",
   ";",
   "readOperationsBatch",
   ".",
   "add",
   "(",
   "request",
   ")",
   ";",
   "if",
   "(",
   "readOperationsBatch",
   ".",
   "size",
   "(",
   ")",
   ">",
   "dataStoreConfig",
   ".",
   "processQueueMaxBatchSize",
   "(",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "request",
   "=",
   "readOperationsQueue",
   ".",
   "poll",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "readOperationsBatch",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "try",
   "{",
   "recievedReadBatch",
   "(",
   "new",
   "ArrayList",
   "<>",
   "(",
   "readOperationsBatch",
   ")",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "readOperationsBatch",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "flushReadsIfNeeded",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "size",
   "(",
   ")",
   ">",
   "1_000",
   ")",
   "{",
   "StatCount",
   "count",
   ";",
   "final",
   "long",
   "now",
   "=",
   "Timer",
   ".",
   "timer",
   "(",
   ")",
   ".",
   "time",
   "(",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "DataStoreSource",
   ".",
   "SERVER",
   ",",
   "Action",
   ".",
   "GET_STATS",
   ",",
   "\"Thread TIME USER  BaseDataStore \"",
   "+",
   "Thread",
   ".",
   "currentThread",
   "(",
   ")",
   ".",
   "getName",
   "(",
   ")",
   ",",
   "Sys",
   ".",
   "threadUserTime",
   "(",
   ")",
   ")",
   ";",
   "this",
   ".",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "DataStoreSource",
   ".",
   "SERVER",
   ",",
   "Action",
   ".",
   "GET_STATS",
   ",",
   "\"Thread TIME CPU  BaseDataStore \"",
   "+",
   "Thread",
   ".",
   "currentThread",
   "(",
   ")",
   ".",
   "getName",
   "(",
   ")",
   ",",
   "Sys",
   ".",
   "threadCPUTime",
   "(",
   ")",
   ")",
   ";",
   "this",
   ".",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.max\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "<mask>",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.min\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "min",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.median\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "median",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.mean\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "mean",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.standardDeviation\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "standardDeviation",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "count",
   "=",
   "new",
   "StatCount",
   "(",
   "now",
   ",",
   "source",
   ",",
   "Action",
   ".",
   "GET",
   ",",
   "\"BaseDataStore readStatus.readBatchSize.variance\"",
   ",",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "variance",
   "(",
   ")",
   ")",
   ";",
   "outputDataQueue",
   ".",
   "put",
   "(",
   "count",
   ")",
   ";",
   "readStatus",
   ".",
   "readBatchSize",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-293",
  "nl_tokens": [
   "Computes",
   "the",
   "union",
   "of",
   "this",
   "rectangle",
   "with",
   "another",
   "one",
   "."
  ],
  "pl_tokens": [
   "public",
   "Rectangular",
   "union",
   "(",
   "Rectangular",
   "other",
   ")",
   "{",
   "return",
   "new",
   "Rectangular",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "x1",
   ",",
   "other",
   ".",
   "x1",
   ")",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "y1",
   ",",
   "other",
   ".",
   "y1",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "x2",
   ",",
   "other",
   ".",
   "x2",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "y2",
   ",",
   "other",
   ".",
   "y2",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-294",
  "nl_tokens": [
   "Is",
   "the",
   "point",
   "(",
   "lat",
   "lon",
   ")",
   "contained",
   "in",
   "the",
   "(",
   "row",
   "col",
   ")",
   "rectangle",
   "?"
  ],
  "pl_tokens": [
   "private",
   "boolean",
   "containsOld",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "0",
   "]",
   ",",
   "nrows",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "1",
   "]",
   ",",
   "ncols",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "int",
   "row",
   "=",
   "rectIndex",
   "[",
   "0",
   "]",
   ";",
   "int",
   "col",
   "=",
   "rectIndex",
   "[",
   "1",
   "]",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\" (%d,%d) contains (%f,%f) in (lat=%f %f) (lon=%f %f) ?%n\"",
   ",",
   "rectIndex",
   "[",
   "0",
   "]",
   ",",
   "rectIndex",
   "[",
   "1",
   "]",
   ",",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ",",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   ",",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ",",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   ")",
   ";",
   "if",
   "(",
   "wantLat",
   "<",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLat",
   ">",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   "<",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   ">",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   ")",
   "return",
   "false",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-295",
  "nl_tokens": [
   "Calculates",
   "prices",
   "of",
   "a",
   "normal",
   "match",
   "and",
   "normal",
   "match",
   "+",
   "literal",
   "+",
   "rep0",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "calcNormalMatchPrices",
   "(",
   "int",
   "pos",
   ",",
   "int",
   "posState",
   ",",
   "int",
   "avail",
   ",",
   "int",
   "anyMatchPrice",
   ",",
   "int",
   "startLen",
   ")",
   "{",
   "// If the longest match is so long that it would not fit into",
   "// the opts array, shorten the matches.",
   "if",
   "(",
   "matches",
   ".",
   "len",
   "[",
   "matches",
   ".",
   "count",
   "-",
   "1",
   "]",
   ">",
   "avail",
   ")",
   "{",
   "matches",
   ".",
   "count",
   "=",
   "0",
   ";",
   "while",
   "(",
   "matches",
   ".",
   "len",
   "[",
   "matches",
   ".",
   "count",
   "]",
   "<",
   "avail",
   ")",
   "++",
   "matches",
   ".",
   "count",
   ";",
   "matches",
   ".",
   "len",
   "[",
   "matches",
   ".",
   "count",
   "++",
   "]",
   "=",
   "avail",
   ";",
   "}",
   "if",
   "(",
   "matches",
   ".",
   "len",
   "[",
   "matches",
   ".",
   "count",
   "-",
   "1",
   "]",
   "<",
   "startLen",
   ")",
   "return",
   ";",
   "while",
   "(",
   "optEnd",
   "<",
   "optCur",
   "+",
   "matches",
   ".",
   "len",
   "[",
   "matches",
   ".",
   "count",
   "-",
   "1",
   "]",
   ")",
   "opts",
   "[",
   "++",
   "optEnd",
   "]",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "int",
   "normalMatchPrice",
   "=",
   "getNormalMatchPrice",
   "(",
   "anyMatchPrice",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ")",
   ";",
   "int",
   "match",
   "=",
   "0",
   ";",
   "while",
   "(",
   "startLen",
   ">",
   "matches",
   ".",
   "len",
   "[",
   "match",
   "]",
   ")",
   "++",
   "match",
   ";",
   "for",
   "(",
   "int",
   "len",
   "=",
   "startLen",
   ";",
   ";",
   "++",
   "len",
   ")",
   "{",
   "int",
   "dist",
   "=",
   "matches",
   ".",
   "dist",
   "[",
   "match",
   "]",
   ";",
   "// Calculate the price of a match of len bytes from the nearest",
   "// possible distance.",
   "int",
   "matchAndLenPrice",
   "=",
   "getMatchAndLenPrice",
   "(",
   "normalMatchPrice",
   ",",
   "dist",
   ",",
   "len",
   ",",
   "posState",
   ")",
   ";",
   "if",
   "(",
   "matchAndLenPrice",
   "<",
   "opts",
   "[",
   "optCur",
   "+",
   "len",
   "]",
   ".",
   "price",
   ")",
   "opts",
   "[",
   "optCur",
   "+",
   "len",
   "]",
   ".",
   "set1",
   "(",
   "matchAndLenPrice",
   ",",
   "optCur",
   ",",
   "dist",
   "+",
   "REPS",
   ")",
   ";",
   "if",
   "(",
   "len",
   "!=",
   "matches",
   ".",
   "len",
   "[",
   "match",
   "]",
   ")",
   "continue",
   ";",
   "// Try match + literal + rep0. First get the length of the rep0.",
   "int",
   "len2Limit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "niceLen",
   ",",
   "avail",
   "-",
   "len",
   "-",
   "1",
   ")",
   ";",
   "int",
   "len2",
   "=",
   "lz",
   ".",
   "getMatchLen",
   "(",
   "len",
   "+",
   "1",
   ",",
   "dist",
   ",",
   "len2Limit",
   ")",
   ";",
   "if",
   "(",
   "len2",
   ">=",
   "MATCH_LEN_MIN",
   ")",
   "{",
   "nextState",
   ".",
   "set",
   "(",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ")",
   ";",
   "nextState",
   ".",
   "updateMatch",
   "(",
   ")",
   ";",
   "// Literal",
   "int",
   "curByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "len",
   ",",
   "0",
   ")",
   ";",
   "int",
   "matchByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "0",
   ")",
   ";",
   "// lz.getByte(len, len)",
   "int",
   "prevByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "len",
   ",",
   "1",
   ")",
   ";",
   "int",
   "price",
   "=",
   "matchAndLenPrice",
   "+",
   "literalEncoder",
   ".",
   "getPrice",
   "(",
   "curByte",
   ",",
   "matchByte",
   ",",
   "prevByte",
   ",",
   "pos",
   "+",
   "len",
   ",",
   "nextState",
   ")",
   ";",
   "nextState",
   ".",
   "updateLiteral",
   "(",
   ")",
   ";",
   "// Rep0",
   "int",
   "nextPosState",
   "=",
   "(",
   "pos",
   "+",
   "len",
   "+",
   "1",
   ")",
   "&",
   "posMask",
   ";",
   "price",
   "+=",
   "getLongRepAndLenPrice",
   "(",
   "0",
   ",",
   "len2",
   ",",
   "nextState",
   ",",
   "nextPosState",
   ")",
   ";",
   "int",
   "i",
   "=",
   "optCur",
   "+",
   "len",
   "+",
   "1",
   "+",
   "len2",
   ";",
   "while",
   "(",
   "optEnd",
   "<",
   "i",
   ")",
   "opts",
   "[",
   "++",
   "optEnd",
   "]",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "if",
   "(",
   "price",
   "<",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "price",
   ")",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "set3",
   "(",
   "price",
   ",",
   "optCur",
   ",",
   "dist",
   "+",
   "REPS",
   ",",
   "len",
   ",",
   "0",
   ")",
   ";",
   "}",
   "if",
   "(",
   "++",
   "match",
   "==",
   "matches",
   ".",
   "count",
   ")",
   "break",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-296",
  "nl_tokens": [
   "Execute",
   "the",
   "CREATE",
   "PROPERTY",
   "."
  ],
  "pl_tokens": [
   "public",
   "Object",
   "execute",
   "(",
   "final",
   "Map",
   "<",
   "Object",
   ",",
   "Object",
   ">",
   "iArgs",
   ")",
   "{",
   "if",
   "(",
   "type",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "OCommandExecutionException",
   "(",
   "\"Cannot execute the command because it has not been parsed yet\"",
   ")",
   ";",
   "final",
   "ODatabaseDocument",
   "database",
   "=",
   "getDatabase",
   "(",
   ")",
   ";",
   "final",
   "OClassEmbedded",
   "sourceClass",
   "=",
   "(",
   "OClassEmbedded",
   ")",
   "database",
   ".",
   "getMetadata",
   "(",
   ")",
   ".",
   "getSchema",
   "(",
   ")",
   ".",
   "getClass",
   "(",
   "className",
   ")",
   ";",
   "if",
   "(",
   "sourceClass",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "OCommandExecutionException",
   "(",
   "\"Source class '\"",
   "+",
   "className",
   "+",
   "\"' not found\"",
   ")",
   ";",
   "OPropertyImpl",
   "prop",
   "=",
   "(",
   "OPropertyImpl",
   ")",
   "sourceClass",
   ".",
   "getProperty",
   "(",
   "fieldName",
   ")",
   ";",
   "if",
   "(",
   "prop",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "ifNotExists",
   ")",
   "{",
   "return",
   "sourceClass",
   ".",
   "properties",
   "(",
   ")",
   ".",
   "size",
   "(",
   ")",
   ";",
   "}",
   "throw",
   "new",
   "OCommandExecutionException",
   "(",
   "\"Property '\"",
   "+",
   "className",
   "+",
   "\".\"",
   "+",
   "fieldName",
   "+",
   "\"' already exists. Remove it before to retry.\"",
   ")",
   ";",
   "}",
   "// CREATE THE PROPERTY\r",
   "OClass",
   "linkedClass",
   "=",
   "null",
   ";",
   "OType",
   "linkedType",
   "=",
   "null",
   ";",
   "if",
   "(",
   "linked",
   "!=",
   "null",
   ")",
   "{",
   "// FIRST SEARCH BETWEEN CLASSES\r",
   "linkedClass",
   "=",
   "database",
   ".",
   "getMetadata",
   "(",
   ")",
   ".",
   "getSchema",
   "(",
   ")",
   ".",
   "getClass",
   "(",
   "linked",
   ")",
   ";",
   "if",
   "(",
   "linkedClass",
   "==",
   "null",
   ")",
   "// NOT FOUND: SEARCH BETWEEN TYPES\r",
   "linkedType",
   "=",
   "OType",
   ".",
   "valueOf",
   "(",
   "linked",
   ".",
   "toUpperCase",
   "(",
   "Locale",
   ".",
   "ENGLISH",
   ")",
   ")",
   ";",
   "}",
   "// CREATE IT LOCALLY\r",
   "OPropertyImpl",
   "internalProp",
   "=",
   "sourceClass",
   ".",
   "addPropertyInternal",
   "(",
   "fieldName",
   ",",
   "type",
   ",",
   "linkedType",
   ",",
   "linkedClass",
   ",",
   "unsafe",
   ")",
   ";",
   "if",
   "(",
   "readonly",
   ")",
   "{",
   "internalProp",
   ".",
   "setReadonly",
   "(",
   "true",
   ")",
   ";",
   "}",
   "if",
   "(",
   "mandatory",
   ")",
   "{",
   "internalProp",
   ".",
   "setMandatory",
   "(",
   "true",
   ")",
   ";",
   "}",
   "if",
   "(",
   "notnull",
   ")",
   "{",
   "internalProp",
   ".",
   "setNotNull",
   "(",
   "true",
   ")",
   ";",
   "}",
   "if",
   "(",
   "<mask>",
   "!=",
   "null",
   ")",
   "{",
   "internalProp",
   ".",
   "setMax",
   "(",
   "max",
   ")",
   ";",
   "}",
   "if",
   "(",
   "min",
   "!=",
   "null",
   ")",
   "{",
   "internalProp",
   ".",
   "setMin",
   "(",
   "min",
   ")",
   ";",
   "}",
   "if",
   "(",
   "defaultValue",
   "!=",
   "null",
   ")",
   "{",
   "internalProp",
   ".",
   "setDefaultValue",
   "(",
   "defaultValue",
   ")",
   ";",
   "}",
   "return",
   "sourceClass",
   ".",
   "properties",
   "(",
   ")",
   ".",
   "size",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-297",
  "nl_tokens": [
   "Sets",
   "a",
   "preset",
   "dictionary",
   ".",
   "If",
   "a",
   "preset",
   "dictionary",
   "is",
   "wanted",
   "this",
   "function",
   "must",
   "be",
   "called",
   "immediately",
   "after",
   "creating",
   "the",
   "LZEncoder",
   "before",
   "any",
   "data",
   "has",
   "been",
   "encoded",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setPresetDict",
   "(",
   "int",
   "dictSize",
   ",",
   "byte",
   "[",
   "]",
   "presetDict",
   ")",
   "{",
   "assert",
   "!",
   "isStarted",
   "(",
   ")",
   ";",
   "assert",
   "writePos",
   "==",
   "0",
   ";",
   "if",
   "(",
   "presetDict",
   "!=",
   "null",
   ")",
   "{",
   "// If the preset dictionary buffer is bigger than the dictionary",
   "// size, copy only the tail of the preset dictionary.",
   "int",
   "copySize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "presetDict",
   ".",
   "length",
   ",",
   "dictSize",
   ")",
   ";",
   "int",
   "offset",
   "=",
   "presetDict",
   ".",
   "length",
   "-",
   "copySize",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "presetDict",
   ",",
   "offset",
   ",",
   "buf",
   ",",
   "0",
   ",",
   "copySize",
   ")",
   ";",
   "writePos",
   "+=",
   "copySize",
   ";",
   "skip",
   "(",
   "copySize",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-298",
  "nl_tokens": [
   "adjust",
   "bounding",
   "box",
   "to",
   "fit",
   "inside",
   "the",
   "screen",
   "size"
  ],
  "pl_tokens": [
   "private",
   "void",
   "recalcFromBoundingBox",
   "(",
   ")",
   "{",
   "if",
   "(",
   "debugRecalc",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"Navigation recalcFromBoundingBox= \"",
   "+",
   "bb",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"  \"",
   "+",
   "pwidth",
   "+",
   "\" \"",
   "+",
   "pheight",
   ")",
   ";",
   "}",
   "// decide which dimension is limiting",
   "double",
   "pixx_per_wx",
   "=",
   "(",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   "==",
   "0.0",
   ")",
   "?",
   "1",
   ":",
   "pwidth",
   "/",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "double",
   "pixy_per_wy",
   "=",
   "(",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   "==",
   "0.0",
   ")",
   "?",
   "1",
   ":",
   "pheight",
   "/",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "pix_per_world",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "pixx_per_wx",
   ",",
   "pixy_per_wy",
   ")",
   ";",
   "// calc the center point",
   "double",
   "wx0",
   "=",
   "bb",
   ".",
   "getX",
   "(",
   ")",
   "+",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "2",
   ";",
   "double",
   "wy0",
   "=",
   "bb",
   ".",
   "getY",
   "(",
   ")",
   "+",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "2",
   ";",
   "// calc offset based on center point",
   "pix_x0",
   "=",
   "pwidth",
   "/",
   "2",
   "-",
   "pix_per_world",
   "*",
   "wx0",
   ";",
   "pix_y0",
   "=",
   "pheight",
   "/",
   "2",
   "+",
   "pix_per_world",
   "*",
   "wy0",
   ";",
   "if",
   "(",
   "debugRecalc",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"Navigation recalcFromBoundingBox done= \"",
   "+",
   "pix_per_world",
   "+",
   "\" \"",
   "+",
   "pix_x0",
   "+",
   "\" \"",
   "+",
   "pix_y0",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"  \"",
   "+",
   "pwidth",
   "+",
   "\" \"",
   "+",
   "pheight",
   "+",
   "\" \"",
   "+",
   "bb",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-299",
  "nl_tokens": [
   "Gets",
   "the",
   "row",
   "style",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "getRowStyle",
   "(",
   "final",
   "Workbook",
   "wb",
   ",",
   "final",
   "Cell",
   "poiCell",
   ",",
   "final",
   "String",
   "inputType",
   ",",
   "final",
   "float",
   "rowHeight",
   ",",
   "final",
   "int",
   "rowspan",
   ")",
   "{",
   "CellStyle",
   "cellStyle",
   "=",
   "poiCell",
   ".",
   "getCellStyle",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "cellStyle",
   "!=",
   "null",
   ")",
   "&&",
   "(",
   "rowspan",
   "==",
   "1",
   ")",
   ")",
   "{",
   "short",
   "fontIdx",
   "=",
   "cellStyle",
   ".",
   "getFontIndex",
   "(",
   ")",
   ";",
   "Font",
   "font",
   "=",
   "wb",
   ".",
   "getFontAt",
   "(",
   "fontIdx",
   ")",
   ";",
   "float",
   "maxHeight",
   "=",
   "rowHeight",
   ";",
   "if",
   "(",
   "!",
   "inputType",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "maxHeight",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "font",
   ".",
   "getFontHeightInPoints",
   "(",
   ")",
   "+",
   "8f",
   ",",
   "rowHeight",
   ")",
   ";",
   "}",
   "return",
   "\"height:\"",
   "+",
   "WebSheetUtility",
   ".",
   "pointsToPixels",
   "(",
   "maxHeight",
   ")",
   "+",
   "\"px;\"",
   ";",
   "}",
   "return",
   "\"\"",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-300",
  "nl_tokens": [
   "Gets",
   "the",
   "current",
   "contents",
   "of",
   "this",
   "byte",
   "stream",
   "as",
   "a",
   "Input",
   "Stream",
   ".",
   "The",
   "returned",
   "stream",
   "is",
   "backed",
   "by",
   "buffers",
   "of",
   "<code",
   ">",
   "this<",
   "/",
   "code",
   ">",
   "stream",
   "avoiding",
   "memory",
   "allocation",
   "and",
   "copy",
   "thus",
   "saving",
   "space",
   "and",
   "time",
   ".",
   "<br",
   ">"
  ],
  "pl_tokens": [
   "private",
   "InputStream",
   "toBufferedInputStream",
   "(",
   ")",
   "{",
   "int",
   "remaining",
   "=",
   "count",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "return",
   "new",
   "ClosedInputStream",
   "(",
   ")",
   ";",
   "}",
   "List",
   "<",
   "ByteArrayInputStream",
   ">",
   "list",
   "=",
   "new",
   "ArrayList",
   "<",
   "ByteArrayInputStream",
   ">",
   "(",
   "buffers",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "byte",
   "[",
   "]",
   "buf",
   ":",
   "buffers",
   ")",
   "{",
   "int",
   "c",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "length",
   ",",
   "remaining",
   ")",
   ";",
   "list",
   ".",
   "add",
   "(",
   "new",
   "ByteArrayInputStream",
   "(",
   "buf",
   ",",
   "0",
   ",",
   "c",
   ")",
   ")",
   ";",
   "remaining",
   "-=",
   "c",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "return",
   "new",
   "SequenceInputStream",
   "(",
   "Collections",
   ".",
   "enumeration",
   "(",
   "list",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-301",
  "nl_tokens": [
   "/",
   "*",
   "parameter",
   "is",
   "also",
   "called",
   "k2"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "qmf_stop_channel",
   "(",
   "int",
   "bs_stop_freq",
   ",",
   "SampleFrequency",
   "sample_rate",
   ",",
   "int",
   "k0",
   ")",
   "{",
   "if",
   "(",
   "bs_stop_freq",
   "==",
   "15",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "64",
   ",",
   "k0",
   "*",
   "3",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "bs_stop_freq",
   "==",
   "14",
   ")",
   "{",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "64",
   ",",
   "k0",
   "*",
   "2",
   ")",
   ";",
   "}",
   "else",
   "{",
   "int",
   "stopMin",
   "=",
   "stopMinTable",
   "[",
   "sample_rate",
   ".",
   "getIndex",
   "(",
   ")",
   "]",
   ";",
   "/* bs_stop_freq <= 13 */",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "64",
   ",",
   "stopMin",
   "+",
   "STOP_OFFSET_TABLE",
   "[",
   "sample_rate",
   ".",
   "getIndex",
   "(",
   ")",
   "]",
   "[",
   "Math",
   ".",
   "min",
   "(",
   "bs_stop_freq",
   ",",
   "13",
   ")",
   "]",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-302",
  "nl_tokens": [
   "Creates",
   "a",
   "new",
   "time",
   "range",
   "type",
   "with",
   "the",
   "specified",
   "name",
   "if",
   "it",
   "does",
   "not",
   "already",
   "exist",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Type",
   "createInstance",
   "(",
   "String",
   "name",
   ",",
   "TimeOnly",
   "<mask>",
   ",",
   "TimeOnly",
   "max",
   ")",
   "{",
   "// Ensure that min is less than or equal to max.",
   "if",
   "(",
   "(",
   "min",
   "!=",
   "null",
   ")",
   "&&",
   "(",
   "max",
   "!=",
   "null",
   ")",
   "&&",
   "(",
   "min",
   ".",
   "compareTo",
   "(",
   "max",
   ")",
   ">",
   "0",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'min' must be less than or equal to 'max'.\"",
   ")",
   ";",
   "}",
   "synchronized",
   "(",
   "INT_RANGE_TYPES",
   ")",
   "{",
   "// Add the newly created type to the map of all types.",
   "TimeRangeType",
   "newType",
   "=",
   "new",
   "TimeRangeType",
   "(",
   "name",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "// Ensure that the named type does not already exist, unless it has an identical definition already, in which",
   "// case the old definition can be re-used and the new one discarded.",
   "TimeRangeType",
   "oldType",
   "=",
   "INT_RANGE_TYPES",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "!",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The type '\"",
   "+",
   "name",
   "+",
   "\"' already exists and cannot be redefined.\"",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "return",
   "oldType",
   ";",
   "}",
   "else",
   "{",
   "INT_RANGE_TYPES",
   ".",
   "put",
   "(",
   "name",
   ",",
   "newType",
   ")",
   ";",
   "return",
   "newType",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-303",
  "nl_tokens": [
   "here",
   "s",
   "where",
   "to",
   "deal",
   "with",
   "crossing",
   "seam"
  ],
  "pl_tokens": [
   "private",
   "Optional",
   "<",
   "CoverageCoordAxis",
   ">",
   "subsetLon",
   "(",
   "LatLonRect",
   "llbb",
   ",",
   "int",
   "stride",
   ")",
   "throws",
   "InvalidRangeException",
   "{",
   "double",
   "wantMin",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormalFrom",
   "(",
   "llbb",
   ".",
   "getLonMin",
   "(",
   ")",
   ",",
   "lonAxis",
   ".",
   "getStartValue",
   "(",
   ")",
   ")",
   ";",
   "double",
   "wantMax",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormalFrom",
   "(",
   "llbb",
   ".",
   "getLonMax",
   "(",
   ")",
   ",",
   "lonAxis",
   ".",
   "getStartValue",
   "(",
   ")",
   ")",
   ";",
   "double",
   "start",
   "=",
   "lonAxis",
   ".",
   "getStartValue",
   "(",
   ")",
   ";",
   "double",
   "end",
   "=",
   "lonAxis",
   ".",
   "getEndValue",
   "(",
   ")",
   ";",
   "// use MAMath.MinMax as a container for two values, min and max",
   "List",
   "<",
   "MAMath",
   ".",
   "MinMax",
   ">",
   "lonIntvs",
   "=",
   "subsetLonIntervals",
   "(",
   "wantMin",
   ",",
   "wantMax",
   ",",
   "start",
   ",",
   "end",
   ")",
   ";",
   "if",
   "(",
   "lonIntvs",
   ".",
   "size",
   "(",
   ")",
   "==",
   "0",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"longitude want [%f,%f] does not intersect lon axis [%f,%f]\"",
   ",",
   "wantMin",
   ",",
   "wantMax",
   ",",
   "start",
   ",",
   "end",
   ")",
   ")",
   ";",
   "if",
   "(",
   "lonIntvs",
   ".",
   "size",
   "(",
   ")",
   "==",
   "1",
   ")",
   "{",
   "MAMath",
   ".",
   "MinMax",
   "lonIntv",
   "=",
   "lonIntvs",
   ".",
   "get",
   "(",
   "0",
   ")",
   ";",
   "return",
   "lonAxis",
   ".",
   "subset",
   "(",
   "lonIntv",
   ".",
   "<mask>",
   ",",
   "lonIntv",
   ".",
   "max",
   ",",
   "stride",
   ")",
   ";",
   "}",
   "// this is the seam crossing case",
   "return",
   "lonAxis",
   ".",
   "subsetByIntervals",
   "(",
   "lonIntvs",
   ",",
   "stride",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-304",
  "nl_tokens": [
   "Create",
   "an",
   "ArrayChar",
   "from",
   "an",
   "ArrayObject",
   "of",
   "Strings",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "ArrayChar",
   "makeFromStringArray",
   "(",
   "ArrayObject",
   "values",
   ")",
   "{",
   "// find longest string\r",
   "IndexIterator",
   "ii",
   "=",
   "values",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "int",
   "strlen",
   "=",
   "0",
   ";",
   "while",
   "(",
   "ii",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "String",
   "s",
   "=",
   "(",
   "String",
   ")",
   "ii",
   ".",
   "next",
   "(",
   ")",
   ";",
   "strlen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "s",
   ".",
   "length",
   "(",
   ")",
   ",",
   "strlen",
   ")",
   ";",
   "}",
   "return",
   "makeFromStringArray",
   "(",
   "values",
   ",",
   "strlen",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-305",
  "nl_tokens": [
   "Set",
   "the",
   "ArrayChar",
   "values",
   "from",
   "the",
   "characters",
   "in",
   "the",
   "String",
   ".",
   "Rank",
   "must",
   "be",
   "1",
   "or",
   "greater",
   ".",
   "If",
   "String",
   "longer",
   "than",
   "ArrayChar",
   "ignore",
   "extra",
   "chars",
   ";",
   "if",
   "shorter",
   "fill",
   "with",
   "0",
   ".",
   "If",
   "rank",
   "1",
   "set",
   "entire",
   "ArrayChar",
   "ignoring",
   "ima",
   ".",
   "If",
   "rank",
   ">",
   "1",
   "treat",
   "the",
   "ArrayChar",
   "like",
   "an",
   "array",
   "of",
   "Strings",
   "of",
   "rank",
   "-",
   "1",
   "and",
   "set",
   "the",
   "row",
   "indexed",
   "by",
   "ima",
   ".",
   "For",
   "example",
   "rank",
   "3",
   ":",
   "<p",
   ">",
   "<code",
   ">",
   "String",
   "[]",
   "[]",
   "val",
   ";",
   "ArrayChar",
   "ca",
   ";",
   "Index",
   "ima",
   "=",
   "ca",
   ".",
   "getIndex",
   "()",
   ";",
   "int",
   "rank0",
   "=",
   "ca",
   ".",
   "getShape",
   "()",
   "[",
   "0",
   "]",
   ";",
   "int",
   "rank1",
   "=",
   "ca",
   ".",
   "getShape",
   "()",
   "[",
   "1",
   "]",
   ";",
   "<p",
   "/",
   ">",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i<rank0",
   ";",
   "i",
   "++",
   ")",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j<rank1",
   ";",
   "j",
   "++",
   ")",
   "{",
   "ima",
   ".",
   "set",
   "(",
   "i",
   "j",
   ")",
   ";",
   "ca",
   ".",
   "setString",
   "(",
   "ima",
   "val",
   "[",
   "i",
   "]",
   "[",
   "j",
   "]",
   ")",
   ";",
   "}",
   "<",
   "/",
   "code",
   ">"
  ],
  "pl_tokens": [
   "public",
   "void",
   "setString",
   "(",
   "Index",
   "ima",
   ",",
   "String",
   "val",
   ")",
   "{",
   "int",
   "rank",
   "=",
   "getRank",
   "(",
   ")",
   ";",
   "if",
   "(",
   "rank",
   "==",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"ArrayChar.setString rank must not be 0\"",
   ")",
   ";",
   "int",
   "arrayLen",
   "=",
   "indexCalc",
   ".",
   "getShape",
   "(",
   "rank",
   "-",
   "1",
   ")",
   ";",
   "int",
   "strLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "val",
   ".",
   "length",
   "(",
   ")",
   ",",
   "arrayLen",
   ")",
   ";",
   "int",
   "count",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "strLen",
   ";",
   "k",
   "++",
   ")",
   "{",
   "ima",
   ".",
   "setDim",
   "(",
   "rank",
   "-",
   "1",
   ",",
   "k",
   ")",
   ";",
   "setChar",
   "(",
   "ima",
   ",",
   "val",
   ".",
   "charAt",
   "(",
   "k",
   ")",
   ")",
   ";",
   "count",
   "++",
   ";",
   "}",
   "char",
   "c",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "count",
   ";",
   "k",
   "<",
   "arrayLen",
   ";",
   "k",
   "++",
   ")",
   "{",
   "ima",
   ".",
   "setDim",
   "(",
   "rank",
   "-",
   "1",
   ",",
   "k",
   ")",
   ";",
   "setChar",
   "(",
   "ima",
   ",",
   "c",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-306",
  "nl_tokens": [
   "Perform",
   "the",
   "actual",
   "validation",
   "."
  ],
  "pl_tokens": [
   "@",
   "SuppressWarnings",
   "(",
   "\"unchecked\"",
   ")",
   "public",
   "ValidatorMessageHolder",
   "validate",
   "(",
   "Object",
   "fieldValue",
   ",",
   "String",
   "fieldLabel",
   ")",
   "{",
   "ValidatorMessage",
   "validatorMessage",
   "=",
   "new",
   "ValidatorMessage",
   "(",
   ")",
   ";",
   "if",
   "(",
   "fieldValue",
   "==",
   "null",
   ")",
   "{",
   "return",
   "validatorMessage",
   ";",
   "}",
   "dynamicallyInitIfNeeded",
   "(",
   "fieldValue",
   ")",
   ";",
   "if",
   "(",
   "!",
   "super",
   ".",
   "isValueGreaterThanMin",
   "(",
   "(",
   "Comparable",
   ")",
   "fieldValue",
   ")",
   ")",
   "{",
   "populateMessage",
   "(",
   "underMin",
   ",",
   "validatorMessage",
   ",",
   "fieldLabel",
   ",",
   "<mask>",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "!",
   "super",
   ".",
   "isValueLessThanMax",
   "(",
   "(",
   "Comparable",
   ")",
   "fieldValue",
   ")",
   ")",
   "{",
   "populateMessage",
   "(",
   "overMax",
   ",",
   "validatorMessage",
   ",",
   "fieldLabel",
   ",",
   "max",
   ")",
   ";",
   "}",
   "return",
   "validatorMessage",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-307",
  "nl_tokens": [
   "convenience"
  ],
  "pl_tokens": [
   "public",
   "Object",
   "asObject",
   "(",
   "byte",
   "b",
   "[",
   "]",
   ")",
   "{",
   "try",
   "{",
   "return",
   "getObjectInput",
   "(",
   "b",
   ")",
   ".",
   "readObject",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"unable to decode:\"",
   "+",
   "new",
   "String",
   "(",
   "b",
   ",",
   "0",
   ",",
   "0",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "b",
   ".",
   "length",
   ",",
   "100",
   ")",
   ")",
   ")",
   ";",
   "try",
   "{",
   "String",
   "debug",
   "=",
   "new",
   "String",
   "(",
   "b",
   ",",
   "\"UTF-8\"",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "UnsupportedEncodingException",
   "e1",
   ")",
   "{",
   "//",
   "}",
   "try",
   "{",
   "getObjectInput",
   "(",
   "b",
   ")",
   ".",
   "readObject",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e1",
   ")",
   "{",
   "// debug hook",
   "}",
   "FSTUtil",
   ".",
   "<",
   "RuntimeException",
   ">",
   "rethrow",
   "(",
   "e",
   ")",
   ";",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-308",
  "nl_tokens": [
   "Replace",
   "missing",
   "values",
   "with",
   "dataMinMax",
   ".",
   "min",
   "-",
   "1",
   ".",
   "0",
   ";",
   "return",
   "a",
   "floating",
   "point",
   "data",
   "array",
   "."
  ],
  "pl_tokens": [
   "private",
   "ArrayFloat",
   "replaceMissingValues",
   "(",
   "IsMissingEvaluator",
   "grid",
   ",",
   "Array",
   "data",
   ",",
   "MAMath",
   ".",
   "MinMax",
   "dataMinMax",
   ")",
   "{",
   "float",
   "minValue",
   "=",
   "(",
   "float",
   ")",
   "(",
   "dataMinMax",
   ".",
   "<mask>",
   "-",
   "1.0",
   ")",
   ";",
   "ArrayFloat",
   "floatArray",
   "=",
   "(",
   "ArrayFloat",
   ")",
   "Array",
   ".",
   "factory",
   "(",
   "DataType",
   ".",
   "FLOAT",
   ",",
   "data",
   ".",
   "getShape",
   "(",
   ")",
   ")",
   ";",
   "IndexIterator",
   "dataIter",
   "=",
   "data",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "IndexIterator",
   "floatIter",
   "=",
   "floatArray",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "dataIter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "float",
   "v",
   "=",
   "dataIter",
   ".",
   "getFloatNext",
   "(",
   ")",
   ";",
   "if",
   "(",
   "grid",
   ".",
   "isMissing",
   "(",
   "(",
   "double",
   ")",
   "v",
   ")",
   ")",
   "{",
   "v",
   "=",
   "minValue",
   ";",
   "}",
   "floatIter",
   ".",
   "setFloatNext",
   "(",
   "v",
   ")",
   ";",
   "}",
   "return",
   "floatArray",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-309",
  "nl_tokens": [
   "This",
   "method",
   "determines",
   "if",
   "the",
   "direction",
   "of",
   "a",
   "substring",
   "is",
   "right",
   "-",
   "to",
   "-",
   "left",
   ".",
   "If",
   "the",
   "string",
   "is",
   "empty",
   "that",
   "determination",
   "is",
   "based",
   "on",
   "the",
   "default",
   "system",
   "language",
   "Locale",
   ".",
   "getDefault",
   "()",
   ".",
   "The",
   "method",
   "can",
   "handle",
   "invalid",
   "substring",
   "definitions",
   "(",
   "start",
   ">",
   "end",
   "etc",
   ".",
   ")",
   "in",
   "which",
   "case",
   "the",
   "method",
   "returns",
   "False",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "isRTL",
   "(",
   "CharSequence",
   "s",
   ",",
   "int",
   "start",
   ",",
   "int",
   "end",
   ")",
   "{",
   "if",
   "(",
   "s",
   "==",
   "null",
   "||",
   "s",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "// empty string --> determine the direction from the default language",
   "return",
   "isRTL",
   "(",
   "Locale",
   ".",
   "getDefault",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "start",
   "==",
   "end",
   ")",
   "{",
   "// if no character is selected we need to expand the selection",
   "start",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "--",
   "start",
   ")",
   ";",
   "if",
   "(",
   "start",
   "==",
   "end",
   ")",
   "{",
   "end",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "s",
   ".",
   "length",
   "(",
   ")",
   ",",
   "++",
   "end",
   ")",
   ";",
   "}",
   "}",
   "try",
   "{",
   "Bidi",
   "bidi",
   "=",
   "new",
   "Bidi",
   "(",
   "s",
   ".",
   "subSequence",
   "(",
   "start",
   ",",
   "end",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "Bidi",
   ".",
   "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
   ")",
   ";",
   "return",
   "!",
   "bidi",
   ".",
   "baseIsLeftToRight",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IndexOutOfBoundsException",
   "e",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-310",
  "nl_tokens": [
   "Calculate",
   "the",
   "scale",
   "/",
   "offset",
   "for",
   "an",
   "array",
   "of",
   "numbers",
   ".",
   "<pre",
   ">",
   "If",
   "signed",
   ":",
   "then",
   "max",
   "value",
   "unpacked",
   "=",
   "2^",
   "(",
   "n",
   "-",
   "1",
   ")",
   "-",
   "1",
   "packed",
   "min",
   "value",
   "unpacked",
   "=",
   "-",
   "(",
   "2^",
   "(",
   "n",
   "-",
   "1",
   ")",
   "-",
   "1",
   ")",
   "packed",
   "note",
   "that",
   "-",
   "2^",
   "(",
   "n",
   "-",
   "1",
   ")",
   "is",
   "unused",
   "and",
   "a",
   "good",
   "place",
   "to",
   "map",
   "missing",
   "values",
   "by",
   "solving",
   "2",
   "eq",
   "in",
   "2",
   "unknowns",
   "we",
   "get",
   ":",
   "scale",
   "=",
   "(",
   "max",
   "-",
   "min",
   ")",
   "/",
   "(",
   "2^n",
   "-",
   "2",
   ")",
   "offset",
   "=",
   "(",
   "max",
   "+",
   "min",
   ")",
   "/",
   "2",
   "If",
   "unsigned",
   "then",
   "max",
   "value",
   "unpacked",
   "=",
   "2^n",
   "-",
   "1",
   "packed",
   "min",
   "value",
   "unpacked",
   "=",
   "0",
   "packed",
   "and",
   ":",
   "scale",
   "=",
   "(",
   "max",
   "-",
   "min",
   ")",
   "/",
   "(",
   "2^n",
   "-",
   "1",
   ")",
   "offset",
   "=",
   "min",
   "One",
   "could",
   "modify",
   "this",
   "to",
   "allow",
   "a",
   "holder",
   "for",
   "missing",
   "values",
   ".",
   "<",
   "/",
   "pre",
   ">"
  ],
  "pl_tokens": [
   "public",
   "static",
   "MAMath",
   ".",
   "ScaleOffset",
   "calcScaleOffsetSkipMissingData",
   "(",
   "Array",
   "a",
   ",",
   "double",
   "missingValue",
   ",",
   "int",
   "nbits",
   ")",
   "{",
   "MAMath",
   ".",
   "MinMax",
   "minmax",
   "=",
   "getMinMaxSkipMissingData",
   "(",
   "a",
   ",",
   "missingValue",
   ")",
   ";",
   "if",
   "(",
   "a",
   ".",
   "isUnsigned",
   "(",
   ")",
   ")",
   "{",
   "long",
   "size",
   "=",
   "(",
   "1L",
   "<<",
   "nbits",
   ")",
   "-",
   "1",
   ";",
   "double",
   "offset",
   "=",
   "minmax",
   ".",
   "<mask>",
   ";",
   "double",
   "scale",
   "=",
   "(",
   "minmax",
   ".",
   "max",
   "-",
   "minmax",
   ".",
   "min",
   ")",
   "/",
   "size",
   ";",
   "return",
   "new",
   "ScaleOffset",
   "(",
   "scale",
   ",",
   "offset",
   ")",
   ";",
   "}",
   "else",
   "{",
   "long",
   "size",
   "=",
   "(",
   "1L",
   "<<",
   "nbits",
   ")",
   "-",
   "2",
   ";",
   "double",
   "offset",
   "=",
   "(",
   "minmax",
   ".",
   "max",
   "+",
   "minmax",
   ".",
   "min",
   ")",
   "/",
   "2",
   ";",
   "double",
   "scale",
   "=",
   "(",
   "minmax",
   ".",
   "max",
   "-",
   "minmax",
   ".",
   "min",
   ")",
   "/",
   "size",
   ";",
   "return",
   "new",
   "ScaleOffset",
   "(",
   "scale",
   ",",
   "offset",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-311",
  "nl_tokens": [
   "/",
   "*",
   "calculate",
   "the",
   "derived",
   "frequency",
   "border",
   "tables",
   "from",
   "f_master"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "derived_frequency_table",
   "(",
   "SBR",
   "sbr",
   ",",
   "int",
   "bs_xover_band",
   ",",
   "int",
   "k2",
   ")",
   "{",
   "int",
   "k",
   ",",
   "i",
   "=",
   "0",
   ";",
   "int",
   "minus",
   ";",
   "/* The following relation shall be satisfied: bs_xover_band < N_Master */",
   "if",
   "(",
   "sbr",
   ".",
   "N_master",
   "<=",
   "bs_xover_band",
   ")",
   "return",
   "1",
   ";",
   "sbr",
   ".",
   "N_high",
   "=",
   "sbr",
   ".",
   "N_master",
   "-",
   "bs_xover_band",
   ";",
   "sbr",
   ".",
   "N_low",
   "=",
   "(",
   "sbr",
   ".",
   "N_high",
   ">>",
   "1",
   ")",
   "+",
   "(",
   "sbr",
   ".",
   "N_high",
   "-",
   "(",
   "(",
   "sbr",
   ".",
   "N_high",
   ">>",
   "1",
   ")",
   "<<",
   "1",
   ")",
   ")",
   ";",
   "sbr",
   ".",
   "n",
   "[",
   "0",
   "]",
   "=",
   "sbr",
   ".",
   "N_low",
   ";",
   "sbr",
   ".",
   "n",
   "[",
   "1",
   "]",
   "=",
   "sbr",
   ".",
   "N_high",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "sbr",
   ".",
   "N_high",
   ";",
   "k",
   "++",
   ")",
   "{",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "HI_RES",
   "]",
   "[",
   "k",
   "]",
   "=",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "+",
   "bs_xover_band",
   "]",
   ";",
   "}",
   "sbr",
   ".",
   "M",
   "=",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "HI_RES",
   "]",
   "[",
   "sbr",
   ".",
   "N_high",
   "]",
   "-",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "HI_RES",
   "]",
   "[",
   "0",
   "]",
   ";",
   "sbr",
   ".",
   "kx",
   "=",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "HI_RES",
   "]",
   "[",
   "0",
   "]",
   ";",
   "if",
   "(",
   "sbr",
   ".",
   "kx",
   ">",
   "32",
   ")",
   "return",
   "1",
   ";",
   "if",
   "(",
   "sbr",
   ".",
   "kx",
   "+",
   "sbr",
   ".",
   "M",
   ">",
   "64",
   ")",
   "return",
   "1",
   ";",
   "minus",
   "=",
   "(",
   "(",
   "sbr",
   ".",
   "N_high",
   "&",
   "1",
   ")",
   "!=",
   "0",
   ")",
   "?",
   "1",
   ":",
   "0",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "sbr",
   ".",
   "N_low",
   ";",
   "k",
   "++",
   ")",
   "{",
   "if",
   "(",
   "k",
   "==",
   "0",
   ")",
   "i",
   "=",
   "0",
   ";",
   "else",
   "i",
   "=",
   "(",
   "2",
   "*",
   "k",
   "-",
   "minus",
   ")",
   ";",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "LO_RES",
   "]",
   "[",
   "k",
   "]",
   "=",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "HI_RES",
   "]",
   "[",
   "i",
   "]",
   ";",
   "}",
   "sbr",
   ".",
   "N_Q",
   "=",
   "0",
   ";",
   "if",
   "(",
   "sbr",
   ".",
   "bs_noise_bands",
   "==",
   "0",
   ")",
   "{",
   "sbr",
   ".",
   "N_Q",
   "=",
   "1",
   ";",
   "}",
   "else",
   "{",
   "sbr",
   ".",
   "N_Q",
   "=",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "1",
   ",",
   "find_bands",
   "(",
   "0",
   ",",
   "sbr",
   ".",
   "bs_noise_bands",
   ",",
   "sbr",
   ".",
   "kx",
   ",",
   "k2",
   ")",
   ")",
   ")",
   ";",
   "sbr",
   ".",
   "N_Q",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "5",
   ",",
   "sbr",
   ".",
   "N_Q",
   ")",
   ";",
   "}",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<=",
   "sbr",
   ".",
   "N_Q",
   ";",
   "k",
   "++",
   ")",
   "{",
   "if",
   "(",
   "k",
   "==",
   "0",
   ")",
   "{",
   "i",
   "=",
   "0",
   ";",
   "}",
   "else",
   "{",
   "/* i = i + (int32_t)((sbr.N_low - i)/(sbr.N_Q + 1 - k)); */",
   "i",
   "+=",
   "(",
   "sbr",
   ".",
   "N_low",
   "-",
   "i",
   ")",
   "/",
   "(",
   "sbr",
   ".",
   "N_Q",
   "+",
   "1",
   "-",
   "k",
   ")",
   ";",
   "}",
   "sbr",
   ".",
   "f_table_noise",
   "[",
   "k",
   "]",
   "=",
   "sbr",
   ".",
   "f_table_res",
   "[",
   "LO_RES",
   "]",
   "[",
   "i",
   "]",
   ";",
   "}",
   "/* build table for mapping k to g in hf patching */",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "64",
   ";",
   "k",
   "++",
   ")",
   "{",
   "int",
   "g",
   ";",
   "for",
   "(",
   "g",
   "=",
   "0",
   ";",
   "g",
   "<",
   "sbr",
   ".",
   "N_Q",
   ";",
   "g",
   "++",
   ")",
   "{",
   "if",
   "(",
   "(",
   "sbr",
   ".",
   "f_table_noise",
   "[",
   "g",
   "]",
   "<=",
   "k",
   ")",
   "&&",
   "(",
   "k",
   "<",
   "sbr",
   ".",
   "f_table_noise",
   "[",
   "g",
   "+",
   "1",
   "]",
   ")",
   ")",
   "{",
   "sbr",
   ".",
   "table_map_k_to_g",
   "[",
   "k",
   "]",
   "=",
   "g",
   ";",
   "break",
   ";",
   "}",
   "}",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-312",
  "nl_tokens": [
   "brute",
   "force"
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "findCoordElementForce",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "findBounds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "wantLat",
   "<",
   "latMinMax",
   ".",
   "<mask>",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLat",
   ">",
   "latMinMax",
   ".",
   "max",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   "<",
   "lonMinMax",
   ".",
   "min",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "wantLon",
   ">",
   "lonMinMax",
   ".",
   "max",
   ")",
   "return",
   "false",
   ";",
   "boolean",
   "saveDebug",
   "=",
   "debug",
   ";",
   "debug",
   "=",
   "false",
   ";",
   "for",
   "(",
   "int",
   "row",
   "=",
   "0",
   ";",
   "row",
   "<",
   "nrows",
   ";",
   "row",
   "++",
   ")",
   "{",
   "for",
   "(",
   "int",
   "col",
   "=",
   "0",
   ";",
   "col",
   "<",
   "ncols",
   ";",
   "col",
   "++",
   ")",
   "{",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "row",
   ";",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "col",
   ";",
   "if",
   "(",
   "contains",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ")",
   "{",
   "debug",
   "=",
   "saveDebug",
   ";",
   "return",
   "true",
   ";",
   "}",
   "}",
   "}",
   "//debug = saveDebug;\r",
   "return",
   "false",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-313",
  "nl_tokens": [
   "Assign",
   "the",
   "Rodrigues",
   "coordinates",
   "using",
   "a",
   "3",
   "element",
   "vector",
   ".",
   "Theta",
   "is",
   "the",
   "vector",
   "s",
   "magnitude",
   "and",
   "the",
   "axis",
   "of",
   "rotation",
   "is",
   "the",
   "unit",
   "vector",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setParamVector",
   "(",
   "double",
   "x",
   ",",
   "double",
   "y",
   ",",
   "double",
   "z",
   ")",
   "{",
   "double",
   "ax",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "x",
   ")",
   ";",
   "double",
   "ay",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "y",
   ")",
   ";",
   "double",
   "az",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "z",
   ")",
   ";",
   "double",
   "<mask>",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ax",
   ",",
   "ay",
   ")",
   ";",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "az",
   ")",
   ";",
   "if",
   "(",
   "max",
   "==",
   "0",
   ")",
   "{",
   "theta",
   "=",
   "0",
   ";",
   "unitAxisRotation",
   ".",
   "set",
   "(",
   "1",
   ",",
   "0",
   ",",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "x",
   "/=",
   "max",
   ";",
   "y",
   "/=",
   "max",
   ";",
   "z",
   "/=",
   "max",
   ";",
   "theta",
   "=",
   "Math",
   ".",
   "sqrt",
   "(",
   "x",
   "*",
   "x",
   "+",
   "y",
   "*",
   "y",
   "+",
   "z",
   "*",
   "z",
   ")",
   ";",
   "unitAxisRotation",
   ".",
   "x",
   "=",
   "x",
   "/",
   "theta",
   ";",
   "unitAxisRotation",
   ".",
   "y",
   "=",
   "y",
   "/",
   "theta",
   ";",
   "unitAxisRotation",
   ".",
   "z",
   "=",
   "z",
   "/",
   "theta",
   ";",
   "theta",
   "*=",
   "max",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-314",
  "nl_tokens": [
   "Returns",
   "the",
   "number",
   "of",
   "uncompressed",
   "bytes",
   "that",
   "can",
   "be",
   "read",
   "without",
   "blocking",
   ".",
   "The",
   "value",
   "is",
   "returned",
   "with",
   "an",
   "assumption",
   "that",
   "the",
   "compressed",
   "input",
   "data",
   "will",
   "be",
   "valid",
   ".",
   "If",
   "the",
   "compressed",
   "data",
   "is",
   "corrupt",
   "<code",
   ">",
   "CorruptedInputException<",
   "/",
   "code",
   ">",
   "may",
   "get",
   "thrown",
   "before",
   "the",
   "number",
   "of",
   "bytes",
   "claimed",
   "to",
   "be",
   "available",
   "have",
   "been",
   "read",
   "from",
   "this",
   "input",
   "stream",
   ".",
   "<p",
   ">",
   "In",
   "LZMA2InputStream",
   "the",
   "return",
   "value",
   "will",
   "be",
   "non",
   "-",
   "zero",
   "when",
   "the",
   "decompressor",
   "is",
   "in",
   "the",
   "middle",
   "of",
   "an",
   "LZMA2",
   "chunk",
   ".",
   "The",
   "return",
   "value",
   "will",
   "then",
   "be",
   "the",
   "number",
   "of",
   "uncompressed",
   "bytes",
   "remaining",
   "from",
   "that",
   "chunk",
   ".",
   "The",
   "return",
   "value",
   "can",
   "also",
   "be",
   "non",
   "-",
   "zero",
   "in",
   "the",
   "middle",
   "of",
   "an",
   "uncompressed",
   "chunk",
   "but",
   "then",
   "the",
   "return",
   "value",
   "depends",
   "also",
   "on",
   "the",
   "<code",
   ">",
   "available",
   "()",
   "<",
   "/",
   "code",
   ">",
   "method",
   "of",
   "the",
   "underlying",
   "InputStream",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "available",
   "(",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "in",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "XZIOException",
   "(",
   "\"Stream closed\"",
   ")",
   ";",
   "if",
   "(",
   "exception",
   "!=",
   "null",
   ")",
   "throw",
   "exception",
   ";",
   "return",
   "isLZMAChunk",
   "?",
   "uncompressedSize",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "uncompressedSize",
   ",",
   "in",
   ".",
   "available",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-315",
  "nl_tokens": [
   "Fills",
   "specified",
   "buffer",
   "with",
   "uncompressed",
   "data",
   ".",
   "Returns",
   "actual",
   "number",
   "of",
   "bytes",
   "of",
   "uncompressed",
   "data",
   ".",
   "A",
   "return",
   "value",
   "of",
   "0",
   "indicates",
   "that",
   "{",
   "@link",
   "#needsInput",
   "()",
   "}",
   "should",
   "be",
   "called",
   "in",
   "order",
   "to",
   "determine",
   "if",
   "more",
   "input",
   "data",
   "is",
   "required",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "synchronized",
   "int",
   "decompress",
   "(",
   "byte",
   "[",
   "]",
   "buffer",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "SnappyUtil",
   ".",
   "validateBuffer",
   "(",
   "buffer",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "if",
   "(",
   "inputBuffer",
   ".",
   "position",
   "(",
   ")",
   "==",
   "0",
   "&&",
   "!",
   "outputBuffer",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "if",
   "(",
   "!",
   "outputBuffer",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "inputBuffer",
   ".",
   "rewind",
   "(",
   ")",
   ";",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "inputBuffer",
   ".",
   "position",
   "(",
   ")",
   "==",
   "0",
   ",",
   "\"Invalid position of 0.\"",
   ")",
   ";",
   "Preconditions",
   ".",
   "checkArgument",
   "(",
   "outputBuffer",
   ".",
   "position",
   "(",
   ")",
   "==",
   "0",
   ",",
   "\"Invalid position of 0.\"",
   ")",
   ";",
   "// There is compressed input, decompress it now.",
   "int",
   "decompressedSize",
   "=",
   "Snappy",
   ".",
   "uncompressedLength",
   "(",
   "inputBuffer",
   ")",
   ";",
   "if",
   "(",
   "decompressedSize",
   ">",
   "outputBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ")",
   "{",
   "ByteBuffer",
   "oldBuffer",
   "=",
   "outputBuffer",
   ";",
   "outputBuffer",
   "=",
   "ByteBuffer",
   ".",
   "allocateDirect",
   "(",
   "decompressedSize",
   ")",
   ";",
   "CleanUtil",
   ".",
   "clean",
   "(",
   "oldBuffer",
   ")",
   ";",
   "}",
   "// Reset the previous outputBuffer (i.e. set position to 0)",
   "outputBuffer",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "int",
   "size",
   "=",
   "Snappy",
   ".",
   "uncompress",
   "(",
   "inputBuffer",
   ",",
   "outputBuffer",
   ")",
   ";",
   "outputBuffer",
   ".",
   "limit",
   "(",
   "size",
   ")",
   ";",
   "// We've decompressed the entire input, reset the input now",
   "inputBuffer",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "inputBuffer",
   ".",
   "limit",
   "(",
   "0",
   ")",
   ";",
   "finished",
   "=",
   "true",
   ";",
   "}",
   "// Return compressed output up to 'len'",
   "int",
   "numBytes",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "outputBuffer",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "outputBuffer",
   ".",
   "get",
   "(",
   "buffer",
   ",",
   "off",
   ",",
   "numBytes",
   ")",
   ";",
   "return",
   "numBytes",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-316",
  "nl_tokens": [
   "Gets",
   "the",
   "longest",
   "common",
   "parent",
   "directory",
   "path",
   "of",
   "two",
   "paths",
   "."
  ],
  "pl_tokens": [
   "public",
   "File",
   "getCommonDir",
   "(",
   "final",
   "File",
   "dir1",
   ",",
   "final",
   "File",
   "dir2",
   ")",
   "throws",
   "IOException",
   "{",
   "List",
   "<",
   "File",
   ">",
   "parts1",
   "=",
   "getParentDirs",
   "(",
   "dir1",
   ")",
   ";",
   "List",
   "<",
   "File",
   ">",
   "parts2",
   "=",
   "getParentDirs",
   "(",
   "dir2",
   ")",
   ";",
   "File",
   "matched",
   "=",
   "null",
   ";",
   "final",
   "int",
   "maxCommonSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "parts1",
   ".",
   "size",
   "(",
   ")",
   ",",
   "parts2",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "maxCommonSize",
   ";",
   "++",
   "i",
   ")",
   "{",
   "if",
   "(",
   "parts1",
   ".",
   "get",
   "(",
   "i",
   ")",
   ".",
   "equals",
   "(",
   "parts2",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ")",
   "{",
   "matched",
   "=",
   "parts1",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "}",
   "else",
   "{",
   "break",
   ";",
   "}",
   "}",
   "return",
   "matched",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-317",
  "nl_tokens": [
   "Returns",
   "the",
   "maximum",
   "of",
   "the",
   "given",
   "values",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "<mask>",
   "(",
   "long",
   "...",
   "values",
   ")",
   "{",
   "Parameters",
   ".",
   "checkCondition",
   "(",
   "values",
   ".",
   "length",
   ">",
   "0",
   ")",
   ";",
   "long",
   "max",
   "=",
   "values",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "values",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "max",
   ",",
   "values",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-318",
  "nl_tokens": [
   "iterate",
   "through",
   "values",
   "in",
   "each",
   "mini",
   "block",
   "and",
   "calculate",
   "the",
   "bitWidths",
   "of",
   "max",
   "values",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "calculateBitWidthsForDeltaBlockBuffer",
   "(",
   "int",
   "miniBlocksToFlush",
   ")",
   "{",
   "for",
   "(",
   "int",
   "miniBlockIndex",
   "=",
   "0",
   ";",
   "miniBlockIndex",
   "<",
   "miniBlocksToFlush",
   ";",
   "miniBlockIndex",
   "++",
   ")",
   "{",
   "int",
   "mask",
   "=",
   "0",
   ";",
   "int",
   "miniStart",
   "=",
   "miniBlockIndex",
   "*",
   "config",
   ".",
   "miniBlockSizeInValues",
   ";",
   "//The end of current mini block could be the end of current block(deltaValuesToFlush) buffer when data is not aligned to mini block",
   "int",
   "miniEnd",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "miniBlockIndex",
   "+",
   "1",
   ")",
   "*",
   "config",
   ".",
   "miniBlockSizeInValues",
   ",",
   "deltaValuesToFlush",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "miniStart",
   ";",
   "i",
   "<",
   "miniEnd",
   ";",
   "i",
   "++",
   ")",
   "{",
   "mask",
   "|=",
   "deltaBlockBuffer",
   "[",
   "i",
   "]",
   ";",
   "}",
   "bitWidths",
   "[",
   "miniBlockIndex",
   "]",
   "=",
   "32",
   "-",
   "Integer",
   ".",
   "numberOfLeadingZeros",
   "(",
   "mask",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-319",
  "nl_tokens": [
   "Grows",
   "the",
   "cropping",
   "rectange",
   "by",
   "(",
   "dx",
   "dy",
   ")",
   "in",
   "image",
   "space",
   "."
  ],
  "pl_tokens": [
   "void",
   "moveBy",
   "(",
   "float",
   "dx",
   ",",
   "float",
   "dy",
   ")",
   "{",
   "Rect",
   "invalRect",
   "=",
   "new",
   "Rect",
   "(",
   "mDrawRect",
   ")",
   ";",
   "mCropRect",
   ".",
   "offset",
   "(",
   "dx",
   ",",
   "dy",
   ")",
   ";",
   "// Put the cropping rectangle inside image rectangle.",
   "mCropRect",
   ".",
   "offset",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "mImageRect",
   ".",
   "left",
   "-",
   "mCropRect",
   ".",
   "left",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "mImageRect",
   ".",
   "top",
   "-",
   "mCropRect",
   ".",
   "top",
   ")",
   ")",
   ";",
   "mCropRect",
   ".",
   "offset",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "0",
   ",",
   "mImageRect",
   ".",
   "right",
   "-",
   "mCropRect",
   ".",
   "right",
   ")",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "0",
   ",",
   "mImageRect",
   ".",
   "bottom",
   "-",
   "mCropRect",
   ".",
   "bottom",
   ")",
   ")",
   ";",
   "mDrawRect",
   "=",
   "computeLayout",
   "(",
   ")",
   ";",
   "invalRect",
   ".",
   "union",
   "(",
   "mDrawRect",
   ")",
   ";",
   "invalRect",
   ".",
   "inset",
   "(",
   "-",
   "10",
   ",",
   "-",
   "10",
   ")",
   ";",
   "mContext",
   ".",
   "invalidate",
   "(",
   "invalRect",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-320",
  "nl_tokens": [
   "Creates",
   "a",
   "random",
   "vector",
   "where",
   "each",
   "axis",
   "is",
   "selected",
   "from",
   "a",
   "uniform",
   "distribution",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Vector3D_F64",
   "createRandom",
   "(",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ",",
   "Random",
   "rand",
   ")",
   "{",
   "double",
   "range",
   "=",
   "max",
   "-",
   "min",
   ";",
   "Vector3D_F64",
   "a",
   "=",
   "new",
   "Vector3D_F64",
   "(",
   ")",
   ";",
   "a",
   ".",
   "x",
   "=",
   "range",
   "*",
   "rand",
   ".",
   "nextDouble",
   "(",
   ")",
   "+",
   "min",
   ";",
   "a",
   ".",
   "y",
   "=",
   "range",
   "*",
   "rand",
   ".",
   "nextDouble",
   "(",
   ")",
   "+",
   "min",
   ";",
   "a",
   ".",
   "z",
   "=",
   "range",
   "*",
   "rand",
   ".",
   "nextDouble",
   "(",
   ")",
   "+",
   "min",
   ";",
   "return",
   "a",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-321",
  "nl_tokens": [
   "Determine",
   "if",
   "a",
   "given",
   "Range",
   "intersects",
   "this",
   "one",
   ".",
   "NOTE",
   ":",
   "we",
   "dont",
   "yet",
   "support",
   "intersection",
   "when",
   "both",
   "Ranges",
   "have",
   "strides"
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "intersects",
   "(",
   "Range",
   "r",
   ")",
   "{",
   "if",
   "(",
   "(",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   "||",
   "(",
   "r",
   ".",
   "length",
   "(",
   ")",
   "==",
   "0",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "this",
   "==",
   "VLEN",
   "||",
   "r",
   "==",
   "VLEN",
   ")",
   "return",
   "true",
   ";",
   "int",
   "last",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "last",
   "(",
   ")",
   ",",
   "r",
   ".",
   "last",
   "(",
   ")",
   ")",
   ";",
   "int",
   "resultStride",
   "=",
   "stride",
   "*",
   "r",
   ".",
   "stride",
   "(",
   ")",
   ";",
   "int",
   "useFirst",
   ";",
   "if",
   "(",
   "resultStride",
   "==",
   "1",
   ")",
   "{",
   "// both strides are 1",
   "useFirst",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "first",
   "(",
   ")",
   ",",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "stride",
   "==",
   "1",
   ")",
   "{",
   "// then r has a stride",
   "if",
   "(",
   "r",
   ".",
   "first",
   "(",
   ")",
   ">=",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "=",
   "r",
   ".",
   "first",
   "(",
   ")",
   ";",
   "else",
   "{",
   "int",
   "incr",
   "=",
   "(",
   "first",
   "(",
   ")",
   "-",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "/",
   "resultStride",
   ";",
   "useFirst",
   "=",
   "r",
   ".",
   "first",
   "(",
   ")",
   "+",
   "incr",
   "*",
   "resultStride",
   ";",
   "if",
   "(",
   "useFirst",
   "<",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "+=",
   "resultStride",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "r",
   ".",
   "stride",
   "(",
   ")",
   "==",
   "1",
   ")",
   "{",
   "// then this has a stride",
   "if",
   "(",
   "first",
   "(",
   ")",
   ">=",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "=",
   "first",
   "(",
   ")",
   ";",
   "else",
   "{",
   "int",
   "incr",
   "=",
   "(",
   "r",
   ".",
   "first",
   "(",
   ")",
   "-",
   "first",
   "(",
   ")",
   ")",
   "/",
   "resultStride",
   ";",
   "useFirst",
   "=",
   "first",
   "(",
   ")",
   "+",
   "incr",
   "*",
   "resultStride",
   ";",
   "if",
   "(",
   "useFirst",
   "<",
   "r",
   ".",
   "first",
   "(",
   ")",
   ")",
   "useFirst",
   "+=",
   "resultStride",
   ";",
   "}",
   "}",
   "else",
   "{",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"Intersection when both ranges have a stride\"",
   ")",
   ";",
   "}",
   "return",
   "(",
   "useFirst",
   "<=",
   "last",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-322",
  "nl_tokens": [
   "Set",
   "this",
   "square",
   "matrix",
   "from",
   "another",
   "matrix",
   ".",
   "Note",
   "that",
   "this",
   "matrix",
   "will",
   "reference",
   "the",
   "values",
   "of",
   "the",
   "argument",
   "matrix",
   ".",
   "If",
   "the",
   "values",
   "are",
   "not",
   "square",
   "only",
   "the",
   "upper",
   "left",
   "square",
   "is",
   "used",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "_set",
   "(",
   "final",
   "Matrix",
   "m",
   ")",
   "{",
   "this",
   ".",
   "m_nRows",
   "=",
   "this",
   ".",
   "m_nCols",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "m",
   ".",
   "m_nRows",
   ",",
   "m",
   ".",
   "m_nCols",
   ")",
   ";",
   "this",
   ".",
   "m_aValues",
   "=",
   "m",
   ".",
   "m_aValues",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-323",
  "nl_tokens": [
   "rather",
   "than",
   "the",
   "current",
   "1024x768",
   "this",
   "should",
   "be",
   "changed",
   "down",
   "to",
   "200%",
   "."
  ],
  "pl_tokens": [
   "protected",
   "float",
   "maxZoom",
   "(",
   ")",
   "{",
   "if",
   "(",
   "mBitmapDisplayed",
   ".",
   "getBitmap",
   "(",
   ")",
   "==",
   "null",
   ")",
   "{",
   "return",
   "1F",
   ";",
   "}",
   "float",
   "fw",
   "=",
   "(",
   "float",
   ")",
   "mBitmapDisplayed",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "(",
   "float",
   ")",
   "mThisWidth",
   ";",
   "float",
   "fh",
   "=",
   "(",
   "float",
   ")",
   "mBitmapDisplayed",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "(",
   "float",
   ")",
   "mThisHeight",
   ";",
   "float",
   "<mask>",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "fw",
   ",",
   "fh",
   ")",
   "*",
   "4",
   ";",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-324",
  "nl_tokens": [
   "Visible",
   "for",
   "testing"
  ],
  "pl_tokens": [
   "static",
   "org",
   ".",
   "apache",
   ".",
   "parquet",
   ".",
   "column",
   ".",
   "statistics",
   ".",
   "Statistics",
   "fromParquetStatisticsInternal",
   "(",
   "String",
   "createdBy",
   ",",
   "Statistics",
   "formatStats",
   ",",
   "PrimitiveType",
   "type",
   ",",
   "SortOrder",
   "typeSortOrder",
   ")",
   "{",
   "// create stats object based on the column type",
   "org",
   ".",
   "apache",
   ".",
   "parquet",
   ".",
   "column",
   ".",
   "statistics",
   ".",
   "Statistics",
   ".",
   "Builder",
   "statsBuilder",
   "=",
   "org",
   ".",
   "apache",
   ".",
   "parquet",
   ".",
   "column",
   ".",
   "statistics",
   ".",
   "Statistics",
   ".",
   "getBuilderForReading",
   "(",
   "type",
   ")",
   ";",
   "if",
   "(",
   "formatStats",
   "!=",
   "null",
   ")",
   "{",
   "// Use the new V2 min-max statistics over the former one if it is filled",
   "if",
   "(",
   "formatStats",
   ".",
   "isSetMin_value",
   "(",
   ")",
   "&&",
   "formatStats",
   ".",
   "isSetMax_value",
   "(",
   ")",
   ")",
   "{",
   "byte",
   "[",
   "]",
   "<mask>",
   "=",
   "formatStats",
   ".",
   "min_value",
   ".",
   "array",
   "(",
   ")",
   ";",
   "byte",
   "[",
   "]",
   "max",
   "=",
   "formatStats",
   ".",
   "max_value",
   ".",
   "array",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isMinMaxStatsSupported",
   "(",
   "type",
   ")",
   "||",
   "Arrays",
   ".",
   "equals",
   "(",
   "min",
   ",",
   "max",
   ")",
   ")",
   "{",
   "statsBuilder",
   ".",
   "withMin",
   "(",
   "min",
   ")",
   ";",
   "statsBuilder",
   ".",
   "withMax",
   "(",
   "max",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "boolean",
   "isSet",
   "=",
   "formatStats",
   ".",
   "isSetMax",
   "(",
   ")",
   "&&",
   "formatStats",
   ".",
   "isSetMin",
   "(",
   ")",
   ";",
   "boolean",
   "maxEqualsMin",
   "=",
   "isSet",
   "?",
   "Arrays",
   ".",
   "equals",
   "(",
   "formatStats",
   ".",
   "getMin",
   "(",
   ")",
   ",",
   "formatStats",
   ".",
   "getMax",
   "(",
   ")",
   ")",
   ":",
   "false",
   ";",
   "boolean",
   "sortOrdersMatch",
   "=",
   "SortOrder",
   ".",
   "SIGNED",
   "==",
   "typeSortOrder",
   ";",
   "// NOTE: See docs in CorruptStatistics for explanation of why this check is needed",
   "// The sort order is checked to avoid returning min/max stats that are not",
   "// valid with the type's sort order. In previous releases, all stats were",
   "// aggregated using a signed byte-wise ordering, which isn't valid for all the",
   "// types (e.g. strings, decimals etc.).",
   "if",
   "(",
   "!",
   "CorruptStatistics",
   ".",
   "shouldIgnoreStatistics",
   "(",
   "createdBy",
   ",",
   "type",
   ".",
   "getPrimitiveTypeName",
   "(",
   ")",
   ")",
   "&&",
   "(",
   "sortOrdersMatch",
   "||",
   "maxEqualsMin",
   ")",
   ")",
   "{",
   "if",
   "(",
   "isSet",
   ")",
   "{",
   "statsBuilder",
   ".",
   "withMin",
   "(",
   "formatStats",
   ".",
   "min",
   ".",
   "array",
   "(",
   ")",
   ")",
   ";",
   "statsBuilder",
   ".",
   "withMax",
   "(",
   "formatStats",
   ".",
   "max",
   ".",
   "array",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "if",
   "(",
   "formatStats",
   ".",
   "isSetNull_count",
   "(",
   ")",
   ")",
   "{",
   "statsBuilder",
   ".",
   "withNumNulls",
   "(",
   "formatStats",
   ".",
   "null_count",
   ")",
   ";",
   "}",
   "}",
   "return",
   "statsBuilder",
   ".",
   "build",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-325",
  "nl_tokens": [
   "Writes",
   "this",
   "messages",
   "body",
   "to",
   "the",
   "given",
   "output",
   "stream",
   ".",
   "This",
   "method",
   "may",
   "only",
   "be",
   "called",
   "once",
   "during",
   "the",
   "lifetime",
   "of",
   "this",
   "message",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "write",
   "(",
   "OutputStream",
   "os",
   ")",
   "throws",
   "IOException",
   "{",
   "Assert",
   ".",
   "isTrue",
   "(",
   "!",
   "inputRead",
   ")",
   ";",
   "Assert",
   ".",
   "isTrue",
   "(",
   "!",
   "hasInputStream",
   ")",
   ";",
   "int",
   "bytesRead",
   "=",
   "0",
   ";",
   "int",
   "totalBytesRead",
   "=",
   "0",
   ";",
   "byte",
   "[",
   "]",
   "buffer",
   "=",
   "bufferPool",
   ".",
   "getBuffer",
   "(",
   ")",
   ";",
   "long",
   "contentLength",
   "=",
   "getContentLength",
   "(",
   ")",
   ";",
   "try",
   "{",
   "while",
   "(",
   "bytesRead",
   "!=",
   "-",
   "1",
   "&&",
   "(",
   "contentLength",
   "==",
   "-",
   "1",
   "||",
   "contentLength",
   ">",
   "totalBytesRead",
   ")",
   ")",
   "{",
   "if",
   "(",
   "contentLength",
   "==",
   "-",
   "1",
   ")",
   "{",
   "bytesRead",
   "=",
   "is",
   ".",
   "read",
   "(",
   "buffer",
   ")",
   ";",
   "}",
   "else",
   "{",
   "bytesRead",
   "=",
   "is",
   ".",
   "read",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "buffer",
   ".",
   "length",
   ",",
   "contentLength",
   "-",
   "totalBytesRead",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "bytesRead",
   "==",
   "-",
   "1",
   ")",
   "{",
   "if",
   "(",
   "contentLength",
   ">=",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "IOException",
   "(",
   "Policy",
   ".",
   "bind",
   "(",
   "\"exception.unexpectedEndStream\"",
   ")",
   ")",
   ";",
   "//$NON-NLS-1$",
   "}",
   "}",
   "else",
   "{",
   "totalBytesRead",
   "+=",
   "bytesRead",
   ";",
   "os",
   ".",
   "write",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "bytesRead",
   ")",
   ";",
   "}",
   "}",
   "}",
   "finally",
   "{",
   "bufferPool",
   ".",
   "putBuffer",
   "(",
   "buffer",
   ")",
   ";",
   "inputRead",
   "=",
   "true",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-326",
  "nl_tokens": [
   "Creates",
   "a",
   "{"
  ],
  "pl_tokens": [
   "protected",
   "GenericObjectPool",
   "<",
   "T",
   ">",
   "newObjectPool",
   "(",
   "final",
   "ObjectFactory",
   "<",
   "T",
   ">",
   "objectFactory",
   ")",
   "{",
   "final",
   "int",
   "maxActive",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "2",
   ",",
   "Runtime",
   ".",
   "getRuntime",
   "(",
   ")",
   ".",
   "availableProcessors",
   "(",
   ")",
   ")",
   ";",
   "final",
   "GenericObjectPool",
   "<",
   "T",
   ">",
   "pool",
   "=",
   "new",
   "GenericObjectPool",
   "<",
   "T",
   ">",
   "(",
   "new",
   "BasePoolableObjectFactory",
   "<",
   "T",
   ">",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "T",
   "makeObject",
   "(",
   ")",
   "throws",
   "Exception",
   "{",
   "return",
   "objectFactory",
   ".",
   "create",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "pool",
   ".",
   "setMaxActive",
   "(",
   "maxActive",
   ")",
   ";",
   "pool",
   ".",
   "setMaxIdle",
   "(",
   "MAX_IDLE",
   ")",
   ";",
   "pool",
   ".",
   "setMaxWait",
   "(",
   "MAX_WAIT",
   ")",
   ";",
   "/**\r\n     * Use WHEN_EXHAUSTED_GROW strategy, otherwise the pool object retrieval can fail. More details here:\r\n     * <a>http://code.google.com/p/wro4j/issues/detail?id=364</a>\r\n     */",
   "pool",
   ".",
   "setWhenExhaustedAction",
   "(",
   "GenericObjectPool",
   ".",
   "WHEN_EXHAUSTED_GROW",
   ")",
   ";",
   "// make object eligible for eviction after a predefined amount of time.\r",
   "pool",
   ".",
   "setSoftMinEvictableIdleTimeMillis",
   "(",
   "EVICTABLE_IDLE_TIME",
   ")",
   ";",
   "pool",
   ".",
   "setTimeBetweenEvictionRunsMillis",
   "(",
   "EVICTABLE_IDLE_TIME",
   ")",
   ";",
   "return",
   "pool",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-327",
  "nl_tokens": [
   "tricky",
   "bit",
   "of",
   "business",
   ".",
   "recapture",
   "the",
   "entire",
   "record",
   "based",
   "on",
   "drs",
   "position",
   ".",
   "for",
   "validation",
   "."
  ],
  "pl_tokens": [
   "@",
   "Nullable",
   "public",
   "static",
   "Grib2Record",
   "findRecordByDrspos",
   "(",
   "RandomAccessFile",
   "raf",
   ",",
   "long",
   "drsPos",
   ")",
   "throws",
   "IOException",
   "{",
   "long",
   "pos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "drsPos",
   "-",
   "(",
   "20",
   "*",
   "1000",
   ")",
   ")",
   ";",
   "// go back 20K\r",
   "Grib2RecordScanner",
   "scan",
   "=",
   "new",
   "Grib2RecordScanner",
   "(",
   "raf",
   ",",
   "pos",
   ")",
   ";",
   "while",
   "(",
   "scan",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "ucar",
   ".",
   "nc2",
   ".",
   "grib",
   ".",
   "grib2",
   ".",
   "Grib2Record",
   "gr",
   "=",
   "scan",
   ".",
   "next",
   "(",
   ")",
   ";",
   "Grib2SectionDataRepresentation",
   "drs",
   "=",
   "gr",
   ".",
   "getDataRepresentationSection",
   "(",
   ")",
   ";",
   "if",
   "(",
   "drsPos",
   "==",
   "drs",
   ".",
   "getStartingPosition",
   "(",
   ")",
   ")",
   "return",
   "gr",
   ";",
   "if",
   "(",
   "raf",
   ".",
   "getFilePointer",
   "(",
   ")",
   ">",
   "drsPos",
   ")",
   "break",
   ";",
   "// missed it.\r",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-328",
  "nl_tokens": [
   "Calculates",
   "the",
   "bounding",
   "box",
   "of",
   "this",
   "coordinate",
   "reference",
   "system",
   "in",
   "projection",
   "coordinates",
   ".",
   "If",
   "this",
   "CRS",
   "{",
   "@link",
   "#isProjection",
   "isn",
   "t",
   "a",
   "projection",
   "}",
   "than",
   "{",
   "@code",
   "null",
   "}",
   "is",
   "returned",
   "."
  ],
  "pl_tokens": [
   "public",
   "ProjectionRect",
   "calcProjectionBoundingBox",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isProjection",
   ")",
   "return",
   "null",
   ";",
   "double",
   "minX",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "xAxis",
   ".",
   "getCoordEdgeFirst",
   "(",
   ")",
   ",",
   "xAxis",
   ".",
   "getCoordEdgeLast",
   "(",
   ")",
   ")",
   ";",
   "double",
   "minY",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "yAxis",
   ".",
   "getCoordEdgeFirst",
   "(",
   ")",
   ",",
   "yAxis",
   ".",
   "getCoordEdgeLast",
   "(",
   ")",
   ")",
   ";",
   "double",
   "width",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "xAxis",
   ".",
   "getCoordEdgeLast",
   "(",
   ")",
   "-",
   "xAxis",
   ".",
   "getCoordEdgeFirst",
   "(",
   ")",
   ")",
   ";",
   "double",
   "height",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "yAxis",
   ".",
   "getCoordEdgeLast",
   "(",
   ")",
   "-",
   "yAxis",
   ".",
   "getCoordEdgeFirst",
   "(",
   ")",
   ")",
   ";",
   "return",
   "new",
   "ProjectionRect",
   "(",
   "new",
   "ProjectionPointImpl",
   "(",
   "minX",
   ",",
   "minY",
   ")",
   ",",
   "width",
   ",",
   "height",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-329",
  "nl_tokens": [
   "we",
   "think",
   "its",
   "got",
   "to",
   "be",
   "in",
   "one",
   "of",
   "the",
   "9",
   "boxes",
   "around",
   "rectIndex"
  ],
  "pl_tokens": [
   "private",
   "boolean",
   "box9",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "int",
   "row",
   "=",
   "rectIndex",
   "[",
   "0",
   "]",
   ";",
   "int",
   "minrow",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "row",
   "-",
   "1",
   ",",
   "0",
   ")",
   ";",
   "int",
   "maxrow",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "row",
   "+",
   "1",
   ",",
   "nrows",
   ")",
   ";",
   "int",
   "col",
   "=",
   "rectIndex",
   "[",
   "1",
   "]",
   ";",
   "int",
   "mincol",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "col",
   "-",
   "1",
   ",",
   "0",
   ")",
   ";",
   "int",
   "maxcol",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "col",
   "+",
   "1",
   ",",
   "ncols",
   ")",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\"%n   box9:\"",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "minrow",
   ";",
   "i",
   "<=",
   "maxrow",
   ";",
   "i",
   "++",
   ")",
   "for",
   "(",
   "int",
   "j",
   "=",
   "mincol",
   ";",
   "j",
   "<=",
   "maxcol",
   ";",
   "j",
   "++",
   ")",
   "{",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "i",
   ";",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "j",
   ";",
   "if",
   "(",
   "contains",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ")",
   "return",
   "true",
   ";",
   "}",
   "return",
   "false",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-330",
  "nl_tokens": [
   "Returns",
   "the",
   "relative",
   "difference",
   "between",
   "two",
   "numbers",
   "i",
   ".",
   "e",
   ".",
   "{",
   "@code",
   "|a",
   "-",
   "b|",
   "/",
   "max",
   "(",
   "|a|",
   "|b|",
   ")",
   "}",
   ".",
   "<p",
   ">",
   "For",
   "cases",
   "where",
   "{",
   "@code",
   "a",
   "==",
   "0",
   "}",
   "{",
   "@code",
   "b",
   "==",
   "0",
   "}",
   "or",
   "{",
   "@code",
   "a",
   "}",
   "and",
   "{",
   "@code",
   "b",
   "}",
   "are",
   "extremely",
   "close",
   "traditional",
   "relative",
   "difference",
   "calculation",
   "breaks",
   "down",
   ".",
   "So",
   "in",
   "those",
   "instances",
   "we",
   "compute",
   "the",
   "difference",
   "relative",
   "to",
   "{",
   "@link",
   "Float#MIN_NORMAL",
   "}",
   "i",
   ".",
   "e",
   ".",
   "{",
   "@code",
   "|a",
   "-",
   "b|",
   "/",
   "Float",
   ".",
   "MIN_NORMAL",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "float",
   "relativeDifference",
   "(",
   "float",
   "a",
   ",",
   "float",
   "b",
   ")",
   "{",
   "float",
   "absDiff",
   "=",
   "absoluteDifference",
   "(",
   "a",
   ",",
   "b",
   ")",
   ";",
   "if",
   "(",
   "Float",
   ".",
   "compare",
   "(",
   "a",
   ",",
   "b",
   ")",
   "==",
   "0",
   ")",
   "{",
   "// Shortcut: handles infinities and NaNs.",
   "return",
   "0",
   ";",
   "}",
   "else",
   "if",
   "(",
   "a",
   "==",
   "0",
   "||",
   "b",
   "==",
   "0",
   "||",
   "absDiff",
   "<",
   "Float",
   ".",
   "MIN_NORMAL",
   ")",
   "{",
   "return",
   "absDiff",
   "/",
   "Float",
   ".",
   "MIN_NORMAL",
   ";",
   "}",
   "else",
   "{",
   "float",
   "maxAbsValue",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "a",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "b",
   ")",
   ")",
   ";",
   "return",
   "absDiff",
   "/",
   "maxAbsValue",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-331",
  "nl_tokens": [
   "Paginate",
   "from",
   "a",
   "full",
   "data",
   "set"
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "PaginationResult",
   "<",
   "T",
   ">",
   "paginate",
   "(",
   "final",
   "Integer",
   "startPage",
   ",",
   "final",
   "int",
   "pageSize",
   ",",
   "final",
   "List",
   "<",
   "T",
   ">",
   "fullDataSet",
   ")",
   "{",
   "return",
   "paginate",
   "(",
   "startPage",
   ",",
   "pageSize",
   ",",
   "(",
   "start",
   ",",
   "length",
   ")",
   "->",
   "{",
   "final",
   "int",
   "len",
   "=",
   "fullDataSet",
   ".",
   "size",
   "(",
   ")",
   ";",
   "if",
   "(",
   "start",
   ">",
   "len",
   ")",
   "{",
   "return",
   "Collections",
   ".",
   "emptyList",
   "(",
   ")",
   ";",
   "}",
   "return",
   "fullDataSet",
   ".",
   "subList",
   "(",
   "start",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "start",
   "+",
   "length",
   ",",
   "len",
   ")",
   ")",
   ";",
   "}",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-332",
  "nl_tokens": [
   "Element",
   "wise",
   "minimum",
   "function",
   "between",
   "2",
   "INDArrays"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "first",
   ",",
   "INDArray",
   "second",
   ",",
   "boolean",
   "dup",
   ")",
   "{",
   "if",
   "(",
   "dup",
   ")",
   "{",
   "first",
   "=",
   "first",
   ".",
   "dup",
   "(",
   ")",
   ";",
   "}",
   "return",
   "exec",
   "(",
   "new",
   "OldMin",
   "(",
   "second",
   ",",
   "first",
   ",",
   "first",
   ",",
   "first",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-333",
  "nl_tokens": [
   "Retrieve",
   "the",
   "Application",
   "Specific",
   "Feedback",
   "(",
   "if",
   "present",
   ")",
   "from",
   "the",
   "Status",
   "Message",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "applicationSpecificFeedback",
   "(",
   "final",
   "byte",
   "[",
   "]",
   "destination",
   ")",
   "{",
   "final",
   "int",
   "frameLength",
   "=",
   "frameLength",
   "(",
   ")",
   ";",
   "int",
   "result",
   "=",
   "0",
   ";",
   "if",
   "(",
   "frameLength",
   ">",
   "HEADER_LENGTH",
   ")",
   "{",
   "if",
   "(",
   "frameLength",
   ">",
   "capacity",
   "(",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "AeronException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"SM application specific feedback (%d) is truncated (%d)\"",
   ",",
   "frameLength",
   "-",
   "HEADER_LENGTH",
   ",",
   "capacity",
   "(",
   ")",
   "-",
   "HEADER_LENGTH",
   ")",
   ")",
   ";",
   "}",
   "final",
   "int",
   "copyLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "destination",
   ".",
   "length",
   ",",
   "frameLength",
   "-",
   "HEADER_LENGTH",
   ")",
   ";",
   "getBytes",
   "(",
   "APP_SPECIFIC_FEEDBACK_FIELD_OFFSET",
   ",",
   "destination",
   ",",
   "0",
   ",",
   "copyLength",
   ")",
   ";",
   "result",
   "=",
   "copyLength",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-334",
  "nl_tokens": [
   "Returns",
   "the",
   "current",
   "maximum",
   ".",
   "The",
   "returned",
   "value",
   "is",
   "<em",
   ">",
   "NOT<",
   "/",
   "em",
   ">",
   "an",
   "atomic",
   "snapshot",
   ":",
   "Invocation",
   "in",
   "the",
   "absence",
   "of",
   "concurrent",
   "updates",
   "returns",
   "an",
   "accurate",
   "result",
   "but",
   "concurrent",
   "updates",
   "that",
   "occur",
   "while",
   "the",
   "value",
   "is",
   "being",
   "calculated",
   "might",
   "not",
   "be",
   "incorporated",
   "."
  ],
  "pl_tokens": [
   "public",
   "long",
   "<mask>",
   "(",
   ")",
   "{",
   "Cell",
   "[",
   "]",
   "as",
   "=",
   "cells",
   ";",
   "long",
   "max",
   "=",
   "base",
   ";",
   "if",
   "(",
   "as",
   "!=",
   "null",
   ")",
   "{",
   "int",
   "n",
   "=",
   "as",
   ".",
   "length",
   ";",
   "long",
   "v",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "++",
   "i",
   ")",
   "{",
   "Cell",
   "a",
   "=",
   "as",
   "[",
   "i",
   "]",
   ";",
   "if",
   "(",
   "a",
   "!=",
   "null",
   "&&",
   "(",
   "v",
   "=",
   "a",
   ".",
   "value",
   ")",
   ">",
   "max",
   ")",
   "max",
   "=",
   "v",
   ";",
   "}",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-335",
  "nl_tokens": [
   "<p",
   ">",
   "Returns",
   "the",
   "Euclidean",
   "distance",
   "squared",
   "of",
   "the",
   "closest",
   "point",
   "on",
   "the",
   "line",
   "from",
   "a",
   "point",
   ".",
   "<",
   "/",
   "p",
   ">"
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "distanceSq",
   "(",
   "LineParametric2D_F64",
   "line",
   ",",
   "Point2D_F64",
   "p",
   ")",
   "{",
   "double",
   "scale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "line",
   ".",
   "slope",
   ".",
   "x",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "line",
   ".",
   "slope",
   ".",
   "y",
   ")",
   ")",
   ";",
   "double",
   "t",
   "=",
   "ClosestPoint2D_F64",
   ".",
   "closestPointT",
   "(",
   "line",
   ",",
   "p",
   ",",
   "scale",
   ")",
   ";",
   "double",
   "a",
   "=",
   "(",
   "line",
   ".",
   "slope",
   ".",
   "x",
   "/",
   "scale",
   ")",
   "*",
   "t",
   "+",
   "line",
   ".",
   "p",
   ".",
   "x",
   ";",
   "double",
   "b",
   "=",
   "(",
   "line",
   ".",
   "slope",
   ".",
   "y",
   "/",
   "scale",
   ")",
   "*",
   "t",
   "+",
   "line",
   ".",
   "p",
   ".",
   "y",
   ";",
   "double",
   "dx",
   "=",
   "p",
   ".",
   "x",
   "-",
   "a",
   ";",
   "double",
   "dy",
   "=",
   "p",
   ".",
   "y",
   "-",
   "b",
   ";",
   "return",
   "dx",
   "*",
   "dx",
   "+",
   "dy",
   "*",
   "dy",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-336",
  "nl_tokens": [
   "Computes",
   "the",
   "intersection",
   "of",
   "this",
   "rectangle",
   "with",
   "another",
   "one",
   "."
  ],
  "pl_tokens": [
   "public",
   "Rectangular",
   "intersection",
   "(",
   "Rectangular",
   "other",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "intersects",
   "(",
   "other",
   ")",
   ")",
   "{",
   "return",
   "new",
   "Rectangular",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "x1",
   ",",
   "other",
   ".",
   "x1",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "y1",
   ",",
   "other",
   ".",
   "y1",
   ")",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "x2",
   ",",
   "other",
   ".",
   "x2",
   ")",
   ",",
   "Math",
   ".",
   "min",
   "(",
   "y2",
   ",",
   "other",
   ".",
   "y2",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "new",
   "Rectangular",
   "(",
   ")",
   ";",
   "//an empty rectangle",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-337",
  "nl_tokens": [
   "Scan",
   "the",
   "term",
   "buffer",
   "for",
   "availability",
   "of",
   "new",
   "message",
   "fragments",
   "from",
   "a",
   "given",
   "offset",
   "up",
   "to",
   "a",
   "maxLength",
   "of",
   "bytes",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "scanForAvailability",
   "(",
   "final",
   "UnsafeBuffer",
   "termBuffer",
   ",",
   "final",
   "int",
   "offset",
   ",",
   "final",
   "int",
   "maxLength",
   ")",
   "{",
   "final",
   "int",
   "limit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxLength",
   ",",
   "termBuffer",
   ".",
   "capacity",
   "(",
   ")",
   "-",
   "offset",
   ")",
   ";",
   "int",
   "available",
   "=",
   "0",
   ";",
   "int",
   "padding",
   "=",
   "0",
   ";",
   "do",
   "{",
   "final",
   "int",
   "termOffset",
   "=",
   "offset",
   "+",
   "available",
   ";",
   "final",
   "int",
   "frameLength",
   "=",
   "frameLengthVolatile",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ")",
   ";",
   "if",
   "(",
   "frameLength",
   "<=",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "int",
   "alignedFrameLength",
   "=",
   "align",
   "(",
   "frameLength",
   ",",
   "FRAME_ALIGNMENT",
   ")",
   ";",
   "if",
   "(",
   "isPaddingFrame",
   "(",
   "termBuffer",
   ",",
   "termOffset",
   ")",
   ")",
   "{",
   "padding",
   "=",
   "alignedFrameLength",
   "-",
   "HEADER_LENGTH",
   ";",
   "alignedFrameLength",
   "=",
   "HEADER_LENGTH",
   ";",
   "}",
   "available",
   "+=",
   "alignedFrameLength",
   ";",
   "if",
   "(",
   "available",
   ">",
   "limit",
   ")",
   "{",
   "available",
   "-=",
   "alignedFrameLength",
   ";",
   "padding",
   "=",
   "0",
   ";",
   "break",
   ";",
   "}",
   "}",
   "while",
   "(",
   "0",
   "==",
   "padding",
   "&&",
   "available",
   "<",
   "limit",
   ")",
   ";",
   "return",
   "pack",
   "(",
   "padding",
   ",",
   "available",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-338",
  "nl_tokens": [
   "Replaces",
   "the",
   "abstract",
   "type",
   "stored",
   "at",
   "the",
   "given",
   "local",
   "variable",
   "index",
   "in",
   "the",
   "output",
   "frame",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "setLocal",
   "(",
   "final",
   "int",
   "localIndex",
   ",",
   "final",
   "int",
   "abstractType",
   ")",
   "{",
   "// Create and/or resize the output local variables array if necessary.",
   "if",
   "(",
   "outputLocals",
   "==",
   "null",
   ")",
   "{",
   "outputLocals",
   "=",
   "new",
   "int",
   "[",
   "10",
   "]",
   ";",
   "}",
   "int",
   "outputLocalsLength",
   "=",
   "outputLocals",
   ".",
   "length",
   ";",
   "if",
   "(",
   "localIndex",
   ">=",
   "outputLocalsLength",
   ")",
   "{",
   "int",
   "[",
   "]",
   "newOutputLocals",
   "=",
   "new",
   "int",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "localIndex",
   "+",
   "1",
   ",",
   "2",
   "*",
   "outputLocalsLength",
   ")",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "outputLocals",
   ",",
   "0",
   ",",
   "newOutputLocals",
   ",",
   "0",
   ",",
   "outputLocalsLength",
   ")",
   ";",
   "outputLocals",
   "=",
   "newOutputLocals",
   ";",
   "}",
   "// Set the local variable.",
   "outputLocals",
   "[",
   "localIndex",
   "]",
   "=",
   "abstractType",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-339",
  "nl_tokens": [
   "we",
   "have",
   "to",
   "deal",
   "with",
   "both",
   "projections",
   "and",
   "resolution",
   "-",
   "dependence"
  ],
  "pl_tokens": [
   "protected",
   "Iterator",
   "getShapes",
   "(",
   "java",
   ".",
   "awt",
   ".",
   "Graphics2D",
   "g",
   ",",
   "AffineTransform",
   "normal2device",
   ")",
   "{",
   "long",
   "startTime",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "if",
   "(",
   "featSetList",
   "==",
   "null",
   ")",
   "{",
   "initFeatSetList",
   "(",
   ")",
   ";",
   "assert",
   "!",
   "featSetList",
   ".",
   "isEmpty",
   "(",
   ")",
   ";",
   "}",
   "// which featureSet should we ue?",
   "FeatureSet",
   "fs",
   "=",
   "(",
   "FeatureSet",
   ")",
   "featSetList",
   ".",
   "get",
   "(",
   "0",
   ")",
   ";",
   "if",
   "(",
   "featSetList",
   ".",
   "size",
   "(",
   ")",
   ">",
   "1",
   ")",
   "{",
   "// compute scale",
   "double",
   "scale",
   "=",
   "1.0",
   ";",
   "try",
   "{",
   "AffineTransform",
   "world2device",
   "=",
   "g",
   ".",
   "getTransform",
   "(",
   ")",
   ";",
   "AffineTransform",
   "world2normal",
   "=",
   "normal2device",
   ".",
   "createInverse",
   "(",
   ")",
   ";",
   "world2normal",
   ".",
   "concatenate",
   "(",
   "world2device",
   ")",
   ";",
   "scale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "abs",
   "(",
   "world2normal",
   ".",
   "getScaleX",
   "(",
   ")",
   ")",
   ",",
   "Math",
   ".",
   "abs",
   "(",
   "world2normal",
   ".",
   "getShearX",
   "(",
   ")",
   ")",
   ")",
   ";",
   "// drawing or printing",
   "if",
   "(",
   "Debug",
   ".",
   "isSet",
   "(",
   "\"GisFeature/showTransform\"",
   ")",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"GisFeature/showTransform: \"",
   "+",
   "world2normal",
   "+",
   "\"\\n scale = \"",
   "+",
   "scale",
   ")",
   ";",
   "}",
   "}",
   "catch",
   "(",
   "java",
   ".",
   "awt",
   ".",
   "geom",
   ".",
   "NoninvertibleTransformException",
   "e",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\" GisRenderFeature: NoninvertibleTransformException on \"",
   "+",
   "normal2device",
   ")",
   ";",
   "}",
   "if",
   "(",
   "!",
   "displayProject",
   ".",
   "isLatLon",
   "(",
   ")",
   ")",
   "scale",
   "*=",
   "111.0",
   ";",
   "// km/deg",
   "double",
   "minD",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "Object",
   "aFeatSetList",
   ":",
   "featSetList",
   ")",
   "{",
   "FeatureSet",
   "tryfs",
   "=",
   "(",
   "FeatureSet",
   ")",
   "aFeatSetList",
   ";",
   "double",
   "d",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "scale",
   "*",
   "tryfs",
   ".",
   "minDist",
   "-",
   "pixelMatch",
   ")",
   ";",
   "// we want min features ~ 2 pixels",
   "if",
   "(",
   "d",
   "<",
   "minD",
   ")",
   "{",
   "minD",
   "=",
   "d",
   ";",
   "fs",
   "=",
   "tryfs",
   ";",
   "}",
   "}",
   "if",
   "(",
   "Debug",
   ".",
   "isSet",
   "(",
   "\"GisFeature/MapResolution\"",
   ")",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"GisFeature/MapResolution: scale = \"",
   "+",
   "scale",
   "+",
   "\" minDist = \"",
   "+",
   "fs",
   ".",
   "minDist",
   ")",
   ";",
   "}",
   "}",
   "// we may have deferred the actual creation of the points",
   "if",
   "(",
   "fs",
   ".",
   "featureList",
   "==",
   "null",
   ")",
   "fs",
   ".",
   "createFeatures",
   "(",
   ")",
   ";",
   "// ok, now see if we need to project",
   "if",
   "(",
   "!",
   "displayProject",
   ".",
   "equals",
   "(",
   "fs",
   ".",
   "project",
   ")",
   ")",
   "{",
   "fs",
   ".",
   "setProjection",
   "(",
   "displayProject",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// deal with LatLon",
   "if",
   "(",
   "fs",
   ".",
   "newProjection",
   "&&",
   "displayProject",
   ".",
   "isLatLon",
   "(",
   ")",
   ")",
   "{",
   "fs",
   ".",
   "setProjection",
   "(",
   "displayProject",
   ")",
   ";",
   "}",
   "}",
   "fs",
   ".",
   "newProjection",
   "=",
   "false",
   ";",
   "if",
   "(",
   "Debug",
   ".",
   "isSet",
   "(",
   "\"GisFeature/timing/getShapes\"",
   ")",
   ")",
   "{",
   "long",
   "tookTime",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "-",
   "startTime",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"timing.getShapes: \"",
   "+",
   "tookTime",
   "*",
   ".001",
   "+",
   "\" seconds\"",
   ")",
   ";",
   "}",
   "// so return it, already",
   "return",
   "fs",
   ".",
   "getShapes",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-340",
  "nl_tokens": [
   "////////////////////////////////////////////////////////////////////"
  ],
  "pl_tokens": [
   "static",
   "public",
   "boolean",
   "compare",
   "(",
   "byte",
   "[",
   "]",
   "raw1",
   ",",
   "byte",
   "[",
   "]",
   "raw2",
   ",",
   "Formatter",
   "f",
   ")",
   "{",
   "if",
   "(",
   "raw1",
   "==",
   "null",
   "||",
   "raw2",
   "==",
   "null",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "raw1",
   ".",
   "length",
   "!=",
   "raw2",
   ".",
   "length",
   ")",
   "{",
   "f",
   ".",
   "format",
   "(",
   "\"length 1= %3d != length 2=%3d%n\"",
   ",",
   "raw1",
   ".",
   "length",
   ",",
   "raw2",
   ".",
   "length",
   ")",
   ";",
   "}",
   "int",
   "len",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "raw1",
   ".",
   "length",
   ",",
   "raw2",
   ".",
   "length",
   ")",
   ";",
   "int",
   "ndiff",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "len",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "raw1",
   "[",
   "i",
   "]",
   "!=",
   "raw2",
   "[",
   "i",
   "]",
   ")",
   "{",
   "f",
   ".",
   "format",
   "(",
   "\" %3d : %3d != %3d%n\"",
   ",",
   "i",
   "+",
   "1",
   ",",
   "raw1",
   "[",
   "i",
   "]",
   ",",
   "raw2",
   "[",
   "i",
   "]",
   ")",
   ";",
   "ndiff",
   "++",
   ";",
   "}",
   "}",
   "f",
   ".",
   "format",
   "(",
   "\"tested %d bytes  diff = %d %n\"",
   ",",
   "len",
   ",",
   "ndiff",
   ")",
   ";",
   "return",
   "ndiff",
   "==",
   "0",
   "&&",
   "(",
   "raw1",
   ".",
   "length",
   "==",
   "raw2",
   ".",
   "length",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-341",
  "nl_tokens": [
   "Called",
   "on",
   "reception",
   "of",
   "a",
   "NAK",
   "to",
   "start",
   "retransmits",
   "handling",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "onNak",
   "(",
   "final",
   "int",
   "termId",
   ",",
   "final",
   "int",
   "termOffset",
   ",",
   "final",
   "int",
   "length",
   ",",
   "final",
   "int",
   "termLength",
   ",",
   "final",
   "RetransmitSender",
   "retransmitSender",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isInvalid",
   "(",
   "termOffset",
   ",",
   "termLength",
   ")",
   ")",
   "{",
   "if",
   "(",
   "null",
   "==",
   "activeRetransmitsMap",
   ".",
   "get",
   "(",
   "termId",
   ",",
   "termOffset",
   ")",
   "&&",
   "activeRetransmitsMap",
   ".",
   "size",
   "(",
   ")",
   "<",
   "MAX_RETRANSMITS_DEFAULT",
   ")",
   "{",
   "final",
   "RetransmitAction",
   "action",
   "=",
   "assignRetransmitAction",
   "(",
   ")",
   ";",
   "action",
   ".",
   "termId",
   "=",
   "termId",
   ";",
   "action",
   ".",
   "termOffset",
   "=",
   "termOffset",
   ";",
   "action",
   ".",
   "length",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   ",",
   "termLength",
   "-",
   "termOffset",
   ")",
   ";",
   "final",
   "long",
   "delay",
   "=",
   "delayGenerator",
   ".",
   "generateDelay",
   "(",
   ")",
   ";",
   "if",
   "(",
   "0",
   "==",
   "delay",
   ")",
   "{",
   "retransmitSender",
   ".",
   "resend",
   "(",
   "termId",
   ",",
   "termOffset",
   ",",
   "action",
   ".",
   "length",
   ")",
   ";",
   "action",
   ".",
   "linger",
   "(",
   "lingerTimeoutGenerator",
   ".",
   "generateDelay",
   "(",
   ")",
   ",",
   "nanoClock",
   ".",
   "nanoTime",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "action",
   ".",
   "delay",
   "(",
   "delay",
   ",",
   "nanoClock",
   ".",
   "nanoTime",
   "(",
   ")",
   ")",
   ";",
   "}",
   "activeRetransmitsMap",
   ".",
   "put",
   "(",
   "termId",
   ",",
   "termOffset",
   ",",
   "action",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-342",
  "nl_tokens": [
   "This",
   "method",
   "is",
   "used",
   "to",
   "parse",
   "a",
   "string",
   "such",
   "as",
   "5",
   ".",
   "7",
   "5",
   ".",
   "7",
   "or",
   "-",
   "5",
   ".",
   "7",
   "into",
   "a",
   "FormatInfo",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "FormatInfo",
   "valueOf",
   "(",
   "String",
   "str",
   ")",
   "throws",
   "IllegalArgumentException",
   "{",
   "if",
   "(",
   "str",
   "==",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "NullPointerException",
   "(",
   "\"Argument cannot be null\"",
   ")",
   ";",
   "}",
   "FormatInfo",
   "fi",
   "=",
   "new",
   "FormatInfo",
   "(",
   ")",
   ";",
   "int",
   "indexOfDot",
   "=",
   "str",
   ".",
   "indexOf",
   "(",
   "'",
   "'",
   ")",
   ";",
   "String",
   "minPart",
   "=",
   "null",
   ";",
   "String",
   "maxPart",
   "=",
   "null",
   ";",
   "if",
   "(",
   "indexOfDot",
   "!=",
   "-",
   "1",
   ")",
   "{",
   "minPart",
   "=",
   "str",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "indexOfDot",
   ")",
   ";",
   "if",
   "(",
   "indexOfDot",
   "+",
   "1",
   "==",
   "str",
   ".",
   "length",
   "(",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"Formatting string [\"",
   "+",
   "str",
   "+",
   "\"] should not end with '.'\"",
   ")",
   ";",
   "}",
   "else",
   "{",
   "maxPart",
   "=",
   "str",
   ".",
   "substring",
   "(",
   "indexOfDot",
   "+",
   "1",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "minPart",
   "=",
   "str",
   ";",
   "}",
   "if",
   "(",
   "minPart",
   "!=",
   "null",
   "&&",
   "minPart",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "Integer",
   ".",
   "parseInt",
   "(",
   "minPart",
   ")",
   ";",
   "if",
   "(",
   "min",
   ">=",
   "0",
   ")",
   "{",
   "fi",
   ".",
   "min",
   "=",
   "min",
   ";",
   "}",
   "else",
   "{",
   "fi",
   ".",
   "min",
   "=",
   "-",
   "min",
   ";",
   "fi",
   ".",
   "leftPad",
   "=",
   "false",
   ";",
   "}",
   "}",
   "if",
   "(",
   "maxPart",
   "!=",
   "null",
   "&&",
   "maxPart",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "int",
   "max",
   "=",
   "Integer",
   ".",
   "parseInt",
   "(",
   "maxPart",
   ")",
   ";",
   "if",
   "(",
   "max",
   ">=",
   "0",
   ")",
   "{",
   "fi",
   ".",
   "max",
   "=",
   "max",
   ";",
   "}",
   "else",
   "{",
   "fi",
   ".",
   "max",
   "=",
   "-",
   "max",
   ";",
   "fi",
   ".",
   "leftTruncate",
   "=",
   "false",
   ";",
   "}",
   "}",
   "return",
   "fi",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-343",
  "nl_tokens": [
   "Returns",
   "the",
   "index",
   "of",
   "the",
   "last",
   "directory",
   "separator",
   "character",
   ".",
   "<p",
   ">",
   "This",
   "method",
   "will",
   "handle",
   "a",
   "file",
   "in",
   "either",
   "Unix",
   "or",
   "Windows",
   "format",
   ".",
   "The",
   "position",
   "of",
   "the",
   "last",
   "forward",
   "or",
   "backslash",
   "is",
   "returned",
   ".",
   "<p",
   ">",
   "The",
   "output",
   "will",
   "be",
   "the",
   "same",
   "irrespective",
   "of",
   "the",
   "machine",
   "that",
   "the",
   "code",
   "is",
   "running",
   "on",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "indexOfLastSeparator",
   "(",
   "final",
   "String",
   "filename",
   ")",
   "{",
   "if",
   "(",
   "filename",
   "==",
   "null",
   ")",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "int",
   "lastUnixPos",
   "=",
   "filename",
   ".",
   "lastIndexOf",
   "(",
   "UNIX_SEPARATOR",
   ")",
   ";",
   "int",
   "lastWindowsPos",
   "=",
   "filename",
   ".",
   "lastIndexOf",
   "(",
   "WINDOWS_SEPARATOR",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "lastUnixPos",
   ",",
   "lastWindowsPos",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-344",
  "nl_tokens": [
   "Returns",
   "max",
   "common",
   "prefix",
   "of",
   "two",
   "strings",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "maxCommonPrefix",
   "(",
   "final",
   "String",
   "one",
   ",",
   "final",
   "String",
   "two",
   ")",
   "{",
   "final",
   "int",
   "minLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "one",
   ".",
   "length",
   "(",
   ")",
   ",",
   "two",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "final",
   "StringBuilder",
   "sb",
   "=",
   "new",
   "StringBuilder",
   "(",
   "minLength",
   ")",
   ";",
   "for",
   "(",
   "int",
   "pos",
   "=",
   "0",
   ";",
   "pos",
   "<",
   "minLength",
   ";",
   "pos",
   "++",
   ")",
   "{",
   "final",
   "char",
   "currentChar",
   "=",
   "one",
   ".",
   "charAt",
   "(",
   "pos",
   ")",
   ";",
   "if",
   "(",
   "currentChar",
   "!=",
   "two",
   ".",
   "charAt",
   "(",
   "pos",
   ")",
   ")",
   "{",
   "break",
   ";",
   "}",
   "sb",
   ".",
   "append",
   "(",
   "currentChar",
   ")",
   ";",
   "}",
   "return",
   "sb",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-345",
  "nl_tokens": [
   "Pan",
   "the",
   "displayed",
   "image",
   "to",
   "make",
   "sure",
   "the",
   "cropping",
   "rectangle",
   "is",
   "visible",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "ensureVisible",
   "(",
   "HighlightView",
   "hv",
   ")",
   "{",
   "Rect",
   "r",
   "=",
   "hv",
   ".",
   "mDrawRect",
   ";",
   "int",
   "panDeltaX1",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "mLeft",
   "-",
   "r",
   ".",
   "left",
   ")",
   ";",
   "int",
   "panDeltaX2",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "0",
   ",",
   "mRight",
   "-",
   "r",
   ".",
   "right",
   ")",
   ";",
   "int",
   "panDeltaY1",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "0",
   ",",
   "mTop",
   "-",
   "r",
   ".",
   "top",
   ")",
   ";",
   "int",
   "panDeltaY2",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "0",
   ",",
   "mBottom",
   "-",
   "r",
   ".",
   "bottom",
   ")",
   ";",
   "int",
   "panDeltaX",
   "=",
   "panDeltaX1",
   "!=",
   "0",
   "?",
   "panDeltaX1",
   ":",
   "panDeltaX2",
   ";",
   "int",
   "panDeltaY",
   "=",
   "panDeltaY1",
   "!=",
   "0",
   "?",
   "panDeltaY1",
   ":",
   "panDeltaY2",
   ";",
   "if",
   "(",
   "panDeltaX",
   "!=",
   "0",
   "||",
   "panDeltaY",
   "!=",
   "0",
   ")",
   "{",
   "panBy",
   "(",
   "panDeltaX",
   ",",
   "panDeltaY",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-346",
  "nl_tokens": [
   "Min"
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "<mask>",
   "(",
   "double",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "double",
   "min",
   "=",
   "Float",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   "<",
   "min",
   ")",
   "min",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-347",
  "nl_tokens": [
   "Call",
   "after",
   "making",
   "changes",
   "to",
   "the",
   "point",
   "icon",
   "point",
   "radius",
   "or",
   "paint",
   "stroke",
   "widths",
   ".",
   "Determines",
   "the",
   "pixel",
   "overlap",
   "between",
   "tiles"
  ],
  "pl_tokens": [
   "public",
   "void",
   "calculateDrawOverlap",
   "(",
   ")",
   "{",
   "if",
   "(",
   "pointIcon",
   "!=",
   "null",
   ")",
   "{",
   "heightOverlap",
   "=",
   "this",
   ".",
   "density",
   "*",
   "pointIcon",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "widthOverlap",
   "=",
   "this",
   ".",
   "density",
   "*",
   "pointIcon",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "heightOverlap",
   "=",
   "this",
   ".",
   "density",
   "*",
   "pointRadius",
   ";",
   "widthOverlap",
   "=",
   "this",
   ".",
   "density",
   "*",
   "pointRadius",
   ";",
   "}",
   "float",
   "linePaintHalfStroke",
   "=",
   "this",
   ".",
   "density",
   "*",
   "lineStrokeWidth",
   "/",
   "2.0f",
   ";",
   "heightOverlap",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "heightOverlap",
   ",",
   "linePaintHalfStroke",
   ")",
   ";",
   "widthOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "widthOverlap",
   ",",
   "linePaintHalfStroke",
   ")",
   ";",
   "float",
   "polygonPaintHalfStroke",
   "=",
   "this",
   ".",
   "density",
   "*",
   "polygonStrokeWidth",
   "/",
   "2.0f",
   ";",
   "heightOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "heightOverlap",
   ",",
   "polygonPaintHalfStroke",
   ")",
   ";",
   "widthOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "widthOverlap",
   ",",
   "polygonPaintHalfStroke",
   ")",
   ";",
   "if",
   "(",
   "featureTableStyles",
   "!=",
   "null",
   "&&",
   "featureTableStyles",
   ".",
   "has",
   "(",
   ")",
   ")",
   "{",
   "// Style Rows",
   "Set",
   "<",
   "Long",
   ">",
   "styleRowIds",
   "=",
   "new",
   "HashSet",
   "<>",
   "(",
   ")",
   ";",
   "List",
   "<",
   "Long",
   ">",
   "tableStyleIds",
   "=",
   "featureTableStyles",
   ".",
   "getAllTableStyleIds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "tableStyleIds",
   "!=",
   "null",
   ")",
   "{",
   "styleRowIds",
   ".",
   "addAll",
   "(",
   "tableStyleIds",
   ")",
   ";",
   "}",
   "List",
   "<",
   "Long",
   ">",
   "styleIds",
   "=",
   "featureTableStyles",
   ".",
   "getAllStyleIds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "styleIds",
   "!=",
   "null",
   ")",
   "{",
   "styleRowIds",
   ".",
   "addAll",
   "(",
   "styleIds",
   ")",
   ";",
   "}",
   "StyleDao",
   "styleDao",
   "=",
   "featureTableStyles",
   ".",
   "getStyleDao",
   "(",
   ")",
   ";",
   "for",
   "(",
   "long",
   "styleRowId",
   ":",
   "styleRowIds",
   ")",
   "{",
   "StyleRow",
   "styleRow",
   "=",
   "styleDao",
   ".",
   "getRow",
   "(",
   "styleDao",
   ".",
   "queryForIdRow",
   "(",
   "styleRowId",
   ")",
   ")",
   ";",
   "float",
   "styleHalfWidth",
   "=",
   "this",
   ".",
   "density",
   "*",
   "(",
   "float",
   ")",
   "(",
   "styleRow",
   ".",
   "getWidthOrDefault",
   "(",
   ")",
   "/",
   "2.0f",
   ")",
   ";",
   "widthOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "widthOverlap",
   ",",
   "styleHalfWidth",
   ")",
   ";",
   "heightOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "heightOverlap",
   ",",
   "styleHalfWidth",
   ")",
   ";",
   "}",
   "// Icon Rows",
   "Set",
   "<",
   "Long",
   ">",
   "iconRowIds",
   "=",
   "new",
   "HashSet",
   "<>",
   "(",
   ")",
   ";",
   "List",
   "<",
   "Long",
   ">",
   "tableIconIds",
   "=",
   "featureTableStyles",
   ".",
   "getAllTableIconIds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "tableIconIds",
   "!=",
   "null",
   ")",
   "{",
   "iconRowIds",
   ".",
   "addAll",
   "(",
   "tableIconIds",
   ")",
   ";",
   "}",
   "List",
   "<",
   "Long",
   ">",
   "iconIds",
   "=",
   "featureTableStyles",
   ".",
   "getAllIconIds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "iconIds",
   "!=",
   "null",
   ")",
   "{",
   "iconRowIds",
   ".",
   "addAll",
   "(",
   "iconIds",
   ")",
   ";",
   "}",
   "IconDao",
   "iconDao",
   "=",
   "featureTableStyles",
   ".",
   "getIconDao",
   "(",
   ")",
   ";",
   "for",
   "(",
   "long",
   "iconRowId",
   ":",
   "iconRowIds",
   ")",
   "{",
   "IconRow",
   "iconRow",
   "=",
   "iconDao",
   ".",
   "getRow",
   "(",
   "iconDao",
   ".",
   "queryForIdRow",
   "(",
   "iconRowId",
   ")",
   ")",
   ";",
   "double",
   "[",
   "]",
   "iconDimensions",
   "=",
   "iconRow",
   ".",
   "getDerivedDimensions",
   "(",
   ")",
   ";",
   "float",
   "iconWidth",
   "=",
   "this",
   ".",
   "density",
   "*",
   "(",
   "float",
   ")",
   "Math",
   ".",
   "ceil",
   "(",
   "iconDimensions",
   "[",
   "0",
   "]",
   ")",
   ";",
   "float",
   "iconHeight",
   "=",
   "this",
   ".",
   "density",
   "*",
   "(",
   "float",
   ")",
   "Math",
   ".",
   "ceil",
   "(",
   "iconDimensions",
   "[",
   "1",
   "]",
   ")",
   ";",
   "widthOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "widthOverlap",
   ",",
   "iconWidth",
   ")",
   ";",
   "heightOverlap",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "heightOverlap",
   ",",
   "iconHeight",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-348",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "OIndexRIDContainer",
   "deserializeFromByteBufferObject",
   "(",
   "ByteBuffer",
   "buffer",
   ")",
   "{",
   "final",
   "long",
   "fileId",
   "=",
   "buffer",
   ".",
   "getLong",
   "(",
   ")",
   ";",
   "final",
   "boolean",
   "embedded",
   "=",
   "buffer",
   ".",
   "get",
   "(",
   ")",
   ">",
   "0",
   ";",
   "final",
   "boolean",
   "durable",
   "=",
   "buffer",
   ".",
   "get",
   "(",
   ")",
   ">",
   "0",
   ";",
   "if",
   "(",
   "embedded",
   ")",
   "{",
   "final",
   "int",
   "size",
   "=",
   "buffer",
   ".",
   "getInt",
   "(",
   ")",
   ";",
   "final",
   "Set",
   "<",
   "OIdentifiable",
   ">",
   "underlying",
   "=",
   "new",
   "HashSet",
   "<",
   "OIdentifiable",
   ">",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "(",
   "int",
   ")",
   "(",
   "size",
   "/",
   ".75f",
   ")",
   "+",
   "1",
   ",",
   "16",
   ")",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "underlying",
   ".",
   "add",
   "(",
   "LINK_SERIALIZER",
   ".",
   "deserializeFromByteBufferObject",
   "(",
   "buffer",
   ")",
   ")",
   ";",
   "}",
   "return",
   "new",
   "OIndexRIDContainer",
   "(",
   "fileId",
   ",",
   "underlying",
   ",",
   "durable",
   ")",
   ";",
   "}",
   "else",
   "{",
   "final",
   "long",
   "pageIndex",
   "=",
   "buffer",
   ".",
   "getLong",
   "(",
   ")",
   ";",
   "final",
   "int",
   "pageOffset",
   "=",
   "buffer",
   ".",
   "getInt",
   "(",
   ")",
   ";",
   "final",
   "OBonsaiBucketPointer",
   "rootPointer",
   "=",
   "new",
   "OBonsaiBucketPointer",
   "(",
   "pageIndex",
   ",",
   "pageOffset",
   ")",
   ";",
   "final",
   "ODatabaseDocumentInternal",
   "db",
   "=",
   "ODatabaseRecordThreadLocal",
   ".",
   "instance",
   "(",
   ")",
   ".",
   "get",
   "(",
   ")",
   ";",
   "final",
   "OIndexRIDContainerSBTree",
   "underlying",
   "=",
   "new",
   "OIndexRIDContainerSBTree",
   "(",
   "fileId",
   ",",
   "rootPointer",
   ",",
   "(",
   "OAbstractPaginatedStorage",
   ")",
   "db",
   ".",
   "getStorage",
   "(",
   ")",
   ".",
   "getUnderlying",
   "(",
   ")",
   ")",
   ";",
   "return",
   "new",
   "OIndexRIDContainer",
   "(",
   "fileId",
   ",",
   "underlying",
   ",",
   "durable",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-349",
  "nl_tokens": [
   "/",
   "*",
   "Initialize",
   "this",
   "instance",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "init",
   "(",
   ")",
   "{",
   "/* If the underMin message was not injected, create a default. */",
   "if",
   "(",
   "underMin",
   "==",
   "null",
   ")",
   "{",
   "underMin",
   "=",
   "new",
   "MessageSpecification",
   "(",
   ")",
   ";",
   "underMin",
   ".",
   "setDetailMessage",
   "(",
   "\"{validator.range.underMin.detail}\"",
   ")",
   ";",
   "underMin",
   ".",
   "setSummaryMessage",
   "(",
   "\"{validator.range.underMin.summary}\"",
   ")",
   ";",
   "}",
   "/* If the overMax message was not injected, create a default. */",
   "if",
   "(",
   "overMax",
   "==",
   "null",
   ")",
   "{",
   "overMax",
   "=",
   "new",
   "MessageSpecification",
   "(",
   ")",
   ";",
   "overMax",
   ".",
   "setDetailMessage",
   "(",
   "\"{validator.range.overMax.detail}\"",
   ")",
   ";",
   "overMax",
   ".",
   "setSummaryMessage",
   "(",
   "\"{validator.range.overMax.summary\"",
   ")",
   ";",
   "}",
   "/* If the type was not injected, stop initialization. */",
   "if",
   "(",
   "type",
   "==",
   "null",
   ")",
   "{",
   "return",
   ";",
   "}",
   "/* Initialize based on type for all Integer value\r\n         * so that LongRangeValidator can be used\r\n    \t * for int, short, byte, and long. */",
   "if",
   "(",
   "!",
   "isInitialized",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "type",
   ".",
   "equals",
   "(",
   "Integer",
   ".",
   "class",
   ")",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Integer",
   "(",
   "<mask>",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Integer",
   "(",
   "max",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "type",
   ".",
   "equals",
   "(",
   "Byte",
   ".",
   "class",
   ")",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Byte",
   "(",
   "min",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Byte",
   "(",
   "max",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "type",
   ".",
   "equals",
   "(",
   "Short",
   ".",
   "class",
   ")",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Short",
   "(",
   "min",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Short",
   "(",
   "max",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "init",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-350",
  "nl_tokens": [
   "/",
   "*",
   "choose",
   "x",
   "y",
   "such",
   "that",
   "(",
   "matrix",
   "multiply",
   ")",
   ":"
  ],
  "pl_tokens": [
   "private",
   "boolean",
   "jump2",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "int",
   "row",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "0",
   "]",
   ",",
   "nrows",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "int",
   "col",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "1",
   "]",
   ",",
   "ncols",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "double",
   "lat",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ";",
   "double",
   "lon",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ";",
   "double",
   "diffLat",
   "=",
   "wantLat",
   "-",
   "lat",
   ";",
   "double",
   "diffLon",
   "=",
   "wantLon",
   "-",
   "lon",
   ";",
   "double",
   "dlatdy",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   "-",
   "lat",
   ";",
   "double",
   "dlatdx",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   "-",
   "lat",
   ";",
   "double",
   "dlondx",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   "-",
   "lon",
   ";",
   "double",
   "dlondy",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   "-",
   "lon",
   ";",
   "// solve for dlon",
   "double",
   "dx",
   "=",
   "(",
   "diffLon",
   "-",
   "dlondy",
   "*",
   "diffLat",
   "/",
   "dlatdy",
   ")",
   "/",
   "(",
   "dlondx",
   "-",
   "dlatdx",
   "*",
   "dlondy",
   "/",
   "dlatdy",
   ")",
   ";",
   "// double dy =  (diffLat - dlatdx * diffLon / dlondx) / (dlatdy - dlatdx * dlondy / dlondx);",
   "double",
   "dy",
   "=",
   "(",
   "diffLat",
   "-",
   "dlatdx",
   "*",
   "dx",
   ")",
   "/",
   "dlatdy",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\"   jump from %d %d (dlondx=%f dlondy=%f dlatdx=%f dlatdy=%f) (diffLat,Lon=%f %f) (deltalat,Lon=%f %f)\"",
   ",",
   "row",
   ",",
   "col",
   ",",
   "dlondx",
   ",",
   "dlondy",
   ",",
   "dlatdx",
   ",",
   "dlatdy",
   ",",
   "diffLat",
   ",",
   "diffLon",
   ",",
   "dy",
   ",",
   "dx",
   ")",
   ";",
   "int",
   "drow",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "dy",
   ")",
   ";",
   "int",
   "dcol",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "dx",
   ")",
   ";",
   "if",
   "(",
   "(",
   "drow",
   "==",
   "0",
   ")",
   "&&",
   "(",
   "dcol",
   "==",
   "0",
   ")",
   ")",
   "{",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\"%n   incr:\"",
   ")",
   ";",
   "return",
   "incr",
   "(",
   "wantLat",
   ",",
   "wantLon",
   ",",
   "rectIndex",
   ")",
   ";",
   "}",
   "else",
   "{",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "row",
   "+",
   "drow",
   ",",
   "nrows",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "col",
   "+",
   "dcol",
   ",",
   "ncols",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\" to (%d %d)%n\"",
   ",",
   "rectIndex",
   "[",
   "0",
   "]",
   ",",
   "rectIndex",
   "[",
   "1",
   "]",
   ")",
   ";",
   "if",
   "(",
   "(",
   "row",
   "==",
   "rectIndex",
   "[",
   "0",
   "]",
   ")",
   "&&",
   "(",
   "col",
   "==",
   "rectIndex",
   "[",
   "1",
   "]",
   ")",
   ")",
   "return",
   "false",
   ";",
   "// nothing has changed",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-351",
  "nl_tokens": [
   "Query",
   "for",
   "the",
   "bounding"
  ],
  "pl_tokens": [
   "public",
   "TileGrid",
   "queryForTileGrid",
   "(",
   "long",
   "zoomLevel",
   ")",
   "{",
   "String",
   "where",
   "=",
   "buildWhere",
   "(",
   "TileTable",
   ".",
   "COLUMN_ZOOM_LEVEL",
   ",",
   "zoomLevel",
   ")",
   ";",
   "String",
   "[",
   "]",
   "whereArgs",
   "=",
   "buildWhereArgs",
   "(",
   "new",
   "Object",
   "[",
   "]",
   "{",
   "zoomLevel",
   "}",
   ")",
   ";",
   "Integer",
   "minX",
   "=",
   "<mask>",
   "(",
   "TileTable",
   ".",
   "COLUMN_TILE_COLUMN",
   ",",
   "where",
   ",",
   "whereArgs",
   ")",
   ";",
   "Integer",
   "maxX",
   "=",
   "max",
   "(",
   "TileTable",
   ".",
   "COLUMN_TILE_COLUMN",
   ",",
   "where",
   ",",
   "whereArgs",
   ")",
   ";",
   "Integer",
   "minY",
   "=",
   "min",
   "(",
   "TileTable",
   ".",
   "COLUMN_TILE_ROW",
   ",",
   "where",
   ",",
   "whereArgs",
   ")",
   ";",
   "Integer",
   "maxY",
   "=",
   "max",
   "(",
   "TileTable",
   ".",
   "COLUMN_TILE_ROW",
   ",",
   "where",
   ",",
   "whereArgs",
   ")",
   ";",
   "TileGrid",
   "tileGrid",
   "=",
   "null",
   ";",
   "if",
   "(",
   "minX",
   "!=",
   "null",
   "&&",
   "maxX",
   "!=",
   "null",
   "&&",
   "minY",
   "!=",
   "null",
   "&&",
   "maxY",
   "!=",
   "null",
   ")",
   "{",
   "tileGrid",
   "=",
   "new",
   "TileGrid",
   "(",
   "minX",
   ",",
   "minY",
   ",",
   "maxX",
   ",",
   "maxY",
   ")",
   ";",
   "}",
   "return",
   "tileGrid",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-352",
  "nl_tokens": [
   "Copy",
   "some",
   "or",
   "all",
   "chars",
   "from",
   "a",
   "large",
   "(",
   "over",
   "2GB",
   ")",
   "<code",
   ">",
   "InputStream<",
   "/",
   "code",
   ">",
   "to",
   "an",
   "<code",
   ">",
   "OutputStream<",
   "/",
   "code",
   ">",
   "optionally",
   "skipping",
   "input",
   "chars",
   ".",
   "<p",
   "/",
   ">",
   "This",
   "method",
   "uses",
   "the",
   "provided",
   "buffer",
   "so",
   "there",
   "is",
   "no",
   "need",
   "to",
   "use",
   "a",
   "<code",
   ">",
   "BufferedReader<",
   "/",
   "code",
   ">",
   ".",
   "<p",
   "/",
   ">"
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "copyLarge",
   "(",
   "Reader",
   "input",
   ",",
   "Writer",
   "output",
   ",",
   "final",
   "long",
   "inputOffset",
   ",",
   "final",
   "long",
   "length",
   ",",
   "char",
   "[",
   "]",
   "buffer",
   ")",
   "throws",
   "IOException",
   "{",
   "if",
   "(",
   "inputOffset",
   ">",
   "0",
   ")",
   "{",
   "skipFully",
   "(",
   "input",
   ",",
   "inputOffset",
   ")",
   ";",
   "}",
   "if",
   "(",
   "length",
   "==",
   "0",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "int",
   "bytesToRead",
   "=",
   "buffer",
   ".",
   "length",
   ";",
   "if",
   "(",
   "length",
   ">",
   "0",
   "&&",
   "length",
   "<",
   "buffer",
   ".",
   "length",
   ")",
   "{",
   "bytesToRead",
   "=",
   "(",
   "int",
   ")",
   "length",
   ";",
   "}",
   "int",
   "read",
   ";",
   "long",
   "totalRead",
   "=",
   "0",
   ";",
   "while",
   "(",
   "bytesToRead",
   ">",
   "0",
   "&&",
   "EOF",
   "!=",
   "(",
   "read",
   "=",
   "input",
   ".",
   "read",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "bytesToRead",
   ")",
   ")",
   ")",
   "{",
   "output",
   ".",
   "write",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "read",
   ")",
   ";",
   "totalRead",
   "+=",
   "read",
   ";",
   "if",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "// only adjust length if not reading to the end",
   "// Note the cast must work because buffer.length is an integer",
   "bytesToRead",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   "-",
   "totalRead",
   ",",
   "buffer",
   ".",
   "length",
   ")",
   ";",
   "}",
   "}",
   "return",
   "totalRead",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-353",
  "nl_tokens": [
   "Adds",
   "a",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "object",
   "to",
   "this",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   ".",
   "The",
   "resulting",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "is",
   "the",
   "union",
   "of",
   "the",
   "two",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "objects",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "ProjectionRect",
   "r",
   ")",
   "{",
   "double",
   "x1",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getMinX",
   "(",
   ")",
   ",",
   "r",
   ".",
   "getMinX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "x2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "getMaxX",
   "(",
   ")",
   ",",
   "r",
   ".",
   "getMaxX",
   "(",
   ")",
   ")",
   ";",
   "double",
   "y1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "getMinY",
   "(",
   ")",
   ",",
   "r",
   ".",
   "getMinY",
   "(",
   ")",
   ")",
   ";",
   "double",
   "y2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "getMaxY",
   "(",
   ")",
   ",",
   "r",
   ".",
   "getMaxY",
   "(",
   ")",
   ")",
   ";",
   "setRect",
   "(",
   "x1",
   ",",
   "y1",
   ",",
   "x2",
   "-",
   "x1",
   ",",
   "y2",
   "-",
   "y1",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-354",
  "nl_tokens": [
   "Fills",
   "specified",
   "buffer",
   "with",
   "compressed",
   "data",
   ".",
   "Returns",
   "actual",
   "number",
   "of",
   "bytes",
   "of",
   "compressed",
   "data",
   ".",
   "A",
   "return",
   "value",
   "of",
   "0",
   "indicates",
   "that",
   "needsInput",
   "()",
   "should",
   "be",
   "called",
   "in",
   "order",
   "to",
   "determine",
   "if",
   "more",
   "input",
   "data",
   "is",
   "required",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "synchronized",
   "int",
   "compress",
   "(",
   "byte",
   "[",
   "]",
   "buffer",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "SnappyUtil",
   ".",
   "validateBuffer",
   "(",
   "buffer",
   ",",
   "off",
   ",",
   "len",
   ")",
   ";",
   "if",
   "(",
   "needsInput",
   "(",
   ")",
   ")",
   "{",
   "// No buffered output bytes and no input to consume, need more input",
   "return",
   "0",
   ";",
   "}",
   "if",
   "(",
   "!",
   "outputBuffer",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "// There is uncompressed input, compress it now",
   "int",
   "maxOutputSize",
   "=",
   "Snappy",
   ".",
   "maxCompressedLength",
   "(",
   "inputBuffer",
   ".",
   "position",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "maxOutputSize",
   ">",
   "outputBuffer",
   ".",
   "capacity",
   "(",
   ")",
   ")",
   "{",
   "ByteBuffer",
   "oldBuffer",
   "=",
   "outputBuffer",
   ";",
   "outputBuffer",
   "=",
   "ByteBuffer",
   ".",
   "allocateDirect",
   "(",
   "maxOutputSize",
   ")",
   ";",
   "CleanUtil",
   ".",
   "clean",
   "(",
   "oldBuffer",
   ")",
   ";",
   "}",
   "// Reset the previous outputBuffer",
   "outputBuffer",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "inputBuffer",
   ".",
   "limit",
   "(",
   "inputBuffer",
   ".",
   "position",
   "(",
   ")",
   ")",
   ";",
   "inputBuffer",
   ".",
   "position",
   "(",
   "0",
   ")",
   ";",
   "int",
   "size",
   "=",
   "Snappy",
   ".",
   "compress",
   "(",
   "inputBuffer",
   ",",
   "outputBuffer",
   ")",
   ";",
   "outputBuffer",
   ".",
   "limit",
   "(",
   "size",
   ")",
   ";",
   "inputBuffer",
   ".",
   "limit",
   "(",
   "0",
   ")",
   ";",
   "inputBuffer",
   ".",
   "rewind",
   "(",
   ")",
   ";",
   "}",
   "// Return compressed output up to 'len'",
   "int",
   "numBytes",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "outputBuffer",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "outputBuffer",
   ".",
   "get",
   "(",
   "buffer",
   ",",
   "off",
   ",",
   "numBytes",
   ")",
   ";",
   "bytesWritten",
   "+=",
   "numBytes",
   ";",
   "return",
   "numBytes",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-355",
  "nl_tokens": [
   "Returns",
   "the",
   "min",
   "value",
   "using",
   "a",
   "natural",
   "sort",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "List",
   "<",
   "T",
   ">",
   "list",
   ")",
   "{",
   "if",
   "(",
   "list",
   ".",
   "size",
   "(",
   ")",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sort",
   "(",
   "list",
   ")",
   ";",
   "return",
   "list",
   ".",
   "get",
   "(",
   "0",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-356",
  "nl_tokens": [
   "cbrdissect",
   "-",
   "determine",
   "backref",
   "subexpression",
   "matches"
  ],
  "pl_tokens": [
   "private",
   "boolean",
   "cbrdissect",
   "(",
   "RuntimeSubexpression",
   "t",
   ",",
   "int",
   "begin",
   ",",
   "int",
   "end",
   ")",
   "{",
   "int",
   "i",
   ";",
   "int",
   "n",
   "=",
   "t",
   ".",
   "number",
   ";",
   "int",
   "len",
   ";",
   "int",
   "paren",
   ";",
   "int",
   "p",
   ";",
   "int",
   "stop",
   ";",
   "int",
   "<mask>",
   "=",
   "t",
   ".",
   "min",
   ";",
   "int",
   "max",
   "=",
   "t",
   ".",
   "max",
   ";",
   "assert",
   "t",
   ".",
   "op",
   "==",
   "'",
   "'",
   ";",
   "assert",
   "n",
   ">=",
   "0",
   ";",
   "//TODO: could this get be out of range?",
   "if",
   "(",
   "match",
   ".",
   "get",
   "(",
   "n",
   ")",
   "==",
   "null",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "paren",
   "=",
   "match",
   ".",
   "get",
   "(",
   "n",
   ")",
   ".",
   "start",
   ";",
   "len",
   "=",
   "match",
   ".",
   "get",
   "(",
   "n",
   ")",
   ".",
   "end",
   "-",
   "match",
   ".",
   "get",
   "(",
   "n",
   ")",
   ".",
   "start",
   ";",
   "/* no room to maneuver -- retries are pointless */",
   "if",
   "(",
   "0",
   "!=",
   "mem",
   "[",
   "t",
   ".",
   "retry",
   "]",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "mem",
   "[",
   "t",
   ".",
   "retry",
   "]",
   "=",
   "1",
   ";",
   "/* special-case zero-length string */",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   "begin",
   "==",
   "end",
   ";",
   "}",
   "/* and too-short string */",
   "assert",
   "end",
   ">=",
   "begin",
   ";",
   "if",
   "(",
   "(",
   "end",
   "-",
   "begin",
   ")",
   "<",
   "len",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "stop",
   "=",
   "end",
   "-",
   "len",
   ";",
   "/* count occurrences */",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   "p",
   "=",
   "begin",
   ";",
   "p",
   "<=",
   "stop",
   "&&",
   "(",
   "i",
   "<",
   "max",
   "||",
   "max",
   "==",
   "Compiler",
   ".",
   "INFINITY",
   ")",
   ";",
   "p",
   "+=",
   "len",
   ")",
   "{",
   "// paren is index of",
   "if",
   "(",
   "g",
   ".",
   "compare",
   ".",
   "compare",
   "(",
   "data",
   ",",
   "paren",
   ",",
   "p",
   ",",
   "len",
   ")",
   "!=",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "i",
   "++",
   ";",
   "}",
   "/* and sort it out */",
   "if",
   "(",
   "p",
   "!=",
   "end",
   ")",
   "{",
   "/* didn't consume all of it */",
   "return",
   "false",
   ";",
   "}",
   "return",
   "min",
   "<=",
   "i",
   "&&",
   "(",
   "i",
   "<=",
   "max",
   "||",
   "max",
   "==",
   "Compiler",
   ".",
   "INFINITY",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-357",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "public",
   "long",
   "onStatusMessage",
   "(",
   "final",
   "StatusMessageFlyweight",
   "flyweight",
   ",",
   "final",
   "InetSocketAddress",
   "receiverAddress",
   ",",
   "final",
   "long",
   "senderLimit",
   ",",
   "final",
   "int",
   "initialTermId",
   ",",
   "final",
   "int",
   "positionBitsToShift",
   ",",
   "final",
   "long",
   "timeNs",
   ")",
   "{",
   "final",
   "long",
   "position",
   "=",
   "computePosition",
   "(",
   "flyweight",
   ".",
   "consumptionTermId",
   "(",
   ")",
   ",",
   "flyweight",
   ".",
   "consumptionTermOffset",
   "(",
   ")",
   ",",
   "positionBitsToShift",
   ",",
   "initialTermId",
   ")",
   ";",
   "final",
   "long",
   "windowLength",
   "=",
   "flyweight",
   ".",
   "receiverWindowLength",
   "(",
   ")",
   ";",
   "final",
   "long",
   "receiverId",
   "=",
   "flyweight",
   ".",
   "receiverId",
   "(",
   ")",
   ";",
   "final",
   "boolean",
   "isFromPreferred",
   "=",
   "isFromPreferred",
   "(",
   "flyweight",
   ")",
   ";",
   "final",
   "long",
   "lastPositionPlusWindow",
   "=",
   "position",
   "+",
   "windowLength",
   ";",
   "boolean",
   "isExisting",
   "=",
   "false",
   ";",
   "long",
   "minPosition",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "final",
   "ArrayList",
   "<",
   "Receiver",
   ">",
   "receiverList",
   "=",
   "this",
   ".",
   "receiverList",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ",",
   "size",
   "=",
   "receiverList",
   ".",
   "size",
   "(",
   ")",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "final",
   "Receiver",
   "receiver",
   "=",
   "receiverList",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "isFromPreferred",
   "&&",
   "receiverId",
   "==",
   "receiver",
   ".",
   "receiverId",
   ")",
   "{",
   "receiver",
   ".",
   "lastPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "position",
   ",",
   "receiver",
   ".",
   "lastPosition",
   ")",
   ";",
   "receiver",
   ".",
   "lastPositionPlusWindow",
   "=",
   "lastPositionPlusWindow",
   ";",
   "receiver",
   ".",
   "timeOfLastStatusMessageNs",
   "=",
   "timeNs",
   ";",
   "isExisting",
   "=",
   "true",
   ";",
   "}",
   "minPosition",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minPosition",
   ",",
   "receiver",
   ".",
   "lastPositionPlusWindow",
   ")",
   ";",
   "}",
   "if",
   "(",
   "isFromPreferred",
   "&&",
   "!",
   "isExisting",
   ")",
   "{",
   "receiverList",
   ".",
   "add",
   "(",
   "new",
   "Receiver",
   "(",
   "position",
   ",",
   "lastPositionPlusWindow",
   ",",
   "timeNs",
   ",",
   "receiverId",
   ",",
   "receiverAddress",
   ")",
   ")",
   ";",
   "minPosition",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minPosition",
   ",",
   "lastPositionPlusWindow",
   ")",
   ";",
   "}",
   "return",
   "receiverList",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   "?",
   "Math",
   ".",
   "max",
   "(",
   "senderLimit",
   ",",
   "minPosition",
   ")",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "senderLimit",
   ",",
   "lastPositionPlusWindow",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-358",
  "nl_tokens": [
   "Find",
   "the",
   "closest",
   "marked",
   "cell",
   "to",
   "the",
   "given",
   "point"
  ],
  "pl_tokens": [
   "public",
   "Object",
   "findClosest",
   "(",
   "Point2D",
   "pt",
   ")",
   "{",
   "Object",
   "o",
   "=",
   "null",
   ";",
   "int",
   "indexX",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "pt",
   ".",
   "getX",
   "(",
   ")",
   "-",
   "offsetX",
   ")",
   "/",
   "gridWidth",
   ")",
   ";",
   "int",
   "indexY",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "pt",
   ".",
   "getY",
   "(",
   ")",
   "-",
   "offsetY",
   ")",
   "/",
   "gridHeight",
   ")",
   ";",
   "if",
   "(",
   "debugClosest",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"findClosest \"",
   "+",
   "pt",
   "+",
   "\" \"",
   "+",
   "indexX",
   "+",
   "\" \"",
   "+",
   "indexY",
   ")",
   ";",
   "if",
   "(",
   "(",
   "indexX",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexX",
   ">=",
   "countX",
   ")",
   "||",
   "(",
   "indexY",
   "<",
   "0",
   ")",
   "||",
   "(",
   "indexY",
   ">=",
   "countY",
   ")",
   ")",
   "// outside box",
   "return",
   "null",
   ";",
   "GridCell",
   "gwant",
   "=",
   "gridArray",
   "[",
   "indexY",
   "]",
   "[",
   "indexX",
   "]",
   ";",
   "if",
   "(",
   "gwant",
   ".",
   "used",
   ")",
   "// that was easy",
   "return",
   "gwant",
   ".",
   "o",
   ";",
   "// check the surrounding points along perimeter of increasing diameter",
   "for",
   "(",
   "int",
   "p",
   "=",
   "1",
   ";",
   "p",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "countX",
   "-",
   "1",
   ",",
   "countY",
   "-",
   "1",
   ")",
   ";",
   "p",
   "++",
   ")",
   "if",
   "(",
   "null",
   "!=",
   "(",
   "o",
   "=",
   "findClosestAlongPerimeter",
   "(",
   "pt",
   ",",
   "indexX",
   ",",
   "indexY",
   ",",
   "p",
   ")",
   ")",
   ")",
   "return",
   "o",
   ";",
   "return",
   "null",
   ";",
   "// nothing found",
   "}"
  ]
 },
 {
  "idx": "maxmin-359",
  "nl_tokens": [
   "Search",
   "forward",
   "from",
   "the",
   "current",
   "pos",
   "looking",
   "for",
   "a",
   "match",
   "."
  ],
  "pl_tokens": [
   "public",
   "boolean",
   "searchForward",
   "(",
   "KMPMatch",
   "match",
   ",",
   "int",
   "maxBytes",
   ")",
   "throws",
   "IOException",
   "{",
   "long",
   "start",
   "=",
   "getFilePointer",
   "(",
   ")",
   ";",
   "long",
   "last",
   "=",
   "(",
   "maxBytes",
   "<",
   "0",
   ")",
   "?",
   "length",
   "(",
   ")",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "length",
   "(",
   ")",
   ",",
   "start",
   "+",
   "maxBytes",
   ")",
   ";",
   "long",
   "needToScan",
   "=",
   "last",
   "-",
   "start",
   ";",
   "// check what ever is now in the buffer\r",
   "int",
   "bytesAvailable",
   "=",
   "(",
   "int",
   ")",
   "(",
   "dataEnd",
   "-",
   "filePosition",
   ")",
   ";",
   "if",
   "(",
   "bytesAvailable",
   "<",
   "1",
   ")",
   "{",
   "seek",
   "(",
   "filePosition",
   ")",
   ";",
   "// read a new buffer\r",
   "bytesAvailable",
   "=",
   "(",
   "int",
   ")",
   "(",
   "dataEnd",
   "-",
   "filePosition",
   ")",
   ";",
   "}",
   "int",
   "bufStart",
   "=",
   "(",
   "int",
   ")",
   "(",
   "filePosition",
   "-",
   "bufferStart",
   ")",
   ";",
   "int",
   "scanBytes",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "min",
   "(",
   "bytesAvailable",
   ",",
   "needToScan",
   ")",
   ";",
   "int",
   "pos",
   "=",
   "match",
   ".",
   "indexOf",
   "(",
   "buffer",
   ",",
   "bufStart",
   ",",
   "scanBytes",
   ")",
   ";",
   "if",
   "(",
   "pos",
   ">=",
   "0",
   ")",
   "{",
   "seek",
   "(",
   "bufferStart",
   "+",
   "pos",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}",
   "int",
   "matchLen",
   "=",
   "match",
   ".",
   "getMatchLength",
   "(",
   ")",
   ";",
   "needToScan",
   "-=",
   "scanBytes",
   "-",
   "matchLen",
   ";",
   "while",
   "(",
   "needToScan",
   ">",
   "matchLen",
   ")",
   "{",
   "readBuffer",
   "(",
   "dataEnd",
   "-",
   "matchLen",
   ")",
   ";",
   "// force new buffer\r",
   "scanBytes",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "min",
   "(",
   "buffer",
   ".",
   "length",
   ",",
   "needToScan",
   ")",
   ";",
   "pos",
   "=",
   "match",
   ".",
   "indexOf",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "scanBytes",
   ")",
   ";",
   "if",
   "(",
   "pos",
   ">",
   "0",
   ")",
   "{",
   "seek",
   "(",
   "bufferStart",
   "+",
   "pos",
   ")",
   ";",
   "return",
   "true",
   ";",
   "}",
   "needToScan",
   "-=",
   "scanBytes",
   "-",
   "matchLen",
   ";",
   "}",
   "// failure\r",
   "seek",
   "(",
   "last",
   ")",
   ";",
   "return",
   "false",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-360",
  "nl_tokens": [
   "Handles",
   "an",
   "event",
   "from",
   "OSGi",
   "and",
   "places",
   "it",
   "in",
   "the",
   "appropriate",
   "queue",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "handleEvent",
   "(",
   "Event",
   "event",
   ")",
   "{",
   "String",
   "topic",
   "=",
   "event",
   ".",
   "getTopic",
   "(",
   ")",
   ";",
   "LOGGER",
   ".",
   "debug",
   "(",
   "\"Got Event {} {} \"",
   ",",
   "event",
   ",",
   "handlers",
   ")",
   ";",
   "Collection",
   "<",
   "IndexingHandler",
   ">",
   "contentIndexHandler",
   "=",
   "handlers",
   ".",
   "get",
   "(",
   "topic",
   ")",
   ";",
   "if",
   "(",
   "contentIndexHandler",
   "!=",
   "null",
   "&&",
   "contentIndexHandler",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "try",
   "{",
   "int",
   "ttl",
   "=",
   "Utils",
   ".",
   "toInt",
   "(",
   "event",
   ".",
   "getProperty",
   "(",
   "TopicIndexer",
   ".",
   "TTL",
   ")",
   ",",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   ";",
   "for",
   "(",
   "IndexingHandler",
   "indexingHandler",
   ":",
   "contentIndexHandler",
   ")",
   "{",
   "if",
   "(",
   "indexingHandler",
   "instanceof",
   "QoSIndexHandler",
   ")",
   "{",
   "ttl",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "ttl",
   ",",
   "Utils",
   ".",
   "defaultMax",
   "(",
   "(",
   "(",
   "QoSIndexHandler",
   ")",
   "indexingHandler",
   ")",
   ".",
   "getTtl",
   "(",
   "event",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "QueueManager",
   "q",
   "=",
   "null",
   ";",
   "// queues is ordered by ascending ttl, so the fastest queue is queues[0],",
   "// if the ttl is less that that, we can't satisfy it, so we will put it",
   "// in the fastest queue",
   "if",
   "(",
   "ttl",
   "<",
   "queues",
   "[",
   "0",
   "]",
   ".",
   "batchDelay",
   ")",
   "{",
   "LOGGER",
   ".",
   "warn",
   "(",
   "\"Unable to satisfy TTL of {} on event {}, posting to the highest priority queue. \"",
   "+",
   "\"If this message is logged a lot please adjust the queues or change the event ttl to something that can be satisfied. \"",
   "+",
   "\"Filling the highest priority queue is counter productive. \"",
   ",",
   "ttl",
   ",",
   "event",
   ")",
   ";",
   "queues",
   "[",
   "0",
   "]",
   ".",
   "saveEvent",
   "(",
   "event",
   ")",
   ";",
   "}",
   "else",
   "{",
   "for",
   "(",
   "QueueManager",
   "qm",
   ":",
   "queues",
   ")",
   "{",
   "if",
   "(",
   "ttl",
   "<",
   "qm",
   ".",
   "batchDelay",
   ")",
   "{",
   "q",
   ".",
   "saveEvent",
   "(",
   "event",
   ")",
   ";",
   "q",
   "=",
   "null",
   ";",
   "break",
   ";",
   "}",
   "q",
   "=",
   "qm",
   ";",
   "}",
   "if",
   "(",
   "q",
   "!=",
   "null",
   ")",
   "{",
   "q",
   ".",
   "saveEvent",
   "(",
   "event",
   ")",
   ";",
   "}",
   "}",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "LOGGER",
   ".",
   "warn",
   "(",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ",",
   "e",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-361",
  "nl_tokens": [
   "Transfer",
   "from",
   "one",
   "ByteBuffer",
   "to",
   "another",
   "ByteBuffer"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "transferByteBuffer",
   "(",
   "ByteBuffer",
   "source",
   ",",
   "ByteBuffer",
   "dest",
   ")",
   "{",
   "if",
   "(",
   "source",
   "==",
   "null",
   "||",
   "dest",
   "==",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   ")",
   ";",
   "}",
   "int",
   "fremain",
   "=",
   "source",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "int",
   "toremain",
   "=",
   "dest",
   ".",
   "remaining",
   "(",
   ")",
   ";",
   "if",
   "(",
   "fremain",
   ">",
   "toremain",
   ")",
   "{",
   "int",
   "limit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "fremain",
   ",",
   "toremain",
   ")",
   ";",
   "source",
   ".",
   "limit",
   "(",
   "limit",
   ")",
   ";",
   "dest",
   ".",
   "put",
   "(",
   "source",
   ")",
   ";",
   "return",
   "limit",
   ";",
   "}",
   "else",
   "{",
   "dest",
   ".",
   "put",
   "(",
   "source",
   ")",
   ";",
   "return",
   "fremain",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-362",
  "nl_tokens": [
   "Copy",
   "bytes",
   "from",
   "the",
   "supplied",
   "InputStream",
   "into",
   "this",
   "array",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "readFrom",
   "(",
   "InputStream",
   "is",
   ",",
   "long",
   "length",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "segmentSize",
   "=",
   "1",
   "<<",
   "log2OfSegmentSize",
   ";",
   "int",
   "segment",
   "=",
   "0",
   ";",
   "byte",
   "scratch",
   "[",
   "]",
   "=",
   "new",
   "byte",
   "[",
   "segmentSize",
   "]",
   ";",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "ensureCapacity",
   "(",
   "segment",
   ")",
   ";",
   "long",
   "bytesToCopy",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "segmentSize",
   ",",
   "length",
   ")",
   ";",
   "long",
   "bytesCopied",
   "=",
   "0",
   ";",
   "while",
   "(",
   "bytesCopied",
   "<",
   "bytesToCopy",
   ")",
   "{",
   "bytesCopied",
   "+=",
   "is",
   ".",
   "read",
   "(",
   "scratch",
   ",",
   "(",
   "int",
   ")",
   "bytesCopied",
   ",",
   "(",
   "int",
   ")",
   "(",
   "bytesToCopy",
   "-",
   "bytesCopied",
   ")",
   ")",
   ";",
   "}",
   "orderedCopy",
   "(",
   "scratch",
   ",",
   "0",
   ",",
   "segments",
   "[",
   "segment",
   "++",
   "]",
   ",",
   "0",
   ",",
   "(",
   "int",
   ")",
   "bytesCopied",
   ")",
   ";",
   "length",
   "-=",
   "bytesCopied",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-363",
  "nl_tokens": [
   "copies",
   "exactly",
   "data",
   ".",
   "length",
   "bytes",
   "from",
   "this",
   "SegmentedByteArray",
   "into",
   "the",
   "provided",
   "byte",
   "array",
   "guaranteeing",
   "that",
   "if",
   "the",
   "update",
   "is",
   "seen",
   "by",
   "another",
   "thread",
   "then",
   "all",
   "other",
   "writes",
   "prior",
   "to",
   "this",
   "call",
   "are",
   "also",
   "visible",
   "to",
   "that",
   "thread",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "orderedCopy",
   "(",
   "long",
   "srcPos",
   ",",
   "byte",
   "[",
   "]",
   "data",
   ",",
   "int",
   "destPos",
   ",",
   "int",
   "length",
   ")",
   "{",
   "int",
   "segmentSize",
   "=",
   "1",
   "<<",
   "log2OfSegmentSize",
   ";",
   "int",
   "remainingBytesInSegment",
   "=",
   "(",
   "int",
   ")",
   "(",
   "segmentSize",
   "-",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ")",
   ";",
   "int",
   "dataPosition",
   "=",
   "destPos",
   ";",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "byte",
   "[",
   "]",
   "segment",
   "=",
   "segments",
   "[",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   ">>>",
   "log2OfSegmentSize",
   ")",
   "]",
   ";",
   "int",
   "bytesToCopyFromSegment",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remainingBytesInSegment",
   ",",
   "length",
   ")",
   ";",
   "orderedCopy",
   "(",
   "segment",
   ",",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ",",
   "data",
   ",",
   "dataPosition",
   ",",
   "bytesToCopyFromSegment",
   ")",
   ";",
   "dataPosition",
   "+=",
   "bytesToCopyFromSegment",
   ";",
   "srcPos",
   "+=",
   "bytesToCopyFromSegment",
   ";",
   "remainingBytesInSegment",
   "=",
   "segmentSize",
   "-",
   "(",
   "int",
   ")",
   "(",
   "srcPos",
   "&",
   "bitmask",
   ")",
   ";",
   "length",
   "-=",
   "bytesToCopyFromSegment",
   ";",
   "}",
   "return",
   "dataPosition",
   "-",
   "destPos",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-364",
  "nl_tokens": [
   "Actions",
   "a",
   "Pull",
   "Event"
  ],
  "pl_tokens": [
   "private",
   "void",
   "pullEvent",
   "(",
   ")",
   "{",
   "final",
   "int",
   "newScrollValue",
   ";",
   "final",
   "int",
   "itemDimension",
   ";",
   "final",
   "float",
   "initialMotionValue",
   ",",
   "lastMotionValue",
   ";",
   "switch",
   "(",
   "getPullToRefreshScrollDirection",
   "(",
   ")",
   ")",
   "{",
   "case",
   "HORIZONTAL",
   ":",
   "initialMotionValue",
   "=",
   "mInitialMotionX",
   ";",
   "lastMotionValue",
   "=",
   "mLastMotionX",
   ";",
   "break",
   ";",
   "case",
   "VERTICAL",
   ":",
   "default",
   ":",
   "initialMotionValue",
   "=",
   "mInitialMotionY",
   ";",
   "lastMotionValue",
   "=",
   "mLastMotionY",
   ";",
   "break",
   ";",
   "}",
   "switch",
   "(",
   "mCurrentMode",
   ")",
   "{",
   "case",
   "PULL_FROM_END",
   ":",
   "newScrollValue",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "initialMotionValue",
   "-",
   "lastMotionValue",
   ",",
   "0",
   ")",
   "/",
   "FRICTION",
   ")",
   ";",
   "itemDimension",
   "=",
   "getFooterSize",
   "(",
   ")",
   ";",
   "break",
   ";",
   "case",
   "PULL_FROM_START",
   ":",
   "default",
   ":",
   "newScrollValue",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "initialMotionValue",
   "-",
   "lastMotionValue",
   ",",
   "0",
   ")",
   "/",
   "FRICTION",
   ")",
   ";",
   "itemDimension",
   "=",
   "getHeaderSize",
   "(",
   ")",
   ";",
   "break",
   ";",
   "}",
   "setHeaderScroll",
   "(",
   "newScrollValue",
   ")",
   ";",
   "if",
   "(",
   "newScrollValue",
   "!=",
   "0",
   "&&",
   "!",
   "isRefreshing",
   "(",
   ")",
   ")",
   "{",
   "float",
   "scale",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "newScrollValue",
   ")",
   "/",
   "(",
   "float",
   ")",
   "itemDimension",
   ";",
   "switch",
   "(",
   "mCurrentMode",
   ")",
   "{",
   "case",
   "PULL_FROM_END",
   ":",
   "mFooterLayout",
   ".",
   "onPull",
   "(",
   "scale",
   ")",
   ";",
   "break",
   ";",
   "case",
   "PULL_FROM_START",
   ":",
   "default",
   ":",
   "mHeaderLayout",
   ".",
   "onPull",
   "(",
   "scale",
   ")",
   ";",
   "break",
   ";",
   "}",
   "if",
   "(",
   "mState",
   "!=",
   "State",
   ".",
   "PULL_TO_REFRESH",
   "&&",
   "itemDimension",
   ">=",
   "Math",
   ".",
   "abs",
   "(",
   "newScrollValue",
   ")",
   ")",
   "{",
   "setState",
   "(",
   "State",
   ".",
   "PULL_TO_REFRESH",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "mState",
   "==",
   "State",
   ".",
   "PULL_TO_REFRESH",
   "&&",
   "itemDimension",
   "<",
   "Math",
   ".",
   "abs",
   "(",
   "newScrollValue",
   ")",
   ")",
   "{",
   "setState",
   "(",
   "State",
   ".",
   "RELEASE_TO_REFRESH",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-365",
  "nl_tokens": [
   "checks",
   "if",
   "given",
   "a",
   "list",
   "of",
   "=",
   "conditions",
   "and",
   "a",
   "set",
   "of",
   "ORDER",
   "BY",
   "fields"
  ],
  "pl_tokens": [
   "boolean",
   "canBeUsedByOrderByAfterFilter",
   "(",
   "OIndex",
   "<",
   "?",
   ">",
   "index",
   ",",
   "List",
   "<",
   "String",
   ">",
   "equalsFilterFields",
   ",",
   "List",
   "<",
   "OPair",
   "<",
   "String",
   ",",
   "String",
   ">",
   ">",
   "orderedFields",
   ")",
   "{",
   "if",
   "(",
   "orderedFields",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "!",
   "index",
   ".",
   "supportsOrderedIterations",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "final",
   "OIndexDefinition",
   "definition",
   "=",
   "index",
   ".",
   "getDefinition",
   "(",
   ")",
   ";",
   "final",
   "List",
   "<",
   "String",
   ">",
   "indexFields",
   "=",
   "definition",
   ".",
   "getFields",
   "(",
   ")",
   ";",
   "int",
   "endIndex",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "indexFields",
   ".",
   "size",
   "(",
   ")",
   ",",
   "equalsFilterFields",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "final",
   "String",
   "firstOrder",
   "=",
   "orderedFields",
   ".",
   "get",
   "(",
   "0",
   ")",
   ".",
   "getValue",
   "(",
   ")",
   ";",
   "//check that all the \"equals\" clauses are a prefix for the index",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "endIndex",
   ";",
   "i",
   "++",
   ")",
   "{",
   "final",
   "String",
   "equalsFieldName",
   "=",
   "equalsFilterFields",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "final",
   "String",
   "indexFieldName",
   "=",
   "indexFields",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "!",
   "equalsFieldName",
   ".",
   "equals",
   "(",
   "indexFieldName",
   ")",
   ")",
   "return",
   "false",
   ";",
   "}",
   "endIndex",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "indexFields",
   ".",
   "size",
   "(",
   ")",
   ",",
   "orderedFields",
   ".",
   "size",
   "(",
   ")",
   "+",
   "equalsFilterFields",
   ".",
   "size",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "endIndex",
   "==",
   "equalsFilterFields",
   ".",
   "size",
   "(",
   ")",
   ")",
   "{",
   "//the index is used only for filtering",
   "return",
   "false",
   ";",
   "}",
   "//check that after that prefix there all the Order By fields in the right order",
   "for",
   "(",
   "int",
   "i",
   "=",
   "equalsFilterFields",
   ".",
   "size",
   "(",
   ")",
   ";",
   "i",
   "<",
   "endIndex",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "fieldOrderInOrderByClause",
   "=",
   "i",
   "-",
   "equalsFilterFields",
   ".",
   "size",
   "(",
   ")",
   ";",
   "final",
   "OPair",
   "<",
   "String",
   ",",
   "String",
   ">",
   "pair",
   "=",
   "orderedFields",
   ".",
   "get",
   "(",
   "fieldOrderInOrderByClause",
   ")",
   ";",
   "if",
   "(",
   "!",
   "firstOrder",
   ".",
   "equals",
   "(",
   "pair",
   ".",
   "getValue",
   "(",
   ")",
   ")",
   ")",
   "return",
   "false",
   ";",
   "final",
   "String",
   "orderFieldName",
   "=",
   "pair",
   ".",
   "getKey",
   "(",
   ")",
   ";",
   "final",
   "String",
   "indexFieldName",
   "=",
   "indexFields",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "!",
   "orderFieldName",
   ".",
   "equals",
   "(",
   "indexFieldName",
   ")",
   ")",
   "return",
   "false",
   ";",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-366",
  "nl_tokens": [
   "Skips",
   "the",
   "given",
   "amount",
   "of",
   "bytes",
   "by",
   "repeated",
   "reads",
   "."
  ],
  "pl_tokens": [
   "private",
   "long",
   "skipByReading",
   "(",
   "final",
   "long",
   "n",
   ")",
   "throws",
   "IOException",
   "{",
   "long",
   "toSkip",
   "=",
   "n",
   ";",
   "int",
   "len",
   ";",
   "while",
   "(",
   "toSkip",
   ">",
   "0",
   ")",
   "{",
   "len",
   "=",
   "is",
   ".",
   "read",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "buffer",
   ".",
   "length",
   ",",
   "toSkip",
   ")",
   ")",
   ";",
   "if",
   "(",
   "len",
   ">",
   "0",
   ")",
   "toSkip",
   "-=",
   "len",
   ";",
   "else",
   "break",
   ";",
   "}",
   "return",
   "n",
   "-",
   "toSkip",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-367",
  "nl_tokens": [
   "Find",
   "the",
   "highest",
   "member",
   "id",
   "in",
   "an",
   "array",
   "of",
   "members",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "highMemberId",
   "(",
   "final",
   "ClusterMember",
   "[",
   "]",
   "clusterMembers",
   ")",
   "{",
   "int",
   "highId",
   "=",
   "Aeron",
   ".",
   "NULL_VALUE",
   ";",
   "for",
   "(",
   "final",
   "ClusterMember",
   "member",
   ":",
   "clusterMembers",
   ")",
   "{",
   "highId",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "highId",
   ",",
   "member",
   ".",
   "id",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "highId",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-368",
  "nl_tokens": [
   "Index",
   "the",
   "feature",
   "tables",
   "for",
   "the",
   "index",
   "types"
  ],
  "pl_tokens": [
   "public",
   "int",
   "index",
   "(",
   "boolean",
   "force",
   ",",
   "List",
   "<",
   "FeatureIndexType",
   ">",
   "types",
   ")",
   "{",
   "int",
   "count",
   "=",
   "0",
   ";",
   "for",
   "(",
   "FeatureIndexType",
   "type",
   ":",
   "types",
   ")",
   "{",
   "int",
   "typeCount",
   "=",
   "index",
   "(",
   "type",
   ",",
   "force",
   ")",
   ";",
   "count",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "count",
   ",",
   "typeCount",
   ")",
   ";",
   "}",
   "return",
   "count",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-369",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "protected",
   "FeatureColumn",
   "createColumn",
   "(",
   "FeatureCursor",
   "cursor",
   ",",
   "int",
   "index",
   ",",
   "String",
   "name",
   ",",
   "String",
   "type",
   ",",
   "Long",
   "<mask>",
   ",",
   "boolean",
   "notNull",
   ",",
   "int",
   "defaultValueIndex",
   ",",
   "boolean",
   "primaryKey",
   ")",
   "{",
   "boolean",
   "geometry",
   "=",
   "name",
   ".",
   "equalsIgnoreCase",
   "(",
   "geometryColumns",
   ".",
   "getColumnName",
   "(",
   ")",
   ")",
   ";",
   "GeometryType",
   "geometryType",
   "=",
   "null",
   ";",
   "GeoPackageDataType",
   "dataType",
   "=",
   "null",
   ";",
   "if",
   "(",
   "geometry",
   ")",
   "{",
   "geometryType",
   "=",
   "GeometryType",
   ".",
   "fromName",
   "(",
   "type",
   ")",
   ";",
   "dataType",
   "=",
   "GeoPackageDataType",
   ".",
   "BLOB",
   ";",
   "}",
   "else",
   "{",
   "dataType",
   "=",
   "GeoPackageDataType",
   ".",
   "fromName",
   "(",
   "type",
   ")",
   ";",
   "}",
   "Object",
   "defaultValue",
   "=",
   "cursor",
   ".",
   "getValue",
   "(",
   "defaultValueIndex",
   ",",
   "dataType",
   ")",
   ";",
   "FeatureColumn",
   "column",
   "=",
   "new",
   "FeatureColumn",
   "(",
   "index",
   ",",
   "name",
   ",",
   "dataType",
   ",",
   "max",
   ",",
   "notNull",
   ",",
   "defaultValue",
   ",",
   "primaryKey",
   ",",
   "geometryType",
   ")",
   ";",
   "return",
   "column",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-370",
  "nl_tokens": [
   "Normalize",
   "a",
   "value",
   "(",
   "val",
   "-",
   "min",
   ")",
   "/",
   "(",
   "max",
   "-",
   "min",
   ")"
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "normalize",
   "(",
   "double",
   "val",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "if",
   "(",
   "max",
   "<",
   "min",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"Max must be greather than min\"",
   ")",
   ";",
   "return",
   "(",
   "val",
   "-",
   "min",
   ")",
   "/",
   "(",
   "max",
   "-",
   "min",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-371",
  "nl_tokens": [
   "/",
   "*",
   "http",
   ":",
   "//",
   "www",
   ".",
   "unidata",
   ".",
   "ucar",
   ".",
   "edu",
   "/",
   "software",
   "/",
   "netcdf",
   "/",
   "docs",
   "/",
   "BestPractices",
   ".",
   "html",
   "Packed",
   "Data",
   "Values"
  ],
  "pl_tokens": [
   "private",
   "void",
   "doCopyCompress",
   "(",
   "Formatter",
   "f",
   ",",
   "ucar",
   ".",
   "nc2",
   ".",
   "grib",
   ".",
   "grib2",
   ".",
   "Grib2Record",
   "gr",
   ",",
   "RandomAccessFile",
   "raf",
   ",",
   "OutputStream",
   "out",
   ",",
   "Counters",
   "counters",
   ")",
   "throws",
   "IOException",
   "{",
   "float",
   "[",
   "]",
   "data",
   "=",
   "gr",
   ".",
   "readData",
   "(",
   "raf",
   ")",
   ";",
   "Grib2SectionDataRepresentation",
   "drss",
   "=",
   "gr",
   ".",
   "getDataRepresentationSection",
   "(",
   ")",
   ";",
   "drss",
   ".",
   "getDrs",
   "(",
   "raf",
   ")",
   ";",
   "// calc scale/offset",
   "GribData",
   ".",
   "Info",
   "info",
   "=",
   "gr",
   ".",
   "getBinaryDataInfo",
   "(",
   "raf",
   ")",
   ";",
   "int",
   "nbits",
   "=",
   "info",
   ".",
   "numberOfBits",
   ";",
   "counters",
   ".",
   "count",
   "(",
   "\"Nbits\"",
   ",",
   "nbits",
   ")",
   ";",
   "int",
   "width",
   "=",
   "(",
   "2",
   "<<",
   "(",
   "nbits",
   "-",
   "1",
   ")",
   ")",
   "-",
   "1",
   ";",
   "//f.format(\" nbits = %d%n\", nbits);",
   "//f.format(\" width = %d (0x%s) %n\", width2, Long.toHexString(width2));",
   "float",
   "dataMin",
   "=",
   "Float",
   ".",
   "MAX_VALUE",
   ";",
   "float",
   "dataMax",
   "=",
   "-",
   "Float",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "float",
   "fd",
   ":",
   "data",
   ")",
   "{",
   "dataMin",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dataMin",
   ",",
   "fd",
   ")",
   ";",
   "dataMax",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "dataMax",
   ",",
   "fd",
   ")",
   ";",
   "}",
   "//f.format(\" dataMin = %f%n\", dataMin);",
   "//f.format(\" dataMax = %f%n\", dataMax);",
   "// f.format(\" range = %f%n\", (dataMax - dataMin));",
   "// scale_factor =(dataMax - dataMin) / (2^n - 1)",
   "// add_offset = dataMin + 2^(n-1) * scale_factor",
   "//float scale_factor = (dataMax - dataMin) / width2;",
   "//float add_offset = dataMin + width2 * scale_factor / 2;",
   "float",
   "scale_factor",
   "=",
   "(",
   "dataMax",
   "-",
   "dataMin",
   ")",
   "/",
   "(",
   "width",
   "-",
   "2",
   ")",
   ";",
   "float",
   "add_offset",
   "=",
   "dataMin",
   "-",
   "scale_factor",
   ";",
   "//f.format(\" scale_factor = %f%n\", scale_factor);",
   "//f.format(\" add_offset = %f%n\", add_offset);",
   "// unpacked_data_value = packed_data_value * scale_factor + add_offset",
   "// packed_data_value = nint((unpacked_data_value - add_offset) / scale_factor)",
   "/* compressedSize = out.size();\n      f.format(\" compressedSize = %d%n\", compressedSize);\n      f.format(\" compressedRatio = %f%n\", (float) compressedSize / (n*nbits/8));\n      f.format(\" ratio with grib = %f%n\", (float) compressedSize / bean1.getDataLength());  */",
   "}"
  ]
 },
 {
  "idx": "maxmin-372",
  "nl_tokens": [
   "Read",
   "the",
   "termOffset",
   "from",
   "a",
   "packed",
   "raw",
   "tail",
   "value",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "termOffset",
   "(",
   "final",
   "long",
   "rawTail",
   ",",
   "final",
   "long",
   "termLength",
   ")",
   "{",
   "final",
   "long",
   "tail",
   "=",
   "rawTail",
   "&",
   "0xFFFF_FFFF",
   "",
   "L",
   ";",
   "return",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "tail",
   ",",
   "termLength",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-373",
  "nl_tokens": [
   "Write",
   "a",
   "file",
   "to",
   "the",
   "response",
   "stream",
   ".",
   "Handles",
   "Range",
   "requests",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "returnFile",
   "(",
   "HttpServletRequest",
   "req",
   ",",
   "HttpServletResponse",
   "res",
   ",",
   "File",
   "file",
   ",",
   "String",
   "contentType",
   ")",
   "throws",
   "IOException",
   "{",
   "res",
   ".",
   "setContentType",
   "(",
   "contentType",
   ")",
   ";",
   "res",
   ".",
   "addDateHeader",
   "(",
   "\"Last-Modified\"",
   ",",
   "file",
   ".",
   "lastModified",
   "(",
   ")",
   ")",
   ";",
   "// res.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + file.getName() + \"\\\"\");\r",
   "// see if its a Range Request\r",
   "boolean",
   "isRangeRequest",
   "=",
   "false",
   ";",
   "long",
   "startPos",
   "=",
   "0",
   ",",
   "endPos",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "String",
   "rangeRequest",
   "=",
   "req",
   ".",
   "getHeader",
   "(",
   "\"Range\"",
   ")",
   ";",
   "if",
   "(",
   "rangeRequest",
   "!=",
   "null",
   ")",
   "{",
   "// bytes=12-34 or bytes=12-\r",
   "int",
   "pos",
   "=",
   "rangeRequest",
   ".",
   "indexOf",
   "(",
   "\"=\"",
   ")",
   ";",
   "if",
   "(",
   "pos",
   ">",
   "0",
   ")",
   "{",
   "int",
   "pos2",
   "=",
   "rangeRequest",
   ".",
   "indexOf",
   "(",
   "\"-\"",
   ")",
   ";",
   "if",
   "(",
   "pos2",
   ">",
   "0",
   ")",
   "{",
   "String",
   "startString",
   "=",
   "rangeRequest",
   ".",
   "substring",
   "(",
   "pos",
   "+",
   "1",
   ",",
   "pos2",
   ")",
   ";",
   "String",
   "endString",
   "=",
   "rangeRequest",
   ".",
   "substring",
   "(",
   "pos2",
   "+",
   "1",
   ")",
   ";",
   "startPos",
   "=",
   "Long",
   ".",
   "parseLong",
   "(",
   "startString",
   ")",
   ";",
   "if",
   "(",
   "endString",
   ".",
   "length",
   "(",
   ")",
   ">",
   "0",
   ")",
   "endPos",
   "=",
   "Long",
   ".",
   "parseLong",
   "(",
   "endString",
   ")",
   "+",
   "1",
   ";",
   "isRangeRequest",
   "=",
   "true",
   ";",
   "}",
   "}",
   "}",
   "// set content length\r",
   "long",
   "fileSize",
   "=",
   "file",
   ".",
   "length",
   "(",
   ")",
   ";",
   "long",
   "contentLength",
   "=",
   "fileSize",
   ";",
   "if",
   "(",
   "isRangeRequest",
   ")",
   "{",
   "endPos",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "endPos",
   ",",
   "fileSize",
   ")",
   ";",
   "contentLength",
   "=",
   "endPos",
   "-",
   "startPos",
   ";",
   "}",
   "// when compression is turned on, ContentLength has to be overridden\r",
   "// this is also true for HEAD, since this must be the same as GET without the body\r",
   "if",
   "(",
   "contentLength",
   ">",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   "res",
   ".",
   "addHeader",
   "(",
   "\"Content-Length\"",
   ",",
   "Long",
   ".",
   "toString",
   "(",
   "contentLength",
   ")",
   ")",
   ";",
   "// allow content length > MAX_INT\r",
   "else",
   "res",
   ".",
   "setContentLength",
   "(",
   "(",
   "int",
   ")",
   "contentLength",
   ")",
   ";",
   "String",
   "filename",
   "=",
   "file",
   ".",
   "getPath",
   "(",
   ")",
   ";",
   "// indicate we allow Range Requests\r",
   "res",
   ".",
   "addHeader",
   "(",
   "\"Accept-Ranges\"",
   ",",
   "\"bytes\"",
   ")",
   ";",
   "if",
   "(",
   "req",
   ".",
   "getMethod",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "\"HEAD\"",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "try",
   "{",
   "if",
   "(",
   "isRangeRequest",
   ")",
   "{",
   "// set before content is sent\r",
   "res",
   ".",
   "addHeader",
   "(",
   "\"Content-Range\"",
   ",",
   "\"bytes \"",
   "+",
   "startPos",
   "+",
   "\"-\"",
   "+",
   "(",
   "endPos",
   "-",
   "1",
   ")",
   "+",
   "\"/\"",
   "+",
   "fileSize",
   ")",
   ";",
   "res",
   ".",
   "setStatus",
   "(",
   "HttpServletResponse",
   ".",
   "SC_PARTIAL_CONTENT",
   ")",
   ";",
   "try",
   "(",
   "RandomAccessFile",
   "craf",
   "=",
   "RandomAccessFile",
   ".",
   "acquire",
   "(",
   "filename",
   ")",
   ")",
   "{",
   "IO",
   ".",
   "copyRafB",
   "(",
   "craf",
   ",",
   "startPos",
   ",",
   "contentLength",
   ",",
   "res",
   ".",
   "getOutputStream",
   "(",
   ")",
   ",",
   "new",
   "byte",
   "[",
   "60000",
   "]",
   ")",
   ";",
   "return",
   ";",
   "}",
   "}",
   "// Return the file\r",
   "ServletOutputStream",
   "out",
   "=",
   "res",
   ".",
   "getOutputStream",
   "(",
   ")",
   ";",
   "IO",
   ".",
   "copyFileB",
   "(",
   "file",
   ",",
   "out",
   ",",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "/* try (WritableByteChannel cOut = Channels.newChannel(out)) {\r\n        IO.copyFileWithChannels(file, cOut);\r\n        res.flushBuffer();\r\n      } */",
   "}",
   "// @todo Split up this exception handling: those from file access vs those from dealing with response\r",
   "//       File access: catch and res.sendError()\r",
   "//       response: don't catch (let bubble up out of doGet() etc)\r",
   "catch",
   "(",
   "FileNotFoundException",
   "e",
   ")",
   "{",
   "log",
   ".",
   "error",
   "(",
   "\"returnFile(): FileNotFoundException= \"",
   "+",
   "filename",
   ")",
   ";",
   "if",
   "(",
   "!",
   "res",
   ".",
   "isCommitted",
   "(",
   ")",
   ")",
   "res",
   ".",
   "sendError",
   "(",
   "HttpServletResponse",
   ".",
   "SC_NOT_FOUND",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "java",
   ".",
   "net",
   ".",
   "SocketException",
   "e",
   ")",
   "{",
   "log",
   ".",
   "info",
   "(",
   "\"returnFile(): SocketException sending file: \"",
   "+",
   "filename",
   "+",
   "\" \"",
   "+",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "String",
   "eName",
   "=",
   "e",
   ".",
   "getClass",
   "(",
   ")",
   ".",
   "getName",
   "(",
   ")",
   ";",
   "// dont want compile time dependency on ClientAbortException\r",
   "if",
   "(",
   "eName",
   ".",
   "equals",
   "(",
   "\"org.apache.catalina.connector.ClientAbortException\"",
   ")",
   ")",
   "{",
   "log",
   ".",
   "debug",
   "(",
   "\"returnFile(): ClientAbortException while sending file: \"",
   "+",
   "filename",
   "+",
   "\" \"",
   "+",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "return",
   ";",
   "}",
   "if",
   "(",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ".",
   "startsWith",
   "(",
   "\"File transfer not complete\"",
   ")",
   ")",
   "{",
   "// coming from FileTransfer.transferTo()\r",
   "log",
   ".",
   "debug",
   "(",
   "\"returnFile() \"",
   "+",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "return",
   ";",
   "}",
   "log",
   ".",
   "error",
   "(",
   "\"returnFile(): IOException (\"",
   "+",
   "e",
   ".",
   "getClass",
   "(",
   ")",
   ".",
   "getName",
   "(",
   ")",
   "+",
   "\") sending file \"",
   ",",
   "e",
   ")",
   ";",
   "if",
   "(",
   "!",
   "res",
   ".",
   "isCommitted",
   "(",
   ")",
   ")",
   "res",
   ".",
   "sendError",
   "(",
   "HttpServletResponse",
   ".",
   "SC_NOT_FOUND",
   ",",
   "\"Problem sending file: \"",
   "+",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-374",
  "nl_tokens": [
   "Reduce",
   "a",
   "fraction",
   "to",
   "it",
   "s",
   "lowest",
   "common",
   "denominators",
   ".",
   "<br",
   ">",
   "This",
   "is",
   "useful",
   "for",
   "framerate",
   "calculations",
   ".",
   "<br",
   ">"
  ],
  "pl_tokens": [
   "public",
   "int",
   "reduce",
   "(",
   "long",
   "num",
   ",",
   "long",
   "den",
   ",",
   "long",
   "<mask>",
   ")",
   "{",
   "return",
   "VideoJNI",
   ".",
   "Rational_reduce",
   "(",
   "swigCPtr",
   ",",
   "this",
   ",",
   "num",
   ",",
   "den",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-375",
  "nl_tokens": [
   "Min"
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "<mask>",
   "(",
   "long",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "long",
   "min",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   "<",
   "min",
   ")",
   "min",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-376",
  "nl_tokens": [
   "----------------------------------------------------------------",
   "configure"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "configure",
   "(",
   "final",
   "Range",
   "annotation",
   ")",
   "{",
   "this",
   ".",
   "<mask>",
   "=",
   "annotation",
   ".",
   "min",
   "(",
   ")",
   ";",
   "this",
   ".",
   "max",
   "=",
   "annotation",
   ".",
   "max",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-377",
  "nl_tokens": [
   "Returns",
   "the",
   "product",
   "of",
   "{",
   "@code",
   "a",
   "}",
   "and",
   "{",
   "@code",
   "b",
   "}",
   "provided",
   "the",
   "result",
   "fits",
   "into",
   "a",
   "{",
   "@code",
   "long",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "long",
   "safeMultiply",
   "(",
   "long",
   "a",
   ",",
   "long",
   "b",
   ")",
   "{",
   "if",
   "(",
   "a",
   "==",
   "0L",
   "||",
   "b",
   "==",
   "0L",
   ")",
   "{",
   "return",
   "0L",
   ";",
   "}",
   "long",
   "<mask>",
   "=",
   "a",
   "<",
   "0L",
   "==",
   "b",
   "<",
   "0L",
   "?",
   "Long",
   ".",
   "MAX_VALUE",
   ":",
   "Long",
   ".",
   "MIN_VALUE",
   ";",
   "if",
   "(",
   "(",
   "b",
   ">",
   "0L",
   "&&",
   "b",
   ">",
   "max",
   "/",
   "a",
   ")",
   "||",
   "(",
   "b",
   "<",
   "0L",
   "&&",
   "b",
   "<",
   "max",
   "/",
   "a",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "ArithmeticException",
   "(",
   "\"Long overflow: \"",
   "+",
   "a",
   "+",
   "\" * \"",
   "+",
   "b",
   ")",
   ";",
   "}",
   "return",
   "a",
   "*",
   "b",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-378",
  "nl_tokens": [
   "******************************************",
   "Private",
   "Methods",
   "*******************************************"
  ],
  "pl_tokens": [
   "private",
   "Bitmap",
   "getBitmap",
   "(",
   "String",
   "path",
   ")",
   "{",
   "Uri",
   "uri",
   "=",
   "MediaUtils",
   ".",
   "createFileUri",
   "(",
   "path",
   ")",
   ";",
   "InputStream",
   "in",
   "=",
   "null",
   ";",
   "try",
   "{",
   "in",
   "=",
   "getContentResolver",
   "(",
   ")",
   ".",
   "openInputStream",
   "(",
   "uri",
   ")",
   ";",
   "// Decode image size",
   "BitmapFactory",
   ".",
   "Options",
   "options",
   "=",
   "new",
   "BitmapFactory",
   ".",
   "Options",
   "(",
   ")",
   ";",
   "options",
   ".",
   "inJustDecodeBounds",
   "=",
   "true",
   ";",
   "BitmapFactory",
   ".",
   "decodeStream",
   "(",
   "in",
   ",",
   "null",
   ",",
   "options",
   ")",
   ";",
   "Helper",
   ".",
   "closeQuietly",
   "(",
   "in",
   ")",
   ";",
   "// compute scale factor to ensure that the image is smaller than",
   "// IMAGE_MAX_SIZE",
   "float",
   "maxSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "options",
   ".",
   "outWidth",
   ",",
   "options",
   ".",
   "outHeight",
   ")",
   ";",
   "float",
   "scale",
   "=",
   "maxSize",
   ">",
   "IMAGE_MAX_SIZE",
   "?",
   "maxSize",
   "/",
   "IMAGE_MAX_SIZE",
   ":",
   "1.0f",
   ";",
   "while",
   "(",
   "(",
   "maxSize",
   "/",
   "scale",
   ")",
   ">",
   "8",
   ")",
   "{",
   "try",
   "{",
   "return",
   "getBitmap",
   "(",
   "in",
   ",",
   "uri",
   ",",
   "scale",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Throwable",
   "e",
   ")",
   "{",
   "Log",
   ".",
   "w",
   "(",
   "getClass",
   "(",
   ")",
   ".",
   "getSimpleName",
   "(",
   ")",
   ",",
   "\"bitmap could not be created (probably out of memory), decreasing size and retrying\"",
   ")",
   ";",
   "scale",
   "*=",
   "2f",
   ";",
   "}",
   "}",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "Log",
   ".",
   "e",
   "(",
   "getClass",
   "(",
   ")",
   ".",
   "getSimpleName",
   "(",
   ")",
   ",",
   "\"file \"",
   "+",
   "path",
   "+",
   "\" not found\"",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "Log",
   ".",
   "e",
   "(",
   "getClass",
   "(",
   ")",
   ".",
   "getSimpleName",
   "(",
   ")",
   ",",
   "\"error while opening image\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "Helper",
   ".",
   "closeQuietly",
   "(",
   "in",
   ")",
   ";",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-379",
  "nl_tokens": [
   "Extend",
   "the",
   "bounding",
   "box",
   "to",
   "contain",
   "the",
   "given",
   "rectangle"
  ],
  "pl_tokens": [
   "public",
   "void",
   "extend",
   "(",
   "LatLonRect",
   "r",
   ")",
   "{",
   "Preconditions",
   ".",
   "checkNotNull",
   "(",
   "r",
   ")",
   ";",
   "// lat is easy\r",
   "double",
   "latMin",
   "=",
   "r",
   ".",
   "getLatMin",
   "(",
   ")",
   ";",
   "double",
   "latMax",
   "=",
   "r",
   ".",
   "getLatMax",
   "(",
   ")",
   ";",
   "if",
   "(",
   "latMax",
   ">",
   "upperRight",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   "{",
   "upperRight",
   ".",
   "setLatitude",
   "(",
   "latMax",
   ")",
   ";",
   "}",
   "if",
   "(",
   "latMin",
   "<",
   "lowerLeft",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   "{",
   "lowerLeft",
   ".",
   "setLatitude",
   "(",
   "latMin",
   ")",
   ";",
   "}",
   "// lon is uglier\r",
   "if",
   "(",
   "allLongitude",
   ")",
   "return",
   ";",
   "// everything is reletive to current LonMin\r",
   "double",
   "lonMin",
   "=",
   "getLonMin",
   "(",
   ")",
   ";",
   "double",
   "lonMax",
   "=",
   "getLonMax",
   "(",
   ")",
   ";",
   "double",
   "nlonMin",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormal",
   "(",
   "r",
   ".",
   "getLonMin",
   "(",
   ")",
   ",",
   "lonMin",
   ")",
   ";",
   "double",
   "nlonMax",
   "=",
   "nlonMin",
   "+",
   "r",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "lonMin",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "lonMin",
   ",",
   "nlonMin",
   ")",
   ";",
   "lonMax",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "lonMax",
   ",",
   "nlonMax",
   ")",
   ";",
   "width",
   "=",
   "lonMax",
   "-",
   "lonMin",
   ";",
   "allLongitude",
   "=",
   "width",
   ">=",
   "360.0",
   ";",
   "if",
   "(",
   "allLongitude",
   ")",
   "{",
   "width",
   "=",
   "360.0",
   ";",
   "lonMin",
   "=",
   "-",
   "180.0",
   ";",
   "}",
   "else",
   "{",
   "lonMin",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormal",
   "(",
   "lonMin",
   ")",
   ";",
   "}",
   "lowerLeft",
   ".",
   "setLongitude",
   "(",
   "lonMin",
   ")",
   ";",
   "upperRight",
   ".",
   "setLongitude",
   "(",
   "lonMin",
   "+",
   "width",
   ")",
   ";",
   "lon0",
   "=",
   "lonMin",
   "+",
   "width",
   "/",
   "2",
   ";",
   "crossDateline",
   "=",
   "lowerLeft",
   ".",
   "getLongitude",
   "(",
   ")",
   ">",
   "upperRight",
   ".",
   "getLongitude",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-380",
  "nl_tokens": [
   "only",
   "for",
   "longitude",
   "only",
   "for",
   "regular",
   "(",
   "do",
   "we",
   "need",
   "a",
   "subclass",
   "for",
   "longitude",
   "1D",
   "coords",
   "??"
  ],
  "pl_tokens": [
   "public",
   "Optional",
   "<",
   "CoverageCoordAxis",
   ">",
   "subsetByIntervals",
   "(",
   "List",
   "<",
   "MAMath",
   ".",
   "MinMax",
   ">",
   "lonIntvs",
   ",",
   "int",
   "stride",
   ")",
   "{",
   "if",
   "(",
   "axisType",
   "!=",
   "AxisType",
   ".",
   "Lon",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "\"subsetByIntervals only for longitude\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isRegular",
   "(",
   ")",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "\"subsetByIntervals only for regular longitude\"",
   ")",
   ";",
   "CoordAxisHelper",
   "helper",
   "=",
   "new",
   "CoordAxisHelper",
   "(",
   "this",
   ")",
   ";",
   "double",
   "start",
   "=",
   "Double",
   ".",
   "NaN",
   ";",
   "boolean",
   "first",
   "=",
   "true",
   ";",
   "List",
   "<",
   "RangeIterator",
   ">",
   "ranges",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "for",
   "(",
   "MAMath",
   ".",
   "MinMax",
   "lonIntv",
   ":",
   "lonIntvs",
   ")",
   "{",
   "if",
   "(",
   "first",
   ")",
   "start",
   "=",
   "lonIntv",
   ".",
   "<mask>",
   ";",
   "first",
   "=",
   "false",
   ";",
   "Optional",
   "<",
   "RangeIterator",
   ">",
   "opt",
   "=",
   "helper",
   ".",
   "makeRange",
   "(",
   "lonIntv",
   ".",
   "min",
   ",",
   "lonIntv",
   ".",
   "max",
   ",",
   "stride",
   ")",
   ";",
   "if",
   "(",
   "!",
   "opt",
   ".",
   "isPresent",
   "(",
   ")",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "opt",
   ".",
   "getErrorMessage",
   "(",
   ")",
   ")",
   ";",
   "ranges",
   ".",
   "add",
   "(",
   "opt",
   ".",
   "get",
   "(",
   ")",
   ")",
   ";",
   "}",
   "try",
   "{",
   "RangeComposite",
   "compositeRange",
   "=",
   "new",
   "RangeComposite",
   "(",
   "AxisType",
   ".",
   "Lon",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "ranges",
   ")",
   ";",
   "int",
   "npts",
   "=",
   "compositeRange",
   ".",
   "length",
   "(",
   ")",
   ";",
   "double",
   "end",
   "=",
   "start",
   "+",
   "npts",
   "*",
   "resolution",
   ";",
   "CoverageCoordAxisBuilder",
   "builder",
   "=",
   "new",
   "CoverageCoordAxisBuilder",
   "(",
   "this",
   ")",
   ";",
   "// copy",
   "builder",
   ".",
   "subset",
   "(",
   "npts",
   ",",
   "start",
   ",",
   "end",
   ",",
   "resolution",
   ",",
   "null",
   ")",
   ";",
   "builder",
   ".",
   "setRange",
   "(",
   "null",
   ")",
   ";",
   "builder",
   ".",
   "setCompositeRange",
   "(",
   "compositeRange",
   ")",
   ";",
   "return",
   "Optional",
   ".",
   "of",
   "(",
   "new",
   "CoverageCoordAxis1D",
   "(",
   "builder",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "InvalidRangeException",
   "e",
   ")",
   "{",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-381",
  "nl_tokens": [
   "Computes",
   "the",
   "shape",
   "of",
   "the",
   "largest",
   "possible",
   "<b",
   ">",
   "contiguous<",
   "/",
   "b",
   ">",
   "chunk",
   "starting",
   "at",
   "{",
   "@link",
   "#getCurrentCounter",
   "()",
   "}",
   "and",
   "with",
   "{",
   "@code",
   "numElems",
   "<",
   "=",
   "maxChunkElems",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "[",
   "]",
   "computeChunkShape",
   "(",
   "long",
   "maxChunkElems",
   ")",
   "{",
   "int",
   "[",
   "]",
   "chunkShape",
   "=",
   "new",
   "int",
   "[",
   "rank",
   "]",
   ";",
   "for",
   "(",
   "int",
   "iDim",
   "=",
   "0",
   ";",
   "iDim",
   "<",
   "rank",
   ";",
   "++",
   "iDim",
   ")",
   "{",
   "int",
   "size",
   "=",
   "(",
   "int",
   ")",
   "(",
   "maxChunkElems",
   "/",
   "stride",
   "[",
   "iDim",
   "]",
   ")",
   ";",
   "size",
   "=",
   "(",
   "size",
   "==",
   "0",
   ")",
   "?",
   "1",
   ":",
   "size",
   ";",
   "size",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "size",
   ",",
   "shape",
   "[",
   "iDim",
   "]",
   "-",
   "current",
   "[",
   "iDim",
   "]",
   ")",
   ";",
   "chunkShape",
   "[",
   "iDim",
   "]",
   "=",
   "size",
   ";",
   "}",
   "return",
   "chunkShape",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-382",
  "nl_tokens": [
   "Decides",
   "if",
   "the",
   "operating",
   "system",
   "version",
   "matches",
   ".",
   "<p",
   ">",
   "This",
   "method",
   "is",
   "package",
   "private",
   "instead",
   "of",
   "private",
   "to",
   "support",
   "unit",
   "test",
   "invocation",
   ".",
   "<",
   "/",
   "p",
   ">"
  ],
  "pl_tokens": [
   "static",
   "boolean",
   "isOSVersionMatch",
   "(",
   "final",
   "String",
   "osVersion",
   ",",
   "final",
   "String",
   "osVersionPrefix",
   ")",
   "{",
   "if",
   "(",
   "osVersion",
   "==",
   "null",
   "||",
   "osVersion",
   ".",
   "trim",
   "(",
   ")",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "// Compare parts of the version string instead of using String.startsWith(String) because otherwise",
   "// osVersionPrefix 10.1 would also match osVersion 10.10",
   "String",
   "[",
   "]",
   "versionPrefixParts",
   "=",
   "osVersionPrefix",
   ".",
   "split",
   "(",
   "\"\\\\.\"",
   ")",
   ";",
   "String",
   "[",
   "]",
   "versionParts",
   "=",
   "osVersion",
   ".",
   "split",
   "(",
   "\"\\\\.\"",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "Math",
   ".",
   "<mask>",
   "(",
   "versionPrefixParts",
   ".",
   "length",
   ",",
   "versionParts",
   ".",
   "length",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "versionPrefixParts",
   "[",
   "i",
   "]",
   ".",
   "equals",
   "(",
   "versionParts",
   "[",
   "i",
   "]",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-383",
  "nl_tokens": [
   "Parses",
   "the",
   "next",
   "sequence",
   "of",
   "chars",
   "."
  ],
  "pl_tokens": [
   "protected",
   "int",
   "parserNextChars",
   "(",
   "final",
   "boolean",
   "iUpperCase",
   ",",
   "final",
   "boolean",
   "iMandatory",
   ",",
   "final",
   "String",
   "...",
   "iCandidateWords",
   ")",
   "{",
   "parserPreviousPos",
   "=",
   "parserCurrentPos",
   ";",
   "parserSkipWhiteSpaces",
   "(",
   ")",
   ";",
   "parserEscapeSequenceCount",
   "=",
   "0",
   ";",
   "parserLastWord",
   ".",
   "setLength",
   "(",
   "0",
   ")",
   ";",
   "final",
   "String",
   "[",
   "]",
   "processedWords",
   "=",
   "Arrays",
   ".",
   "copyOf",
   "(",
   "iCandidateWords",
   ",",
   "iCandidateWords",
   ".",
   "length",
   ")",
   ";",
   "// PARSE THE CHARS",
   "final",
   "String",
   "text2Use",
   "=",
   "iUpperCase",
   "?",
   "parserTextUpperCase",
   ":",
   "parserText",
   ";",
   "final",
   "int",
   "<mask>",
   "=",
   "text2Use",
   ".",
   "length",
   "(",
   ")",
   ";",
   "parserCurrentPos",
   "=",
   "parserCurrentPos",
   "+",
   "parserTextUpperCase",
   ".",
   "length",
   "(",
   ")",
   "-",
   "parserText",
   ".",
   "length",
   "(",
   ")",
   ";",
   "// PARSE TILL 1 CHAR AFTER THE END TO SIMULATE A SEPARATOR AS EOF",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "parserCurrentPos",
   "<=",
   "max",
   ";",
   "++",
   "i",
   ")",
   "{",
   "final",
   "char",
   "ch",
   "=",
   "parserCurrentPos",
   "<",
   "max",
   "?",
   "text2Use",
   ".",
   "charAt",
   "(",
   "parserCurrentPos",
   ")",
   ":",
   "'",
   "'",
   ";",
   "final",
   "boolean",
   "separator",
   "=",
   "ch",
   "==",
   "'",
   "'",
   "||",
   "ch",
   "==",
   "'",
   "'",
   "||",
   "ch",
   "==",
   "'",
   "'",
   "||",
   "ch",
   "==",
   "'",
   "'",
   "||",
   "ch",
   "==",
   "'",
   "'",
   ";",
   "if",
   "(",
   "!",
   "separator",
   ")",
   "parserLastWord",
   ".",
   "append",
   "(",
   "ch",
   ")",
   ";",
   "// CLEAR CANDIDATES",
   "int",
   "candidatesWordsCount",
   "=",
   "0",
   ";",
   "int",
   "candidatesWordsPos",
   "=",
   "-",
   "1",
   ";",
   "for",
   "(",
   "int",
   "c",
   "=",
   "0",
   ";",
   "c",
   "<",
   "processedWords",
   ".",
   "length",
   ";",
   "++",
   "c",
   ")",
   "{",
   "final",
   "String",
   "w",
   "=",
   "processedWords",
   "[",
   "c",
   "]",
   ";",
   "if",
   "(",
   "w",
   "!=",
   "null",
   ")",
   "{",
   "final",
   "int",
   "wordSize",
   "=",
   "w",
   ".",
   "length",
   "(",
   ")",
   ";",
   "if",
   "(",
   "(",
   "separator",
   "&&",
   "wordSize",
   ">",
   "i",
   ")",
   "||",
   "(",
   "!",
   "separator",
   "&&",
   "(",
   "i",
   ">",
   "wordSize",
   "-",
   "1",
   "||",
   "w",
   ".",
   "charAt",
   "(",
   "i",
   ")",
   "!=",
   "ch",
   ")",
   ")",
   ")",
   "// DISCARD IT",
   "processedWords",
   "[",
   "c",
   "]",
   "=",
   "null",
   ";",
   "else",
   "{",
   "candidatesWordsCount",
   "++",
   ";",
   "if",
   "(",
   "candidatesWordsCount",
   "==",
   "1",
   ")",
   "// REMEMBER THE POSITION",
   "candidatesWordsPos",
   "=",
   "c",
   ";",
   "}",
   "}",
   "}",
   "if",
   "(",
   "candidatesWordsCount",
   "==",
   "1",
   ")",
   "{",
   "// ONE RESULT, CHECKING IF FOUND",
   "final",
   "String",
   "w",
   "=",
   "processedWords",
   "[",
   "candidatesWordsPos",
   "]",
   ";",
   "if",
   "(",
   "w",
   ".",
   "length",
   "(",
   ")",
   "==",
   "i",
   "+",
   "(",
   "separator",
   "?",
   "0",
   ":",
   "1",
   ")",
   "&&",
   "!",
   "Character",
   ".",
   "isLetter",
   "(",
   "ch",
   ")",
   ")",
   "// FOUND!",
   "return",
   "candidatesWordsPos",
   ";",
   "}",
   "if",
   "(",
   "candidatesWordsCount",
   "==",
   "0",
   "||",
   "separator",
   ")",
   "break",
   ";",
   "parserCurrentPos",
   "++",
   ";",
   "}",
   "if",
   "(",
   "iMandatory",
   ")",
   "throwSyntaxErrorException",
   "(",
   "\"Found unexpected keyword '\"",
   "+",
   "parserLastWord",
   "+",
   "\"' while it was expected '\"",
   "+",
   "Arrays",
   ".",
   "toString",
   "(",
   "iCandidateWords",
   ")",
   "+",
   "\"'\"",
   ")",
   ";",
   "return",
   "-",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-384",
  "nl_tokens": [
   "//////////////////////////////////////////////////////////////////////////////////////////////"
  ],
  "pl_tokens": [
   "public",
   "void",
   "writeDataAll",
   "(",
   "WritableByteChannel",
   "channel",
   ")",
   "throws",
   "IOException",
   ",",
   "InvalidRangeException",
   "{",
   "for",
   "(",
   "Vinfo",
   "vinfo",
   ":",
   "vinfoList",
   ")",
   "{",
   "if",
   "(",
   "!",
   "vinfo",
   ".",
   "isRecord",
   ")",
   "{",
   "Variable",
   "v",
   "=",
   "vinfo",
   ".",
   "v",
   ";",
   "// assert filePos == vinfo.offset;",
   "//if (debugPos) System.out.println(\" writing at \"+filePos+\" should be \"+vinfo.offset+\" \"+v.getFullName());",
   "int",
   "nbytes",
   "=",
   "(",
   "int",
   ")",
   "v",
   ".",
   "readToByteChannel",
   "(",
   "v",
   ".",
   "getShapeAsSection",
   "(",
   ")",
   ",",
   "channel",
   ")",
   ";",
   "filePos",
   "+=",
   "nbytes",
   ";",
   "filePos",
   "+=",
   "pad",
   "(",
   "channel",
   ",",
   "nbytes",
   ")",
   ";",
   "if",
   "(",
   "debugPos",
   ")",
   "System",
   ".",
   "out",
   ".",
   "printf",
   "(",
   "\" read=%d vinfo=%s%n\"",
   ",",
   "nbytes",
   ",",
   "vinfo",
   ")",
   ";",
   "}",
   "}",
   "// must use record dimension if it exists+",
   "boolean",
   "useRecordDimension",
   "=",
   "ncfile",
   ".",
   "hasUnlimitedDimension",
   "(",
   ")",
   ";",
   "if",
   "(",
   "useRecordDimension",
   ")",
   "{",
   "ncfile",
   ".",
   "sendIospMessage",
   "(",
   "NetcdfFile",
   ".",
   "IOSP_MESSAGE_ADD_RECORD_STRUCTURE",
   ")",
   ";",
   "Structure",
   "recordVar",
   "=",
   "(",
   "Structure",
   ")",
   "ncfile",
   ".",
   "findVariable",
   "(",
   "\"record\"",
   ")",
   ";",
   "Section",
   "section",
   "=",
   "new",
   "Section",
   "(",
   ")",
   ".",
   "appendRange",
   "(",
   "null",
   ")",
   ";",
   "long",
   "bytesDone",
   "=",
   "0",
   ";",
   "long",
   "done",
   "=",
   "0",
   ";",
   "long",
   "nrecs",
   "=",
   "(",
   "int",
   ")",
   "recordVar",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "int",
   "structureSize",
   "=",
   "recordVar",
   ".",
   "getElementSize",
   "(",
   ")",
   ";",
   "int",
   "readAtaTime",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "10",
   ",",
   "buffer_size",
   "/",
   "structureSize",
   ")",
   ";",
   "for",
   "(",
   "int",
   "count",
   "=",
   "0",
   ";",
   "count",
   "<",
   "nrecs",
   ";",
   "count",
   "+=",
   "readAtaTime",
   ")",
   "{",
   "long",
   "last",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "nrecs",
   ",",
   "done",
   "+",
   "readAtaTime",
   ")",
   ";",
   "// dont go over nrecs",
   "int",
   "need",
   "=",
   "(",
   "int",
   ")",
   "(",
   "last",
   "-",
   "done",
   ")",
   ";",
   "// how many to read this time",
   "section",
   ".",
   "setRange",
   "(",
   "0",
   ",",
   "new",
   "Range",
   "(",
   "count",
   ",",
   "count",
   "+",
   "need",
   "-",
   "1",
   ")",
   ")",
   ";",
   "try",
   "{",
   "bytesDone",
   "+=",
   "recordVar",
   ".",
   "readToByteChannel",
   "(",
   "section",
   ",",
   "channel",
   ")",
   ";",
   "done",
   "+=",
   "need",
   ";",
   "}",
   "catch",
   "(",
   "InvalidRangeException",
   "e",
   ")",
   "{",
   "e",
   ".",
   "printStackTrace",
   "(",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "assert",
   "done",
   "==",
   "nrecs",
   ";",
   "bytesDone",
   "/=",
   "1000",
   "*",
   "1000",
   ";",
   "if",
   "(",
   "debugWrite",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"write record var; total = \"",
   "+",
   "bytesDone",
   "+",
   "\" Mbytes # recs=\"",
   "+",
   "done",
   ")",
   ";",
   "// remove the record structure this is rather fishy, perhaps better to leave it",
   "ncfile",
   ".",
   "sendIospMessage",
   "(",
   "NetcdfFile",
   ".",
   "IOSP_MESSAGE_REMOVE_RECORD_STRUCTURE",
   ")",
   ";",
   "ncfile",
   ".",
   "finish",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-385",
  "nl_tokens": [
   "PRIVILEGED",
   "method",
   ".",
   "You",
   "gotta",
   "know",
   "what",
   "your",
   "doing",
   "here",
   ".."
  ],
  "pl_tokens": [
   "public",
   "void",
   "resizeStore",
   "(",
   "long",
   "required",
   ",",
   "long",
   "maxgrowbytes",
   ")",
   "{",
   "if",
   "(",
   "mappedFile",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "RuntimeException",
   "(",
   "\"store is full. Required: \"",
   "+",
   "required",
   ")",
   ";",
   "if",
   "(",
   "required",
   "<=",
   "memory",
   ".",
   "length",
   "(",
   ")",
   ")",
   "return",
   ";",
   "mutationCount",
   "++",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"resizing underlying \"",
   "+",
   "mappedFile",
   "+",
   "\" to \"",
   "+",
   "required",
   "+",
   "\" numElem:\"",
   "+",
   "numElem",
   ")",
   ";",
   "long",
   "tim",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "(",
   "(",
   "MMFBytez",
   ")",
   "memory",
   ")",
   ".",
   "freeAndClose",
   "(",
   ")",
   ";",
   "memory",
   "=",
   "null",
   ";",
   "try",
   "{",
   "File",
   "mf",
   "=",
   "new",
   "File",
   "(",
   "mappedFile",
   ")",
   ";",
   "FileOutputStream",
   "f",
   "=",
   "new",
   "FileOutputStream",
   "(",
   "mf",
   ",",
   "true",
   ")",
   ";",
   "long",
   "len",
   "=",
   "mf",
   ".",
   "length",
   "(",
   ")",
   ";",
   "required",
   "=",
   "required",
   "+",
   "Math",
   ".",
   "<mask>",
   "(",
   "required",
   ",",
   "maxgrowbytes",
   ")",
   ";",
   "byte",
   "[",
   "]",
   "toWrite",
   "=",
   "new",
   "byte",
   "[",
   "1000",
   "]",
   ";",
   "long",
   "max",
   "=",
   "(",
   "required",
   "-",
   "len",
   ")",
   "/",
   "1000",
   ";",
   "for",
   "(",
   "long",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "max",
   "+",
   "2",
   ";",
   "i",
   "++",
   ")",
   "{",
   "f",
   ".",
   "write",
   "(",
   "toWrite",
   ")",
   ";",
   "}",
   "f",
   ".",
   "flush",
   "(",
   ")",
   ";",
   "f",
   ".",
   "close",
   "(",
   ")",
   ";",
   "resetMem",
   "(",
   "mappedFile",
   ",",
   "mf",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"resizing done in \"",
   "+",
   "(",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "-",
   "tim",
   ")",
   "+",
   "\" numElemAfter:\"",
   "+",
   "numElem",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "FileNotFoundException",
   "e",
   ")",
   "{",
   "e",
   ".",
   "printStackTrace",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "e",
   ".",
   "printStackTrace",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "e",
   ".",
   "printStackTrace",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-386",
  "nl_tokens": [
   "Returns",
   "this",
   "node",
   "s",
   "next",
   "<b",
   ">",
   "element<",
   "/",
   "b",
   ">",
   "with",
   "the",
   "same",
   "name",
   "."
  ],
  "pl_tokens": [
   "public",
   "Node",
   "getNextSiblingName",
   "(",
   ")",
   "{",
   "if",
   "(",
   "nodeName",
   "==",
   "null",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "initSiblingNames",
   "(",
   ")",
   ";",
   "int",
   "index",
   "=",
   "siblingNameIndex",
   "+",
   "1",
   ";",
   "int",
   "<mask>",
   "=",
   "parentNode",
   ".",
   "getChildNodesCount",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "siblingIndex",
   "+",
   "1",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Node",
   "sibling",
   "=",
   "parentNode",
   ".",
   "childNodes",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "(",
   "index",
   "==",
   "sibling",
   ".",
   "siblingNameIndex",
   ")",
   "&&",
   "nodeName",
   ".",
   "equals",
   "(",
   "sibling",
   ".",
   "getNodeName",
   "(",
   ")",
   ")",
   ")",
   "{",
   "return",
   "sibling",
   ";",
   "}",
   "}",
   "return",
   "null",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-387",
  "nl_tokens": [
   "/",
   "*",
   "=========",
   "decoding",
   "=========="
  ],
  "pl_tokens": [
   "public",
   "void",
   "decode",
   "(",
   "IBitStream",
   "_in",
   ",",
   "boolean",
   "commonWindow",
   ",",
   "AACDecoderConfig",
   "conf",
   ")",
   "throws",
   "AACException",
   "{",
   "if",
   "(",
   "conf",
   ".",
   "isScalefactorResilienceUsed",
   "(",
   ")",
   "&&",
   "rvlc",
   "==",
   "null",
   ")",
   "rvlc",
   "=",
   "new",
   "RVLC",
   "(",
   ")",
   ";",
   "final",
   "boolean",
   "er",
   "=",
   "conf",
   ".",
   "getProfile",
   "(",
   ")",
   ".",
   "isErrorResilientProfile",
   "(",
   ")",
   ";",
   "globalGain",
   "=",
   "_in",
   ".",
   "readBits",
   "(",
   "8",
   ")",
   ";",
   "if",
   "(",
   "!",
   "commonWindow",
   ")",
   "info",
   ".",
   "decode",
   "(",
   "_in",
   ",",
   "conf",
   ",",
   "commonWindow",
   ")",
   ";",
   "decodeSectionData",
   "(",
   "_in",
   ",",
   "conf",
   ".",
   "isSectionDataResilienceUsed",
   "(",
   ")",
   ")",
   ";",
   "//if(conf.isScalefactorResilienceUsed()) rvlc.decode(_in, this, scaleFactors);",
   "/*else*/",
   "decodeScaleFactors",
   "(",
   "_in",
   ")",
   ";",
   "pulseDataPresent",
   "=",
   "_in",
   ".",
   "readBool",
   "(",
   ")",
   ";",
   "if",
   "(",
   "pulseDataPresent",
   ")",
   "{",
   "if",
   "(",
   "info",
   ".",
   "isEightShortFrame",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "AACException",
   "(",
   "\"pulse data not allowed for short frames\"",
   ")",
   ";",
   "Logger",
   ".",
   "debug",
   "(",
   "\"PULSE\"",
   ")",
   ";",
   "decodePulseData",
   "(",
   "_in",
   ")",
   ";",
   "}",
   "tnsDataPresent",
   "=",
   "_in",
   ".",
   "readBool",
   "(",
   ")",
   ";",
   "if",
   "(",
   "tnsDataPresent",
   "&&",
   "!",
   "er",
   ")",
   "{",
   "if",
   "(",
   "tns",
   "==",
   "null",
   ")",
   "tns",
   "=",
   "new",
   "TNS",
   "(",
   ")",
   ";",
   "tns",
   ".",
   "decode",
   "(",
   "_in",
   ",",
   "info",
   ")",
   ";",
   "}",
   "gainControlPresent",
   "=",
   "_in",
   ".",
   "readBool",
   "(",
   ")",
   ";",
   "if",
   "(",
   "gainControlPresent",
   ")",
   "{",
   "if",
   "(",
   "gainControl",
   "==",
   "null",
   ")",
   "gainControl",
   "=",
   "new",
   "GainControl",
   "(",
   "frameLength",
   ")",
   ";",
   "Logger",
   ".",
   "debug",
   "(",
   "\"GAIN\"",
   ")",
   ";",
   "gainControl",
   ".",
   "decode",
   "(",
   "_in",
   ",",
   "info",
   ".",
   "getWindowSequence",
   "(",
   ")",
   ")",
   ";",
   "}",
   "//RVLC spectral data",
   "//if(conf.isScalefactorResilienceUsed()) rvlc.decodeScalefactors(this, _in, scaleFactors);",
   "if",
   "(",
   "conf",
   ".",
   "isSpectralDataResilienceUsed",
   "(",
   ")",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "(",
   "conf",
   ".",
   "getChannelConfiguration",
   "(",
   ")",
   "==",
   "ChannelConfiguration",
   ".",
   "CHANNEL_CONFIG_STEREO",
   ")",
   "?",
   "6144",
   ":",
   "12288",
   ";",
   "reorderedSpectralDataLen",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "_in",
   ".",
   "readBits",
   "(",
   "14",
   ")",
   ",",
   "max",
   ")",
   ";",
   "longestCodewordLen",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "_in",
   ".",
   "readBits",
   "(",
   "6",
   ")",
   ",",
   "49",
   ")",
   ";",
   "//HCR.decodeReorderedSpectralData(this, _in, data, conf.isSectionDataResilienceUsed());",
   "}",
   "else",
   "decodeSpectralData",
   "(",
   "_in",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-388",
  "nl_tokens": [
   "Get",
   "the",
   "list",
   "of",
   "names",
   "to",
   "be",
   "used",
   "for",
   "user",
   "selection",
   ".",
   "The",
   "ith",
   "one",
   "refers",
   "to",
   "the",
   "ith",
   "coordinate",
   "."
  ],
  "pl_tokens": [
   "public",
   "List",
   "<",
   "NamedObject",
   ">",
   "getNames",
   "(",
   ")",
   "{",
   "int",
   "n",
   "=",
   "getDimension",
   "(",
   "0",
   ")",
   ".",
   "getLength",
   "(",
   ")",
   ";",
   "List",
   "<",
   "NamedObject",
   ">",
   "names",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   "n",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "names",
   ".",
   "(",
   "new",
   "ucar",
   ".",
   "nc2",
   ".",
   "util",
   ".",
   "NamedAnything",
   "(",
   "getCoordName",
   "(",
   "i",
   ")",
   ",",
   "getShortName",
   "(",
   ")",
   "+",
   "\" \"",
   "+",
   "getUnitsString",
   "(",
   ")",
   ")",
   ")",
   ";",
   "return",
   "names",
   ";",
   "}",
   "/**\n   * The \"name\" of the ith coordinate. If nominal, this is all there is to a coordinate.\n   * If numeric, this will return a String representation of the coordinate.\n   *\n   * @param index which one ?\n   * @return the ith coordinate value as a String\n   */",
   "public",
   "String",
   "getCoordName",
   "(",
   "int",
   "index",
   ")",
   "{",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isNumeric",
   "(",
   ")",
   ")",
   "return",
   "Format",
   ".",
   "d",
   "(",
   "getCoordValue",
   "(",
   "index",
   ")",
   ",",
   "5",
   ",",
   "8",
   ")",
   ";",
   "else",
   "return",
   "names",
   "[",
   "index",
   "]",
   ";",
   "}",
   "/**\n   * Get the ith coordinate value. This is the value of the coordinate axis at which\n   * the data value is associated. These must be strictly monotonic.\n   *\n   * @param index which coordinate. Between 0 and getNumElements()-1 inclusive.\n   * @return coordinate value.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "getCoordValue",
   "",
   "(",
   "int",
   "index",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValue() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "coords",
   "[",
   "index",
   "]",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "getMinValue",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValue() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "coords",
   "[",
   "0",
   "]",
   ",",
   "coords",
   "[",
   "coords",
   ".",
   "length",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "double",
   "getMaxValue",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValue() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "coords",
   "[",
   "0",
   "]",
   ",",
   "coords",
   "[",
   "coords",
   ".",
   "length",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "public",
   "double",
   "getMinEdgeValue",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "edge",
   "==",
   "null",
   ")",
   "return",
   "getMinValue",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValue() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "min",
   "(",
   "edge",
   "[",
   "0",
   "]",
   ",",
   "edge",
   "[",
   "edge",
   ".",
   "length",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "public",
   "double",
   "getMaxEdgeValue",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "edge",
   "==",
   "null",
   ")",
   "return",
   "getMaxValue",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValue() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "edge",
   "[",
   "0",
   "]",
   ",",
   "edge",
   "[",
   "edge",
   ".",
   "length",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "/**\n   * Get the ith coordinate edge. Exact only if isContiguous() is true, otherwise use getBound1() and getBound2().\n   * This is the value where the underlying grid element switches\n   * from \"belonging to\" coordinate value i-1 to \"belonging to\" coordinate value i.\n   * In some grids, this may not be well defined, and so should be considered an\n   * approximation or a visualization hint.\n   * <p><pre>\n   *  Coordinate edges must be strictly monotonic:\n   *    coordEdge(0) < coordValue(0) < coordEdge(1) < coordValue(1) ...\n   *    ... coordEdge(i) < coordValue(i) < coordEdge(i+1) < coordValue(i+1) ...\n   *    ... coordEdge(n-1) < coordValue(n-1) < coordEdge(n)\n   *  </pre>\n   *\n   * @param index which coordinate. Between 0 and getNumElements() inclusive.\n   * @return coordinate edge.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "getCoordEdge",
   "",
   "(",
   "int",
   "index",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordEdge() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "return",
   "edge",
   "[",
   "index",
   "]",
   ";",
   "}",
   "/**\n   * Get the coordinate values as a double array.\n   *\n   * @return coordinate value.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "[",
   "]",
   "getCoordValues",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordValues() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "return",
   "coords",
   ".",
   "clone",
   "(",
   ")",
   ";",
   "}",
   "/**\n   * Get the coordinate edges as a double array.\n   * Exact only if isContiguous() is true, otherwise use getBound1() and getBound2().\n   *\n   * @return coordinate edges.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "[",
   "]",
   "getCoordEdges",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getCoordEdges() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "return",
   "edge",
   ".",
   "clone",
   "(",
   ")",
   ";",
   "}",
   "@",
   "Override",
   "public",
   "boolean",
   "isContiguous",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "// this sets isContiguous",
   "return",
   "isContiguous",
   ";",
   "}",
   "///////////////////////////////////////////////",
   "/**\n   * If this coordinate has interval values.\n   * If so, then one should use getBound1, getBound2, and not getCoordEdges()\n   *\n   * @return true if coordinate has interval values\n   */",
   "public",
   "boolean",
   "isInterval",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "// this sets isInterval",
   "return",
   "isInterval",
   ";",
   "}",
   "/**\n   * Get the coordinate bound1 as a double array.\n   * bound1[i] # coordValue[i] # bound2[i], where # is < if increasing (bound1[i] < bound1[i+1])\n   * else < if decreasing.\n   *\n   * @return coordinate bound1.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "[",
   "]",
   "getBound1",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getBound1() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "bound1",
   "==",
   "null",
   ")",
   "makeBoundsFromEdges",
   "(",
   ")",
   ";",
   "assert",
   "bound1",
   "!=",
   "null",
   ";",
   "return",
   "bound1",
   ".",
   "clone",
   "(",
   ")",
   ";",
   "}",
   "/**\n   * Get the coordinate bound1 as a double array.\n   * bound1[i] # coordValue[i] # bound2[i],  where # is < if increasing (bound1[i] < bound1[i+1])\n   * else < if decreasing.\n   *\n   * @return coordinate bound2.\n   * @throws UnsupportedOperationException if !isNumeric()\n   */",
   "public",
   "double",
   "[",
   "]",
   "getBound2",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis1D.getBound2() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "if",
   "(",
   "bound2",
   "==",
   "null",
   ")",
   "makeBoundsFromEdges",
   "(",
   ")",
   ";",
   "assert",
   "bound2",
   "!=",
   "null",
   ";",
   "return",
   "bound2",
   ".",
   "clone",
   "(",
   ")",
   ";",
   "}",
   "/**\n   * Get the coordinate bounds for the ith coordinate.\n   * Can use this for isContiguous() true or false.\n   *\n   * @param i coordinate index\n   * @return double[2] edges for ith coordinate\n   */",
   "public",
   "double",
   "[",
   "]",
   "getCoordBounds",
   "",
   "(",
   "int",
   "i",
   ")",
   "{",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "double",
   "[",
   "]",
   "e",
   "=",
   "new",
   "double",
   "[",
   "2",
   "]",
   ";",
   "if",
   "(",
   "isContiguous",
   "(",
   ")",
   ")",
   "{",
   "e",
   "[",
   "0",
   "]",
   "=",
   "getCoordEdge",
   "(",
   "i",
   ")",
   ";",
   "e",
   "[",
   "1",
   "]",
   "=",
   "getCoordEdge",
   "(",
   "i",
   "+",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "e",
   "[",
   "0",
   "]",
   "=",
   "bound1",
   "[",
   "i",
   "]",
   ";",
   "e",
   "[",
   "1",
   "]",
   "=",
   "bound2",
   "[",
   "i",
   "]",
   ";",
   "}",
   "return",
   "e",
   ";",
   "}",
   "public",
   "double",
   "getCoordBoundsMidpoint",
   "",
   "(",
   "int",
   "i",
   ")",
   "{",
   "double",
   "[",
   "]",
   "bounds",
   "=",
   "getCoordBounds",
   "(",
   "i",
   ")",
   ";",
   "return",
   "(",
   "bounds",
   "[",
   "0",
   "]",
   "+",
   "bounds",
   "[",
   "1",
   "]",
   ")",
   "/",
   "2",
   ";",
   "}",
   "/**\n   * Given a coordinate value, find what grid element contains it.\n   * This means that\n   * <pre>\n   * edge[i] <= value < edge[i+1] (if values are ascending)\n   * edge[i] > value >= edge[i+1] (if values are descending)\n   * </pre>\n   *\n   * @param coordVal position in this coordinate system\n   * @return index of grid point containing it, or -1 if outside grid area\n   */",
   "public",
   "int",
   "findCoordElement",
   "",
   "(",
   "double",
   "coordVal",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis.findCoordElement() on non-numeric\"",
   ")",
   ";",
   "if",
   "(",
   "isRegular",
   "(",
   ")",
   ")",
   "return",
   "findCoordElementRegular",
   "(",
   "coordVal",
   ",",
   "false",
   ")",
   ";",
   "if",
   "(",
   "isContiguous",
   "(",
   ")",
   ")",
   "return",
   "findCoordElementIrregular",
   "(",
   "coordVal",
   ",",
   "false",
   ")",
   ";",
   "else",
   "return",
   "findCoordElementNonContiguous",
   "(",
   "coordVal",
   ",",
   "false",
   ")",
   ";",
   "}",
   "/**\n   * Given a coordinate position, find what grid element contains it, or is closest to it.\n   *\n   * @param coordVal position in this coordinate system\n   * @return index of grid point containing it, or best estimate of closest grid interval.\n   */",
   "public",
   "int",
   "findCoordElementBounded",
   "",
   "(",
   "double",
   "coordVal",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"CoordinateAxis.findCoordElementBounded() on non-numeric\"",
   ")",
   ";",
   "// the scalar or len-1 case:",
   "if",
   "(",
   "this",
   ".",
   "getSize",
   "(",
   ")",
   "==",
   "1",
   ")",
   "return",
   "0",
   ";",
   "if",
   "(",
   "isRegular",
   "(",
   ")",
   ")",
   "return",
   "findCoordElementRegular",
   "(",
   "coordVal",
   ",",
   "true",
   ")",
   ";",
   "if",
   "(",
   "isContiguous",
   "(",
   ")",
   ")",
   "return",
   "findCoordElementIrregular",
   "(",
   "coordVal",
   ",",
   "true",
   ")",
   ";",
   "else",
   "return",
   "findCoordElementNonContiguous",
   "(",
   "coordVal",
   ",",
   "true",
   ")",
   ";",
   "}",
   "/**\n   * @deprecated use findCoordElement(coordVal)\n   */",
   "public",
   "int",
   "findCoordElement",
   "",
   "(",
   "double",
   "coordVal",
   ",",
   "int",
   "lastIndex",
   ")",
   "{",
   "return",
   "findCoordElement",
   "(",
   "coordVal",
   ")",
   ";",
   "}",
   "//////////////////////////////////////////////////////////////////",
   "// following is from Jon Blower's ncWMS",
   "// faster routines for coordValue -> index search",
   "// significantly modified",
   "/**\n   * Optimize the regular case\n   * Gets the index of the given point. Uses index = (value - start) / stride,\n   * hence this is faster than an exhaustive search.\n   * from jon blower's ncWMS.\n   *\n   * @param coordValue The value along this coordinate axis\n   * @param bounded    if false and not in range, return -1, else nearest index\n   * @return the index that is nearest to this point, or -1 if the point is\n   * out of range for the axis\n   */",
   "private",
   "int",
   "findCoordElementRegular",
   "",
   "(",
   "double",
   "coordValue",
   ",",
   "boolean",
   "bounded",
   ")",
   "{",
   "int",
   "n",
   "=",
   "(",
   "int",
   ")",
   "this",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "// the scalar or len-1 case:",
   "if",
   "(",
   "this",
   ".",
   "getSize",
   "(",
   ")",
   "==",
   "1",
   ")",
   "{",
   "return",
   "0",
   ";",
   "}",
   "/*  if (axisType == AxisType.Lon) {\n      double maxValue = this.start + this.increment * n;\n      if (betweenLon(coordValue, this.start, maxValue)) {\n        double distance = LatLonPointImpl.getClockwiseDistanceTo(this.start, coordValue);\n        double exactNumSteps = distance / this.increment;\n        // This axis might wrap, so we make sure that the returned index is within range\n        return ((int) Math.round(exactNumSteps)) % (int) this.getSize();\n\n      } else if (coordValue < this.start) {\n        return bounded ? 0 : -1;\n      } else {\n        return bounded ? n - 1 : -1;\n      }\n    } */",
   "double",
   "distance",
   "=",
   "coordValue",
   "-",
   "this",
   ".",
   "start",
   ";",
   "double",
   "exactNumSteps",
   "=",
   "distance",
   "/",
   "this",
   ".",
   "increment",
   ";",
   "int",
   "index",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "round",
   "(",
   "exactNumSteps",
   ")",
   ";",
   "if",
   "(",
   "index",
   "<",
   "0",
   ")",
   "return",
   "bounded",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "else",
   "if",
   "(",
   "index",
   ">=",
   "n",
   ")",
   "return",
   "bounded",
   "?",
   "n",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "return",
   "index",
   ";",
   "}",
   "private",
   "boolean",
   "betweenLon",
   "",
   "(",
   "double",
   "lon",
   ",",
   "double",
   "lonBeg",
   ",",
   "double",
   "lonEnd",
   ")",
   "{",
   "while",
   "(",
   "lon",
   "<",
   "lonBeg",
   ")",
   "lon",
   "+=",
   "360",
   ";",
   "return",
   "(",
   "lon",
   ">=",
   "lonBeg",
   ")",
   "&&",
   "(",
   "lon",
   "<=",
   "lonEnd",
   ")",
   ";",
   "}",
   "/**\n   * Performs a binary search to find the index of the element of the array\n   * whose value is contained in the interval, so must be contiguous.\n   *\n   * @param target  The value to search for\n   * @param bounded if false, and not in range, return -1, else nearest index\n   * @return the index of the element in values whose value is closest to target,\n   * or -1 if the target is out of range\n   */",
   "private",
   "int",
   "findCoordElementIrregular",
   "",
   "(",
   "double",
   "target",
   ",",
   "boolean",
   "bounded",
   ")",
   "{",
   "int",
   "n",
   "=",
   "(",
   "int",
   ")",
   "this",
   ".",
   "getSize",
   "(",
   ")",
   ";",
   "int",
   "low",
   "=",
   "0",
   ";",
   "int",
   "high",
   "=",
   "n",
   ";",
   "if",
   "(",
   "isAscending",
   ")",
   "{",
   "// Check that the point is within range",
   "if",
   "(",
   "target",
   "<",
   "this",
   ".",
   "edge",
   "[",
   "low",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "else",
   "if",
   "(",
   "target",
   ">",
   "this",
   ".",
   "edge",
   "[",
   "high",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "n",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "// do a binary search to find the nearest index",
   "int",
   "mid",
   "=",
   "low",
   ";",
   "while",
   "(",
   "high",
   ">",
   "low",
   "+",
   "1",
   ")",
   "{",
   "mid",
   "=",
   "(",
   "low",
   "+",
   "high",
   ")",
   "/",
   "2",
   ";",
   "double",
   "midVal",
   "=",
   "this",
   ".",
   "edge",
   "[",
   "mid",
   "]",
   ";",
   "if",
   "(",
   "midVal",
   "==",
   "target",
   ")",
   "return",
   "mid",
   ";",
   "else",
   "if",
   "(",
   "midVal",
   "<",
   "target",
   ")",
   "low",
   "=",
   "mid",
   ";",
   "else",
   "high",
   "=",
   "mid",
   ";",
   "}",
   "return",
   "low",
   ";",
   "}",
   "else",
   "{",
   "// Check that the point is within range",
   "if",
   "(",
   "target",
   ">",
   "this",
   ".",
   "edge",
   "[",
   "low",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "else",
   "if",
   "(",
   "target",
   "<",
   "this",
   ".",
   "edge",
   "[",
   "high",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "n",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "// do a binary search to find the nearest index",
   "int",
   "mid",
   "=",
   "low",
   ";",
   "while",
   "(",
   "high",
   ">",
   "low",
   "+",
   "1",
   ")",
   "{",
   "mid",
   "=",
   "(",
   "low",
   "+",
   "high",
   ")",
   "/",
   "2",
   ";",
   "double",
   "midVal",
   "=",
   "this",
   ".",
   "edge",
   "[",
   "mid",
   "]",
   ";",
   "if",
   "(",
   "midVal",
   "==",
   "target",
   ")",
   "return",
   "mid",
   ";",
   "else",
   "if",
   "(",
   "midVal",
   "<",
   "target",
   ")",
   "high",
   "=",
   "mid",
   ";",
   "else",
   "low",
   "=",
   "mid",
   ";",
   "}",
   "return",
   "high",
   "-",
   "1",
   ";",
   "}",
   "}",
   "/**\n   * Given a coordinate position, find what grid element contains it.\n   * Only use if isContiguous() == false\n   * This algorithm does a linear search in the bound1[] amd bound2[] array.\n   * <p>\n   * This means that\n   * <pre>\n   * edge[i] <= pos < edge[i+1] (if values are ascending)\n   * edge[i] > pos >= edge[i+1] (if values are descending)\n   * </pre>\n   *\n   * @param target  The value to search for\n   * @param bounded if false, and not in range, return -1, else nearest index\n   * @return the index of the element in values whose value is closest to target,\n   * or -1 if the target is out of range\n   */",
   "private",
   "int",
   "findCoordElementNonContiguous",
   "",
   "(",
   "double",
   "target",
   ",",
   "boolean",
   "bounded",
   ")",
   "{",
   "double",
   "[",
   "]",
   "bounds1",
   "=",
   "getBound1",
   "(",
   ")",
   ";",
   "double",
   "[",
   "]",
   "bounds2",
   "=",
   "getBound2",
   "(",
   ")",
   ";",
   "int",
   "n",
   "=",
   "bounds1",
   ".",
   "length",
   ";",
   "if",
   "(",
   "isAscending",
   ")",
   "{",
   "// Check that the point is within range",
   "if",
   "(",
   "target",
   "<",
   "bounds1",
   "[",
   "0",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "else",
   "if",
   "(",
   "target",
   ">",
   "bounds2",
   "[",
   "n",
   "-",
   "1",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "n",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "int",
   "[",
   "]",
   "idx",
   "=",
   "findSingleHit",
   "(",
   "bounds1",
   ",",
   "bounds2",
   ",",
   "target",
   ")",
   ";",
   "if",
   "(",
   "idx",
   "[",
   "0",
   "]",
   "==",
   "0",
   "&&",
   "!",
   "bounded",
   ")",
   "return",
   "-",
   "1",
   ";",
   "// no hits",
   "if",
   "(",
   "idx",
   "[",
   "0",
   "]",
   "==",
   "1",
   ")",
   "return",
   "idx",
   "[",
   "1",
   "]",
   ";",
   "// one hit",
   "// multiple hits = choose closest to the midpoint i guess",
   "return",
   "findClosest",
   "(",
   "coords",
   ",",
   "target",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// Check that the point is within range",
   "if",
   "(",
   "target",
   ">",
   "bounds1",
   "[",
   "0",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "0",
   ":",
   "-",
   "1",
   ";",
   "else",
   "if",
   "(",
   "target",
   "<",
   "bounds2",
   "[",
   "n",
   "-",
   "1",
   "]",
   ")",
   "return",
   "bounded",
   "?",
   "n",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "int",
   "[",
   "]",
   "idx",
   "=",
   "findSingleHit",
   "(",
   "bounds2",
   ",",
   "bounds1",
   ",",
   "target",
   ")",
   ";",
   "if",
   "(",
   "idx",
   "[",
   "0",
   "]",
   "==",
   "0",
   "&&",
   "!",
   "bounded",
   ")",
   "return",
   "-",
   "1",
   ";",
   "// no hits",
   "if",
   "(",
   "idx",
   "[",
   "0",
   "]",
   "==",
   "1",
   ")",
   "return",
   "idx",
   "[",
   "1",
   "]",
   ";",
   "// multiple hits = choose closest to the midpoint i guess",
   "return",
   "findClosest",
   "(",
   "getCoordValues",
   "(",
   ")",
   ",",
   "target",
   ")",
   ";",
   "}",
   "}",
   "// return index if only one match, else -1",
   "private",
   "int",
   "[",
   "]",
   "findSingleHit",
   "",
   "(",
   "double",
   "[",
   "]",
   "low",
   ",",
   "double",
   "[",
   "]",
   "high",
   ",",
   "double",
   "target",
   ")",
   "{",
   "int",
   "hits",
   "=",
   "0",
   ";",
   "int",
   "idxFound",
   "=",
   "-",
   "1",
   ";",
   "int",
   "n",
   "=",
   "low",
   ".",
   "length",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "(",
   "low",
   "[",
   "i",
   "]",
   "<=",
   "target",
   ")",
   "&&",
   "(",
   "target",
   "<=",
   "high",
   "[",
   "i",
   "]",
   ")",
   ")",
   "{",
   "hits",
   "++",
   ";",
   "idxFound",
   "=",
   "i",
   ";",
   "}",
   "}",
   "return",
   "new",
   "int",
   "[",
   "]",
   "{",
   "hits",
   ",",
   "idxFound",
   "}",
   ";",
   "}",
   "// return index of closest value to target",
   "private",
   "int",
   "findClosest",
   "",
   "(",
   "double",
   "[",
   "]",
   "values",
   ",",
   "double",
   "target",
   ")",
   "{",
   "double",
   "minDiff",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "int",
   "idxFound",
   "=",
   "-",
   "1",
   ";",
   "int",
   "n",
   "=",
   "values",
   ".",
   "length",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "double",
   "diff",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "values",
   "[",
   "i",
   "]",
   "-",
   "target",
   ")",
   ";",
   "if",
   "(",
   "diff",
   "<",
   "minDiff",
   ")",
   "{",
   "minDiff",
   "=",
   "diff",
   ";",
   "idxFound",
   "=",
   "i",
   ";",
   "}",
   "}",
   "return",
   "idxFound",
   ";",
   "}",
   "///////////////////////////////////////////////////////////////////////////////",
   "// check if Regular",
   "/**\n   * Get starting value if isRegular()\n   *\n   * @return starting value if isRegular()\n   */",
   "public",
   "double",
   "getStart",
   "",
   "(",
   ")",
   "{",
   "calcIsRegular",
   "(",
   ")",
   ";",
   "return",
   "start",
   ";",
   "}",
   "/**\n   * Get increment value if isRegular()\n   *\n   * @return increment value if isRegular()\n   */",
   "public",
   "double",
   "getIncrement",
   "",
   "(",
   ")",
   "{",
   "calcIsRegular",
   "(",
   ")",
   ";",
   "return",
   "increment",
   ";",
   "}",
   "/**\n   * If true, then value(i) = <i>getStart()</i> + i * <i>getIncrement()</i>.\n   *\n   * @return if evenly spaced.\n   */",
   "public",
   "boolean",
   "isRegular",
   "",
   "(",
   ")",
   "{",
   "calcIsRegular",
   "(",
   ")",
   ";",
   "return",
   "isRegular",
   ";",
   "}",
   "private",
   "void",
   "calcIsRegular",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "wasCalcRegular",
   ")",
   "return",
   ";",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isNumeric",
   "(",
   ")",
   ")",
   "isRegular",
   "=",
   "false",
   ";",
   "else",
   "if",
   "(",
   "getSize",
   "(",
   ")",
   "<",
   "2",
   ")",
   "isRegular",
   "=",
   "true",
   ";",
   "else",
   "{",
   "start",
   "=",
   "getCoordValue",
   "(",
   "0",
   ")",
   ";",
   "int",
   "n",
   "=",
   "(",
   "int",
   ")",
   "getSize",
   "(",
   ")",
   ";",
   "increment",
   "=",
   "(",
   "getCoordValue",
   "(",
   "n",
   "-",
   "1",
   ")",
   "-",
   "getCoordValue",
   "(",
   "0",
   ")",
   ")",
   "/",
   "(",
   "n",
   "-",
   "1",
   ")",
   ";",
   "isRegular",
   "=",
   "true",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "getSize",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "if",
   "(",
   "!",
   "ucar",
   ".",
   "nc2",
   ".",
   "util",
   ".",
   "Misc",
   ".",
   "nearlyEquals",
   "(",
   "getCoordValue",
   "(",
   "i",
   ")",
   "-",
   "getCoordValue",
   "(",
   "i",
   "-",
   "1",
   ")",
   ",",
   "increment",
   ",",
   "5.0e-3",
   ")",
   ")",
   "{",
   "isRegular",
   "=",
   "false",
   ";",
   "break",
   ";",
   "}",
   "}",
   "wasCalcRegular",
   "=",
   "true",
   ";",
   "}",
   "///////////////////////////////////////////////////////////////////////////////",
   "private",
   "void",
   "doRead",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "isNumeric",
   "(",
   ")",
   ")",
   "{",
   "readValues",
   "(",
   ")",
   ";",
   "wasRead",
   "=",
   "true",
   ";",
   "if",
   "(",
   "getSize",
   "(",
   ")",
   "<",
   "2",
   ")",
   "isAscending",
   "=",
   "true",
   ";",
   "else",
   "isAscending",
   "=",
   "getCoordValue",
   "(",
   "0",
   ")",
   "<",
   "getCoordValue",
   "(",
   "1",
   ")",
   ";",
   "//  calcIsRegular(); */",
   "}",
   "else",
   "if",
   "(",
   "getDataType",
   "(",
   ")",
   "==",
   "DataType",
   ".",
   "STRING",
   ")",
   "{",
   "readStringValues",
   "(",
   ")",
   ";",
   "wasRead",
   "=",
   "true",
   ";",
   "}",
   "else",
   "{",
   "readCharValues",
   "(",
   ")",
   ";",
   "wasRead",
   "=",
   "true",
   ";",
   "}",
   "}",
   "// turns longitude coordinate into monotonic, dealing with possible wrap.",
   "public",
   "void",
   "correctLongitudeWrap",
   "",
   "(",
   ")",
   "{",
   "// correct non-monotonic longitude coords",
   "if",
   "(",
   "axisType",
   "!=",
   "AxisType",
   ".",
   "Lon",
   ")",
   "{",
   "return",
   ";",
   "}",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "wasBoundsDone",
   ")",
   "makeBounds",
   "(",
   ")",
   ";",
   "boolean",
   "monotonic",
   "=",
   "true",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "coords",
   ".",
   "length",
   "-",
   "1",
   ";",
   "i",
   "++",
   ")",
   "monotonic",
   "&=",
   "isAscending",
   "?",
   "coords",
   "[",
   "i",
   "]",
   "<",
   "coords",
   "[",
   "i",
   "+",
   "1",
   "]",
   ":",
   "coords",
   "[",
   "i",
   "]",
   ">",
   "coords",
   "[",
   "i",
   "+",
   "1",
   "]",
   ";",
   "if",
   "(",
   "!",
   "monotonic",
   ")",
   "{",
   "boolean",
   "cross",
   "=",
   "false",
   ";",
   "if",
   "(",
   "isAscending",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "coords",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "cross",
   ")",
   "coords",
   "[",
   "i",
   "]",
   "+=",
   "360",
   ";",
   "if",
   "(",
   "!",
   "cross",
   "&&",
   "(",
   "i",
   "<",
   "coords",
   ".",
   "length",
   "-",
   "1",
   ")",
   "&&",
   "(",
   "coords",
   "[",
   "i",
   "]",
   ">",
   "coords",
   "[",
   "i",
   "+",
   "1",
   "]",
   ")",
   ")",
   "cross",
   "=",
   "true",
   ";",
   "}",
   "}",
   "else",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "coords",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "cross",
   ")",
   "coords",
   "[",
   "i",
   "]",
   "-=",
   "360",
   ";",
   "if",
   "(",
   "!",
   "cross",
   "&&",
   "(",
   "i",
   "<",
   "coords",
   ".",
   "length",
   "-",
   "1",
   ")",
   "&&",
   "(",
   "coords",
   "[",
   "i",
   "]",
   "<",
   "coords",
   "[",
   "i",
   "+",
   "1",
   "]",
   ")",
   ")",
   "cross",
   "=",
   "true",
   ";",
   "}",
   "}",
   "// LOOK - need to make sure we get stuff from the cache",
   "Array",
   "cachedData",
   "=",
   "Array",
   ".",
   "factory",
   "(",
   "DataType",
   ".",
   "DOUBLE",
   ",",
   "getShape",
   "(",
   ")",
   ",",
   "coords",
   ")",
   ";",
   "if",
   "(",
   "getDataType",
   "(",
   ")",
   "!=",
   "DataType",
   ".",
   "DOUBLE",
   ")",
   "cachedData",
   "=",
   "MAMath",
   ".",
   "convert",
   "(",
   "cachedData",
   ",",
   "getDataType",
   "(",
   ")",
   ")",
   ";",
   "setCachedData",
   "(",
   "cachedData",
   ")",
   ";",
   "if",
   "(",
   "!",
   "isInterval",
   ")",
   "{",
   "makeEdges",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   "// only used if String",
   "private",
   "void",
   "readStringValues",
   "",
   "(",
   ")",
   "{",
   "int",
   "count",
   "=",
   "0",
   ";",
   "Array",
   "data",
   ";",
   "try",
   "{",
   "data",
   "=",
   "read",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "ioe",
   ")",
   "{",
   "log",
   ".",
   "error",
   "(",
   "\"Error reading string coordinate values \"",
   ",",
   "ioe",
   ")",
   ";",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "ioe",
   ")",
   ";",
   "}",
   "names",
   "=",
   "new",
   "String",
   "[",
   "(",
   "int",
   ")",
   "data",
   ".",
   "getSize",
   "(",
   ")",
   "]",
   ";",
   "IndexIterator",
   "ii",
   "=",
   "data",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "ii",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "names",
   "[",
   "count",
   "++",
   "]",
   "=",
   "(",
   "String",
   ")",
   "ii",
   ".",
   "getObjectNext",
   "(",
   ")",
   ";",
   "}",
   "private",
   "void",
   "readCharValues",
   "",
   "(",
   ")",
   "{",
   "int",
   "count",
   "=",
   "0",
   ";",
   "ArrayChar",
   "data",
   ";",
   "try",
   "{",
   "data",
   "=",
   "(",
   "ArrayChar",
   ")",
   "read",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "ioe",
   ")",
   "{",
   "log",
   ".",
   "error",
   "(",
   "\"Error reading char coordinate values \"",
   ",",
   "ioe",
   ")",
   ";",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "ioe",
   ")",
   ";",
   "}",
   "ArrayChar",
   ".",
   "StringIterator",
   "iter",
   "=",
   "data",
   ".",
   "getStringIterator",
   "(",
   ")",
   ";",
   "names",
   "=",
   "new",
   "String",
   "[",
   "iter",
   ".",
   "getNumElems",
   "(",
   ")",
   "]",
   ";",
   "while",
   "(",
   "iter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "names",
   "[",
   "count",
   "++",
   "]",
   "=",
   "iter",
   ".",
   "next",
   "(",
   ")",
   ";",
   "}",
   "private",
   "void",
   "readValues",
   "",
   "(",
   ")",
   "{",
   "Array",
   "data",
   ";",
   "try",
   "{",
   "// setUseNaNs(false); // missing values not allowed LOOK not true for point data !!",
   "data",
   "=",
   "read",
   "(",
   ")",
   ";",
   "// if (!hasCachedData()) setCachedData(data, false); //cache data for subsequent reading",
   "}",
   "catch",
   "(",
   "IOException",
   "ioe",
   ")",
   "{",
   "log",
   ".",
   "error",
   "(",
   "\"Error reading coordinate values \"",
   ",",
   "ioe",
   ")",
   ";",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "ioe",
   ")",
   ";",
   "}",
   "coords",
   "=",
   "(",
   "double",
   "[",
   "]",
   ")",
   "data",
   ".",
   "get1DJavaArray",
   "(",
   "DataType",
   ".",
   "DOUBLE",
   ")",
   ";",
   "//IndexIterator iter = data.getIndexIterator();",
   "//while (iter.hasNext())",
   "//  coords[count++] = iter.getDoubleNext();",
   "}",
   "/**\n   * Calculate bounds, set isInterval, isContiguous\n   */",
   "private",
   "void",
   "makeBounds",
   "",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "wasRead",
   ")",
   "doRead",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isNumeric",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "!",
   "makeBoundsFromAux",
   "(",
   ")",
   ")",
   "{",
   "makeEdges",
   "(",
   ")",
   ";",
   "}",
   "}",
   "wasBoundsDone",
   "=",
   "true",
   ";",
   "}",
   "private",
   "boolean",
   "makeBoundsFromAux",
   "",
   "(",
   ")",
   "{",
   "Attribute",
   "boundsAtt",
   "=",
   "findAttributeIgnoreCase",
   "(",
   "CF",
   ".",
   "BOUNDS",
   ")",
   ";",
   "if",
   "(",
   "(",
   "null",
   "==",
   "boundsAtt",
   ")",
   "||",
   "!",
   "boundsAtt",
   ".",
   "isString",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "String",
   "boundsVarName",
   "=",
   "boundsAtt",
   ".",
   "getStringValue",
   "(",
   ")",
   ";",
   "VariableDS",
   "boundsVar",
   "=",
   "(",
   "VariableDS",
   ")",
   "ncd",
   ".",
   "findVariable",
   "(",
   "getParentGroup",
   "(",
   ")",
   ",",
   "boundsVarName",
   ")",
   ";",
   "if",
   "(",
   "null",
   "==",
   "boundsVar",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "2",
   "!=",
   "boundsVar",
   ".",
   "getRank",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "getDimension",
   "(",
   "0",
   ")",
   "!=",
   "boundsVar",
   ".",
   "getDimension",
   "(",
   "0",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "2",
   "!=",
   "boundsVar",
   ".",
   "getDimension",
   "(",
   "1",
   ")",
   ".",
   "getLength",
   "(",
   ")",
   ")",
   "return",
   "false",
   ";",
   "Array",
   "data",
   ";",
   "try",
   "{",
   "boundsVar",
   ".",
   "removeEnhancement",
   "(",
   "NetcdfDataset",
   ".",
   "Enhance",
   ".",
   "ConvertMissing",
   ")",
   ";",
   "// Don't convert missing values to NaN.",
   "data",
   "=",
   "boundsVar",
   ".",
   "read",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "log",
   ".",
   "warn",
   "(",
   "\"CoordinateAxis1D.hasBounds read failed \"",
   ",",
   "e",
   ")",
   ";",
   "return",
   "false",
   ";",
   "}",
   "assert",
   "(",
   "data",
   ".",
   "getRank",
   "(",
   ")",
   "==",
   "2",
   ")",
   "&&",
   "(",
   "data",
   ".",
   "getShape",
   "(",
   ")",
   "[",
   "1",
   "]",
   "==",
   "2",
   ")",
   ":",
   "\"incorrect shape data for variable \"",
   "+",
   "boundsVar",
   ";",
   "// extract the bounds",
   "int",
   "n",
   "=",
   "shape",
   "[",
   "0",
   "]",
   ";",
   "double",
   "[",
   "]",
   "value1",
   "=",
   "new",
   "double",
   "[",
   "n",
   "]",
   ";",
   "double",
   "[",
   "]",
   "value2",
   "=",
   "new",
   "double",
   "[",
   "n",
   "]",
   ";",
   "Index",
   "ima",
   "=",
   "data",
   ".",
   "getIndex",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ima",
   ".",
   "set0",
   "(",
   "i",
   ")",
   ";",
   "value1",
   "[",
   "i",
   "]",
   "=",
   "data",
   ".",
   "getDouble",
   "(",
   "ima",
   ".",
   "set1",
   "(",
   "0",
   ")",
   ")",
   ";",
   "value2",
   "[",
   "i",
   "]",
   "=",
   "data",
   ".",
   "getDouble",
   "(",
   "ima",
   ".",
   "set1",
   "(",
   "1",
   ")",
   ")",
   ";",
   "}",
   "/* flip if needed\n    boolean firstLower = true; // in the first interval, is lower < upper ?\n    for (int i = 0; i < value1.length; i++) {\n      if (Misc.nearlyEquals(value1[i], value2[i])) continue; // skip when lower == upper\n      firstLower = value1[i] < value2[i];\n      break;\n    }\n    // check first against last : lower, unless all lower equal then upper\n    boolean goesUp = (n < 2) || value1[n - 1] > value1[0] || (Misc.nearlyEquals(value1[n - 1], value2[0]) && value2[n - 1] > value2[0]);\n    if (goesUp != firstLower) {\n      double[] temp = value1;\n      value1 = value2;\n      value2 = temp;\n    } */",
   "// decide if they are contiguous",
   "boolean",
   "contig",
   "=",
   "true",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "n",
   "-",
   "1",
   ";",
   "i",
   "++",
   ")",
   "{",
   "if",
   "(",
   "!",
   "ucar",
   ".",
   "nc2",
   ".",
   "util",
   ".",
   "Misc",
   ".",
   "nearlyEquals",
   "(",
   "value1",
   "[",
   "i",
   "+",
   "1",
   "]",
   ",",
   "value2",
   "[",
   "i",
   "]",
   ")",
   ")",
   "contig",
   "=",
   "false",
   ";",
   "}",
   "if",
   "(",
   "contig",
   ")",
   "{",
   "edge",
   "=",
   "new",
   "double",
   "[",
   "n",
   "+",
   "1",
   "]",
   ";",
   "edge",
   "[",
   "0",
   "]",
   "=",
   "value1",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "n",
   "+",
   "1",
   ";",
   "i",
   "++",
   ")",
   "edge",
   "[",
   "i",
   "]",
   "=",
   "value2",
   "[",
   "i",
   "-",
   "1",
   "]",
   ";",
   "}",
   "else",
   "{",
   "// what does edge mean when not contiguous ??",
   "edge",
   "=",
   "new",
   "double",
   "[",
   "n",
   "+",
   "1",
   "]",
   ";",
   "edge",
   "[",
   "0",
   "]",
   "=",
   "value1",
   "[",
   "0",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "edge",
   "[",
   "i",
   "]",
   "=",
   "(",
   "value1",
   "[",
   "i",
   "]",
   "+",
   "value2",
   "[",
   "i",
   "-",
   "1",
   "]",
   ")",
   "/",
   "2",
   ";",
   "edge",
   "[",
   "n",
   "]",
   "=",
   "value2",
   "[",
   "n",
   "-",
   "1",
   "]",
   ";",
   "isContiguous",
   "=",
   "false",
   ";",
   "}",
   "bound1",
   "=",
   "value1",
   ";",
   "bound2",
   "=",
   "value2",
   ";",
   "isInterval",
   "=",
   "true",
   ";",
   "return",
   "true",
   ";",
   "}",
   "private",
   "void",
   "makeEdges",
   "",
   "(",
   ")",
   "{",
   "int",
   "size",
   "=",
   "(",
   "int",
   ")",
   "getSize",
   "(",
   ")",
   ";",
   "edge",
   "=",
   "new",
   "double",
   "[",
   "size",
   "+",
   "1",
   "]",
   ";",
   "if",
   "(",
   "size",
   "<",
   "1",
   ")",
   "return",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "edge",
   "[",
   "i",
   "]",
   "=",
   "(",
   "coords",
   "[",
   "i",
   "-",
   "1",
   "]",
   "+",
   "coords",
   "[",
   "i",
   "]",
   ")",
   "/",
   "2",
   ";",
   "edge",
   "[",
   "0",
   "]",
   "=",
   "coords",
   "[",
   "0",
   "]",
   "-",
   "(",
   "edge",
   "[",
   "1",
   "]",
   "-",
   "coords",
   "[",
   "0",
   "]",
   ")",
   ";",
   "edge",
   "[",
   "size",
   "]",
   "=",
   "coords",
   "[",
   "size",
   "-",
   "1",
   "]",
   "+",
   "(",
   "coords",
   "[",
   "size",
   "-",
   "1",
   "]",
   "-",
   "edge",
   "[",
   "size",
   "-",
   "1",
   "]",
   ")",
   ";",
   "isContiguous",
   "=",
   "true",
   ";",
   "}",
   "private",
   "void",
   "makeBoundsFromEdges",
   "",
   "(",
   ")",
   "{",
   "int",
   "size",
   "=",
   "(",
   "int",
   ")",
   "getSize",
   "(",
   ")",
   ";",
   "if",
   "(",
   "size",
   "==",
   "0",
   ")",
   "return",
   ";",
   "bound1",
   "=",
   "new",
   "double",
   "[",
   "size",
   "]",
   ";",
   "bound2",
   "=",
   "new",
   "double",
   "[",
   "size",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "size",
   ";",
   "i",
   "++",
   ")",
   "{",
   "bound1",
   "[",
   "i",
   "]",
   "=",
   "edge",
   "[",
   "i",
   "]",
   ";",
   "bound2",
   "[",
   "i",
   "]",
   "=",
   "edge",
   "[",
   "i",
   "+",
   "1",
   "]",
   ";",
   "}",
   "// flip if needed",
   "if",
   "(",
   "bound1",
   "[",
   "0",
   "]",
   ">",
   "bound2",
   "[",
   "0",
   "]",
   ")",
   "{",
   "double",
   "[",
   "]",
   "temp",
   "=",
   "bound1",
   ";",
   "bound1",
   "=",
   "bound2",
   ";",
   "bound2",
   "=",
   "temp",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-389",
  "nl_tokens": [
   "Setup",
   "the",
   "base",
   "matrix",
   "so",
   "that",
   "the",
   "image",
   "is",
   "centered",
   "and",
   "scaled",
   "properly",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "getProperBaseMatrix",
   "(",
   "RotateBitmap",
   "bitmap",
   ",",
   "Matrix",
   "matrix",
   ")",
   "{",
   "float",
   "viewWidth",
   "=",
   "getWidth",
   "(",
   ")",
   ";",
   "float",
   "viewHeight",
   "=",
   "getHeight",
   "(",
   ")",
   ";",
   "float",
   "w",
   "=",
   "bitmap",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "float",
   "h",
   "=",
   "bitmap",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "matrix",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "// We limit up-scaling to 2x otherwise the result may look bad if it's",
   "// a small icon.",
   "float",
   "widthScale",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "viewWidth",
   "/",
   "w",
   ",",
   "2.0f",
   ")",
   ";",
   "float",
   "heightScale",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "viewHeight",
   "/",
   "h",
   ",",
   "2.0f",
   ")",
   ";",
   "float",
   "scale",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "widthScale",
   ",",
   "heightScale",
   ")",
   ";",
   "matrix",
   ".",
   "postConcat",
   "(",
   "bitmap",
   ".",
   "getRotateMatrix",
   "(",
   ")",
   ")",
   ";",
   "matrix",
   ".",
   "postScale",
   "(",
   "scale",
   ",",
   "scale",
   ")",
   ";",
   "matrix",
   ".",
   "postTranslate",
   "(",
   "(",
   "viewWidth",
   "-",
   "w",
   "*",
   "scale",
   ")",
   "/",
   "2F",
   ",",
   "(",
   "viewHeight",
   "-",
   "h",
   "*",
   "scale",
   ")",
   "/",
   "2F",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-390",
  "nl_tokens": [
   "Find",
   "min",
   "and",
   "max",
   "value",
   "in",
   "this",
   "array",
   "getting",
   "values",
   "as",
   "doubles",
   ".",
   "Skip",
   "Double",
   ".",
   "NaN",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "MAMath",
   ".",
   "MinMax",
   "getMinMax",
   "(",
   "Array",
   "a",
   ")",
   "{",
   "IndexIterator",
   "iter",
   "=",
   "a",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "double",
   "<mask>",
   "=",
   "-",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "double",
   "min",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "while",
   "(",
   "iter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "double",
   "val",
   "=",
   "iter",
   ".",
   "getDoubleNext",
   "(",
   ")",
   ";",
   "if",
   "(",
   "Double",
   ".",
   "isNaN",
   "(",
   "val",
   ")",
   ")",
   "continue",
   ";",
   "if",
   "(",
   "val",
   ">",
   "max",
   ")",
   "max",
   "=",
   "val",
   ";",
   "if",
   "(",
   "val",
   "<",
   "min",
   ")",
   "min",
   "=",
   "val",
   ";",
   "}",
   "return",
   "new",
   "MinMax",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-391",
  "nl_tokens": [
   "Copies",
   "code",
   "from",
   "the",
   "specified",
   "code",
   "buffer",
   "into",
   "the",
   "internal",
   "one",
   "resizing",
   "the",
   "internal",
   "code",
   "buffer",
   "if",
   "necessary",
   "to",
   "make",
   "enough",
   "room",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "copyAndResizeCodeBuffer",
   "(",
   "ByteBuffer",
   "codeBuffer",
   ",",
   "int",
   "start",
   ",",
   "int",
   "length",
   ")",
   "{",
   "// Check the internal code buffer is large enough or resize it, then copy in the new instructions.",
   "int",
   "<mask>",
   "=",
   "start",
   "+",
   "length",
   ";",
   "if",
   "(",
   "this",
   ".",
   "codeBuffer",
   ".",
   "limit",
   "(",
   ")",
   "<=",
   "max",
   ")",
   "{",
   "ByteBuffer",
   "newCodeBuffer",
   "=",
   "ByteBuffer",
   ".",
   "allocate",
   "(",
   "max",
   "*",
   "2",
   ")",
   ";",
   "newCodeBuffer",
   ".",
   "put",
   "(",
   "this",
   ".",
   "codeBuffer",
   ".",
   "array",
   "(",
   ")",
   ",",
   "0",
   ",",
   "this",
   ".",
   "codeBuffer",
   ".",
   "limit",
   "(",
   ")",
   ")",
   ";",
   "log",
   ".",
   "fine",
   "(",
   "\"Re-sized code buffer to \"",
   "+",
   "(",
   "max",
   "*",
   "2",
   ")",
   ")",
   ";",
   "}",
   "codeBuffer",
   ".",
   "position",
   "(",
   "start",
   ")",
   ";",
   "codeBuffer",
   ".",
   "get",
   "(",
   "this",
   ".",
   "codeBuffer",
   ".",
   "array",
   "(",
   ")",
   ",",
   "start",
   ",",
   "length",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-392",
  "nl_tokens": [
   "look",
   "must",
   "handle",
   "discon",
   "interval",
   "different"
  ],
  "pl_tokens": [
   "private",
   "Optional",
   "<",
   "CoverageCoordAxisBuilder",
   ">",
   "subsetValues",
   "(",
   "double",
   "minValue",
   ",",
   "double",
   "maxValue",
   ",",
   "int",
   "stride",
   ")",
   "{",
   "if",
   "(",
   "axis",
   ".",
   "getSpacing",
   "(",
   ")",
   "==",
   "CoverageCoordAxis",
   ".",
   "Spacing",
   ".",
   "discontiguousInterval",
   ")",
   "return",
   "subsetValuesDiscontinuous",
   "(",
   "minValue",
   ",",
   "maxValue",
   ",",
   "stride",
   ")",
   ";",
   "double",
   "lower",
   "=",
   "axis",
   ".",
   "isAscending",
   "(",
   ")",
   "?",
   "Math",
   ".",
   "<mask>",
   "(",
   "minValue",
   ",",
   "maxValue",
   ")",
   ":",
   "Math",
   ".",
   "max",
   "(",
   "minValue",
   ",",
   "maxValue",
   ")",
   ";",
   "double",
   "upper",
   "=",
   "axis",
   ".",
   "isAscending",
   "(",
   ")",
   "?",
   "Math",
   ".",
   "max",
   "(",
   "minValue",
   ",",
   "maxValue",
   ")",
   ":",
   "Math",
   ".",
   "min",
   "(",
   "minValue",
   ",",
   "maxValue",
   ")",
   ";",
   "int",
   "minIndex",
   "=",
   "findCoordElement",
   "(",
   "lower",
   ",",
   "false",
   ")",
   ";",
   "int",
   "maxIndex",
   "=",
   "findCoordElement",
   "(",
   "upper",
   ",",
   "false",
   ")",
   ";",
   "if",
   "(",
   "minIndex",
   ">=",
   "axis",
   ".",
   "getNcoords",
   "(",
   ")",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"no points in subset: lower %f > end %f\"",
   ",",
   "lower",
   ",",
   "axis",
   ".",
   "getEndValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "maxIndex",
   "<",
   "0",
   ")",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"no points in subset: upper %f < start %f\"",
   ",",
   "upper",
   ",",
   "axis",
   ".",
   "getStartValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "if",
   "(",
   "minIndex",
   "<",
   "0",
   ")",
   "minIndex",
   "=",
   "0",
   ";",
   "if",
   "(",
   "maxIndex",
   ">=",
   "axis",
   ".",
   "getNcoords",
   "(",
   ")",
   ")",
   "maxIndex",
   "=",
   "axis",
   ".",
   "getNcoords",
   "(",
   ")",
   "-",
   "1",
   ";",
   "int",
   "count",
   "=",
   "maxIndex",
   "-",
   "minIndex",
   "+",
   "1",
   ";",
   "if",
   "(",
   "count",
   "<=",
   "0",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"no points in subset\"",
   ")",
   ";",
   "try",
   "{",
   "return",
   "Optional",
   ".",
   "of",
   "(",
   "subsetByIndex",
   "(",
   "new",
   "Range",
   "(",
   "minIndex",
   ",",
   "maxIndex",
   ",",
   "stride",
   ")",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "InvalidRangeException",
   "e",
   ")",
   "{",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-393",
  "nl_tokens": [
   "Only",
   "idempotent",
   "commands",
   "that",
   "don",
   "t",
   "involve",
   "any",
   "other",
   "node",
   "can",
   "be",
   "executed",
   "locally",
   "."
  ],
  "pl_tokens": [
   "protected",
   "boolean",
   "executeOnlyLocally",
   "(",
   "final",
   "String",
   "localNodeName",
   ",",
   "final",
   "ODistributedConfiguration",
   "dbCfg",
   ",",
   "final",
   "OCommandExecutor",
   "exec",
   ",",
   "final",
   "Collection",
   "<",
   "String",
   ">",
   "involvedClusters",
   ",",
   "final",
   "Collection",
   "<",
   "String",
   ">",
   "nodes",
   ")",
   "{",
   "boolean",
   "executeLocally",
   "=",
   "false",
   ";",
   "if",
   "(",
   "exec",
   ".",
   "isIdempotent",
   "(",
   ")",
   ")",
   "{",
   "final",
   "int",
   "availableNodes",
   "=",
   "nodes",
   ".",
   "size",
   "(",
   ")",
   ";",
   "// IDEMPOTENT: CHECK IF CAN WORK LOCALLY ONLY",
   "int",
   "maxReadQuorum",
   ";",
   "if",
   "(",
   "involvedClusters",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "maxReadQuorum",
   "=",
   "dbCfg",
   ".",
   "getReadQuorum",
   "(",
   "null",
   ",",
   "availableNodes",
   ",",
   "localNodeName",
   ")",
   ";",
   "else",
   "{",
   "maxReadQuorum",
   "=",
   "0",
   ";",
   "for",
   "(",
   "String",
   "cl",
   ":",
   "involvedClusters",
   ")",
   "maxReadQuorum",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxReadQuorum",
   ",",
   "dbCfg",
   ".",
   "getReadQuorum",
   "(",
   "cl",
   ",",
   "availableNodes",
   ",",
   "localNodeName",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "nodes",
   ".",
   "contains",
   "(",
   "localNodeName",
   ")",
   "&&",
   "maxReadQuorum",
   "<=",
   "1",
   ")",
   "executeLocally",
   "=",
   "true",
   ";",
   "}",
   "return",
   "executeLocally",
   ";",
   "}",
   "public",
   "boolean",
   "isLocalEnv",
   "(",
   ")",
   "{",
   "return",
   "localDistributedDatabase",
   "==",
   "null",
   "||",
   "dManager",
   "==",
   "null",
   "||",
   "distributedConfiguration",
   "==",
   "null",
   "||",
   "OScenarioThreadLocal",
   ".",
   "INSTANCE",
   ".",
   "isRunModeDistributed",
   "(",
   ")",
   ";",
   "}",
   "public",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "readRecord",
   "",
   "(",
   "final",
   "ORecordId",
   "iRecordId",
   ",",
   "final",
   "String",
   "iFetchPlan",
   ",",
   "final",
   "boolean",
   "iIgnoreCache",
   ",",
   "final",
   "boolean",
   "prefetchRecords",
   ",",
   "final",
   "ORecordCallback",
   "<",
   "ORawBuffer",
   ">",
   "iCallback",
   ")",
   "{",
   "if",
   "(",
   "isLocalEnv",
   "(",
   ")",
   ")",
   "{",
   "// ALREADY DISTRIBUTED",
   "return",
   "wrapped",
   ".",
   "readRecord",
   "(",
   "iRecordId",
   ",",
   "iFetchPlan",
   ",",
   "iIgnoreCache",
   ",",
   "prefetchRecords",
   ",",
   "iCallback",
   ")",
   ";",
   "}",
   "final",
   "ORawBuffer",
   "memCopy",
   "=",
   "localDistributedDatabase",
   ".",
   "getRecordIfLocked",
   "(",
   "iRecordId",
   ")",
   ";",
   "if",
   "(",
   "memCopy",
   "!=",
   "null",
   ")",
   "return",
   "new",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "(",
   "memCopy",
   ")",
   ";",
   "try",
   "{",
   "final",
   "String",
   "clusterName",
   "=",
   "getClusterNameByRID",
   "(",
   "iRecordId",
   ")",
   ";",
   "final",
   "ODistributedConfiguration",
   "dbCfg",
   "=",
   "distributedConfiguration",
   ";",
   "final",
   "List",
   "<",
   "String",
   ">",
   "nodes",
   "=",
   "dbCfg",
   ".",
   "getServers",
   "(",
   "clusterName",
   ",",
   "null",
   ")",
   ";",
   "final",
   "int",
   "availableNodes",
   "=",
   "nodes",
   ".",
   "size",
   "(",
   ")",
   ";",
   "// CHECK IF LOCAL NODE OWNS THE DATA AND READ-QUORUM = 1: GET IT LOCALLY BECAUSE IT'S FASTER",
   "final",
   "String",
   "localNodeName",
   "=",
   "dManager",
   ".",
   "getLocalNodeName",
   "(",
   ")",
   ";",
   "if",
   "(",
   "nodes",
   ".",
   "isEmpty",
   "(",
   ")",
   "||",
   "nodes",
   ".",
   "contains",
   "(",
   "dManager",
   ".",
   "getLocalNodeName",
   "(",
   ")",
   ")",
   "&&",
   "dbCfg",
   ".",
   "getReadQuorum",
   "(",
   "clusterName",
   ",",
   "availableNodes",
   ",",
   "localNodeName",
   ")",
   "<=",
   "1",
   ")",
   "{",
   "// DON'T REPLICATE",
   "return",
   "(",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   ")",
   "OScenarioThreadLocal",
   ".",
   "executeAsDistributed",
   "(",
   "new",
   "Callable",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "Object",
   "call",
   "(",
   ")",
   "throws",
   "Exception",
   "{",
   "return",
   "wrapped",
   ".",
   "readRecord",
   "(",
   "iRecordId",
   ",",
   "iFetchPlan",
   ",",
   "iIgnoreCache",
   ",",
   "prefetchRecords",
   ",",
   "iCallback",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "final",
   "OReadRecordTask",
   "task",
   "=",
   "(",
   "(",
   "OReadRecordTask",
   ")",
   "dManager",
   ".",
   "getTaskFactoryManager",
   "(",
   ")",
   ".",
   "getFactoryByServerNames",
   "(",
   "nodes",
   ")",
   ".",
   "createTask",
   "(",
   "OReadRecordTask",
   ".",
   "FACTORYID",
   ")",
   ")",
   ".",
   "init",
   "(",
   "iRecordId",
   ")",
   ";",
   "// DISTRIBUTE IT",
   "final",
   "ODistributedResponse",
   "response",
   "=",
   "dManager",
   ".",
   "sendRequest",
   "(",
   "getName",
   "(",
   ")",
   ",",
   "Collections",
   ".",
   "singleton",
   "(",
   "clusterName",
   ")",
   ",",
   "nodes",
   ",",
   "task",
   ",",
   "dManager",
   ".",
   "getNextMessageIdCounter",
   "(",
   ")",
   ",",
   "EXECUTION_MODE",
   ".",
   "RESPONSE",
   ",",
   "null",
   ",",
   "null",
   ",",
   "null",
   ")",
   ";",
   "final",
   "Object",
   "dResult",
   "=",
   "response",
   "!=",
   "null",
   "?",
   "response",
   ".",
   "getPayload",
   "(",
   ")",
   ":",
   "null",
   ";",
   "if",
   "(",
   "dResult",
   "instanceof",
   "ONeedRetryException",
   ")",
   "throw",
   "(",
   "ONeedRetryException",
   ")",
   "dResult",
   ";",
   "else",
   "if",
   "(",
   "dResult",
   "instanceof",
   "Exception",
   ")",
   "throw",
   "OException",
   ".",
   "wrapException",
   "(",
   "new",
   "ODistributedException",
   "(",
   "\"Error on execution distributed read record\"",
   ")",
   ",",
   "(",
   "Exception",
   ")",
   "dResult",
   ")",
   ";",
   "return",
   "new",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "(",
   "(",
   "ORawBuffer",
   ")",
   "dResult",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "ONeedRetryException",
   "e",
   ")",
   "{",
   "// PASS THROUGH",
   "throw",
   "e",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "handleDistributedException",
   "(",
   "\"Cannot route read record operation for %s to the distributed node\"",
   ",",
   "e",
   ",",
   "iRecordId",
   ")",
   ";",
   "// UNREACHABLE",
   "return",
   "null",
   ";",
   "}",
   "}",
   "@",
   "Override",
   "public",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "readRecordIfVersionIsNotLatest",
   "",
   "(",
   "final",
   "ORecordId",
   "rid",
   ",",
   "final",
   "String",
   "fetchPlan",
   ",",
   "final",
   "boolean",
   "ignoreCache",
   ",",
   "final",
   "int",
   "recordVersion",
   ")",
   "throws",
   "ORecordNotFoundException",
   "{",
   "if",
   "(",
   "isLocalEnv",
   "(",
   ")",
   ")",
   "{",
   "return",
   "wrapped",
   ".",
   "readRecordIfVersionIsNotLatest",
   "(",
   "rid",
   ",",
   "fetchPlan",
   ",",
   "ignoreCache",
   ",",
   "recordVersion",
   ")",
   ";",
   "}",
   "final",
   "ORawBuffer",
   "memCopy",
   "=",
   "localDistributedDatabase",
   ".",
   "getRecordIfLocked",
   "(",
   "rid",
   ")",
   ";",
   "if",
   "(",
   "memCopy",
   "!=",
   "null",
   ")",
   "return",
   "new",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "(",
   "memCopy",
   ")",
   ";",
   "try",
   "{",
   "final",
   "String",
   "clusterName",
   "=",
   "getClusterNameByRID",
   "(",
   "rid",
   ")",
   ";",
   "final",
   "ODistributedConfiguration",
   "dbCfg",
   "=",
   "distributedConfiguration",
   ";",
   "final",
   "List",
   "<",
   "String",
   ">",
   "nodes",
   "=",
   "dbCfg",
   ".",
   "getServers",
   "(",
   "clusterName",
   ",",
   "null",
   ")",
   ";",
   "final",
   "int",
   "availableNodes",
   "=",
   "nodes",
   ".",
   "size",
   "(",
   ")",
   ";",
   "// CHECK IF LOCAL NODE OWNS THE DATA AND READ-QUORUM = 1: GET IT LOCALLY BECAUSE IT'S FASTER",
   "final",
   "String",
   "localNodeName",
   "=",
   "dManager",
   ".",
   "getLocalNodeName",
   "(",
   ")",
   ";",
   "if",
   "(",
   "nodes",
   ".",
   "isEmpty",
   "(",
   ")",
   "||",
   "nodes",
   ".",
   "contains",
   "(",
   "dManager",
   ".",
   "getLocalNodeName",
   "(",
   ")",
   ")",
   "&&",
   "dbCfg",
   ".",
   "getReadQuorum",
   "(",
   "clusterName",
   ",",
   "availableNodes",
   ",",
   "localNodeName",
   ")",
   "<=",
   "1",
   ")",
   "{",
   "// DON'T REPLICATE",
   "return",
   "(",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   ")",
   "OScenarioThreadLocal",
   ".",
   "executeAsDistributed",
   "(",
   "new",
   "Callable",
   "(",
   ")",
   "{",
   "@",
   "Override",
   "public",
   "Object",
   "call",
   "(",
   ")",
   "throws",
   "Exception",
   "{",
   "return",
   "wrapped",
   ".",
   "readRecordIfVersionIsNotLatest",
   "(",
   "rid",
   ",",
   "fetchPlan",
   ",",
   "ignoreCache",
   ",",
   "recordVersion",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "final",
   "OReadRecordIfNotLatestTask",
   "task",
   "=",
   "(",
   "OReadRecordIfNotLatestTask",
   ")",
   "dManager",
   ".",
   "getTaskFactoryManager",
   "(",
   ")",
   ".",
   "getFactoryByServerNames",
   "(",
   "nodes",
   ")",
   ".",
   "createTask",
   "(",
   "OReadRecordIfNotLatestTask",
   ".",
   "FACTORYID",
   ")",
   ";",
   "task",
   ".",
   "init",
   "(",
   "rid",
   ",",
   "recordVersion",
   ")",
   ";",
   "// DISTRIBUTE IT",
   "final",
   "Object",
   "result",
   "=",
   "dManager",
   ".",
   "sendRequest",
   "(",
   "getName",
   "(",
   ")",
   ",",
   "Collections",
   ".",
   "singleton",
   "(",
   "clusterName",
   ")",
   ",",
   "nodes",
   ",",
   "task",
   ",",
   "dManager",
   ".",
   "getNextMessageIdCounter",
   "(",
   ")",
   ",",
   "EXECUTION_MODE",
   ".",
   "RESPONSE",
   ",",
   "null",
   ",",
   "null",
   ",",
   "null",
   ")",
   ".",
   "getPayload",
   "(",
   ")",
   ";",
   "if",
   "(",
   "result",
   "instanceof",
   "ONeedRetryException",
   ")",
   "throw",
   "(",
   "ONeedRetryException",
   ")",
   "result",
   ";",
   "else",
   "if",
   "(",
   "result",
   "instanceof",
   "Exception",
   ")",
   "throw",
   "OException",
   ".",
   "wrapException",
   "(",
   "new",
   "ODistributedException",
   "(",
   "\"Error on execution distributed read record\"",
   ")",
   ",",
   "(",
   "Exception",
   ")",
   "result",
   ")",
   ";",
   "return",
   "new",
   "OStorageOperationResult",
   "<",
   "ORawBuffer",
   ">",
   "(",
   "(",
   "ORawBuffer",
   ")",
   "result",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "ONeedRetryException",
   "e",
   ")",
   "{",
   "// PASS THROUGH",
   "throw",
   "e",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "handleDistributedException",
   "(",
   "\"Cannot route read record operation for %s to the distributed node\"",
   ",",
   "e",
   ",",
   "rid",
   ")",
   ";",
   "// UNREACHABLE",
   "return",
   "null",
   ";",
   "}",
   "}",
   "@",
   "Override",
   "public",
   "OStorageOperationResult",
   "<",
   "Boolean",
   ">",
   "deleteRecord",
   "",
   "(",
   "final",
   "ORecordId",
   "iRecordId",
   ",",
   "final",
   "int",
   "iVersion",
   ",",
   "final",
   "int",
   "iMode",
   ",",
   "final",
   "ORecordCallback",
   "<",
   "Boolean",
   ">",
   "iCallback",
   ")",
   "{",
   "// IF is a real delete should be with a tx",
   "return",
   "wrapped",
   ".",
   "deleteRecord",
   "(",
   "iRecordId",
   ",",
   "iVersion",
   ",",
   "iMode",
   ",",
   "iCallback",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-394",
  "nl_tokens": [
   "Finds",
   "the",
   "first",
   "occurrence",
   "of",
   "match",
   "in",
   "data",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "indexOf",
   "(",
   "byte",
   "[",
   "]",
   "data",
   ",",
   "int",
   "start",
   ",",
   "int",
   "<mask>",
   ")",
   "{",
   "int",
   "j",
   "=",
   "0",
   ";",
   "if",
   "(",
   "data",
   ".",
   "length",
   "==",
   "0",
   ")",
   "return",
   "-",
   "1",
   ";",
   "if",
   "(",
   "start",
   "+",
   "max",
   ">",
   "data",
   ".",
   "length",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"HEY KMPMatch\"",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "start",
   ";",
   "i",
   "<",
   "start",
   "+",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "while",
   "(",
   "j",
   ">",
   "0",
   "&&",
   "match",
   "[",
   "j",
   "]",
   "!=",
   "data",
   "[",
   "i",
   "]",
   ")",
   "j",
   "=",
   "failure",
   "[",
   "j",
   "-",
   "1",
   "]",
   ";",
   "if",
   "(",
   "match",
   "[",
   "j",
   "]",
   "==",
   "data",
   "[",
   "i",
   "]",
   ")",
   "j",
   "++",
   ";",
   "if",
   "(",
   "j",
   "==",
   "match",
   ".",
   "length",
   ")",
   "return",
   "i",
   "-",
   "match",
   ".",
   "length",
   "+",
   "1",
   ";",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-395",
  "nl_tokens": [
   "Append",
   "this",
   "line",
   "to",
   "the",
   "bottom",
   "of",
   "the",
   "JTextArea",
   ".",
   "A",
   "newline",
   "is",
   "added",
   "and",
   "JTextArea",
   "is",
   "scrolled",
   "to",
   "bottom",
   ";",
   "remove",
   "lines",
   "at",
   "top",
   "if",
   "needed",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "appendLine",
   "(",
   "String",
   "line",
   ")",
   "{",
   "if",
   "(",
   "count",
   ">=",
   "nlines",
   ")",
   "{",
   "try",
   "{",
   "int",
   "remove",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "removeIncr",
   ",",
   "count",
   "-",
   "nlines",
   ")",
   ";",
   "// nlines may have changed",
   "int",
   "offset",
   "=",
   "ta",
   ".",
   "getLineEndOffset",
   "(",
   "remove",
   ")",
   ";",
   "ta",
   ".",
   "replaceRange",
   "(",
   "\"\"",
   ",",
   "0",
   ",",
   "offset",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "log",
   ".",
   "error",
   "(",
   "\"Problem in TextHistoryPane\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "count",
   "=",
   "nlines",
   "-",
   "removeIncr",
   ";",
   "}",
   "ta",
   ".",
   "append",
   "(",
   "line",
   ")",
   ";",
   "ta",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "count",
   "++",
   ";",
   "// scroll to end",
   "ta",
   ".",
   "setCaretPosition",
   "(",
   "ta",
   ".",
   "getText",
   "(",
   ")",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-396",
  "nl_tokens": [
   "Finds",
   "the",
   "first",
   "instance",
   "of",
   "c",
   "at",
   "or",
   "after",
   "fromIndex",
   "(",
   "0",
   "..",
   ")",
   "in",
   "cArray",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "indexOf",
   "(",
   "char",
   "[",
   "]",
   "cArray",
   ",",
   "char",
   "c",
   ",",
   "int",
   "fromIndex",
   ")",
   "{",
   "int",
   "cArrayLength",
   "=",
   "cArray",
   ".",
   "length",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "fromIndex",
   ",",
   "0",
   ")",
   ";",
   "index",
   "<",
   "cArrayLength",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "cArray",
   "[",
   "index",
   "]",
   "==",
   "c",
   ")",
   "return",
   "index",
   ";",
   "}",
   "return",
   "-",
   "1",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-397",
  "nl_tokens": [
   "Find",
   "a",
   "free",
   "(",
   "on",
   "localhost",
   ")",
   "random",
   "port",
   "in",
   "the",
   "specified",
   "range",
   "after",
   "the",
   "given",
   "number",
   "of",
   "attempts",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "getFreeRandomPort",
   "(",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ",",
   "int",
   "attempts",
   ")",
   "{",
   "Random",
   "random",
   "=",
   "new",
   "Random",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "attempts",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "port",
   "=",
   "min",
   "+",
   "random",
   ".",
   "nextInt",
   "(",
   "max",
   "-",
   "min",
   "+",
   "1",
   ")",
   ";",
   "try",
   "(",
   "Socket",
   "socket",
   "=",
   "new",
   "Socket",
   "(",
   "\"localhost\"",
   ",",
   "port",
   ")",
   ")",
   "{",
   "}",
   "catch",
   "(",
   "ConnectException",
   "e",
   ")",
   "{",
   "return",
   "port",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "\"Error while trying to check open ports\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "}",
   "throw",
   "new",
   "IllegalStateException",
   "(",
   "\"Cannot find a free random port in the range [\"",
   "+",
   "min",
   "+",
   "\", \"",
   "+",
   "max",
   "+",
   "\"] after \"",
   "+",
   "attempts",
   "+",
   "\" attempts\"",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-398",
  "nl_tokens": [
   "Copy",
   "part",
   "of",
   "a",
   "RandomAccessFile",
   "to",
   "output",
   "stream",
   "specify",
   "internal",
   "buffer",
   "size"
  ],
  "pl_tokens": [
   "static",
   "public",
   "long",
   "copyRafB",
   "(",
   "ucar",
   ".",
   "unidata",
   ".",
   "io",
   ".",
   "RandomAccessFile",
   "raf",
   ",",
   "long",
   "offset",
   ",",
   "long",
   "length",
   ",",
   "OutputStream",
   "out",
   ",",
   "byte",
   "[",
   "]",
   "buffer",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "bufferSize",
   "=",
   "buffer",
   ".",
   "length",
   ";",
   "long",
   "want",
   "=",
   "length",
   ";",
   "raf",
   ".",
   "seek",
   "(",
   "offset",
   ")",
   ";",
   "while",
   "(",
   "want",
   ">",
   "0",
   ")",
   "{",
   "int",
   "len",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "want",
   ",",
   "bufferSize",
   ")",
   ";",
   "int",
   "bytesRead",
   "=",
   "raf",
   ".",
   "read",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "len",
   ")",
   ";",
   "if",
   "(",
   "bytesRead",
   "<=",
   "0",
   ")",
   "break",
   ";",
   "out",
   ".",
   "write",
   "(",
   "buffer",
   ",",
   "0",
   ",",
   "bytesRead",
   ")",
   ";",
   "want",
   "-=",
   "bytesRead",
   ";",
   "}",
   "out",
   ".",
   "flush",
   "(",
   ")",
   ";",
   "return",
   "length",
   "-",
   "want",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-399",
  "nl_tokens": [
   "Calculates",
   "prices",
   "of",
   "long",
   "rep",
   "and",
   "long",
   "rep",
   "+",
   "literal",
   "+",
   "rep0",
   "."
  ],
  "pl_tokens": [
   "private",
   "int",
   "calcLongRepPrices",
   "(",
   "int",
   "pos",
   ",",
   "int",
   "posState",
   ",",
   "int",
   "avail",
   ",",
   "int",
   "anyRepPrice",
   ")",
   "{",
   "int",
   "startLen",
   "=",
   "MATCH_LEN_MIN",
   ";",
   "int",
   "lenLimit",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "avail",
   ",",
   "niceLen",
   ")",
   ";",
   "for",
   "(",
   "int",
   "rep",
   "=",
   "0",
   ";",
   "rep",
   "<",
   "REPS",
   ";",
   "++",
   "rep",
   ")",
   "{",
   "int",
   "len",
   "=",
   "lz",
   ".",
   "getMatchLen",
   "(",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "reps",
   "[",
   "rep",
   "]",
   ",",
   "lenLimit",
   ")",
   ";",
   "if",
   "(",
   "len",
   "<",
   "MATCH_LEN_MIN",
   ")",
   "continue",
   ";",
   "while",
   "(",
   "optEnd",
   "<",
   "optCur",
   "+",
   "len",
   ")",
   "opts",
   "[",
   "++",
   "optEnd",
   "]",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "int",
   "longRepPrice",
   "=",
   "getLongRepPrice",
   "(",
   "anyRepPrice",
   ",",
   "rep",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ",",
   "posState",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "len",
   ";",
   "i",
   ">=",
   "MATCH_LEN_MIN",
   ";",
   "--",
   "i",
   ")",
   "{",
   "int",
   "price",
   "=",
   "longRepPrice",
   "+",
   "repLenEncoder",
   ".",
   "getPrice",
   "(",
   "i",
   ",",
   "posState",
   ")",
   ";",
   "if",
   "(",
   "price",
   "<",
   "opts",
   "[",
   "optCur",
   "+",
   "i",
   "]",
   ".",
   "price",
   ")",
   "opts",
   "[",
   "optCur",
   "+",
   "i",
   "]",
   ".",
   "set1",
   "(",
   "price",
   ",",
   "optCur",
   ",",
   "rep",
   ")",
   ";",
   "}",
   "if",
   "(",
   "rep",
   "==",
   "0",
   ")",
   "startLen",
   "=",
   "len",
   "+",
   "1",
   ";",
   "int",
   "len2Limit",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "niceLen",
   ",",
   "avail",
   "-",
   "len",
   "-",
   "1",
   ")",
   ";",
   "int",
   "len2",
   "=",
   "lz",
   ".",
   "getMatchLen",
   "(",
   "len",
   "+",
   "1",
   ",",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "reps",
   "[",
   "rep",
   "]",
   ",",
   "len2Limit",
   ")",
   ";",
   "if",
   "(",
   "len2",
   ">=",
   "MATCH_LEN_MIN",
   ")",
   "{",
   "// Rep",
   "int",
   "price",
   "=",
   "longRepPrice",
   "+",
   "repLenEncoder",
   ".",
   "getPrice",
   "(",
   "len",
   ",",
   "posState",
   ")",
   ";",
   "nextState",
   ".",
   "set",
   "(",
   "opts",
   "[",
   "optCur",
   "]",
   ".",
   "state",
   ")",
   ";",
   "nextState",
   ".",
   "updateLongRep",
   "(",
   ")",
   ";",
   "// Literal",
   "int",
   "curByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "len",
   ",",
   "0",
   ")",
   ";",
   "int",
   "matchByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "0",
   ")",
   ";",
   "// lz.getByte(len, len)",
   "int",
   "prevByte",
   "=",
   "lz",
   ".",
   "getByte",
   "(",
   "len",
   ",",
   "1",
   ")",
   ";",
   "price",
   "+=",
   "literalEncoder",
   ".",
   "getPrice",
   "(",
   "curByte",
   ",",
   "matchByte",
   ",",
   "prevByte",
   ",",
   "pos",
   "+",
   "len",
   ",",
   "nextState",
   ")",
   ";",
   "nextState",
   ".",
   "updateLiteral",
   "(",
   ")",
   ";",
   "// Rep0",
   "int",
   "nextPosState",
   "=",
   "(",
   "pos",
   "+",
   "len",
   "+",
   "1",
   ")",
   "&",
   "posMask",
   ";",
   "price",
   "+=",
   "getLongRepAndLenPrice",
   "(",
   "0",
   ",",
   "len2",
   ",",
   "nextState",
   ",",
   "nextPosState",
   ")",
   ";",
   "int",
   "i",
   "=",
   "optCur",
   "+",
   "len",
   "+",
   "1",
   "+",
   "len2",
   ";",
   "while",
   "(",
   "optEnd",
   "<",
   "i",
   ")",
   "opts",
   "[",
   "++",
   "optEnd",
   "]",
   ".",
   "reset",
   "(",
   ")",
   ";",
   "if",
   "(",
   "price",
   "<",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "price",
   ")",
   "opts",
   "[",
   "i",
   "]",
   ".",
   "set3",
   "(",
   "price",
   ",",
   "optCur",
   ",",
   "rep",
   ",",
   "len",
   ",",
   "0",
   ")",
   ";",
   "}",
   "}",
   "return",
   "startLen",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-400",
  "nl_tokens": [
   "Alternate",
   "way",
   "to",
   "calculate",
   "latLonToProjBB",
   "originally",
   "in",
   "GridCoordSys",
   ".",
   "Difficult",
   "to",
   "do",
   "this",
   "in",
   "a",
   "general",
   "way",
   "."
  ],
  "pl_tokens": [
   "ProjectionRect",
   "latLonToProjBB2",
   "(",
   "LatLonRect",
   "latlonRect",
   ")",
   "{",
   "double",
   "minx",
   ",",
   "maxx",
   ",",
   "miny",
   ",",
   "maxy",
   ";",
   "LatLonPointImpl",
   "llpt",
   "=",
   "latlonRect",
   ".",
   "getLowerLeftPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "urpt",
   "=",
   "latlonRect",
   ".",
   "getUpperRightPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "lrpt",
   "=",
   "latlonRect",
   ".",
   "getLowerRightPoint",
   "(",
   ")",
   ";",
   "LatLonPointImpl",
   "ulpt",
   "=",
   "latlonRect",
   ".",
   "getUpperLeftPoint",
   "(",
   ")",
   ";",
   "if",
   "(",
   "isLatLon",
   "(",
   ")",
   ")",
   "{",
   "minx",
   "=",
   "getMinOrMaxLon",
   "(",
   "llpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "ulpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "true",
   ")",
   ";",
   "miny",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "llpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ",",
   "lrpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "maxx",
   "=",
   "getMinOrMaxLon",
   "(",
   "urpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "lrpt",
   ".",
   "getLongitude",
   "(",
   ")",
   ",",
   "false",
   ")",
   ";",
   "maxy",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ulpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ",",
   "urpt",
   ".",
   "getLatitude",
   "(",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "ProjectionPoint",
   "ll",
   "=",
   "latLonToProj",
   "(",
   "llpt",
   ",",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ")",
   ";",
   "ProjectionPoint",
   "ur",
   "=",
   "latLonToProj",
   "(",
   "urpt",
   ",",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ")",
   ";",
   "ProjectionPoint",
   "lr",
   "=",
   "latLonToProj",
   "(",
   "lrpt",
   ",",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ")",
   ";",
   "ProjectionPoint",
   "ul",
   "=",
   "latLonToProj",
   "(",
   "ulpt",
   ",",
   "new",
   "ProjectionPointImpl",
   "(",
   ")",
   ")",
   ";",
   "minx",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ll",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "ul",
   ".",
   "getX",
   "(",
   ")",
   ")",
   ";",
   "miny",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "ll",
   ".",
   "getY",
   "(",
   ")",
   ",",
   "lr",
   ".",
   "getY",
   "(",
   ")",
   ")",
   ";",
   "maxx",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ur",
   ".",
   "getX",
   "(",
   ")",
   ",",
   "lr",
   ".",
   "getX",
   "(",
   ")",
   ")",
   ";",
   "maxy",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "ul",
   ".",
   "getY",
   "(",
   ")",
   ",",
   "ur",
   ".",
   "getY",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "new",
   "ProjectionRect",
   "(",
   "minx",
   ",",
   "miny",
   ",",
   "maxx",
   ",",
   "maxy",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-401",
  "nl_tokens": [
   "When",
   "re",
   "-",
   "using",
   "an",
   "instance",
   "with",
   "reset",
   "it",
   "will",
   "adjust",
   "slab",
   "size",
   "based",
   "on",
   "previous",
   "data",
   "size",
   ".",
   "The",
   "intent",
   "is",
   "to",
   "reuse",
   "the",
   "same",
   "instance",
   "for",
   "the",
   "same",
   "type",
   "of",
   "data",
   "(",
   "for",
   "example",
   "the",
   "same",
   "column",
   ")",
   ".",
   "The",
   "assumption",
   "is",
   "that",
   "the",
   "size",
   "in",
   "the",
   "buffer",
   "will",
   "be",
   "consistent",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "reset",
   "(",
   ")",
   "{",
   "// readjust slab size.",
   "// 7 = 2^3 - 1 so that doubling the initial size 3 times will get to the same size",
   "this",
   ".",
   "initialSlabSize",
   "=",
   "<mask>",
   "(",
   "bytesUsed",
   "/",
   "7",
   ",",
   "initialSlabSize",
   ")",
   ";",
   "LOG",
   ".",
   "debug",
   "(",
   "\"initial slab of size {}\"",
   ",",
   "initialSlabSize",
   ")",
   ";",
   "for",
   "(",
   "ByteBuffer",
   "slab",
   ":",
   "slabs",
   ")",
   "{",
   "allocator",
   ".",
   "release",
   "(",
   "slab",
   ")",
   ";",
   "}",
   "this",
   ".",
   "slabs",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "this",
   ".",
   "bytesAllocated",
   "=",
   "0",
   ";",
   "this",
   ".",
   "bytesUsed",
   "=",
   "0",
   ";",
   "this",
   ".",
   "currentSlab",
   "=",
   "EMPTY_SLAB",
   ";",
   "this",
   ".",
   "currentSlabIndex",
   "=",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-402",
  "nl_tokens": [
   "uncompressed",
   "version"
  ],
  "pl_tokens": [
   "public",
   "void",
   "writeFIntArr",
   "(",
   "int",
   "[",
   "]",
   "arr",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "byteLen",
   "=",
   "arr",
   ".",
   "length",
   "*",
   "4",
   ";",
   "buffout",
   ".",
   "ensureFree",
   "(",
   "byteLen",
   ")",
   ";",
   "byte",
   "buf",
   "[",
   "]",
   "=",
   "buffout",
   ".",
   "buf",
   ";",
   "int",
   "count",
   "=",
   "buffout",
   ".",
   "pos",
   ";",
   "int",
   "<mask>",
   "=",
   "off",
   "+",
   "len",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "off",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "long",
   "anInt",
   "=",
   "arr",
   "[",
   "i",
   "]",
   ";",
   "buf",
   "[",
   "count",
   "]",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "anInt",
   ">>>",
   "0",
   ")",
   ";",
   "buf",
   "[",
   "count",
   "+",
   "1",
   "]",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "anInt",
   ">>>",
   "8",
   ")",
   ";",
   "buf",
   "[",
   "count",
   "+",
   "2",
   "]",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "anInt",
   ">>>",
   "16",
   ")",
   ";",
   "buf",
   "[",
   "count",
   "+",
   "3",
   "]",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "anInt",
   ">>>",
   "24",
   ")",
   ";",
   "count",
   "+=",
   "4",
   ";",
   "}",
   "buffout",
   ".",
   "pos",
   "+=",
   "byteLen",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-403",
  "nl_tokens": [
   "Create",
   "a",
   "latlon",
   "rectangle",
   "and",
   "split",
   "it",
   "into",
   "the",
   "equivalent",
   "ProjectionRect",
   "using",
   "this",
   "LatLonProjection",
   ".",
   "The",
   "latlon",
   "rect",
   "is",
   "constructed",
   "from",
   "2",
   "lat",
   "/",
   "lon",
   "points",
   ".",
   "The",
   "lon",
   "values",
   "are",
   "considered",
   "coords",
   "in",
   "the",
   "latlonProjection",
   "and",
   "so",
   "do",
   "not",
   "have",
   "to",
   "be",
   "+",
   "/",
   "-",
   "180",
   "."
  ],
  "pl_tokens": [
   "public",
   "ProjectionRect",
   "[",
   "]",
   "latLonToProjRect",
   "(",
   "double",
   "lat0",
   ",",
   "double",
   "lon0",
   ",",
   "double",
   "lat1",
   ",",
   "double",
   "lon1",
   ")",
   "{",
   "double",
   "height",
   "=",
   "Math",
   ".",
   "abs",
   "(",
   "lat1",
   "-",
   "lat0",
   ")",
   ";",
   "lat0",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "lat1",
   ",",
   "lat0",
   ")",
   ";",
   "double",
   "width",
   "=",
   "lon1",
   "-",
   "lon0",
   ";",
   "if",
   "(",
   "width",
   "<",
   "1.0e-8",
   ")",
   "{",
   "width",
   "=",
   "360.0",
   ";",
   "// assume its the whole thing\r",
   "}",
   "lon0",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormal",
   "(",
   "lon0",
   ",",
   "centerLon",
   ")",
   ";",
   "lon1",
   "=",
   "LatLonPointImpl",
   ".",
   "lonNormal",
   "(",
   "lon1",
   ",",
   "centerLon",
   ")",
   ";",
   "ProjectionRect",
   "[",
   "]",
   "rects",
   "=",
   "new",
   "ProjectionRect",
   "[",
   "]",
   "{",
   "new",
   "ProjectionRect",
   "(",
   ")",
   ",",
   "new",
   "ProjectionRect",
   "(",
   ")",
   "}",
   ";",
   "if",
   "(",
   "width",
   ">=",
   "360.0",
   ")",
   "{",
   "rects",
   "[",
   "0",
   "]",
   ".",
   "setRect",
   "(",
   "centerLon",
   "-",
   "180.0",
   ",",
   "lat0",
   ",",
   "360.0",
   ",",
   "height",
   ")",
   ";",
   "rects",
   "[",
   "1",
   "]",
   "=",
   "null",
   ";",
   "}",
   "else",
   "if",
   "(",
   "lon0",
   "<",
   "lon1",
   ")",
   "{",
   "rects",
   "[",
   "0",
   "]",
   ".",
   "setRect",
   "(",
   "lon0",
   ",",
   "lat0",
   ",",
   "width",
   ",",
   "height",
   ")",
   ";",
   "rects",
   "[",
   "1",
   "]",
   "=",
   "null",
   ";",
   "}",
   "else",
   "{",
   "double",
   "y",
   "=",
   "centerLon",
   "+",
   "180",
   "-",
   "lon0",
   ";",
   "rects",
   "[",
   "0",
   "]",
   ".",
   "setRect",
   "(",
   "lon0",
   ",",
   "lat0",
   ",",
   "y",
   ",",
   "height",
   ")",
   ";",
   "rects",
   "[",
   "1",
   "]",
   ".",
   "setRect",
   "(",
   "lon1",
   "-",
   "width",
   "+",
   "y",
   ",",
   "lat0",
   ",",
   "width",
   "-",
   "y",
   ",",
   "height",
   ")",
   ";",
   "}",
   "return",
   "rects",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-404",
  "nl_tokens": [
   "Multiply",
   "and",
   "round",
   "."
  ],
  "pl_tokens": [
   "static",
   "public",
   "BigDecimal",
   "multiplyRound",
   "(",
   "final",
   "BigDecimal",
   "x",
   ",",
   "final",
   "BigDecimal",
   "y",
   ")",
   "{",
   "BigDecimal",
   "resul",
   "=",
   "x",
   ".",
   "multiply",
   "(",
   "y",
   ")",
   ";",
   "/* The estimation of the relative error in the result is the sum of the relative\n         * errors |err(y)/y|+|err(x)/x|\n         */",
   "MathContext",
   "mc",
   "=",
   "new",
   "MathContext",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "x",
   ".",
   "precision",
   "(",
   ")",
   ",",
   "y",
   ".",
   "precision",
   "(",
   ")",
   ")",
   ")",
   ";",
   "return",
   "resul",
   ".",
   "round",
   "(",
   "mc",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-405",
  "nl_tokens": [
   "/",
   "*",
   "limits",
   "the",
   "value",
   "i",
   "to",
   "the",
   "range",
   "[",
   "min",
   "max",
   "]"
  ],
  "pl_tokens": [
   "private",
   "int",
   "delta_clip",
   "(",
   "int",
   "i",
   ",",
   "int",
   "<mask>",
   ",",
   "int",
   "max",
   ")",
   "{",
   "if",
   "(",
   "i",
   "<",
   "min",
   ")",
   "return",
   "min",
   ";",
   "else",
   "if",
   "(",
   "i",
   ">",
   "max",
   ")",
   "return",
   "max",
   ";",
   "else",
   "return",
   "i",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-406",
  "nl_tokens": [
   "Adjust",
   "final",
   "scheme",
   "to",
   "presence",
   "of",
   "bounds"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "[",
   "]",
   "adjustSchemeToBounds",
   "(",
   "INDArray",
   "x",
   ",",
   "INDArray",
   "h",
   ",",
   "int",
   "numSteps",
   ",",
   "INDArray",
   "lowerBound",
   ",",
   "INDArray",
   "upperBound",
   ")",
   "{",
   "INDArray",
   "oneSided",
   "=",
   "Nd4j",
   ".",
   "onesLike",
   "(",
   "h",
   ")",
   ";",
   "if",
   "(",
   "and",
   "(",
   "lowerBound",
   ".",
   "eq",
   "(",
   "Double",
   ".",
   "NEGATIVE_INFINITY",
   ")",
   ",",
   "upperBound",
   ".",
   "eq",
   "(",
   "Double",
   ".",
   "POSITIVE_INFINITY",
   ")",
   ")",
   ".",
   "sumNumber",
   "(",
   ")",
   ".",
   "doubleValue",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "return",
   "new",
   "INDArray",
   "[",
   "]",
   "{",
   "h",
   ",",
   "oneSided",
   "}",
   ";",
   "}",
   "INDArray",
   "hTotal",
   "=",
   "h",
   ".",
   "mul",
   "(",
   "numSteps",
   ")",
   ";",
   "INDArray",
   "hAdjusted",
   "=",
   "h",
   ".",
   "dup",
   "(",
   ")",
   ";",
   "INDArray",
   "lowerDist",
   "=",
   "x",
   ".",
   "sub",
   "(",
   "lowerBound",
   ")",
   ";",
   "INDArray",
   "upperBound2",
   "=",
   "upperBound",
   ".",
   "sub",
   "(",
   "x",
   ")",
   ";",
   "INDArray",
   "central",
   "=",
   "and",
   "(",
   "greaterThanOrEqual",
   "(",
   "lowerDist",
   ",",
   "hTotal",
   ")",
   ",",
   "greaterThanOrEqual",
   "(",
   "upperBound2",
   ",",
   "hTotal",
   ")",
   ")",
   ";",
   "INDArray",
   "forward",
   "=",
   "and",
   "(",
   "greaterThanOrEqual",
   "(",
   "upperBound",
   ",",
   "lowerDist",
   ")",
   ",",
   "not",
   "(",
   "central",
   ")",
   ")",
   ";",
   "hAdjusted",
   ".",
   "put",
   "(",
   "forward",
   ",",
   "<mask>",
   "(",
   "h",
   ".",
   "get",
   "(",
   "forward",
   ")",
   ",",
   "upperBound2",
   ".",
   "get",
   "(",
   "forward",
   ")",
   ".",
   "mul",
   "(",
   "0.5",
   ")",
   ".",
   "divi",
   "(",
   "numSteps",
   ")",
   ")",
   ")",
   ";",
   "oneSided",
   ".",
   "put",
   "(",
   "forward",
   ",",
   "Nd4j",
   ".",
   "scalar",
   "(",
   "1.0",
   ")",
   ")",
   ";",
   "INDArray",
   "backward",
   "=",
   "and",
   "(",
   "upperBound2",
   ".",
   "lt",
   "(",
   "lowerBound",
   ")",
   ",",
   "not",
   "(",
   "central",
   ")",
   ")",
   ";",
   "hAdjusted",
   ".",
   "put",
   "(",
   "backward",
   ",",
   "min",
   "(",
   "h",
   ".",
   "get",
   "(",
   "backward",
   ")",
   ",",
   "lowerDist",
   ".",
   "get",
   "(",
   "backward",
   ")",
   ".",
   "mul",
   "(",
   "0.5",
   ")",
   ".",
   "divi",
   "(",
   "numSteps",
   ")",
   ")",
   ")",
   ";",
   "oneSided",
   ".",
   "put",
   "(",
   "backward",
   ",",
   "Nd4j",
   ".",
   "scalar",
   "(",
   "1.0",
   ")",
   ")",
   ";",
   "INDArray",
   "minDist",
   "=",
   "min",
   "(",
   "upperBound2",
   ",",
   "lowerDist",
   ")",
   ".",
   "divi",
   "(",
   "numSteps",
   ")",
   ";",
   "INDArray",
   "adjustedCentral",
   "=",
   "and",
   "(",
   "not",
   "(",
   "central",
   ")",
   ",",
   "lessThanOrEqual",
   "(",
   "abs",
   "(",
   "hAdjusted",
   ")",
   ",",
   "minDist",
   ")",
   ")",
   ";",
   "hAdjusted",
   ".",
   "put",
   "(",
   "adjustedCentral",
   ",",
   "minDist",
   ".",
   "get",
   "(",
   "adjustedCentral",
   ")",
   ")",
   ";",
   "oneSided",
   ".",
   "put",
   "(",
   "adjustedCentral",
   ",",
   "Nd4j",
   ".",
   "scalar",
   "(",
   "0.0",
   ")",
   ")",
   ";",
   "return",
   "new",
   "INDArray",
   "[",
   "]",
   "{",
   "hAdjusted",
   ",",
   "oneSided",
   "}",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-407",
  "nl_tokens": [
   "Returns",
   "the",
   "new",
   "{",
   "@code",
   "String",
   "}",
   "obtained",
   "by",
   "stripping",
   "the",
   "last",
   "{",
   "@code",
   "n",
   "}",
   "characters",
   "from",
   "the",
   "given",
   "one",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "stripRight",
   "(",
   "String",
   "str",
   ",",
   "int",
   "n",
   ")",
   "{",
   "Parameters",
   ".",
   "checkCondition",
   "(",
   "n",
   ">=",
   "0",
   ")",
   ";",
   "int",
   "end",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0",
   ",",
   "str",
   ".",
   "length",
   "(",
   ")",
   "-",
   "n",
   ")",
   ";",
   "return",
   "str",
   ".",
   "substring",
   "(",
   "0",
   ",",
   "end",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-408",
  "nl_tokens": [
   "Set",
   "the",
   "ArrayChar",
   "values",
   "from",
   "the",
   "characters",
   "in",
   "the",
   "String",
   ".",
   "Rank",
   "must",
   "be",
   "1",
   ".",
   "If",
   "String",
   "longer",
   "than",
   "ArrayChar",
   "ignore",
   "extra",
   "chars",
   ";",
   "if",
   "shorter",
   "fill",
   "with",
   "0",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setString",
   "(",
   "String",
   "val",
   ")",
   "{",
   "int",
   "rank",
   "=",
   "getRank",
   "(",
   ")",
   ";",
   "if",
   "(",
   "rank",
   "!=",
   "1",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"ArayChar.setString rank must be 1\"",
   ")",
   ";",
   "int",
   "arrayLen",
   "=",
   "indexCalc",
   ".",
   "getShape",
   "(",
   "0",
   ")",
   ";",
   "int",
   "strLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "val",
   ".",
   "length",
   "(",
   ")",
   ",",
   "arrayLen",
   ")",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "strLen",
   ";",
   "k",
   "++",
   ")",
   "storage",
   "[",
   "k",
   "]",
   "=",
   "val",
   ".",
   "charAt",
   "(",
   "k",
   ")",
   ";",
   "char",
   "c",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "k",
   "=",
   "strLen",
   ";",
   "k",
   "<",
   "arrayLen",
   ";",
   "k",
   "++",
   ")",
   "storage",
   "[",
   "k",
   "]",
   "=",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-409",
  "nl_tokens": [
   "Called",
   "from",
   "the",
   "{",
   "@link",
   "DriverConductor",
   "}",
   "."
  ],
  "pl_tokens": [
   "final",
   "void",
   "trackRebuild",
   "(",
   "final",
   "long",
   "nowNs",
   ",",
   "final",
   "long",
   "statusMessageTimeoutNs",
   ")",
   "{",
   "long",
   "minSubscriberPosition",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "long",
   "maxSubscriberPosition",
   "=",
   "Long",
   ".",
   "MIN_VALUE",
   ";",
   "for",
   "(",
   "final",
   "ReadablePosition",
   "subscriberPosition",
   ":",
   "subscriberPositions",
   ")",
   "{",
   "final",
   "long",
   "position",
   "=",
   "subscriberPosition",
   ".",
   "getVolatile",
   "(",
   ")",
   ";",
   "minSubscriberPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minSubscriberPosition",
   ",",
   "position",
   ")",
   ";",
   "maxSubscriberPosition",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "maxSubscriberPosition",
   ",",
   "position",
   ")",
   ";",
   "}",
   "final",
   "long",
   "rebuildPosition",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "this",
   ".",
   "rebuildPosition",
   ".",
   "get",
   "(",
   ")",
   ",",
   "maxSubscriberPosition",
   ")",
   ";",
   "final",
   "long",
   "hwmPosition",
   "=",
   "this",
   ".",
   "hwmPosition",
   ".",
   "getVolatile",
   "(",
   ")",
   ";",
   "final",
   "long",
   "scanOutcome",
   "=",
   "lossDetector",
   ".",
   "scan",
   "(",
   "termBuffers",
   "[",
   "indexByPosition",
   "(",
   "rebuildPosition",
   ",",
   "positionBitsToShift",
   ")",
   "]",
   ",",
   "rebuildPosition",
   ",",
   "hwmPosition",
   ",",
   "nowNs",
   ",",
   "termLengthMask",
   ",",
   "positionBitsToShift",
   ",",
   "initialTermId",
   ")",
   ";",
   "final",
   "int",
   "rebuildTermOffset",
   "=",
   "(",
   "int",
   ")",
   "rebuildPosition",
   "&",
   "termLengthMask",
   ";",
   "final",
   "long",
   "newRebuildPosition",
   "=",
   "(",
   "rebuildPosition",
   "-",
   "rebuildTermOffset",
   ")",
   "+",
   "rebuildOffset",
   "(",
   "scanOutcome",
   ")",
   ";",
   "this",
   ".",
   "rebuildPosition",
   ".",
   "proposeMaxOrdered",
   "(",
   "newRebuildPosition",
   ")",
   ";",
   "final",
   "long",
   "ccOutcome",
   "=",
   "congestionControl",
   ".",
   "onTrackRebuild",
   "(",
   "nowNs",
   ",",
   "minSubscriberPosition",
   ",",
   "nextSmPosition",
   ",",
   "hwmPosition",
   ",",
   "rebuildPosition",
   ",",
   "newRebuildPosition",
   ",",
   "lossFound",
   "(",
   "scanOutcome",
   ")",
   ")",
   ";",
   "final",
   "int",
   "windowLength",
   "=",
   "CongestionControl",
   ".",
   "receiverWindowLength",
   "(",
   "ccOutcome",
   ")",
   ";",
   "final",
   "int",
   "threshold",
   "=",
   "CongestionControl",
   ".",
   "threshold",
   "(",
   "windowLength",
   ")",
   ";",
   "if",
   "(",
   "CongestionControl",
   ".",
   "shouldForceStatusMessage",
   "(",
   "ccOutcome",
   ")",
   "||",
   "(",
   "(",
   "timeOfLastStatusMessageScheduleNs",
   "+",
   "statusMessageTimeoutNs",
   ")",
   "-",
   "nowNs",
   "<",
   "0",
   ")",
   "||",
   "(",
   "minSubscriberPosition",
   ">",
   "(",
   "nextSmPosition",
   "+",
   "threshold",
   ")",
   ")",
   ")",
   "{",
   "scheduleStatusMessage",
   "(",
   "nowNs",
   ",",
   "minSubscriberPosition",
   ",",
   "windowLength",
   ")",
   ";",
   "cleanBufferTo",
   "(",
   "minSubscriberPosition",
   "-",
   "(",
   "termLengthMask",
   "+",
   "1",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-410",
  "nl_tokens": [
   "\u5f97\u5230\u73b0\u5728\u5206\u949f"
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "getTime",
   "(",
   ")",
   "{",
   "Date",
   "currentTime",
   "=",
   "new",
   "Date",
   "(",
   ")",
   ";",
   "String",
   "dateString",
   "=",
   "FORMATTER_LONG",
   ".",
   "format",
   "(",
   "currentTime",
   ")",
   ";",
   "String",
   "<mask>",
   ";",
   "min",
   "=",
   "dateString",
   ".",
   "substring",
   "(",
   "14",
   ",",
   "16",
   ")",
   ";",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-411",
  "nl_tokens": [
   "Get",
   "the",
   "tile",
   "density",
   "based",
   "upon",
   "the",
   "display",
   "density",
   "scale",
   "and",
   "tile",
   "dimensions"
  ],
  "pl_tokens": [
   "public",
   "static",
   "float",
   "tileDensity",
   "(",
   "float",
   "density",
   ",",
   "int",
   "tileWidth",
   ",",
   "int",
   "tileHeight",
   ")",
   "{",
   "return",
   "tileDensity",
   "(",
   "density",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "tileWidth",
   ",",
   "tileHeight",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-412",
  "nl_tokens": [
   "Replace",
   "missing",
   "values",
   "with",
   "0",
   ";",
   "scale",
   "other",
   "values",
   "between",
   "1",
   "and",
   "255",
   "return",
   "a",
   "byte",
   "data",
   "array",
   "."
  ],
  "pl_tokens": [
   "private",
   "ArrayByte",
   "replaceMissingValuesAndScale",
   "(",
   "IsMissingEvaluator",
   "grid",
   ",",
   "Array",
   "data",
   ",",
   "MAMath",
   ".",
   "MinMax",
   "dataMinMax",
   ")",
   "{",
   "double",
   "scale",
   "=",
   "254.0",
   "/",
   "(",
   "dataMinMax",
   ".",
   "<mask>",
   "-",
   "dataMinMax",
   ".",
   "min",
   ")",
   ";",
   "ArrayByte",
   "byteArray",
   "=",
   "(",
   "ArrayByte",
   ")",
   "Array",
   ".",
   "factory",
   "(",
   "DataType",
   ".",
   "BYTE",
   ",",
   "data",
   ".",
   "getShape",
   "(",
   ")",
   ")",
   ";",
   "IndexIterator",
   "dataIter",
   "=",
   "data",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "IndexIterator",
   "resultIter",
   "=",
   "byteArray",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "byte",
   "bv",
   ";",
   "while",
   "(",
   "dataIter",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "double",
   "v",
   "=",
   "dataIter",
   ".",
   "getDoubleNext",
   "(",
   ")",
   ";",
   "if",
   "(",
   "grid",
   ".",
   "isMissing",
   "(",
   "v",
   ")",
   ")",
   "{",
   "bv",
   "=",
   "0",
   ";",
   "}",
   "else",
   "{",
   "int",
   "iv",
   "=",
   "(",
   "int",
   ")",
   "(",
   "(",
   "v",
   "-",
   "dataMinMax",
   ".",
   "min",
   ")",
   "*",
   "scale",
   "+",
   "1",
   ")",
   ";",
   "bv",
   "=",
   "(",
   "byte",
   ")",
   "(",
   "iv",
   "&",
   "0xff",
   ")",
   ";",
   "}",
   "resultIter",
   ".",
   "setByteNext",
   "(",
   "bv",
   ")",
   ";",
   "}",
   "return",
   "byteArray",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-413",
  "nl_tokens": [
   "If",
   "values",
   "size",
   "hit",
   "{",
   "@link",
   "#MAX",
   "}",
   "then",
   "query",
   "will",
   "be",
   "split",
   "(",
   "size",
   "%",
   "MAX",
   "+",
   "[",
   "1",
   "]",
   ")"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "int",
   "delete",
   "(",
   "List",
   "<",
   "?",
   ">",
   "values",
   ",",
   "boolean",
   "shouldNotify",
   ")",
   "throws",
   "StormException",
   "{",
   "final",
   "CachedTable",
   "table",
   "=",
   "super",
   ".",
   "getCachedTable",
   "(",
   "values",
   ")",
   ";",
   "FieldHolder",
   "primaryKey",
   ";",
   "try",
   "{",
   "primaryKey",
   "=",
   "getPrimaryKey",
   "(",
   "table",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "NoPrimaryKeyFoundException",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "StormException",
   "(",
   "e",
   ")",
   ";",
   "}",
   "final",
   "List",
   "<",
   "Selection",
   ">",
   "selections",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "final",
   "int",
   "size",
   "=",
   "values",
   ".",
   "size",
   "(",
   ")",
   ";",
   "int",
   "x",
   "=",
   "size",
   "/",
   "MAX",
   ";",
   "final",
   "int",
   "steps",
   "=",
   "x",
   "==",
   "0",
   "?",
   "1",
   ":",
   "size",
   "%",
   "MAX",
   "!=",
   "0",
   "?",
   "x",
   "+",
   "1",
   ":",
   "x",
   ";",
   "if",
   "(",
   "steps",
   ">",
   "1",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ",",
   "end",
   "=",
   "MAX",
   ",",
   "start",
   "=",
   "0",
   ";",
   "i",
   "<",
   "steps",
   ";",
   "i",
   "++",
   ",",
   "start",
   "=",
   "end",
   ",",
   "end",
   "+=",
   "Math",
   ".",
   "<mask>",
   "(",
   "size",
   "-",
   "(",
   "MAX",
   "*",
   "i",
   ")",
   ",",
   "MAX",
   ")",
   ")",
   "{",
   "selections",
   ".",
   "add",
   "(",
   "getSelection",
   "(",
   "primaryKey",
   ",",
   "values",
   ".",
   "subList",
   "(",
   "start",
   ",",
   "end",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "selections",
   ".",
   "add",
   "(",
   "getSelection",
   "(",
   "primaryKey",
   ",",
   "values",
   ")",
   ")",
   ";",
   "}",
   "int",
   "result",
   "=",
   "0",
   ";",
   "beginTransaction",
   "(",
   ")",
   ";",
   "try",
   "{",
   "for",
   "(",
   "Selection",
   "selection",
   ":",
   "selections",
   ")",
   "{",
   "result",
   "+=",
   "deleteInner",
   "(",
   "table",
   ".",
   "getTableName",
   "(",
   ")",
   ",",
   "selection",
   ")",
   ";",
   "}",
   "setTransactionSuccessful",
   "(",
   ")",
   ";",
   "}",
   "finally",
   "{",
   "endTransaction",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "shouldNotify",
   "&&",
   "result",
   ">",
   "0",
   ")",
   "{",
   "manager",
   ".",
   "notifyChange",
   "(",
   "table",
   ".",
   "getNotificationUri",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   "result",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-414",
  "nl_tokens": [
   "Calculate",
   "an",
   "affine",
   "transform",
   "based",
   "on",
   "the",
   "display",
   "size",
   "parameters",
   "-",
   "used",
   "for",
   "printing",
   ".",
   "@param",
   "rotate",
   "should",
   "the",
   "page",
   "be",
   "rotated?",
   "@param",
   "displayX",
   "upper",
   "right",
   "corner",
   "of",
   "display",
   "area",
   "@param",
   "displayY",
   "upper",
   "right",
   "corner",
   "of",
   "display",
   "area",
   "@param",
   "displayWidth",
   "display",
   "area",
   "@param",
   "displayHeight",
   "display",
   "area"
  ],
  "pl_tokens": [
   "public",
   "AffineTransform",
   "calcTransform",
   "(",
   "boolean",
   "rotate",
   ",",
   "double",
   "displayX",
   ",",
   "double",
   "displayY",
   ",",
   "double",
   "displayWidth",
   ",",
   "double",
   "displayHeight",
   ")",
   "{",
   "getMapArea",
   "(",
   "bb",
   ")",
   ";",
   "// current world bounding box",
   "// scale to limiting dimension",
   "double",
   "pxpsx",
   ",",
   "pypsy",
   ";",
   "if",
   "(",
   "rotate",
   ")",
   "{",
   "pxpsx",
   "=",
   "displayHeight",
   "/",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "pypsy",
   "=",
   "displayWidth",
   "/",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "pxpsx",
   "=",
   "displayWidth",
   "/",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   ";",
   "pypsy",
   "=",
   "displayHeight",
   "/",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   ";",
   "}",
   "double",
   "pps",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "pxpsx",
   ",",
   "pypsy",
   ")",
   ";",
   "// calc offset: based on center point staying in center",
   "double",
   "wx0",
   "=",
   "bb",
   ".",
   "getX",
   "(",
   ")",
   "+",
   "bb",
   ".",
   "getWidth",
   "(",
   ")",
   "/",
   "2",
   ";",
   "// world midpoint",
   "double",
   "wy0",
   "=",
   "bb",
   ".",
   "getY",
   "(",
   ")",
   "+",
   "bb",
   ".",
   "getHeight",
   "(",
   ")",
   "/",
   "2",
   ";",
   "double",
   "x0",
   "=",
   "displayX",
   "+",
   "displayWidth",
   "/",
   "2",
   "-",
   "pps",
   "*",
   "wx0",
   ";",
   "double",
   "y0",
   "=",
   "displayY",
   "+",
   "displayHeight",
   "/",
   "2",
   "+",
   "pps",
   "*",
   "wy0",
   ";",
   "AffineTransform",
   "cat",
   "=",
   "new",
   "AffineTransform",
   "(",
   "pps",
   ",",
   "0.0",
   ",",
   "0.0",
   ",",
   "-",
   "pps",
   ",",
   "x0",
   ",",
   "y0",
   ")",
   ";",
   "// rotate if we need to",
   "if",
   "(",
   "rotate",
   ")",
   "cat",
   ".",
   "rotate",
   "(",
   "Math",
   ".",
   "PI",
   "/",
   "2",
   ",",
   "wx0",
   ",",
   "wy0",
   ")",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"Navigation calcTransform = \"",
   "+",
   "displayX",
   "+",
   "\" \"",
   "+",
   "displayY",
   "+",
   "\" \"",
   "+",
   "displayWidth",
   "+",
   "\" \"",
   "+",
   "displayHeight",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"  world = \"",
   "+",
   "bb",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"  scale/origin = \"",
   "+",
   "pps",
   "+",
   "\" \"",
   "+",
   "x0",
   "+",
   "\" \"",
   "+",
   "y0",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"  transform = \"",
   "+",
   "cat",
   ")",
   ";",
   "}",
   "return",
   "cat",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-415",
  "nl_tokens": [
   "normal",
   "case",
   "already",
   "handled",
   "this",
   "is",
   "the",
   "case",
   "where",
   "a",
   "time",
   "has",
   "been",
   "specified",
   "and",
   "only",
   "one",
   "runtime"
  ],
  "pl_tokens": [
   "public",
   "Optional",
   "<",
   "TimeOffsetAxis",
   ">",
   "subsetFromTime",
   "(",
   "SubsetParams",
   "params",
   ",",
   "CalendarDate",
   "runDate",
   ")",
   "{",
   "CoordAxisHelper",
   "helper",
   "=",
   "new",
   "CoordAxisHelper",
   "(",
   "this",
   ")",
   ";",
   "CoverageCoordAxisBuilder",
   "builder",
   "=",
   "null",
   ";",
   "if",
   "(",
   "params",
   ".",
   "isTrue",
   "(",
   "SubsetParams",
   ".",
   "timePresent",
   ")",
   ")",
   "{",
   "double",
   "offset",
   "=",
   "getOffsetInTimeUnits",
   "(",
   "runDate",
   ",",
   "CalendarDate",
   ".",
   "present",
   "(",
   ")",
   ")",
   ";",
   "builder",
   "=",
   "helper",
   ".",
   "subsetClosest",
   "(",
   "offset",
   ")",
   ";",
   "}",
   "CalendarDate",
   "dateWanted",
   "=",
   "(",
   "CalendarDate",
   ")",
   "params",
   ".",
   "get",
   "(",
   "SubsetParams",
   ".",
   "time",
   ")",
   ";",
   "if",
   "(",
   "dateWanted",
   "!=",
   "null",
   ")",
   "{",
   "// convertFrom, convertTo",
   "double",
   "offset",
   "=",
   "getOffsetInTimeUnits",
   "(",
   "runDate",
   ",",
   "dateWanted",
   ")",
   ";",
   "builder",
   "=",
   "helper",
   ".",
   "subsetClosest",
   "(",
   "offset",
   ")",
   ";",
   "}",
   "Integer",
   "stride",
   "=",
   "(",
   "Integer",
   ")",
   "params",
   ".",
   "get",
   "(",
   "SubsetParams",
   ".",
   "timeStride",
   ")",
   ";",
   "if",
   "(",
   "stride",
   "==",
   "null",
   "||",
   "stride",
   "<",
   "0",
   ")",
   "stride",
   "=",
   "1",
   ";",
   "CalendarDateRange",
   "dateRange",
   "=",
   "(",
   "CalendarDateRange",
   ")",
   "params",
   ".",
   "get",
   "(",
   "SubsetParams",
   ".",
   "timeRange",
   ")",
   ";",
   "if",
   "(",
   "dateRange",
   "!=",
   "null",
   ")",
   "{",
   "double",
   "<mask>",
   "=",
   "getOffsetInTimeUnits",
   "(",
   "runDate",
   ",",
   "dateRange",
   ".",
   "getStart",
   "(",
   ")",
   ")",
   ";",
   "double",
   "max",
   "=",
   "getOffsetInTimeUnits",
   "(",
   "runDate",
   ",",
   "dateRange",
   ".",
   "getEnd",
   "(",
   ")",
   ")",
   ";",
   "Optional",
   "<",
   "CoverageCoordAxisBuilder",
   ">",
   "buildero",
   "=",
   "helper",
   ".",
   "subset",
   "(",
   "min",
   ",",
   "max",
   ",",
   "stride",
   ")",
   ";",
   "if",
   "(",
   "buildero",
   ".",
   "isPresent",
   "(",
   ")",
   ")",
   "builder",
   "=",
   "buildero",
   ".",
   "get",
   "(",
   ")",
   ";",
   "else",
   "return",
   "Optional",
   ".",
   "empty",
   "(",
   "buildero",
   ".",
   "getErrorMessage",
   "(",
   ")",
   ")",
   ";",
   "}",
   "assert",
   "(",
   "builder",
   "!=",
   "null",
   ")",
   ";",
   "// all the offsets are reletive to rundate",
   "builder",
   ".",
   "setReferenceDate",
   "(",
   "runDate",
   ")",
   ";",
   "return",
   "Optional",
   ".",
   "of",
   "(",
   "new",
   "TimeOffsetAxis",
   "(",
   "builder",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-416",
  "nl_tokens": [
   "/",
   "*",
   "When",
   "we",
   "start",
   "with",
   "a",
   "file",
   "(",
   "empty",
   "or",
   "not",
   ")",
   "the",
   "file",
   "offset",
   "is",
   "zero",
   ".",
   "If",
   "the",
   "file",
   "is",
   "a",
   "rolled",
   "file",
   "the",
   "file",
   "will",
   "be",
   "EOF",
   "immediately",
   "triggering",
   "a",
   "close",
   "of",
   "the",
   "reader",
   "and",
   "setting",
   "the",
   "offset",
   "to",
   "Long",
   ".",
   "MAX_VALUE",
   "(",
   "this",
   "happens",
   "in",
   "the",
   "MultiDirectoryReader",
   "class",
   ")",
   ".",
   "This",
   "is",
   "the",
   "signal",
   "that",
   "in",
   "the",
   "next",
   "read",
   "a",
   "directory",
   "scan",
   "should",
   "be",
   "triggered",
   "to",
   "get",
   "the",
   "next",
   "rolled",
   "file",
   "or",
   "the",
   "live",
   "file",
   "if",
   "we",
   "were",
   "scanning",
   "the",
   "last",
   "rolled",
   "file",
   ".",
   "If",
   "the",
   "file",
   "you",
   "are",
   "starting",
   "is",
   "the",
   "live",
   "file",
   "we",
   "don",
   "t",
   "get",
   "an",
   "EOF",
   "as",
   "we",
   "expect",
   "data",
   "to",
   "be",
   "appended",
   ".",
   "We",
   "just",
   "return",
   "null",
   "chunks",
   "while",
   "there",
   "is",
   "no",
   "data",
   ".",
   "If",
   "the",
   "file",
   "is",
   "rolled",
   "we",
   "ll",
   "detect",
   "that",
   "and",
   "then",
   "do",
   "what",
   "is",
   "described",
   "in",
   "the",
   "previous",
   "paragraph",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "String",
   "produce",
   "(",
   "String",
   "lastSourceOffset",
   ",",
   "int",
   "maxBatchSize",
   ",",
   "BatchMaker",
   "batchMaker",
   ")",
   "throws",
   "StageException",
   "{",
   "int",
   "recordCounter",
   "=",
   "0",
   ";",
   "long",
   "startTime",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "maxBatchSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "conf",
   ".",
   "batchSize",
   ",",
   "maxBatchSize",
   ")",
   ";",
   "// deserializing offsets of all directories",
   "Map",
   "<",
   "String",
   ",",
   "String",
   ">",
   "offsetMap",
   "=",
   "deserializeOffsetMap",
   "(",
   "lastSourceOffset",
   ")",
   ";",
   "boolean",
   "offsetSet",
   "=",
   "false",
   ";",
   "while",
   "(",
   "!",
   "offsetSet",
   ")",
   "{",
   "try",
   "{",
   "multiDirReader",
   ".",
   "setOffsets",
   "(",
   "offsetMap",
   ")",
   ";",
   "offsetSet",
   "=",
   "true",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "ex",
   ")",
   "{",
   "LOG",
   ".",
   "warn",
   "(",
   "\"Error while creating reading previous offset: {}\"",
   ",",
   "ex",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "multiDirReader",
   ".",
   "purge",
   "(",
   ")",
   ";",
   "}",
   "}",
   "while",
   "(",
   "recordCounter",
   "<",
   "maxBatchSize",
   "&&",
   "!",
   "isTimeout",
   "(",
   "startTime",
   ")",
   ")",
   "{",
   "LiveFileChunk",
   "chunk",
   "=",
   "multiDirReader",
   ".",
   "next",
   "(",
   "getRemainingWaitTime",
   "(",
   "startTime",
   ")",
   ")",
   ";",
   "if",
   "(",
   "chunk",
   "!=",
   "null",
   ")",
   "{",
   "String",
   "tag",
   "=",
   "chunk",
   ".",
   "getTag",
   "(",
   ")",
   ";",
   "tag",
   "=",
   "(",
   "tag",
   "!=",
   "null",
   "&&",
   "tag",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "?",
   "null",
   ":",
   "tag",
   ";",
   "String",
   "liveFileStr",
   "=",
   "chunk",
   ".",
   "getFile",
   "(",
   ")",
   ".",
   "serialize",
   "(",
   ")",
   ";",
   "List",
   "<",
   "FileLine",
   ">",
   "lines",
   "=",
   "chunk",
   ".",
   "getLines",
   "(",
   ")",
   ";",
   "int",
   "truncatedLine",
   "=",
   "chunk",
   ".",
   "isTruncated",
   "(",
   ")",
   "?",
   "lines",
   ".",
   "size",
   "(",
   ")",
   "-",
   "1",
   ":",
   "-",
   "1",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "lines",
   ".",
   "size",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "FileLine",
   "line",
   "=",
   "lines",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "String",
   "sourceId",
   "=",
   "liveFileStr",
   "+",
   "\"::\"",
   "+",
   "line",
   ".",
   "getFileOffset",
   "(",
   ")",
   ";",
   "try",
   "(",
   "DataParser",
   "parser",
   "=",
   "parserFactory",
   ".",
   "getParser",
   "(",
   "sourceId",
   ",",
   "line",
   ".",
   "getText",
   "(",
   ")",
   ")",
   ")",
   "{",
   "if",
   "(",
   "i",
   "==",
   "truncatedLine",
   ")",
   "{",
   "//set truncated",
   "parser",
   ".",
   "setTruncated",
   "(",
   ")",
   ";",
   "}",
   "Record",
   "record",
   "=",
   "parser",
   ".",
   "parse",
   "(",
   ")",
   ";",
   "if",
   "(",
   "record",
   "!=",
   "null",
   ")",
   "{",
   "if",
   "(",
   "tag",
   "!=",
   "null",
   ")",
   "{",
   "record",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setAttribute",
   "(",
   "\"tag\"",
   ",",
   "tag",
   ")",
   ";",
   "}",
   "record",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setAttribute",
   "(",
   "HeaderAttributeConstants",
   ".",
   "FILE",
   ",",
   "chunk",
   ".",
   "getFile",
   "(",
   ")",
   ".",
   "getPath",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "record",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setAttribute",
   "(",
   "HeaderAttributeConstants",
   ".",
   "FILE_NAME",
   ",",
   "chunk",
   ".",
   "getFile",
   "(",
   ")",
   ".",
   "getPath",
   "(",
   ")",
   ".",
   "getFileName",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "record",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setAttribute",
   "(",
   "HeaderAttributeConstants",
   ".",
   "OFFSET",
   ",",
   "String",
   ".",
   "valueOf",
   "(",
   "line",
   ".",
   "getFileOffset",
   "(",
   ")",
   ")",
   ")",
   ";",
   "record",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "setAttribute",
   "(",
   "HeaderAttributeConstants",
   ".",
   "LAST_MODIFIED_TIME",
   ",",
   "String",
   ".",
   "valueOf",
   "(",
   "Files",
   ".",
   "getLastModifiedTime",
   "(",
   "chunk",
   ".",
   "getFile",
   "(",
   ")",
   ".",
   "getPath",
   "(",
   ")",
   ")",
   ".",
   "toMillis",
   "(",
   ")",
   ")",
   ")",
   ";",
   "batchMaker",
   ".",
   "addRecord",
   "(",
   "record",
   ",",
   "outputLane",
   ")",
   ";",
   "recordCounter",
   "++",
   ";",
   "}",
   "}",
   "catch",
   "(",
   "IOException",
   "|",
   "DataParserException",
   "ex",
   ")",
   "{",
   "errorRecordHandler",
   ".",
   "onError",
   "(",
   "Errors",
   ".",
   "TAIL_12",
   ",",
   "sourceId",
   ",",
   "ex",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}",
   "boolean",
   "metadataGenerationFailure",
   "=",
   "false",
   ";",
   "Date",
   "now",
   "=",
   "new",
   "Date",
   "(",
   "startTime",
   ")",
   ";",
   "for",
   "(",
   "FileEvent",
   "event",
   ":",
   "multiDirReader",
   ".",
   "getEvents",
   "(",
   ")",
   ")",
   "{",
   "try",
   "{",
   "LiveFile",
   "file",
   "=",
   "event",
   ".",
   "getFile",
   "(",
   ")",
   ".",
   "refresh",
   "(",
   ")",
   ";",
   "Record",
   "metadataRecord",
   "=",
   "getContext",
   "(",
   ")",
   ".",
   "createRecord",
   "(",
   "\"\"",
   ")",
   ";",
   "Map",
   "<",
   "String",
   ",",
   "Field",
   ">",
   "map",
   "=",
   "new",
   "HashMap",
   "<>",
   "(",
   ")",
   ";",
   "map",
   ".",
   "put",
   "(",
   "\"fileName\"",
   ",",
   "Field",
   ".",
   "create",
   "(",
   "file",
   ".",
   "getPath",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ")",
   ";",
   "map",
   ".",
   "put",
   "(",
   "\"inode\"",
   ",",
   "Field",
   ".",
   "create",
   "(",
   "file",
   ".",
   "getINode",
   "(",
   ")",
   ")",
   ")",
   ";",
   "map",
   ".",
   "put",
   "(",
   "\"time\"",
   ",",
   "Field",
   ".",
   "createDate",
   "(",
   "now",
   ")",
   ")",
   ";",
   "map",
   ".",
   "put",
   "(",
   "\"event\"",
   ",",
   "Field",
   ".",
   "create",
   "(",
   "(",
   "event",
   ".",
   "getAction",
   "(",
   ")",
   ".",
   "name",
   "(",
   ")",
   ")",
   ")",
   ")",
   ";",
   "metadataRecord",
   ".",
   "set",
   "(",
   "Field",
   ".",
   "create",
   "(",
   "map",
   ")",
   ")",
   ";",
   "batchMaker",
   ".",
   "addRecord",
   "(",
   "metadataRecord",
   ",",
   "metadataLane",
   ")",
   ";",
   "// We're also sending the same information on event lane",
   "String",
   "eventRecordSourceId",
   "=",
   "Utils",
   ".",
   "format",
   "(",
   "\"event:{}:{}:{}\"",
   ",",
   "event",
   ".",
   "getAction",
   "(",
   ")",
   ".",
   "name",
   "(",
   ")",
   ",",
   "1",
   ",",
   "file",
   ".",
   "getPath",
   "(",
   ")",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "EventRecord",
   "eventRecord",
   "=",
   "getContext",
   "(",
   ")",
   ".",
   "createEventRecord",
   "(",
   "event",
   ".",
   "getAction",
   "(",
   ")",
   ".",
   "name",
   "(",
   ")",
   ",",
   "1",
   ",",
   "eventRecordSourceId",
   ")",
   ";",
   "eventRecord",
   ".",
   "set",
   "(",
   "Field",
   ".",
   "create",
   "(",
   "map",
   ")",
   ")",
   ";",
   "getContext",
   "(",
   ")",
   ".",
   "toEvent",
   "(",
   "eventRecord",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "ex",
   ")",
   "{",
   "LOG",
   ".",
   "warn",
   "(",
   "\"Error while creating metadata records: {}\"",
   ",",
   "ex",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "metadataGenerationFailure",
   "=",
   "true",
   ";",
   "}",
   "}",
   "if",
   "(",
   "metadataGenerationFailure",
   ")",
   "{",
   "multiDirReader",
   ".",
   "purge",
   "(",
   ")",
   ";",
   "}",
   "boolean",
   "offsetExtracted",
   "=",
   "false",
   ";",
   "while",
   "(",
   "!",
   "offsetExtracted",
   ")",
   "{",
   "try",
   "{",
   "offsetMap",
   "=",
   "multiDirReader",
   ".",
   "getOffsets",
   "(",
   ")",
   ";",
   "offsetExtracted",
   "=",
   "true",
   ";",
   "}",
   "catch",
   "(",
   "IOException",
   "ex",
   ")",
   "{",
   "LOG",
   ".",
   "warn",
   "(",
   "\"Error while creating creating new offset: {}\"",
   ",",
   "ex",
   ".",
   "toString",
   "(",
   ")",
   ",",
   "ex",
   ")",
   ";",
   "multiDirReader",
   ".",
   "purge",
   "(",
   ")",
   ";",
   "}",
   "}",
   "//Calculate Offset lag Metric.",
   "calculateOffsetLagMetric",
   "(",
   "offsetMap",
   ")",
   ";",
   "//Calculate Pending Files Metric",
   "calculatePendingFilesMetric",
   "(",
   ")",
   ";",
   "// serializing offsets of all directories",
   "return",
   "serializeOffsetMap",
   "(",
   "offsetMap",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-417",
  "nl_tokens": [
   "Finds",
   "the",
   "distance",
   "squared",
   "between",
   "the",
   "two",
   "line",
   "segments"
  ],
  "pl_tokens": [
   "public",
   "static",
   "double",
   "distanceSq",
   "(",
   "LineSegment2D_F64",
   "segmentA",
   ",",
   "LineSegment2D_F64",
   "segmentB",
   ")",
   "{",
   "// intersection of the two lines relative to A",
   "double",
   "slopeAX",
   "=",
   "segmentA",
   ".",
   "slopeX",
   "(",
   ")",
   ";",
   "double",
   "slopeAY",
   "=",
   "segmentA",
   ".",
   "slopeY",
   "(",
   ")",
   ";",
   "double",
   "slopeBX",
   "=",
   "segmentB",
   ".",
   "slopeX",
   "(",
   ")",
   ";",
   "double",
   "slopeBY",
   "=",
   "segmentB",
   ".",
   "slopeY",
   "(",
   ")",
   ";",
   "double",
   "ta",
   "=",
   "slopeBX",
   "*",
   "(",
   "segmentA",
   ".",
   "a",
   ".",
   "y",
   "-",
   "segmentB",
   ".",
   "a",
   ".",
   "y",
   ")",
   "-",
   "slopeBY",
   "*",
   "(",
   "segmentA",
   ".",
   "a",
   ".",
   "x",
   "-",
   "segmentB",
   ".",
   "a",
   ".",
   "x",
   ")",
   ";",
   "double",
   "bottom",
   "=",
   "slopeBY",
   "*",
   "slopeAX",
   "-",
   "slopeAY",
   "*",
   "slopeBX",
   ";",
   "// see they intersect",
   "if",
   "(",
   "bottom",
   "!=",
   "0",
   ")",
   "{",
   "// see if the intersection is inside of lineA",
   "ta",
   "/=",
   "bottom",
   ";",
   "if",
   "(",
   "ta",
   ">=",
   "0",
   "&&",
   "ta",
   "<=",
   "1.0",
   ")",
   "{",
   "// see if the intersection is inside of lineB",
   "double",
   "tb",
   "=",
   "slopeAX",
   "*",
   "(",
   "segmentB",
   ".",
   "a",
   ".",
   "y",
   "-",
   "segmentA",
   ".",
   "a",
   ".",
   "y",
   ")",
   "-",
   "slopeAY",
   "*",
   "(",
   "segmentB",
   ".",
   "a",
   ".",
   "x",
   "-",
   "segmentA",
   ".",
   "a",
   ".",
   "x",
   ")",
   ";",
   "tb",
   "/=",
   "slopeAY",
   "*",
   "slopeBX",
   "-",
   "slopeBY",
   "*",
   "slopeAX",
   ";",
   "if",
   "(",
   "tb",
   ">=",
   "0",
   "&&",
   "tb",
   "<=",
   "1.0",
   ")",
   "return",
   "0",
   ";",
   "}",
   "}",
   "double",
   "closest",
   "=",
   "Double",
   ".",
   "MAX_VALUE",
   ";",
   "closest",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "closest",
   ",",
   "distanceSq",
   "(",
   "segmentA",
   ",",
   "segmentB",
   ".",
   "a",
   ")",
   ")",
   ";",
   "closest",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "closest",
   ",",
   "distanceSq",
   "(",
   "segmentA",
   ",",
   "segmentB",
   ".",
   "b",
   ")",
   ")",
   ";",
   "closest",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "closest",
   ",",
   "distanceSq",
   "(",
   "segmentB",
   ",",
   "segmentA",
   ".",
   "a",
   ")",
   ")",
   ";",
   "closest",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "closest",
   ",",
   "distanceSq",
   "(",
   "segmentB",
   ",",
   "segmentA",
   ".",
   "b",
   ")",
   ")",
   ";",
   "return",
   "closest",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-418",
  "nl_tokens": [
   "Print",
   "the",
   "counter",
   "values",
   "as",
   "a",
   "horizontal",
   "bar",
   "chart",
   ".",
   "Scale",
   "the",
   "chart",
   "so",
   "that",
   "the",
   "longest",
   "bar",
   "is",
   "MAX_BAR_SIZE",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "print",
   "(",
   ")",
   "{",
   "// Get the longest bar's length.",
   "int",
   "maxCount",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "m_n",
   ";",
   "++",
   "i",
   ")",
   "{",
   "maxCount",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxCount",
   ",",
   "m_aCounters",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "// Compute the scaling factor.",
   "final",
   "float",
   "factor",
   "=",
   "(",
   "(",
   "float",
   ")",
   "MAX_BAR_SIZE",
   ")",
   "/",
   "maxCount",
   ";",
   "// Loop to print each bar.",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "m_n",
   ";",
   "++",
   "i",
   ")",
   "{",
   "final",
   "int",
   "b",
   "=",
   "m_aCounters",
   "[",
   "i",
   "]",
   ";",
   "// Interval number.",
   "m_aAlignRight",
   ".",
   "print",
   "(",
   "i",
   ",",
   "2",
   ")",
   ";",
   "m_aAlignRight",
   ".",
   "print",
   "(",
   "b",
   ",",
   "7",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "print",
   "(",
   "\": \"",
   ")",
   ";",
   "// Bar.",
   "final",
   "int",
   "length",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "factor",
   "*",
   "b",
   ")",
   ";",
   "for",
   "(",
   "int",
   "j",
   "=",
   "0",
   ";",
   "j",
   "<",
   "length",
   ";",
   "++",
   "j",
   ")",
   "System",
   ".",
   "out",
   ".",
   "print",
   "(",
   "\"*\"",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-419",
  "nl_tokens": [
   "Min"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "<mask>",
   "(",
   "int",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "int",
   "min",
   "=",
   "Integer",
   ".",
   "MAX_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   "<",
   "min",
   ")",
   "min",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "return",
   "min",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-420",
  "nl_tokens": [
   "Sends",
   "the",
   "body",
   "to",
   "the",
   "specified",
   "OutputStream",
   ".",
   "The",
   "pending",
   "parameter",
   "limits",
   "the",
   "maximum",
   "amounts",
   "of",
   "bytes",
   "sent",
   "unless",
   "it",
   "is",
   "-",
   "1",
   "in",
   "which",
   "case",
   "everything",
   "is",
   "sent",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "sendBody",
   "(",
   "OutputStream",
   "outputStream",
   ",",
   "long",
   "pending",
   ")",
   "throws",
   "IOException",
   "{",
   "long",
   "BUFFER_SIZE",
   "=",
   "16",
   "*",
   "1024",
   ";",
   "byte",
   "[",
   "]",
   "buff",
   "=",
   "new",
   "byte",
   "[",
   "(",
   "int",
   ")",
   "BUFFER_SIZE",
   "]",
   ";",
   "boolean",
   "sendEverything",
   "=",
   "pending",
   "==",
   "-",
   "1",
   ";",
   "while",
   "(",
   "pending",
   ">",
   "0",
   "||",
   "sendEverything",
   ")",
   "{",
   "long",
   "bytesToRead",
   "=",
   "sendEverything",
   "?",
   "BUFFER_SIZE",
   ":",
   "Math",
   ".",
   "<mask>",
   "(",
   "pending",
   ",",
   "BUFFER_SIZE",
   ")",
   ";",
   "int",
   "read",
   "=",
   "this",
   ".",
   "data",
   ".",
   "read",
   "(",
   "buff",
   ",",
   "0",
   ",",
   "(",
   "int",
   ")",
   "bytesToRead",
   ")",
   ";",
   "if",
   "(",
   "read",
   "<=",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "try",
   "{",
   "outputStream",
   ".",
   "write",
   "(",
   "buff",
   ",",
   "0",
   ",",
   "read",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "if",
   "(",
   "this",
   ".",
   "data",
   "!=",
   "null",
   ")",
   "{",
   "this",
   ".",
   "data",
   ".",
   "close",
   "(",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "!",
   "sendEverything",
   ")",
   "{",
   "pending",
   "-=",
   "read",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-421",
  "nl_tokens": [
   "Suffix",
   "matches",
   "are",
   "matches",
   "of",
   "type",
   "*",
   "/",
   "x",
   "/",
   "y"
  ],
  "pl_tokens": [
   "List",
   "<",
   "Action",
   ">",
   "suffixMatch",
   "(",
   "ElementPath",
   "elementPath",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "0",
   ";",
   "ElementSelector",
   "longestMatchingElementSelector",
   "=",
   "null",
   ";",
   "for",
   "(",
   "ElementSelector",
   "selector",
   ":",
   "rules",
   ".",
   "keySet",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "isSuffixPattern",
   "(",
   "selector",
   ")",
   ")",
   "{",
   "int",
   "r",
   "=",
   "selector",
   ".",
   "getTailMatchLength",
   "(",
   "elementPath",
   ")",
   ";",
   "if",
   "(",
   "r",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "r",
   ";",
   "longestMatchingElementSelector",
   "=",
   "selector",
   ";",
   "}",
   "}",
   "}",
   "if",
   "(",
   "longestMatchingElementSelector",
   "!=",
   "null",
   ")",
   "{",
   "return",
   "rules",
   ".",
   "get",
   "(",
   "longestMatchingElementSelector",
   ")",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-422",
  "nl_tokens": [
   "Returns",
   "the",
   "max",
   "value",
   "of",
   "the",
   "object",
   "with",
   "the",
   "property",
   "given",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "T",
   "[",
   "]",
   "array",
   ",",
   "String",
   "sortBy",
   ")",
   "{",
   "if",
   "(",
   "array",
   ".",
   "length",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sortDesc",
   "(",
   "array",
   ",",
   "sortBy",
   ")",
   ";",
   "return",
   "array",
   "[",
   "0",
   "]",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-423",
  "nl_tokens": [
   "Signals",
   "a",
   "range",
   "of",
   "long",
   "values",
   "the",
   "first",
   "after",
   "some",
   "initial",
   "delay",
   "and",
   "the",
   "rest",
   "periodically",
   "after",
   ".",
   "<p",
   ">",
   "The",
   "sequence",
   "completes",
   "immediately",
   "after",
   "the",
   "last",
   "value",
   "(",
   "start",
   "+",
   "count",
   "-",
   "1",
   ")",
   "has",
   "been",
   "reached",
   ".",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Backpressure",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "The",
   "operator",
   "signals",
   "a",
   "{"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "BackpressureSupport",
   "(",
   "BackpressureKind",
   ".",
   "ERROR",
   ")",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "static",
   "Flowable",
   "<",
   "Long",
   ">",
   "intervalRange",
   "(",
   "long",
   "start",
   ",",
   "long",
   "count",
   ",",
   "long",
   "initialDelay",
   ",",
   "long",
   "period",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "if",
   "(",
   "count",
   "<",
   "0L",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"count >= 0 required but it was \"",
   "+",
   "count",
   ")",
   ";",
   "}",
   "if",
   "(",
   "count",
   "==",
   "0L",
   ")",
   "{",
   "return",
   "Flowable",
   ".",
   "<",
   "Long",
   ">",
   "empty",
   "(",
   ")",
   ".",
   "delay",
   "(",
   "initialDelay",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ";",
   "}",
   "long",
   "end",
   "=",
   "start",
   "+",
   "(",
   "count",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "start",
   ">",
   "0",
   "&&",
   "end",
   "<",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"Overflow! start + count is bigger than Long.MAX_VALUE\"",
   ")",
   ";",
   "}",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "FlowableIntervalRange",
   "(",
   "start",
   ",",
   "end",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "initialDelay",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0L",
   ",",
   "period",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-424",
  "nl_tokens": [
   "Read",
   "directly",
   "from",
   "file",
   "without",
   "going",
   "through",
   "the",
   "buffer",
   ".",
   "All",
   "reading",
   "goes",
   "through",
   "here",
   "or",
   "readToByteChannel",
   ";"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "protected",
   "int",
   "read_",
   "(",
   "long",
   "pos",
   ",",
   "byte",
   "[",
   "]",
   "buff",
   ",",
   "int",
   "offset",
   ",",
   "int",
   "len",
   ")",
   "throws",
   "IOException",
   "{",
   "long",
   "end",
   "=",
   "pos",
   "+",
   "len",
   "-",
   "1",
   ";",
   "if",
   "(",
   "end",
   ">=",
   "total_length",
   ")",
   "end",
   "=",
   "total_length",
   "-",
   "1",
   ";",
   "if",
   "(",
   "debug",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\" HTTPRandomAccessFile bytes=\"",
   "+",
   "pos",
   "+",
   "\"-\"",
   "+",
   "end",
   "+",
   "\": \"",
   ")",
   ";",
   "try",
   "(",
   "HTTPMethod",
   "method",
   "=",
   "HTTPFactory",
   ".",
   "Get",
   "(",
   "session",
   ",",
   "url",
   ")",
   ")",
   "{",
   "method",
   ".",
   "setFollowRedirects",
   "(",
   "true",
   ")",
   ";",
   "method",
   ".",
   "setRange",
   "(",
   "pos",
   ",",
   "end",
   ")",
   ";",
   "doConnect",
   "(",
   "method",
   ")",
   ";",
   "int",
   "code",
   "=",
   "method",
   ".",
   "getStatusCode",
   "(",
   ")",
   ";",
   "if",
   "(",
   "code",
   "!=",
   "206",
   ")",
   "throw",
   "new",
   "IOException",
   "(",
   "\"Server does not support Range requests, code= \"",
   "+",
   "code",
   ")",
   ";",
   "String",
   "s",
   "=",
   "method",
   ".",
   "getResponseHeader",
   "(",
   "\"Content-Length\"",
   ")",
   ".",
   "getValue",
   "(",
   ")",
   ";",
   "if",
   "(",
   "s",
   "==",
   "null",
   ")",
   "throw",
   "new",
   "IOException",
   "(",
   "\"Server does not send Content-Length header\"",
   ")",
   ";",
   "int",
   "readLen",
   "=",
   "Integer",
   ".",
   "parseInt",
   "(",
   "s",
   ")",
   ";",
   "readLen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "len",
   ",",
   "readLen",
   ")",
   ";",
   "InputStream",
   "is",
   "=",
   "method",
   ".",
   "getResponseAsStream",
   "(",
   ")",
   ";",
   "readLen",
   "=",
   "copy",
   "(",
   "is",
   ",",
   "buff",
   ",",
   "offset",
   ",",
   "readLen",
   ")",
   ";",
   "return",
   "readLen",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-425",
  "nl_tokens": [
   "Get",
   "the",
   "tile",
   "count",
   "of",
   "tiles",
   "to",
   "be",
   "generated"
  ],
  "pl_tokens": [
   "public",
   "int",
   "getTileCount",
   "(",
   ")",
   "{",
   "if",
   "(",
   "tileCount",
   "==",
   "null",
   ")",
   "{",
   "long",
   "count",
   "=",
   "0",
   ";",
   "boolean",
   "degrees",
   "=",
   "projection",
   ".",
   "isUnit",
   "(",
   "Units",
   ".",
   "DEGREES",
   ")",
   ";",
   "ProjectionTransform",
   "transformToWebMercator",
   "=",
   "null",
   ";",
   "if",
   "(",
   "!",
   "degrees",
   ")",
   "{",
   "transformToWebMercator",
   "=",
   "projection",
   ".",
   "getTransformation",
   "(",
   "ProjectionConstants",
   ".",
   "EPSG_WEB_MERCATOR",
   ")",
   ";",
   "}",
   "for",
   "(",
   "int",
   "zoom",
   "=",
   "minZoom",
   ";",
   "zoom",
   "<=",
   "maxZoom",
   ";",
   "zoom",
   "++",
   ")",
   "{",
   "BoundingBox",
   "expandedBoundingBox",
   "=",
   "getBoundingBox",
   "(",
   "zoom",
   ")",
   ";",
   "// Get the tile grid that includes the entire bounding box",
   "TileGrid",
   "tileGrid",
   "=",
   "null",
   ";",
   "if",
   "(",
   "degrees",
   ")",
   "{",
   "tileGrid",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getTileGridWGS84",
   "(",
   "expandedBoundingBox",
   ",",
   "zoom",
   ")",
   ";",
   "}",
   "else",
   "{",
   "tileGrid",
   "=",
   "TileBoundingBoxUtils",
   ".",
   "getTileGrid",
   "(",
   "expandedBoundingBox",
   ".",
   "transform",
   "(",
   "transformToWebMercator",
   ")",
   ",",
   "zoom",
   ")",
   ";",
   "}",
   "count",
   "+=",
   "tileGrid",
   ".",
   "count",
   "(",
   ")",
   ";",
   "tileGrids",
   ".",
   "put",
   "(",
   "zoom",
   ",",
   "tileGrid",
   ")",
   ";",
   "tileBounds",
   ".",
   "put",
   "(",
   "zoom",
   ",",
   "expandedBoundingBox",
   ")",
   ";",
   "}",
   "tileCount",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "count",
   ",",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   ";",
   "}",
   "return",
   "tileCount",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-426",
  "nl_tokens": [
   "Helper",
   "method",
   "which",
   "just",
   "calls",
   "scrollTo",
   "()",
   "in",
   "the",
   "correct",
   "scrolling",
   "direction",
   "."
  ],
  "pl_tokens": [
   "protected",
   "final",
   "void",
   "setHeaderScroll",
   "(",
   "int",
   "value",
   ")",
   "{",
   "if",
   "(",
   "DEBUG",
   ")",
   "{",
   "Log",
   ".",
   "d",
   "(",
   "LOG_TAG",
   ",",
   "\"setHeaderScroll: \"",
   "+",
   "value",
   ")",
   ";",
   "}",
   "// Clamp value to with pull scroll range",
   "final",
   "int",
   "maximumPullScroll",
   "=",
   "getMaximumPullScroll",
   "(",
   ")",
   ";",
   "value",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maximumPullScroll",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "-",
   "maximumPullScroll",
   ",",
   "value",
   ")",
   ")",
   ";",
   "if",
   "(",
   "mLayoutVisibilityChangesEnabled",
   ")",
   "{",
   "if",
   "(",
   "value",
   "<",
   "0",
   ")",
   "{",
   "mHeaderLayout",
   ".",
   "setVisibility",
   "(",
   "View",
   ".",
   "VISIBLE",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "value",
   ">",
   "0",
   ")",
   "{",
   "mFooterLayout",
   ".",
   "setVisibility",
   "(",
   "View",
   ".",
   "VISIBLE",
   ")",
   ";",
   "}",
   "else",
   "{",
   "mHeaderLayout",
   ".",
   "setVisibility",
   "(",
   "View",
   ".",
   "INVISIBLE",
   ")",
   ";",
   "mFooterLayout",
   ".",
   "setVisibility",
   "(",
   "View",
   ".",
   "INVISIBLE",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "USE_HW_LAYERS",
   ")",
   "{",
   "/**\n\t\t\t * Use a Hardware Layer on the Refreshable View if we've scrolled at\n\t\t\t * all. We don't use them on the Header/Footer Views as they change\n\t\t\t * often, which would negate any HW layer performance boost.\n\t\t\t */",
   "ViewCompat",
   ".",
   "setLayerType",
   "(",
   "mRefreshableViewWrapper",
   ",",
   "value",
   "!=",
   "0",
   "?",
   "View",
   ".",
   "LAYER_TYPE_HARDWARE",
   ":",
   "View",
   ".",
   "LAYER_TYPE_NONE",
   ")",
   ";",
   "}",
   "switch",
   "(",
   "getPullToRefreshScrollDirection",
   "(",
   ")",
   ")",
   "{",
   "case",
   "VERTICAL",
   ":",
   "scrollTo",
   "(",
   "0",
   ",",
   "value",
   ")",
   ";",
   "break",
   ";",
   "case",
   "HORIZONTAL",
   ":",
   "scrollTo",
   "(",
   "value",
   ",",
   "0",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-427",
  "nl_tokens": [
   "Create",
   "a",
   "frame",
   "out",
   "of",
   "the",
   "{",
   "@link",
   "ByteBuf",
   "}",
   "and",
   "return",
   "it",
   "."
  ],
  "pl_tokens": [
   "protected",
   "Object",
   "decode",
   "(",
   "ChannelHandlerContext",
   "ctx",
   ",",
   "ByteBuf",
   "in",
   ")",
   "throws",
   "Exception",
   "{",
   "if",
   "(",
   "discardingTooLongFrame",
   ")",
   "{",
   "long",
   "bytesToDiscard",
   "=",
   "this",
   ".",
   "bytesToDiscard",
   ";",
   "int",
   "localBytesToDiscard",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "bytesToDiscard",
   ",",
   "in",
   ".",
   "readableBytes",
   "(",
   ")",
   ")",
   ";",
   "in",
   ".",
   "skipBytes",
   "(",
   "localBytesToDiscard",
   ")",
   ";",
   "bytesToDiscard",
   "-=",
   "localBytesToDiscard",
   ";",
   "this",
   ".",
   "bytesToDiscard",
   "=",
   "bytesToDiscard",
   ";",
   "failIfNecessary",
   "(",
   "false",
   ")",
   ";",
   "return",
   "null",
   ";",
   "}",
   "if",
   "(",
   "consumingLength",
   ")",
   "{",
   "int",
   "delimIndex",
   "=",
   "indexOf",
   "(",
   "in",
   ",",
   "delimiter",
   ")",
   ";",
   "if",
   "(",
   "delimIndex",
   "<",
   "0",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "final",
   "String",
   "lengthStr",
   "=",
   "in",
   ".",
   "toString",
   "(",
   "in",
   ".",
   "readerIndex",
   "(",
   ")",
   ",",
   "delimIndex",
   ",",
   "lengthFieldCharset",
   ")",
   ";",
   "try",
   "{",
   "frameLength",
   "=",
   "Long",
   ".",
   "parseLong",
   "(",
   "trimLengthString",
   "?",
   "lengthStr",
   ".",
   "trim",
   "(",
   ")",
   ":",
   "lengthStr",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "NumberFormatException",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "CorruptedFrameException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Invalid length field decoded (in %s charset): %s\"",
   ",",
   "lengthFieldCharset",
   ".",
   "name",
   "(",
   ")",
   ",",
   "lengthStr",
   ")",
   ",",
   "e",
   ")",
   ";",
   "}",
   "if",
   "(",
   "frameLength",
   "<",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "CorruptedFrameException",
   "(",
   "\"negative pre-adjustment length field: \"",
   "+",
   "frameLength",
   ")",
   ";",
   "}",
   "frameLength",
   "+=",
   "lengthAdjustment",
   ";",
   "//consume length field and delimiter bytes",
   "in",
   ".",
   "skipBytes",
   "(",
   "delimIndex",
   "+",
   "delimiter",
   ".",
   "capacity",
   "(",
   ")",
   ")",
   ";",
   "//consume delimiter bytes",
   "consumingLength",
   "=",
   "false",
   ";",
   "}",
   "if",
   "(",
   "frameLength",
   ">",
   "maxFrameLength",
   ")",
   "{",
   "long",
   "discard",
   "=",
   "frameLength",
   "-",
   "in",
   ".",
   "readableBytes",
   "(",
   ")",
   ";",
   "tooLongFrameLength",
   "=",
   "frameLength",
   ";",
   "if",
   "(",
   "discard",
   "<",
   "0",
   ")",
   "{",
   "// buffer contains more bytes then the frameLength so we can discard all now",
   "in",
   ".",
   "skipBytes",
   "(",
   "(",
   "int",
   ")",
   "frameLength",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// Enter the discard mode and discard everything received so far.",
   "discardingTooLongFrame",
   "=",
   "true",
   ";",
   "consumingLength",
   "=",
   "true",
   ";",
   "bytesToDiscard",
   "=",
   "discard",
   ";",
   "in",
   ".",
   "skipBytes",
   "(",
   "in",
   ".",
   "readableBytes",
   "(",
   ")",
   ")",
   ";",
   "}",
   "failIfNecessary",
   "(",
   "true",
   ")",
   ";",
   "return",
   "null",
   ";",
   "}",
   "// never overflows because it's less than maxFrameLength",
   "int",
   "frameLengthInt",
   "=",
   "(",
   "int",
   ")",
   "frameLength",
   ";",
   "if",
   "(",
   "in",
   ".",
   "readableBytes",
   "(",
   ")",
   "<",
   "frameLengthInt",
   ")",
   "{",
   "// need more bytes available to read actual frame",
   "return",
   "null",
   ";",
   "}",
   "// the frame is now entirely present, reset state vars",
   "consumingLength",
   "=",
   "true",
   ";",
   "frameLength",
   "=",
   "0",
   ";",
   "// extract frame",
   "int",
   "readerIndex",
   "=",
   "in",
   ".",
   "readerIndex",
   "(",
   ")",
   ";",
   "int",
   "actualFrameLength",
   "=",
   "frameLengthInt",
   ";",
   "// - initialBytesToStrip;",
   "ByteBuf",
   "frame",
   "=",
   "extractFrame",
   "(",
   "ctx",
   ",",
   "in",
   ",",
   "readerIndex",
   ",",
   "actualFrameLength",
   ")",
   ";",
   "in",
   ".",
   "readerIndex",
   "(",
   "readerIndex",
   "+",
   "actualFrameLength",
   ")",
   ";",
   "return",
   "frame",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-428",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "protected",
   "TileColumn",
   "createColumn",
   "(",
   "TileCursor",
   "cursor",
   ",",
   "int",
   "index",
   ",",
   "String",
   "name",
   ",",
   "String",
   "type",
   ",",
   "Long",
   "<mask>",
   ",",
   "boolean",
   "notNull",
   ",",
   "int",
   "defaultValueIndex",
   ",",
   "boolean",
   "primaryKey",
   ")",
   "{",
   "GeoPackageDataType",
   "dataType",
   "=",
   "getDataType",
   "(",
   "type",
   ")",
   ";",
   "Object",
   "defaultValue",
   "=",
   "cursor",
   ".",
   "getValue",
   "(",
   "defaultValueIndex",
   ",",
   "dataType",
   ")",
   ";",
   "TileColumn",
   "column",
   "=",
   "new",
   "TileColumn",
   "(",
   "index",
   ",",
   "name",
   ",",
   "dataType",
   ",",
   "max",
   ",",
   "notNull",
   ",",
   "defaultValue",
   ",",
   "primaryKey",
   ")",
   ";",
   "return",
   "column",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-429",
  "nl_tokens": [
   "Process",
   "all",
   "records",
   "in",
   "queue",
   ".",
   "All",
   "records",
   "have",
   "same",
   "operation",
   "to",
   "same",
   "table",
   ".",
   "Generate",
   "a",
   "query",
   "and",
   "set",
   "parameters",
   "from",
   "each",
   "record",
   ".",
   "INSERT",
   "and",
   "DELETE",
   "can",
   "be",
   "multi",
   "-",
   "row",
   "operation",
   "but",
   "UPDATE",
   "is",
   "single",
   "-",
   "row",
   "operation",
   ".",
   "If",
   "maxStatement"
  ],
  "pl_tokens": [
   "private",
   "void",
   "processQueue",
   "(",
   "LinkedList",
   "<",
   "Record",
   ">",
   "queue",
   ",",
   "List",
   "<",
   "OnRecordErrorException",
   ">",
   "errorRecords",
   ",",
   "Connection",
   "connection",
   ",",
   "int",
   "maxRowsPerBatch",
   ",",
   "int",
   "opCode",
   ")",
   "throws",
   "StageException",
   "{",
   "if",
   "(",
   "queue",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "return",
   ";",
   "}",
   "int",
   "rowCount",
   "=",
   "0",
   ";",
   "// Assume that columns are all same for the same operation to the same table",
   "// If some columns are missing in record, the record goes to error.",
   "final",
   "Record",
   "first",
   "=",
   "queue",
   ".",
   "getFirst",
   "(",
   ")",
   ";",
   "SortedMap",
   "<",
   "String",
   ",",
   "String",
   ">",
   "columnsToParameters",
   "=",
   "recordReader",
   ".",
   "getColumnsToParameters",
   "(",
   "first",
   ",",
   "opCode",
   ",",
   "getColumnsToParameters",
   "(",
   ")",
   ",",
   "opCode",
   "==",
   "OperationType",
   ".",
   "UPDATE_CODE",
   "?",
   "getColumnsToFieldNoPK",
   "(",
   ")",
   ":",
   "getColumnsToFields",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "columnsToParameters",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "// no parameters found for configured columns",
   "if",
   "(",
   "LOG",
   ".",
   "isWarnEnabled",
   "(",
   ")",
   ")",
   "{",
   "LOG",
   ".",
   "warn",
   "(",
   "\"No parameters found for record with ID {}; skipping\"",
   ",",
   "first",
   ".",
   "getHeader",
   "(",
   ")",
   ".",
   "getSourceId",
   "(",
   ")",
   ")",
   ";",
   "}",
   "return",
   ";",
   "}",
   "String",
   "query",
   "=",
   "generateQueryForMultiRow",
   "(",
   "opCode",
   ",",
   "columnsToParameters",
   ",",
   "getPrimaryKeyColumns",
   "(",
   ")",
   ",",
   "// the next batch will have either the max number of records, or however many are left.",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxRowsPerBatch",
   ",",
   "queue",
   ".",
   "size",
   "(",
   ")",
   ")",
   ")",
   ";",
   "// Need to store removed records from queue, because we might need to add newly generated columns",
   "// to records for Jdbc Tee Processor.",
   "LinkedList",
   "<",
   "Record",
   ">",
   "removed",
   "=",
   "new",
   "LinkedList",
   "<>",
   "(",
   ")",
   ";",
   "try",
   "(",
   "PreparedStatement",
   "statement",
   "=",
   "jdbcUtil",
   ".",
   "getPreparedStatement",
   "(",
   "getGeneratedColumnMappings",
   "(",
   ")",
   ",",
   "query",
   ",",
   "connection",
   ")",
   ")",
   "{",
   "int",
   "paramIdx",
   "=",
   "1",
   ";",
   "// Start processing records in queue. All records have the same operation to the same table.",
   "while",
   "(",
   "!",
   "queue",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "Record",
   "r",
   "=",
   "queue",
   ".",
   "removeFirst",
   "(",
   ")",
   ";",
   "if",
   "(",
   "opCode",
   "!=",
   "DELETE_CODE",
   ")",
   "{",
   "paramIdx",
   "=",
   "setParamsToStatement",
   "(",
   "paramIdx",
   ",",
   "statement",
   ",",
   "columnsToParameters",
   ",",
   "r",
   ",",
   "connection",
   ",",
   "opCode",
   ")",
   ";",
   "}",
   "if",
   "(",
   "opCode",
   "!=",
   "OperationType",
   ".",
   "INSERT_CODE",
   ")",
   "{",
   "paramIdx",
   "=",
   "setPrimaryKeys",
   "(",
   "paramIdx",
   ",",
   "r",
   ",",
   "statement",
   ",",
   "opCode",
   ")",
   ";",
   "}",
   "removed",
   ".",
   "add",
   "(",
   "r",
   ")",
   ";",
   "++",
   "rowCount",
   ";",
   "if",
   "(",
   "rowCount",
   "==",
   "maxRowsPerBatch",
   ")",
   "{",
   "// time to execute the current batch",
   "processBatch",
   "(",
   "removed",
   ",",
   "errorRecords",
   ",",
   "statement",
   ",",
   "connection",
   ")",
   ";",
   "// reset our counters",
   "rowCount",
   "=",
   "0",
   ";",
   "paramIdx",
   "=",
   "1",
   ";",
   "removed",
   ".",
   "clear",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   "catch",
   "(",
   "SQLException",
   "e",
   ")",
   "{",
   "handleSqlException",
   "(",
   "e",
   ",",
   "removed",
   ",",
   "errorRecords",
   ")",
   ";",
   "}",
   "// Process the rest of the records that are removed from queue but haven't processed yet",
   "// this happens when rowCount is still less than maxRowsPerBatch.",
   "// This is a bit of an ugly fix as its not very DRY but sufficient until there's a larger",
   "// refactoring of this code.",
   "if",
   "(",
   "!",
   "removed",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "query",
   "=",
   "generateQueryForMultiRow",
   "(",
   "opCode",
   ",",
   "columnsToParameters",
   ",",
   "getPrimaryKeyColumns",
   "(",
   ")",
   ",",
   "removed",
   ".",
   "size",
   "(",
   ")",
   "// always the remainder",
   ")",
   ";",
   "try",
   "(",
   "PreparedStatement",
   "statement",
   "=",
   "jdbcUtil",
   ".",
   "getPreparedStatement",
   "(",
   "getGeneratedColumnMappings",
   "(",
   ")",
   ",",
   "query",
   ",",
   "connection",
   ")",
   ")",
   "{",
   "int",
   "paramIdx",
   "=",
   "1",
   ";",
   "for",
   "(",
   "Record",
   "r",
   ":",
   "removed",
   ")",
   "{",
   "if",
   "(",
   "opCode",
   "!=",
   "DELETE_CODE",
   ")",
   "{",
   "paramIdx",
   "=",
   "setParamsToStatement",
   "(",
   "paramIdx",
   ",",
   "statement",
   ",",
   "columnsToParameters",
   ",",
   "r",
   ",",
   "connection",
   ",",
   "opCode",
   ")",
   ";",
   "}",
   "if",
   "(",
   "opCode",
   "!=",
   "OperationType",
   ".",
   "INSERT_CODE",
   ")",
   "{",
   "paramIdx",
   "=",
   "setPrimaryKeys",
   "(",
   "paramIdx",
   ",",
   "r",
   ",",
   "statement",
   ",",
   "opCode",
   ")",
   ";",
   "}",
   "}",
   "processBatch",
   "(",
   "removed",
   ",",
   "errorRecords",
   ",",
   "statement",
   ",",
   "connection",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "SQLException",
   "e",
   ")",
   "{",
   "handleSqlException",
   "(",
   "e",
   ",",
   "removed",
   ",",
   "errorRecords",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-430",
  "nl_tokens": [
   "Performs",
   "Base64",
   "encoding",
   "on",
   "the",
   "<code",
   ">",
   "raw<",
   "/",
   "code",
   ">",
   "ByteBuffer",
   "writing",
   "it",
   "to",
   "the",
   "<code",
   ">",
   "encoded<",
   "/",
   "code",
   ">",
   "CharBuffer",
   ".",
   "This",
   "is",
   "an",
   "experimental",
   "feature",
   ".",
   "Currently",
   "it",
   "does",
   "not",
   "pass",
   "along",
   "any",
   "options",
   "(",
   "such",
   "as",
   "{",
   "@link",
   "#DO_BREAK_LINES",
   "}",
   "or",
   "{",
   "@link",
   "#GZIP",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "encode",
   "(",
   "final",
   "java",
   ".",
   "nio",
   ".",
   "ByteBuffer",
   "raw",
   ",",
   "final",
   "java",
   ".",
   "nio",
   ".",
   "CharBuffer",
   "encoded",
   ")",
   "{",
   "final",
   "byte",
   "[",
   "]",
   "raw3",
   "=",
   "new",
   "byte",
   "[",
   "3",
   "]",
   ";",
   "final",
   "byte",
   "[",
   "]",
   "enc4",
   "=",
   "new",
   "byte",
   "[",
   "4",
   "]",
   ";",
   "while",
   "(",
   "raw",
   ".",
   "hasRemaining",
   "(",
   ")",
   ")",
   "{",
   "final",
   "int",
   "rem",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "3",
   ",",
   "raw",
   ".",
   "remaining",
   "(",
   ")",
   ")",
   ";",
   "raw",
   ".",
   "get",
   "(",
   "raw3",
   ",",
   "0",
   ",",
   "rem",
   ")",
   ";",
   "Base64",
   ".",
   "encode3to4",
   "(",
   "enc4",
   ",",
   "raw3",
   ",",
   "rem",
   ",",
   "Base64",
   ".",
   "NO_OPTIONS",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "4",
   ";",
   "i",
   "++",
   ")",
   "{",
   "encoded",
   ".",
   "put",
   "(",
   "(",
   "char",
   ")",
   "(",
   "enc4",
   "[",
   "i",
   "]",
   "&",
   "0xFF",
   ")",
   ")",
   ";",
   "}",
   "}",
   "// end input remaining\r",
   "}"
  ]
 },
 {
  "idx": "maxmin-431",
  "nl_tokens": [
   "----------------------------------------------------------------",
   "configure"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "configure",
   "(",
   "final",
   "Length",
   "annotation",
   ")",
   "{",
   "this",
   ".",
   "<mask>",
   "=",
   "annotation",
   ".",
   "min",
   "(",
   ")",
   ";",
   "this",
   ".",
   "max",
   "=",
   "annotation",
   ".",
   "max",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-432",
  "nl_tokens": [
   "Adds",
   "an",
   "abstract",
   "type",
   "to",
   "the",
   "list",
   "of",
   "types",
   "on",
   "which",
   "a",
   "constructor",
   "is",
   "invoked",
   "in",
   "the",
   "basic",
   "block",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "addInitializedType",
   "(",
   "final",
   "int",
   "abstractType",
   ")",
   "{",
   "// Create and/or resize the initializations array if necessary.",
   "if",
   "(",
   "initializations",
   "==",
   "null",
   ")",
   "{",
   "initializations",
   "=",
   "new",
   "int",
   "[",
   "2",
   "]",
   ";",
   "}",
   "int",
   "initializationsLength",
   "=",
   "initializations",
   ".",
   "length",
   ";",
   "if",
   "(",
   "initializationCount",
   ">=",
   "initializationsLength",
   ")",
   "{",
   "int",
   "[",
   "]",
   "newInitializations",
   "=",
   "new",
   "int",
   "[",
   "Math",
   ".",
   "<mask>",
   "(",
   "initializationCount",
   "+",
   "1",
   ",",
   "2",
   "*",
   "initializationsLength",
   ")",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "initializations",
   ",",
   "0",
   ",",
   "newInitializations",
   ",",
   "0",
   ",",
   "initializationsLength",
   ")",
   ";",
   "initializations",
   "=",
   "newInitializations",
   ";",
   "}",
   "// Store the abstract type.",
   "initializations",
   "[",
   "initializationCount",
   "++",
   "]",
   "=",
   "abstractType",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-433",
  "nl_tokens": [
   "set",
   "colorscale",
   "limits",
   "missing",
   "data"
  ],
  "pl_tokens": [
   "private",
   "void",
   "setColorScaleParams",
   "(",
   ")",
   "{",
   "if",
   "(",
   "dataMinMaxType",
   "==",
   "ColorScale",
   ".",
   "MinMaxType",
   ".",
   "hold",
   "&&",
   "!",
   "isNewField",
   ")",
   "return",
   ";",
   "isNewField",
   "=",
   "false",
   ";",
   "GeoReferencedArray",
   "dataArr",
   "=",
   "readHSlice",
   "(",
   "wantLevel",
   ",",
   "wantTime",
   ",",
   "wantEnsemble",
   ",",
   "wantRunTime",
   ")",
   ";",
   "//else",
   "//  dataArr = makeVSlice(stridedGrid, wantSlice, wantTime, wantEnsemble, wantRunTime);",
   "if",
   "(",
   "dataArr",
   "!=",
   "null",
   ")",
   "{",
   "MAMath",
   ".",
   "MinMax",
   "minmax",
   "=",
   "MAMath",
   ".",
   "getMinMaxSkipMissingData",
   "(",
   "dataArr",
   ".",
   "getData",
   "(",
   ")",
   ",",
   "dataState",
   ".",
   "grid",
   ")",
   ";",
   "colorScale",
   ".",
   "setMinMax",
   "(",
   "minmax",
   ".",
   "<mask>",
   ",",
   "minmax",
   ".",
   "max",
   ")",
   ";",
   "colorScale",
   ".",
   "setGeoGrid",
   "(",
   "dataState",
   ".",
   "grid",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-434",
  "nl_tokens": [
   "Gets",
   "the",
   "size",
   "of",
   "the",
   "LZ",
   "window",
   "buffer",
   "that",
   "needs",
   "to",
   "be",
   "allocated",
   "."
  ],
  "pl_tokens": [
   "private",
   "static",
   "int",
   "getBufSize",
   "(",
   "int",
   "dictSize",
   ",",
   "int",
   "extraSizeBefore",
   ",",
   "int",
   "extraSizeAfter",
   ",",
   "int",
   "matchLenMax",
   ")",
   "{",
   "int",
   "keepSizeBefore",
   "=",
   "extraSizeBefore",
   "+",
   "dictSize",
   ";",
   "int",
   "keepSizeAfter",
   "=",
   "extraSizeAfter",
   "+",
   "matchLenMax",
   ";",
   "int",
   "reserveSize",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "dictSize",
   "/",
   "2",
   "+",
   "(",
   "256",
   "<<",
   "10",
   ")",
   ",",
   "512",
   "<<",
   "20",
   ")",
   ";",
   "return",
   "keepSizeBefore",
   "+",
   "keepSizeAfter",
   "+",
   "reserveSize",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-435",
  "nl_tokens": [
   "Element",
   "wise",
   "maximum",
   "function",
   "between",
   "2",
   "INDArrays"
  ],
  "pl_tokens": [
   "public",
   "static",
   "INDArray",
   "<mask>",
   "(",
   "INDArray",
   "first",
   ",",
   "INDArray",
   "second",
   ",",
   "boolean",
   "dup",
   ")",
   "{",
   "if",
   "(",
   "dup",
   ")",
   "{",
   "first",
   "=",
   "first",
   ".",
   "dup",
   "(",
   ")",
   ";",
   "}",
   "return",
   "exec",
   "(",
   "new",
   "OldMax",
   "(",
   "second",
   ",",
   "first",
   ",",
   "first",
   ",",
   "first",
   ".",
   "length",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-436",
  "nl_tokens": [
   "infinite",
   "recursion"
  ],
  "pl_tokens": [
   "private",
   "void",
   "getAllReferences",
   "(",
   "PartnerConnection",
   "partnerConnection",
   ",",
   "Map",
   "<",
   "String",
   ",",
   "ObjectMetadata",
   ">",
   "metadataMap",
   ",",
   "List",
   "<",
   "List",
   "<",
   "Pair",
   "<",
   "String",
   ",",
   "String",
   ">",
   ">",
   ">",
   "references",
   ",",
   "String",
   "[",
   "]",
   "allTypes",
   ",",
   "int",
   "depth",
   ")",
   "throws",
   "ConnectionException",
   "{",
   "if",
   "(",
   "depth",
   "<",
   "0",
   ")",
   "{",
   "return",
   ";",
   "}",
   "List",
   "<",
   "String",
   ">",
   "next",
   "=",
   "new",
   "ArrayList",
   "<>",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "typeIndex",
   "=",
   "0",
   ";",
   "typeIndex",
   "<",
   "allTypes",
   ".",
   "length",
   ";",
   "typeIndex",
   "+=",
   "MAX_METADATA_TYPES",
   ")",
   "{",
   "int",
   "copyTo",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "typeIndex",
   "+",
   "MAX_METADATA_TYPES",
   ",",
   "allTypes",
   ".",
   "length",
   ")",
   ";",
   "String",
   "[",
   "]",
   "types",
   "=",
   "Arrays",
   ".",
   "copyOfRange",
   "(",
   "allTypes",
   ",",
   "typeIndex",
   ",",
   "copyTo",
   ")",
   ";",
   "// Special case - we prepopulate the cache with the root sobject type - don't repeat",
   "// ourselves",
   "if",
   "(",
   "types",
   ".",
   "length",
   ">",
   "1",
   "||",
   "!",
   "metadataMap",
   ".",
   "containsKey",
   "(",
   "types",
   "[",
   "0",
   "]",
   ")",
   ")",
   "{",
   "for",
   "(",
   "DescribeSObjectResult",
   "result",
   ":",
   "partnerConnection",
   ".",
   "describeSObjects",
   "(",
   "types",
   ")",
   ")",
   "{",
   "Map",
   "<",
   "String",
   ",",
   "Field",
   ">",
   "fieldMap",
   "=",
   "new",
   "LinkedHashMap",
   "<>",
   "(",
   ")",
   ";",
   "Map",
   "<",
   "String",
   ",",
   "Field",
   ">",
   "relationshipMap",
   "=",
   "new",
   "LinkedHashMap",
   "<>",
   "(",
   ")",
   ";",
   "for",
   "(",
   "Field",
   "field",
   ":",
   "result",
   ".",
   "getFields",
   "(",
   ")",
   ")",
   "{",
   "fieldMap",
   ".",
   "put",
   "(",
   "field",
   ".",
   "getName",
   "(",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ",",
   "field",
   ")",
   ";",
   "String",
   "relationshipName",
   "=",
   "field",
   ".",
   "getRelationshipName",
   "(",
   ")",
   ";",
   "if",
   "(",
   "relationshipName",
   "!=",
   "null",
   ")",
   "{",
   "relationshipMap",
   ".",
   "put",
   "(",
   "relationshipName",
   ".",
   "toLowerCase",
   "(",
   ")",
   ",",
   "field",
   ")",
   ";",
   "}",
   "}",
   "Map",
   "<",
   "String",
   ",",
   "String",
   ">",
   "childRelationships",
   "=",
   "new",
   "LinkedHashMap",
   "<>",
   "(",
   ")",
   ";",
   "for",
   "(",
   "ChildRelationship",
   "child",
   ":",
   "result",
   ".",
   "getChildRelationships",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "child",
   ".",
   "getRelationshipName",
   "(",
   ")",
   "!=",
   "null",
   ")",
   "{",
   "childRelationships",
   ".",
   "put",
   "(",
   "child",
   ".",
   "getRelationshipName",
   "(",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ",",
   "child",
   ".",
   "getChildSObject",
   "(",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "metadataMap",
   ".",
   "put",
   "(",
   "result",
   ".",
   "getName",
   "(",
   ")",
   ".",
   "toLowerCase",
   "(",
   ")",
   ",",
   "new",
   "ObjectMetadata",
   "(",
   "fieldMap",
   ",",
   "relationshipMap",
   ",",
   "childRelationships",
   ")",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "references",
   "!=",
   "null",
   ")",
   "{",
   "for",
   "(",
   "List",
   "<",
   "Pair",
   "<",
   "String",
   ",",
   "String",
   ">",
   ">",
   "path",
   ":",
   "references",
   ")",
   "{",
   "// Top field name in the path should be in the metadata now",
   "if",
   "(",
   "!",
   "path",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "Pair",
   "<",
   "String",
   ",",
   "String",
   ">",
   "top",
   "=",
   "path",
   ".",
   "get",
   "(",
   "0",
   ")",
   ";",
   "Field",
   "field",
   "=",
   "metadataMap",
   ".",
   "get",
   "(",
   "top",
   ".",
   "getLeft",
   "(",
   ")",
   ")",
   ".",
   "getFieldFromRelationship",
   "(",
   "top",
   ".",
   "getRight",
   "(",
   ")",
   ")",
   ";",
   "Set",
   "<",
   "String",
   ">",
   "sobjectNames",
   "=",
   "metadataMap",
   ".",
   "keySet",
   "(",
   ")",
   ";",
   "for",
   "(",
   "String",
   "ref",
   ":",
   "field",
   ".",
   "getReferenceTo",
   "(",
   ")",
   ")",
   "{",
   "ref",
   "=",
   "ref",
   ".",
   "toLowerCase",
   "(",
   ")",
   ";",
   "if",
   "(",
   "!",
   "sobjectNames",
   ".",
   "contains",
   "(",
   "ref",
   ")",
   "&&",
   "!",
   "next",
   ".",
   "contains",
   "(",
   "ref",
   ")",
   ")",
   "{",
   "next",
   ".",
   "add",
   "(",
   "ref",
   ")",
   ";",
   "}",
   "if",
   "(",
   "path",
   ".",
   "size",
   "(",
   ")",
   ">",
   "1",
   ")",
   "{",
   "path",
   ".",
   "set",
   "(",
   "1",
   ",",
   "Pair",
   ".",
   "of",
   "(",
   "ref",
   ",",
   "path",
   ".",
   "get",
   "(",
   "1",
   ")",
   ".",
   "getRight",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "// SDC-10422 Polymorphic references have an implicit reference to the Name object type",
   "if",
   "(",
   "field",
   ".",
   "isPolymorphicForeignKey",
   "(",
   ")",
   ")",
   "{",
   "next",
   ".",
   "add",
   "(",
   "NAME",
   ")",
   ";",
   "}",
   "path",
   ".",
   "remove",
   "(",
   "0",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}",
   "if",
   "(",
   "!",
   "next",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "getAllReferences",
   "(",
   "partnerConnection",
   ",",
   "metadataMap",
   ",",
   "references",
   ",",
   "next",
   ".",
   "toArray",
   "(",
   "new",
   "String",
   "[",
   "0",
   "]",
   ")",
   ",",
   "depth",
   "-",
   "1",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-437",
  "nl_tokens": [
   "compute",
   "the",
   "maximum",
   "width",
   "for",
   "each",
   "field",
   "across",
   "a",
   "collection",
   "of",
   "formatters",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "[",
   "]",
   "computeMaximums",
   "(",
   "String",
   "[",
   "]",
   "headers",
   ",",
   "OutputFormatter",
   "...",
   "outputs",
   ")",
   "{",
   "int",
   "[",
   "]",
   "<mask>",
   "=",
   "new",
   "int",
   "[",
   "headers",
   ".",
   "length",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "headers",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "max",
   "[",
   "i",
   "]",
   "=",
   "headers",
   "[",
   "i",
   "]",
   ".",
   "length",
   "(",
   ")",
   ";",
   "for",
   "(",
   "OutputFormatter",
   "output",
   ":",
   "outputs",
   ")",
   "{",
   "max",
   "[",
   "0",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "output",
   ".",
   "host",
   ".",
   "length",
   "(",
   ")",
   ",",
   "max",
   "[",
   "0",
   "]",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "headers",
   ".",
   "length",
   ";",
   "i",
   "++",
   ")",
   "max",
   "[",
   "i",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "output",
   ".",
   "results",
   "[",
   "i",
   "-",
   "1",
   "]",
   ".",
   "length",
   "(",
   ")",
   ",",
   "max",
   "[",
   "i",
   "]",
   ")",
   ";",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-438",
  "nl_tokens": [
   "Set",
   "the",
   "number",
   "of",
   "colors",
   "in",
   "the",
   "colorscale",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setNumColors",
   "(",
   "int",
   "n",
   ")",
   "{",
   "if",
   "(",
   "n",
   "!=",
   "ncolors",
   ")",
   "{",
   "colors",
   "=",
   "new",
   "Color",
   "[",
   "n",
   "]",
   ";",
   "int",
   "prevn",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "ncolors",
   ",",
   "n",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "useColors",
   ",",
   "0",
   ",",
   "colors",
   ",",
   "0",
   ",",
   "prevn",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "ncolors",
   ";",
   "i",
   "<",
   "n",
   ";",
   "i",
   "++",
   ")",
   "colors",
   "[",
   "i",
   "]",
   "=",
   "Color",
   ".",
   "white",
   ";",
   "useColors",
   "=",
   "colors",
   ";",
   "ncolors",
   "=",
   "n",
   ";",
   "edge",
   "=",
   "new",
   "double",
   "[",
   "ncolors",
   "]",
   ";",
   "hist",
   "=",
   "new",
   "int",
   "[",
   "ncolors",
   "+",
   "1",
   "]",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-439",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "protected",
   "List",
   "<",
   "ConfigIssue",
   ">",
   "init",
   "(",
   ")",
   "{",
   "// Validate configuration values and open any required resources.",
   "List",
   "<",
   "ConfigIssue",
   ">",
   "issues",
   "=",
   "super",
   ".",
   "init",
   "(",
   ")",
   ";",
   "if",
   "(",
   "issues",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "jdbcUtil",
   "=",
   "UtilsProvider",
   ".",
   "getJdbcUtil",
   "(",
   ")",
   ";",
   "}",
   "errorRecordHandler",
   "=",
   "new",
   "DefaultErrorRecordHandler",
   "(",
   "getContext",
   "(",
   ")",
   ")",
   ";",
   "Processor",
   ".",
   "Context",
   "context",
   "=",
   "getContext",
   "(",
   ")",
   ";",
   "queryEval",
   "=",
   "getContext",
   "(",
   ")",
   ".",
   "createELEval",
   "(",
   "\"query\"",
   ")",
   ";",
   "issues",
   "=",
   "hikariConfigBean",
   ".",
   "validateConfigs",
   "(",
   "context",
   ",",
   "issues",
   ")",
   ";",
   "if",
   "(",
   "context",
   ".",
   "getRunnerId",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "if",
   "(",
   "issues",
   ".",
   "isEmpty",
   "(",
   ")",
   "&&",
   "null",
   "==",
   "dataSource",
   ")",
   "{",
   "try",
   "{",
   "dataSource",
   "=",
   "jdbcUtil",
   ".",
   "createDataSourceForRead",
   "(",
   "hikariConfigBean",
   ")",
   ";",
   "context",
   ".",
   "getStageRunnerSharedMap",
   "(",
   ")",
   ".",
   "put",
   "(",
   "\"jdbcLookupProcessor.dataSource\"",
   ",",
   "dataSource",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "StageException",
   "e",
   ")",
   "{",
   "issues",
   ".",
   "add",
   "(",
   "context",
   ".",
   "createConfigIssue",
   "(",
   "Groups",
   ".",
   "JDBC",
   ".",
   "name",
   "(",
   ")",
   ",",
   "CONNECTION_STRING",
   ",",
   "JdbcErrors",
   ".",
   "JDBC_00",
   ",",
   "e",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}",
   "}",
   "else",
   "{",
   "dataSource",
   "=",
   "(",
   "HikariDataSource",
   ")",
   "context",
   ".",
   "getStageRunnerSharedMap",
   "(",
   ")",
   ".",
   "get",
   "(",
   "\"jdbcLookupProcessor.dataSource\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "issues",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "this",
   ".",
   "defaultValue",
   "=",
   "calculateDefault",
   "(",
   "context",
   ",",
   "issues",
   ")",
   ";",
   "}",
   "if",
   "(",
   "issues",
   ".",
   "isEmpty",
   "(",
   ")",
   ")",
   "{",
   "cache",
   "=",
   "buildCache",
   "(",
   ")",
   ";",
   "cacheCleaner",
   "=",
   "new",
   "CacheCleaner",
   "(",
   "cache",
   ",",
   "\"JdbcLookupProcessor\"",
   ",",
   "10",
   "*",
   "60",
   "*",
   "1000",
   ")",
   ";",
   "if",
   "(",
   "cacheConfig",
   ".",
   "enabled",
   ")",
   "{",
   "preprocessThreads",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "hikariConfigBean",
   ".",
   "minIdle",
   ",",
   "Runtime",
   ".",
   "getRuntime",
   "(",
   ")",
   ".",
   "availableProcessors",
   "(",
   ")",
   "-",
   "1",
   ")",
   ";",
   "preprocessThreads",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "preprocessThreads",
   ",",
   "1",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "context",
   ".",
   "getRunnerId",
   "(",
   ")",
   "==",
   "0",
   ")",
   "{",
   "if",
   "(",
   "issues",
   ".",
   "isEmpty",
   "(",
   ")",
   "&&",
   "generationExecutor",
   "==",
   "null",
   ")",
   "{",
   "generationExecutor",
   "=",
   "new",
   "SafeScheduledExecutorService",
   "(",
   "hikariConfigBean",
   ".",
   "maximumPoolSize",
   ",",
   "\"JDBC Lookup Cache Warmer\"",
   ")",
   ";",
   "context",
   ".",
   "getStageRunnerSharedMap",
   "(",
   ")",
   ".",
   "put",
   "(",
   "\"jdbcLookupProcessor.generationExecutor\"",
   ",",
   "generationExecutor",
   ")",
   ";",
   "}",
   "}",
   "else",
   "{",
   "generationExecutor",
   "=",
   "(",
   "SafeScheduledExecutorService",
   ")",
   "context",
   ".",
   "getStageRunnerSharedMap",
   "(",
   ")",
   ".",
   "get",
   "(",
   "\"jdbcLookupProcessor.generationExecutor\"",
   ")",
   ";",
   "}",
   "// If issues is not empty, the UI will inform the user of each configuration issue in the list.",
   "return",
   "issues",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-440",
  "nl_tokens": [
   "assumes",
   "not",
   "moving"
  ],
  "pl_tokens": [
   "private",
   "void",
   "recalcDuration",
   "(",
   ")",
   "{",
   "long",
   "<mask>",
   "=",
   "getStart",
   "(",
   ")",
   ".",
   "getDate",
   "(",
   ")",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "long",
   "max",
   "=",
   "getEnd",
   "(",
   ")",
   ".",
   "getDate",
   "(",
   ")",
   ".",
   "getTime",
   "(",
   ")",
   ";",
   "double",
   "secs",
   "=",
   ".001",
   "*",
   "(",
   "max",
   "-",
   "min",
   ")",
   ";",
   "if",
   "(",
   "secs",
   "<",
   "0",
   ")",
   "secs",
   "=",
   "0",
   ";",
   "if",
   "(",
   "duration",
   "==",
   "null",
   ")",
   "{",
   "try",
   "{",
   "duration",
   "=",
   "new",
   "TimeDuration",
   "(",
   "chooseResolution",
   "(",
   "secs",
   ")",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "ParseException",
   "e",
   ")",
   "{",
   "// cant happen",
   "throw",
   "new",
   "RuntimeException",
   "(",
   "e",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "resolution",
   "==",
   "null",
   ")",
   "{",
   "duration",
   ".",
   "setValueInSeconds",
   "(",
   "secs",
   ")",
   ";",
   "}",
   "else",
   "{",
   "// make it a multiple of resolution",
   "double",
   "resSecs",
   "=",
   "resolution",
   ".",
   "getValueInSeconds",
   "(",
   ")",
   ";",
   "double",
   "closest",
   "=",
   "Math",
   ".",
   "round",
   "(",
   "secs",
   "/",
   "resSecs",
   ")",
   ";",
   "secs",
   "=",
   "closest",
   "*",
   "resSecs",
   ";",
   "duration",
   ".",
   "setValueInSeconds",
   "(",
   "secs",
   ")",
   ";",
   "}",
   "hashCode",
   "=",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-441",
  "nl_tokens": [
   "for",
   "testing",
   "purposes"
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "main",
   "(",
   "String",
   "[",
   "]",
   "args",
   ")",
   "throws",
   "IOException",
   "{",
   "String",
   "file",
   "=",
   "\"GRID2001\"",
   ";",
   "if",
   "(",
   "args",
   ".",
   "length",
   ">",
   "0",
   ")",
   "{",
   "file",
   "=",
   "args",
   "[",
   "0",
   "]",
   ";",
   "}",
   "McIDASGridReader",
   "mg",
   "=",
   "new",
   "McIDASGridReader",
   "(",
   "file",
   ")",
   ";",
   "GridIndex",
   "gridIndex",
   "=",
   "mg",
   ".",
   "getGridIndex",
   "(",
   ")",
   ";",
   "List",
   "grids",
   "=",
   "gridIndex",
   ".",
   "getGridRecords",
   "(",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "\"found \"",
   "+",
   "grids",
   ".",
   "size",
   "(",
   ")",
   "+",
   "\" grids\"",
   ")",
   ";",
   "int",
   "num",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "grids",
   ".",
   "size",
   "(",
   ")",
   ",",
   "10",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "num",
   ";",
   "i",
   "++",
   ")",
   "{",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "grids",
   ".",
   "get",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-442",
  "nl_tokens": [
   "Appends",
   "<code",
   ">",
   "char<",
   "/",
   "code",
   ">",
   "array",
   "to",
   "buffer",
   "."
  ],
  "pl_tokens": [
   "public",
   "FastCharBuffer",
   "append",
   "(",
   "char",
   "[",
   "]",
   "array",
   ",",
   "int",
   "off",
   ",",
   "int",
   "len",
   ")",
   "{",
   "int",
   "end",
   "=",
   "off",
   "+",
   "len",
   ";",
   "if",
   "(",
   "(",
   "off",
   "<",
   "0",
   ")",
   "||",
   "(",
   "len",
   "<",
   "0",
   ")",
   "||",
   "(",
   "end",
   ">",
   "array",
   ".",
   "length",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IndexOutOfBoundsException",
   "(",
   ")",
   ";",
   "}",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   "this",
   ";",
   "}",
   "int",
   "newSize",
   "=",
   "size",
   "+",
   "len",
   ";",
   "int",
   "remaining",
   "=",
   "len",
   ";",
   "if",
   "(",
   "currentBuffer",
   "!=",
   "null",
   ")",
   "{",
   "// first try to fill current buffer",
   "int",
   "part",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remaining",
   ",",
   "currentBuffer",
   ".",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "array",
   ",",
   "end",
   "-",
   "remaining",
   ",",
   "currentBuffer",
   ",",
   "offset",
   ",",
   "part",
   ")",
   ";",
   "remaining",
   "-=",
   "part",
   ";",
   "offset",
   "+=",
   "part",
   ";",
   "size",
   "+=",
   "part",
   ";",
   "}",
   "if",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   "{",
   "// still some data left",
   "// ask for new buffer",
   "needNewBuffer",
   "(",
   "newSize",
   ")",
   ";",
   "// then copy remaining",
   "// but this time we are sure that it will fit",
   "int",
   "part",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "remaining",
   ",",
   "currentBuffer",
   ".",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "array",
   ",",
   "end",
   "-",
   "remaining",
   ",",
   "currentBuffer",
   ",",
   "offset",
   ",",
   "part",
   ")",
   ";",
   "offset",
   "+=",
   "part",
   ";",
   "size",
   "+=",
   "part",
   ";",
   "}",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-443",
  "nl_tokens": [
   "/",
   "*",
   "http",
   ":",
   "//",
   "mathforum",
   ".",
   "org",
   "/",
   "library",
   "/",
   "drmath",
   "/",
   "view",
   "/",
   "54386",
   ".",
   "html"
  ],
  "pl_tokens": [
   "private",
   "boolean",
   "contains",
   "(",
   "double",
   "wantLat",
   ",",
   "double",
   "wantLon",
   ",",
   "int",
   "[",
   "]",
   "rectIndex",
   ")",
   "{",
   "rectIndex",
   "[",
   "0",
   "]",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "0",
   "]",
   ",",
   "nrows",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "rectIndex",
   "[",
   "1",
   "]",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "Math",
   ".",
   "min",
   "(",
   "rectIndex",
   "[",
   "1",
   "]",
   ",",
   "ncols",
   "-",
   "1",
   ")",
   ",",
   "0",
   ")",
   ";",
   "int",
   "row",
   "=",
   "rectIndex",
   "[",
   "0",
   "]",
   ";",
   "int",
   "col",
   "=",
   "rectIndex",
   "[",
   "1",
   "]",
   ";",
   "double",
   "x1",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ";",
   "double",
   "y1",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   ")",
   ";",
   "double",
   "x2",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   ";",
   "double",
   "y2",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   ",",
   "col",
   "+",
   "1",
   ")",
   ";",
   "double",
   "x3",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   "+",
   "1",
   ")",
   ";",
   "double",
   "y3",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   "+",
   "1",
   ")",
   ";",
   "double",
   "x4",
   "=",
   "lonEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   ";",
   "double",
   "y4",
   "=",
   "latEdge",
   ".",
   "get",
   "(",
   "row",
   "+",
   "1",
   ",",
   "col",
   ")",
   ";",
   "// must all have same determinate sign",
   "boolean",
   "sign",
   "=",
   "detIsPositive",
   "(",
   "x1",
   ",",
   "y1",
   ",",
   "x2",
   ",",
   "y2",
   ",",
   "wantLon",
   ",",
   "wantLat",
   ")",
   ";",
   "if",
   "(",
   "sign",
   "!=",
   "detIsPositive",
   "(",
   "x2",
   ",",
   "y2",
   ",",
   "x3",
   ",",
   "y3",
   ",",
   "wantLon",
   ",",
   "wantLat",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "sign",
   "!=",
   "detIsPositive",
   "(",
   "x3",
   ",",
   "y3",
   ",",
   "x4",
   ",",
   "y4",
   ",",
   "wantLon",
   ",",
   "wantLat",
   ")",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "sign",
   "!=",
   "detIsPositive",
   "(",
   "x4",
   ",",
   "y4",
   ",",
   "x1",
   ",",
   "y1",
   ",",
   "wantLon",
   ",",
   "wantLat",
   ")",
   ")",
   "return",
   "false",
   ";",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-444",
  "nl_tokens": [
   "Returns",
   "the",
   "max",
   "value",
   "of",
   "the",
   "object",
   "with",
   "the",
   "property",
   "given",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "T",
   "[",
   "]",
   "array",
   ")",
   "{",
   "if",
   "(",
   "array",
   ".",
   "length",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sort",
   "(",
   "array",
   ")",
   ";",
   "return",
   "array",
   "[",
   "0",
   "]",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-445",
  "nl_tokens": [
   "startTimeout",
   "in",
   "milliseconds"
  ],
  "pl_tokens": [
   "protected",
   "void",
   "waitForServerStarted",
   "(",
   "String",
   "rootUrl",
   ",",
   "JavaRunnable",
   "runner",
   ",",
   "int",
   "startTimeout",
   ",",
   "boolean",
   "spawned",
   ")",
   "throws",
   "MojoExecutionException",
   ",",
   "IOException",
   "{",
   "long",
   "endTimeMillis",
   "=",
   "startTimeout",
   ">",
   "0",
   "?",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "+",
   "startTimeout",
   ":",
   "0L",
   ";",
   "boolean",
   "started",
   "=",
   "false",
   ";",
   "URL",
   "connectUrl",
   "=",
   "new",
   "URL",
   "(",
   "rootUrl",
   ")",
   ";",
   "int",
   "verifyWaitDelay",
   "=",
   "1000",
   ";",
   "while",
   "(",
   "!",
   "started",
   ")",
   "{",
   "if",
   "(",
   "startTimeout",
   ">",
   "0",
   "&&",
   "endTimeMillis",
   "-",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   "<",
   "0L",
   ")",
   "{",
   "if",
   "(",
   "spawned",
   ")",
   "{",
   "InternalPlay2StopMojo",
   "internalStop",
   "=",
   "new",
   "InternalPlay2StopMojo",
   "(",
   ")",
   ";",
   "internalStop",
   ".",
   "project",
   "=",
   "project",
   ";",
   "try",
   "{",
   "internalStop",
   ".",
   "execute",
   "(",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "MojoExecutionException",
   "e",
   ")",
   "{",
   "// just ignore",
   "}",
   "catch",
   "(",
   "MojoFailureException",
   "e",
   ")",
   "{",
   "// just ignore",
   "}",
   "}",
   "throw",
   "new",
   "MojoExecutionException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Failed to start Play! server in %d ms\"",
   ",",
   "Integer",
   ".",
   "valueOf",
   "(",
   "startTimeout",
   ")",
   ")",
   ")",
   ";",
   "}",
   "BuildException",
   "runnerException",
   "=",
   "runner",
   ".",
   "getException",
   "(",
   ")",
   ";",
   "if",
   "(",
   "runnerException",
   "!=",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "MojoExecutionException",
   "(",
   "\"Play! server start exception\"",
   ",",
   "runnerException",
   ")",
   ";",
   "}",
   "try",
   "{",
   "URLConnection",
   "conn",
   "=",
   "connectUrl",
   ".",
   "openConnection",
   "(",
   ")",
   ";",
   "if",
   "(",
   "startTimeout",
   ">",
   "0",
   ")",
   "{",
   "int",
   "connectTimeOut",
   "=",
   "Long",
   ".",
   "valueOf",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "endTimeMillis",
   "-",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ",",
   "Integer",
   ".",
   "valueOf",
   "(",
   "Integer",
   ".",
   "MAX_VALUE",
   ")",
   ".",
   "longValue",
   "(",
   ")",
   ")",
   ")",
   ".",
   "intValue",
   "(",
   ")",
   ";",
   "if",
   "(",
   "connectTimeOut",
   ">",
   "0",
   ")",
   "{",
   "conn",
   ".",
   "setConnectTimeout",
   "(",
   "connectTimeOut",
   ")",
   ";",
   "}",
   "}",
   "connectUrl",
   ".",
   "openConnection",
   "(",
   ")",
   ".",
   "getContent",
   "(",
   ")",
   ";",
   "started",
   "=",
   "true",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "// return false;",
   "}",
   "if",
   "(",
   "!",
   "started",
   ")",
   "{",
   "long",
   "sleepTime",
   "=",
   "verifyWaitDelay",
   ";",
   "if",
   "(",
   "startTimeout",
   ">",
   "0",
   ")",
   "{",
   "sleepTime",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "sleepTime",
   ",",
   "endTimeMillis",
   "-",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "sleepTime",
   ">",
   "0",
   ")",
   "{",
   "try",
   "{",
   "Thread",
   ".",
   "sleep",
   "(",
   "sleepTime",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "InterruptedException",
   "e",
   ")",
   "{",
   "throw",
   "new",
   "MojoExecutionException",
   "(",
   "\"?\"",
   ",",
   "e",
   ")",
   ";",
   "}",
   "}",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-446",
  "nl_tokens": [
   "Set",
   "how",
   "much",
   "the",
   "data",
   "may",
   "overlap",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "setOverlap",
   "(",
   "int",
   "overlap",
   ")",
   "{",
   "// overlap limited to [0, 50%]",
   "double",
   "dover",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "0.0",
   ",",
   "Math",
   ".",
   "min",
   "(",
   ".01",
   "*",
   "overlap",
   ",",
   ".50",
   ")",
   ")",
   ";",
   "scaleOverlap",
   "=",
   "1.0",
   "-",
   "dover",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-447",
  "nl_tokens": [
   "dumpst",
   "-",
   "dump",
   "a",
   "subRE",
   "tree"
  ],
  "pl_tokens": [
   "String",
   "dumpst",
   "(",
   "boolean",
   "nfapresent",
   ")",
   "{",
   "StringBuilder",
   "sb",
   "=",
   "new",
   "StringBuilder",
   "(",
   ")",
   ";",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"%s. `%c'\"",
   ",",
   "shortId",
   "(",
   ")",
   ",",
   "op",
   ")",
   ")",
   ";",
   "if",
   "(",
   "0",
   "!=",
   "(",
   "flags",
   "&",
   "LONGER",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" longest\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "0",
   "!=",
   "(",
   "flags",
   "&",
   "SHORTER",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" shortest\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "0",
   "!=",
   "(",
   "flags",
   "&",
   "MIXED",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" hasmixed\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "0",
   "!=",
   "(",
   "flags",
   "&",
   "CAP",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" hascapture\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "0",
   "!=",
   "(",
   "flags",
   "&",
   "BACKR",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" hasbackref\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "0",
   "==",
   "(",
   "flags",
   "&",
   "INUSE",
   ")",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "\" UNUSED\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "subno",
   "!=",
   "0",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\" (#%d)\"",
   ",",
   "subno",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "<mask>",
   "!=",
   "1",
   "||",
   "max",
   "!=",
   "1",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\" {%d,\"",
   ",",
   "min",
   ")",
   ")",
   ";",
   "if",
   "(",
   "max",
   "!=",
   "Compiler",
   ".",
   "INFINITY",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"%d\"",
   ",",
   "max",
   ")",
   ")",
   ";",
   "}",
   "sb",
   ".",
   "append",
   "(",
   "\"}\"",
   ")",
   ";",
   "}",
   "if",
   "(",
   "nfapresent",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\" %d-%d\"",
   ",",
   "begin",
   ".",
   "no",
   ",",
   "end",
   ".",
   "no",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "left",
   "!=",
   "null",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\" L:%s\"",
   ",",
   "left",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "if",
   "(",
   "right",
   "!=",
   "null",
   ")",
   "{",
   "sb",
   ".",
   "append",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\" R:%s\"",
   ",",
   "right",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "sb",
   ".",
   "append",
   "(",
   "\"\\n\"",
   ")",
   ";",
   "if",
   "(",
   "left",
   "!=",
   "null",
   ")",
   "{",
   "left",
   ".",
   "dumpst",
   "(",
   "nfapresent",
   ")",
   ";",
   "}",
   "if",
   "(",
   "right",
   "!=",
   "null",
   ")",
   "{",
   "right",
   ".",
   "dumpst",
   "(",
   "nfapresent",
   ")",
   ";",
   "}",
   "return",
   "sb",
   ".",
   "toString",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-448",
  "nl_tokens": [
   "Create",
   "a",
   "new",
   "primitive",
   "vector",
   "using",
   "a",
   "subset",
   "of",
   "the",
   "data",
   "."
  ],
  "pl_tokens": [
   "public",
   "PrimitiveVector",
   "subset",
   "(",
   "int",
   "start",
   ",",
   "int",
   "stop",
   ",",
   "int",
   "stride",
   ")",
   "{",
   "BooleanPrimitiveVector",
   "n",
   "=",
   "new",
   "BooleanPrimitiveVector",
   "(",
   "getTemplate",
   "(",
   ")",
   ")",
   ";",
   "stride",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "stride",
   ",",
   "1",
   ")",
   ";",
   "stop",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "start",
   ",",
   "stop",
   ")",
   ";",
   "int",
   "length",
   "=",
   "1",
   "+",
   "(",
   "stop",
   "-",
   "start",
   ")",
   "/",
   "stride",
   ";",
   "n",
   ".",
   "setLength",
   "(",
   "length",
   ")",
   ";",
   "int",
   "count",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "start",
   ";",
   "i",
   "<=",
   "stop",
   ";",
   "i",
   "+=",
   "stride",
   ")",
   "{",
   "n",
   ".",
   "setValue",
   "(",
   "count",
   ",",
   "vals",
   "[",
   "i",
   "]",
   ")",
   ";",
   "count",
   "++",
   ";",
   "}",
   "return",
   "n",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-449",
  "nl_tokens": [
   "Creates",
   "a",
   "new",
   "decimal",
   "type",
   "with",
   "the",
   "specified",
   "name",
   "if",
   "it",
   "does",
   "not",
   "already",
   "exist",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Type",
   "createInstance",
   "(",
   "String",
   "name",
   ",",
   "int",
   "precision",
   ",",
   "int",
   "scale",
   ",",
   "String",
   "<mask>",
   ",",
   "String",
   "max",
   ")",
   "{",
   "synchronized",
   "(",
   "DECIMAL_TYPES",
   ")",
   "{",
   "// Add the newly created type to the map of all types.",
   "BigDecimalTypeImpl",
   "newType",
   "=",
   "new",
   "BigDecimalTypeImpl",
   "(",
   "name",
   ",",
   "precision",
   ",",
   "scale",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "// Ensure that the named type does not already exist, unless it has an identical definition already, in which",
   "// case the old definition can be re-used and the new one discarded.",
   "BigDecimalTypeImpl",
   "oldType",
   "=",
   "DECIMAL_TYPES",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "!",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The type '\"",
   "+",
   "name",
   "+",
   "\"' already exists and cannot be redefined.\"",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "return",
   "oldType",
   ";",
   "}",
   "else",
   "{",
   "DECIMAL_TYPES",
   ".",
   "put",
   "(",
   "name",
   ",",
   "newType",
   ")",
   ";",
   "return",
   "newType",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-450",
  "nl_tokens": [
   "Sets",
   "min",
   "and",
   "max",
   "values",
   "re",
   "-",
   "uses",
   "the",
   "byte",
   "[]",
   "passed",
   "in",
   ".",
   "Any",
   "changes",
   "made",
   "to",
   "byte",
   "[]",
   "will",
   "be",
   "reflected",
   "in",
   "min",
   "and",
   "max",
   "values",
   "as",
   "well",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "void",
   "setMinMaxFromBytes",
   "(",
   "byte",
   "[",
   "]",
   "minBytes",
   ",",
   "byte",
   "[",
   "]",
   "maxBytes",
   ")",
   "{",
   "<mask>",
   "=",
   "Binary",
   ".",
   "fromReusedByteArray",
   "(",
   "maxBytes",
   ")",
   ";",
   "min",
   "=",
   "Binary",
   ".",
   "fromReusedByteArray",
   "(",
   "minBytes",
   ")",
   ";",
   "this",
   ".",
   "markAsNotEmpty",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-451",
  "nl_tokens": [
   "Visible",
   "for",
   "testing"
  ],
  "pl_tokens": [
   "static",
   "void",
   "readFullyDirectBuffer",
   "(",
   "InputStream",
   "f",
   ",",
   "ByteBuffer",
   "buf",
   ",",
   "byte",
   "[",
   "]",
   "temp",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "nextReadLength",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   ",",
   "temp",
   ".",
   "length",
   ")",
   ";",
   "int",
   "bytesRead",
   "=",
   "0",
   ";",
   "while",
   "(",
   "nextReadLength",
   ">",
   "0",
   "&&",
   "(",
   "bytesRead",
   "=",
   "f",
   ".",
   "read",
   "(",
   "temp",
   ",",
   "0",
   ",",
   "nextReadLength",
   ")",
   ")",
   ">=",
   "0",
   ")",
   "{",
   "buf",
   ".",
   "put",
   "(",
   "temp",
   ",",
   "0",
   ",",
   "bytesRead",
   ")",
   ";",
   "nextReadLength",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   ",",
   "temp",
   ".",
   "length",
   ")",
   ";",
   "}",
   "if",
   "(",
   "bytesRead",
   "<",
   "0",
   "&&",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   ">",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "EOFException",
   "(",
   "\"Reached the end of stream with \"",
   "+",
   "buf",
   ".",
   "remaining",
   "(",
   ")",
   "+",
   "\" bytes left to read\"",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-452",
  "nl_tokens": [
   "Set",
   "this",
   "square",
   "matrix",
   "from",
   "a",
   "2",
   "-",
   "d",
   "array",
   "of",
   "values",
   ".",
   "If",
   "the",
   "values",
   "are",
   "not",
   "square",
   "only",
   "the",
   "upper",
   "left",
   "square",
   "is",
   "used",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "protected",
   "void",
   "set",
   "(",
   "final",
   "float",
   "values",
   "[",
   "]",
   "[",
   "]",
   ")",
   "{",
   "super",
   ".",
   "set",
   "(",
   "values",
   ")",
   ";",
   "m_nRows",
   "=",
   "m_nCols",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "m_nRows",
   ",",
   "m_nCols",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-453",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "String",
   "produce",
   "(",
   "String",
   "lastSourceOffset",
   ",",
   "int",
   "maxBatchSize",
   ",",
   "BatchMaker",
   "batchMaker",
   ")",
   "throws",
   "StageException",
   "{",
   "// Offsets can vary depending on the data source. Here we use an integer as an example only.",
   "long",
   "nextSourceOffset",
   "=",
   "0",
   ";",
   "lastSourceOffset",
   "=",
   "lastSourceOffset",
   "==",
   "null",
   "?",
   "\"\"",
   ":",
   "lastSourceOffset",
   ";",
   "if",
   "(",
   "!",
   "lastSourceOffset",
   ".",
   "equals",
   "(",
   "\"\"",
   ")",
   ")",
   "{",
   "nextSourceOffset",
   "=",
   "Long",
   ".",
   "parseLong",
   "(",
   "lastSourceOffset",
   ")",
   ";",
   "}",
   "int",
   "recordCounter",
   "=",
   "0",
   ";",
   "long",
   "startTime",
   "=",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ";",
   "int",
   "maxRecords",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxBatchSize",
   ",",
   "conf",
   ".",
   "maxBatchSize",
   ")",
   ";",
   "while",
   "(",
   "recordCounter",
   "<",
   "maxRecords",
   "&&",
   "(",
   "startTime",
   "+",
   "conf",
   ".",
   "maxWaitTime",
   ")",
   ">",
   "System",
   ".",
   "currentTimeMillis",
   "(",
   ")",
   ")",
   "{",
   "String",
   "message",
   "=",
   "buffer",
   ".",
   "poll",
   "(",
   ")",
   ";",
   "if",
   "(",
   "null",
   "==",
   "message",
   ")",
   "{",
   "try",
   "{",
   "Thread",
   ".",
   "sleep",
   "(",
   "100",
   ")",
   ";",
   "}",
   "catch",
   "(",
   "Exception",
   "e",
   ")",
   "{",
   "LOG",
   ".",
   "debug",
   "(",
   "e",
   ".",
   "getMessage",
   "(",
   ")",
   ",",
   "e",
   ")",
   ";",
   "break",
   ";",
   "}",
   "}",
   "else",
   "{",
   "List",
   "<",
   "Record",
   ">",
   "records",
   "=",
   "processRedisMessage",
   "(",
   "\"id::\"",
   "+",
   "nextSourceOffset",
   ",",
   "message",
   ")",
   ";",
   "for",
   "(",
   "Record",
   "record",
   ":",
   "records",
   ")",
   "{",
   "batchMaker",
   ".",
   "addRecord",
   "(",
   "record",
   ")",
   ";",
   "}",
   "recordCounter",
   "+=",
   "records",
   ".",
   "size",
   "(",
   ")",
   ";",
   "++",
   "nextSourceOffset",
   ";",
   "}",
   "}",
   "return",
   "lastSourceOffset",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-454",
  "nl_tokens": [
   "Creates",
   "a",
   "new",
   "double",
   "range",
   "type",
   "with",
   "the",
   "specified",
   "name",
   "if",
   "it",
   "does",
   "not",
   "already",
   "exist",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Type",
   "createInstance",
   "(",
   "String",
   "name",
   ",",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "// Ensure that min is less than or equal to max.",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'min' must be less than or equal to 'max'.\"",
   ")",
   ";",
   "}",
   "synchronized",
   "(",
   "DOUBLE_RANGE_TYPES",
   ")",
   "{",
   "// Add the newly created type to the map of all types.",
   "DoubleRangeType",
   "newType",
   "=",
   "new",
   "DoubleRangeType",
   "(",
   "name",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "// Ensure that the named type does not already exist, unless it has an identical definition already, in which",
   "// case the old definition can be re-used and the new one discarded.",
   "DoubleRangeType",
   "oldType",
   "=",
   "DOUBLE_RANGE_TYPES",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "!",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The type '\"",
   "+",
   "name",
   "+",
   "\"' already exists and cannot be redefined.\"",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "return",
   "oldType",
   ";",
   "}",
   "else",
   "{",
   "DOUBLE_RANGE_TYPES",
   ".",
   "put",
   "(",
   "name",
   ",",
   "newType",
   ")",
   ";",
   "return",
   "newType",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-455",
  "nl_tokens": [
   "Actual",
   "comparison",
   "with",
   "the",
   "same",
   "semantics",
   "as",
   "compareTo",
   "()",
   "method",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "compare",
   "(",
   "Version",
   "other",
   ")",
   "{",
   "int",
   "maxParts",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "this",
   ".",
   "versions",
   ".",
   "length",
   ",",
   "other",
   ".",
   "versions",
   ".",
   "length",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "maxParts",
   ";",
   "i",
   "++",
   ")",
   "{",
   "int",
   "eq",
   "=",
   "this",
   ".",
   "getVersionPosition",
   "(",
   "i",
   ")",
   "-",
   "other",
   ".",
   "getVersionPosition",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "eq",
   "!=",
   "0",
   ")",
   "{",
   "if",
   "(",
   "eq",
   ">",
   "0",
   ")",
   "{",
   "return",
   "1",
   ";",
   "}",
   "else",
   "{",
   "return",
   "-",
   "1",
   ";",
   "}",
   "}",
   "}",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-456",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "public",
   "long",
   "onStatusMessage",
   "(",
   "final",
   "StatusMessageFlyweight",
   "flyweight",
   ",",
   "final",
   "InetSocketAddress",
   "receiverAddress",
   ",",
   "final",
   "long",
   "senderLimit",
   ",",
   "final",
   "int",
   "initialTermId",
   ",",
   "final",
   "int",
   "positionBitsToShift",
   ",",
   "final",
   "long",
   "timeNs",
   ")",
   "{",
   "final",
   "long",
   "position",
   "=",
   "computePosition",
   "(",
   "flyweight",
   ".",
   "consumptionTermId",
   "(",
   ")",
   ",",
   "flyweight",
   ".",
   "consumptionTermOffset",
   "(",
   ")",
   ",",
   "positionBitsToShift",
   ",",
   "initialTermId",
   ")",
   ";",
   "lastPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "lastPosition",
   ",",
   "position",
   ")",
   ";",
   "timeOfLastStatusMessage",
   "=",
   "timeNs",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "senderLimit",
   ",",
   "position",
   "+",
   "flyweight",
   ".",
   "receiverWindowLength",
   "(",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-457",
  "nl_tokens": [
   "Returns",
   "the",
   "new",
   "{",
   "@code",
   "String",
   "}",
   "obtained",
   "by",
   "stripping",
   "the",
   "first",
   "{",
   "@code",
   "n",
   "}",
   "characters",
   "from",
   "the",
   "given",
   "one",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "String",
   "stripLeft",
   "(",
   "String",
   "str",
   ",",
   "int",
   "n",
   ")",
   "{",
   "Parameters",
   ".",
   "checkCondition",
   "(",
   "n",
   ">=",
   "0",
   ")",
   ";",
   "int",
   "start",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "str",
   ".",
   "length",
   "(",
   ")",
   ",",
   "n",
   ")",
   ";",
   "return",
   "str",
   ".",
   "substring",
   "(",
   "start",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-458",
  "nl_tokens": [
   "If",
   "the",
   "type",
   "was",
   "not",
   "initialized",
   "we",
   "can",
   "still",
   "figure",
   "it",
   "out",
   "at",
   "runtime",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "dynamicallyInitIfNeeded",
   "(",
   "Object",
   "value",
   ")",
   "{",
   "/* Check to see if this class was already initialized,\r\n         * if not, initialize it based on the type of the value.\r\n\t\t */",
   "if",
   "(",
   "!",
   "isInitialized",
   "(",
   ")",
   ")",
   "{",
   "if",
   "(",
   "value",
   "instanceof",
   "Integer",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Integer",
   "(",
   "<mask>",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Integer",
   "(",
   "max",
   ".",
   "intValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "value",
   "instanceof",
   "Byte",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Byte",
   "(",
   "min",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Byte",
   "(",
   "max",
   ".",
   "byteValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "value",
   "instanceof",
   "Short",
   ")",
   "{",
   "init",
   "(",
   "new",
   "Short",
   "(",
   "min",
   ".",
   "shortValue",
   "(",
   ")",
   ")",
   ",",
   "new",
   "Short",
   "(",
   "max",
   ".",
   "shortValue",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "init",
   "(",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-459",
  "nl_tokens": [
   "Copies",
   "the",
   "data",
   "from",
   "the",
   "provided",
   "source",
   "array",
   "into",
   "this",
   "array",
   "guaranteeing",
   "that",
   "if",
   "the",
   "update",
   "is",
   "seen",
   "by",
   "another",
   "thread",
   "then",
   "all",
   "other",
   "writes",
   "prior",
   "to",
   "this",
   "call",
   "are",
   "also",
   "visible",
   "to",
   "that",
   "thread",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "orderedCopy",
   "(",
   "SegmentedByteArray",
   "src",
   ",",
   "long",
   "srcPos",
   ",",
   "long",
   "destPos",
   ",",
   "long",
   "length",
   ")",
   "{",
   "int",
   "segmentLength",
   "=",
   "1",
   "<<",
   "log2OfSegmentSize",
   ";",
   "int",
   "currentSegment",
   "=",
   "(",
   "int",
   ")",
   "(",
   "destPos",
   ">>>",
   "log2OfSegmentSize",
   ")",
   ";",
   "int",
   "segmentStartPos",
   "=",
   "(",
   "int",
   ")",
   "(",
   "destPos",
   "&",
   "bitmask",
   ")",
   ";",
   "int",
   "remainingBytesInSegment",
   "=",
   "segmentLength",
   "-",
   "segmentStartPos",
   ";",
   "while",
   "(",
   "length",
   ">",
   "0",
   ")",
   "{",
   "int",
   "bytesToCopyFromSegment",
   "=",
   "(",
   "int",
   ")",
   "Math",
   ".",
   "<mask>",
   "(",
   "remainingBytesInSegment",
   ",",
   "length",
   ")",
   ";",
   "ensureCapacity",
   "(",
   "currentSegment",
   ")",
   ";",
   "int",
   "copiedBytes",
   "=",
   "src",
   ".",
   "orderedCopy",
   "(",
   "srcPos",
   ",",
   "segments",
   "[",
   "currentSegment",
   "]",
   ",",
   "segmentStartPos",
   ",",
   "bytesToCopyFromSegment",
   ")",
   ";",
   "srcPos",
   "+=",
   "copiedBytes",
   ";",
   "length",
   "-=",
   "copiedBytes",
   ";",
   "segmentStartPos",
   "=",
   "0",
   ";",
   "remainingBytesInSegment",
   "=",
   "segmentLength",
   ";",
   "currentSegment",
   "++",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-460",
  "nl_tokens": [
   "Gets",
   "the",
   "max",
   "item",
   "from",
   "the",
   "array",
   ".",
   "Sorts",
   "the",
   "list",
   "descending",
   "first",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "<",
   "T",
   ">",
   "T",
   "<mask>",
   "(",
   "T",
   "[",
   "]",
   "array",
   ")",
   "{",
   "if",
   "(",
   "array",
   ".",
   "length",
   ">",
   "1",
   ")",
   "{",
   "Sorting",
   ".",
   "sortDesc",
   "(",
   "array",
   ")",
   ";",
   "return",
   "array",
   "[",
   "0",
   "]",
   ";",
   "}",
   "else",
   "{",
   "return",
   "null",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-461",
  "nl_tokens": [
   "Writes",
   "the",
   "entire",
   "contents",
   "of",
   "this",
   "byte",
   "stream",
   "to",
   "the",
   "specified",
   "output",
   "stream",
   "."
  ],
  "pl_tokens": [
   "public",
   "synchronized",
   "void",
   "writeTo",
   "(",
   "OutputStream",
   "out",
   ")",
   "throws",
   "IOException",
   "{",
   "int",
   "remaining",
   "=",
   "count",
   ";",
   "for",
   "(",
   "byte",
   "[",
   "]",
   "buf",
   ":",
   "buffers",
   ")",
   "{",
   "int",
   "c",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "buf",
   ".",
   "length",
   ",",
   "remaining",
   ")",
   ";",
   "out",
   ".",
   "write",
   "(",
   "buf",
   ",",
   "0",
   ",",
   "c",
   ")",
   ";",
   "remaining",
   "-=",
   "c",
   ";",
   "if",
   "(",
   "remaining",
   "==",
   "0",
   ")",
   "{",
   "break",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-462",
  "nl_tokens": [
   "Get",
   "an",
   "array",
   "of",
   "values",
   "for",
   "all",
   "buckets",
   "in",
   "the",
   "rolling",
   "counter",
   "for",
   "the",
   "given",
   "{",
   "@link",
   "NumerusRollingNumberEvent",
   "}",
   "type",
   ".",
   "<p",
   ">",
   "Index",
   "0",
   "is",
   "the",
   "oldest",
   "bucket",
   ".",
   "<p",
   ">",
   "The",
   "{",
   "@link",
   "NumerusRollingNumberEvent",
   "}",
   "must",
   "be",
   "a",
   "counter",
   "type",
   "<code",
   ">",
   "HystrixRollingNumberEvent",
   ".",
   "isCounter",
   "()",
   "==",
   "true<",
   "/",
   "code",
   ">",
   "."
  ],
  "pl_tokens": [
   "public",
   "long",
   "[",
   "]",
   "getValues",
   "(",
   "NumerusRollingNumberEvent",
   "type",
   ")",
   "{",
   "Bucket",
   "lastBucket",
   "=",
   "getCurrentBucket",
   "(",
   ")",
   ";",
   "if",
   "(",
   "lastBucket",
   "==",
   "null",
   ")",
   "return",
   "new",
   "long",
   "[",
   "0",
   "]",
   ";",
   "// get buckets as an array (which is a copy of the current state at this point in time)",
   "Bucket",
   "[",
   "]",
   "bucketArray",
   "=",
   "buckets",
   ".",
   "getArray",
   "(",
   ")",
   ";",
   "// we have bucket data so we'll return an array of values for all buckets",
   "long",
   "values",
   "[",
   "]",
   "=",
   "new",
   "long",
   "[",
   "bucketArray",
   ".",
   "length",
   "]",
   ";",
   "int",
   "i",
   "=",
   "0",
   ";",
   "for",
   "(",
   "Bucket",
   "bucket",
   ":",
   "bucketArray",
   ")",
   "{",
   "if",
   "(",
   "type",
   ".",
   "isCounter",
   "(",
   ")",
   ")",
   "{",
   "values",
   "[",
   "i",
   "++",
   "]",
   "=",
   "bucket",
   ".",
   "getAdder",
   "(",
   "type",
   ")",
   ".",
   "sum",
   "(",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "type",
   ".",
   "isMaxUpdater",
   "(",
   ")",
   ")",
   "{",
   "values",
   "[",
   "i",
   "++",
   "]",
   "=",
   "bucket",
   ".",
   "getMaxUpdater",
   "(",
   "type",
   ")",
   ".",
   "<mask>",
   "(",
   ")",
   ";",
   "}",
   "}",
   "return",
   "values",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-463",
  "nl_tokens": [
   "Max"
  ],
  "pl_tokens": [
   "public",
   "static",
   "float",
   "<mask>",
   "(",
   "float",
   "[",
   "]",
   "values",
   ",",
   "final",
   "int",
   "start",
   ",",
   "final",
   "int",
   "length",
   ")",
   "{",
   "float",
   "max",
   "=",
   "Float",
   ".",
   "MIN_VALUE",
   ";",
   "for",
   "(",
   "int",
   "index",
   "=",
   "start",
   ";",
   "index",
   "<",
   "length",
   ";",
   "index",
   "++",
   ")",
   "{",
   "if",
   "(",
   "values",
   "[",
   "index",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "values",
   "[",
   "index",
   "]",
   ";",
   "}",
   "}",
   "return",
   "max",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-464",
  "nl_tokens": [
   "Returns",
   "the",
   "constant",
   "from",
   "the",
   "NumericTypes",
   "interface",
   "that",
   "best",
   "expresses",
   "the",
   "type",
   "of",
   "an",
   "operation",
   "which",
   "can",
   "be",
   "either",
   "numeric",
   "or",
   "not",
   "on",
   "the",
   "two",
   "given",
   "types",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "getNumericType",
   "(",
   "int",
   "t1",
   ",",
   "int",
   "t2",
   ",",
   "boolean",
   "canBeNonNumeric",
   ")",
   "{",
   "if",
   "(",
   "t1",
   "==",
   "t2",
   ")",
   "return",
   "t1",
   ";",
   "if",
   "(",
   "canBeNonNumeric",
   "&&",
   "(",
   "t1",
   "==",
   "NONNUMERIC",
   "||",
   "t2",
   "==",
   "NONNUMERIC",
   "||",
   "t1",
   "==",
   "CHAR",
   "||",
   "t2",
   "==",
   "CHAR",
   ")",
   ")",
   "return",
   "NONNUMERIC",
   ";",
   "if",
   "(",
   "t1",
   "==",
   "NONNUMERIC",
   ")",
   "t1",
   "=",
   "DOUBLE",
   ";",
   "// Try to interpret strings as doubles...",
   "if",
   "(",
   "t2",
   "==",
   "NONNUMERIC",
   ")",
   "t2",
   "=",
   "DOUBLE",
   ";",
   "// Try to interpret strings as doubles...",
   "if",
   "(",
   "t1",
   ">=",
   "MIN_REAL_TYPE",
   ")",
   "{",
   "if",
   "(",
   "t2",
   ">=",
   "MIN_REAL_TYPE",
   ")",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "t1",
   ",",
   "t2",
   ")",
   ";",
   "if",
   "(",
   "t2",
   "<",
   "INT",
   ")",
   "return",
   "t1",
   ";",
   "if",
   "(",
   "t2",
   "==",
   "BIGINT",
   ")",
   "return",
   "BIGDEC",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "DOUBLE",
   ",",
   "t1",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "t2",
   ">=",
   "MIN_REAL_TYPE",
   ")",
   "{",
   "if",
   "(",
   "t1",
   "<",
   "INT",
   ")",
   "return",
   "t2",
   ";",
   "if",
   "(",
   "t1",
   "==",
   "BIGINT",
   ")",
   "return",
   "BIGDEC",
   ";",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "DOUBLE",
   ",",
   "t2",
   ")",
   ";",
   "}",
   "else",
   "return",
   "Math",
   ".",
   "max",
   "(",
   "t1",
   ",",
   "t2",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-465",
  "nl_tokens": [
   "{"
  ],
  "pl_tokens": [
   "public",
   "long",
   "onIdle",
   "(",
   "final",
   "long",
   "timeNs",
   ",",
   "final",
   "long",
   "senderLimit",
   ",",
   "final",
   "long",
   "senderPosition",
   ",",
   "final",
   "boolean",
   "isEos",
   ")",
   "{",
   "long",
   "minPosition",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "long",
   "minLimitPosition",
   "=",
   "Long",
   ".",
   "MAX_VALUE",
   ";",
   "final",
   "ArrayList",
   "<",
   "Receiver",
   ">",
   "receiverList",
   "=",
   "this",
   ".",
   "receiverList",
   ";",
   "for",
   "(",
   "int",
   "lastIndex",
   "=",
   "receiverList",
   ".",
   "size",
   "(",
   ")",
   "-",
   "1",
   ",",
   "i",
   "=",
   "lastIndex",
   ";",
   "i",
   ">=",
   "0",
   ";",
   "i",
   "--",
   ")",
   "{",
   "final",
   "Receiver",
   "receiver",
   "=",
   "receiverList",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "(",
   "receiver",
   ".",
   "timeOfLastStatusMessageNs",
   "+",
   "RECEIVER_TIMEOUT",
   ")",
   "-",
   "timeNs",
   "<",
   "0",
   ")",
   "{",
   "ArrayListUtil",
   ".",
   "fastUnorderedRemove",
   "(",
   "receiverList",
   ",",
   "i",
   ",",
   "lastIndex",
   "--",
   ")",
   ";",
   "}",
   "else",
   "{",
   "minPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minPosition",
   ",",
   "receiver",
   ".",
   "lastPosition",
   ")",
   ";",
   "minLimitPosition",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "minLimitPosition",
   ",",
   "receiver",
   ".",
   "lastPositionPlusWindow",
   ")",
   ";",
   "}",
   "}",
   "if",
   "(",
   "isEos",
   "&&",
   "shouldLinger",
   ")",
   "{",
   "if",
   "(",
   "0",
   "==",
   "receiverList",
   ".",
   "size",
   "(",
   ")",
   "||",
   "minPosition",
   ">=",
   "senderPosition",
   ")",
   "{",
   "shouldLinger",
   "=",
   "false",
   ";",
   "}",
   "}",
   "return",
   "receiverList",
   ".",
   "size",
   "(",
   ")",
   ">",
   "0",
   "?",
   "minLimitPosition",
   ":",
   "senderLimit",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-466",
  "nl_tokens": [
   "Finds",
   "maximum",
   "frame",
   "of",
   "a",
   "sequence",
   "by",
   "bisecting",
   "the",
   "range",
   "."
  ],
  "pl_tokens": [
   "public",
   "int",
   "getMaxAvailableFrame",
   "(",
   ")",
   "{",
   "if",
   "(",
   "maxAvailableFrame",
   "==",
   "-",
   "1",
   ")",
   "{",
   "int",
   "firstPoint",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "MAX_MAX",
   ";",
   "i",
   ">",
   "0",
   ";",
   "i",
   "/=",
   "2",
   ")",
   "{",
   "if",
   "(",
   "new",
   "File",
   "(",
   "String",
   ".",
   "format",
   "(",
   "namePattern",
   ",",
   "i",
   ")",
   ")",
   ".",
   "exists",
   "(",
   ")",
   ")",
   "{",
   "firstPoint",
   "=",
   "i",
   ";",
   "break",
   ";",
   "}",
   "}",
   "int",
   "pos",
   "=",
   "firstPoint",
   ";",
   "for",
   "(",
   "int",
   "interv",
   "=",
   "firstPoint",
   "/",
   "2",
   ";",
   "interv",
   ">",
   "1",
   ";",
   "interv",
   "/=",
   "2",
   ")",
   "{",
   "if",
   "(",
   "new",
   "File",
   "(",
   "String",
   ".",
   "format",
   "(",
   "namePattern",
   ",",
   "pos",
   "+",
   "interv",
   ")",
   ")",
   ".",
   "exists",
   "(",
   ")",
   ")",
   "{",
   "pos",
   "+=",
   "interv",
   ";",
   "}",
   "}",
   "maxAvailableFrame",
   "=",
   "pos",
   ";",
   "Logger",
   ".",
   "info",
   "(",
   "\"Max frame found: \"",
   "+",
   "maxAvailableFrame",
   ")",
   ";",
   "}",
   "return",
   "Math",
   ".",
   "<mask>",
   "(",
   "maxAvailableFrame",
   ",",
   "maxFrames",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-467",
  "nl_tokens": [
   "Dump",
   "the",
   "contents",
   "of",
   "a",
   "segment",
   "file",
   "to",
   "a",
   "{",
   "@link",
   "PrintStream",
   "}",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "void",
   "dumpSegment",
   "(",
   "final",
   "PrintStream",
   "out",
   ",",
   "final",
   "int",
   "messageDumpLimit",
   ",",
   "final",
   "UnsafeBuffer",
   "buffer",
   ")",
   "{",
   "final",
   "DataHeaderFlyweight",
   "dataHeaderFlyweight",
   "=",
   "new",
   "DataHeaderFlyweight",
   "(",
   ")",
   ";",
   "final",
   "int",
   "length",
   "=",
   "buffer",
   ".",
   "capacity",
   "(",
   ")",
   ";",
   "int",
   "offset",
   "=",
   "0",
   ";",
   "while",
   "(",
   "offset",
   "<",
   "length",
   ")",
   "{",
   "dataHeaderFlyweight",
   ".",
   "wrap",
   "(",
   "buffer",
   ",",
   "offset",
   ",",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "out",
   ".",
   "println",
   "(",
   "offset",
   "+",
   "\": \"",
   "+",
   "dataHeaderFlyweight",
   ".",
   "toString",
   "(",
   ")",
   ")",
   ";",
   "final",
   "int",
   "frameLength",
   "=",
   "dataHeaderFlyweight",
   ".",
   "frameLength",
   "(",
   ")",
   ";",
   "if",
   "(",
   "frameLength",
   "<",
   "DataHeaderFlyweight",
   ".",
   "HEADER_LENGTH",
   ")",
   "{",
   "break",
   ";",
   "}",
   "final",
   "int",
   "limit",
   "=",
   "<mask>",
   "(",
   "frameLength",
   "-",
   "HEADER_LENGTH",
   ",",
   "messageDumpLimit",
   ")",
   ";",
   "out",
   ".",
   "println",
   "(",
   "LogInspector",
   ".",
   "formatBytes",
   "(",
   "buffer",
   ",",
   "offset",
   "+",
   "HEADER_LENGTH",
   ",",
   "limit",
   ")",
   ")",
   ";",
   "offset",
   "+=",
   "BitUtil",
   ".",
   "align",
   "(",
   "frameLength",
   ",",
   "FrameDescriptor",
   ".",
   "FRAME_ALIGNMENT",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-468",
  "nl_tokens": [
   "Is",
   "this",
   "a",
   "global",
   "coverage",
   "over",
   "longitude",
   "?"
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "boolean",
   "isGlobalLon",
   "(",
   ")",
   "{",
   "if",
   "(",
   "!",
   "isLatLon",
   ")",
   "return",
   "false",
   ";",
   "if",
   "(",
   "!",
   "(",
   "horizXaxis",
   "instanceof",
   "CoordinateAxis1D",
   ")",
   ")",
   "return",
   "false",
   ";",
   "CoordinateAxis1D",
   "lon",
   "=",
   "(",
   "CoordinateAxis1D",
   ")",
   "horizXaxis",
   ";",
   "double",
   "first",
   "=",
   "lon",
   ".",
   "getCoordEdge",
   "(",
   "0",
   ")",
   ";",
   "double",
   "last",
   "=",
   "lon",
   ".",
   "getCoordEdge",
   "(",
   "(",
   "int",
   ")",
   "lon",
   ".",
   "getSize",
   "(",
   ")",
   ")",
   ";",
   "double",
   "<mask>",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "first",
   ",",
   "last",
   ")",
   ";",
   "double",
   "max",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "first",
   ",",
   "last",
   ")",
   ";",
   "return",
   "(",
   "max",
   "-",
   "min",
   ")",
   ">=",
   "360",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-469",
  "nl_tokens": [
   "Add",
   "a",
   "variable",
   "with",
   "DataType",
   "=",
   "String",
   "to",
   "a",
   "netCDF",
   "-",
   "3",
   "file",
   ".",
   "Must",
   "be",
   "in",
   "define",
   "mode",
   ".",
   "The",
   "variable",
   "will",
   "be",
   "stored",
   "in",
   "the",
   "file",
   "as",
   "a",
   "CHAR",
   "variable",
   ".",
   "A",
   "new",
   "dimension",
   "with",
   "name",
   "stringVar",
   ".",
   "getShortName",
   "()",
   "_strlen",
   "is",
   "automatically",
   "added",
   "with",
   "length",
   "max_strlen",
   "as",
   "determined",
   "from",
   "the",
   "data",
   "contained",
   "in",
   "the",
   "stringVar",
   "."
  ],
  "pl_tokens": [
   "public",
   "Variable",
   "addStringVariable",
   "(",
   "Group",
   "g",
   ",",
   "Variable",
   "stringVar",
   ",",
   "List",
   "<",
   "Dimension",
   ">",
   "dims",
   ")",
   "{",
   "if",
   "(",
   "!",
   "defineMode",
   ")",
   "throw",
   "new",
   "UnsupportedOperationException",
   "(",
   "\"not in define mode\"",
   ")",
   ";",
   "if",
   "(",
   "!",
   "N3iosp",
   ".",
   "isValidNetcdfObjectName",
   "(",
   "stringVar",
   ".",
   "getShortName",
   "(",
   ")",
   ")",
   ")",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"illegal netCDF-3 variable name: \"",
   "+",
   "stringVar",
   ".",
   "getShortName",
   "(",
   ")",
   ")",
   ";",
   "// convert STRING to CHAR\r",
   "int",
   "max_strlen",
   "=",
   "0",
   ";",
   "Array",
   "data",
   ";",
   "try",
   "{",
   "data",
   "=",
   "stringVar",
   ".",
   "read",
   "(",
   ")",
   ";",
   "IndexIterator",
   "ii",
   "=",
   "data",
   ".",
   "getIndexIterator",
   "(",
   ")",
   ";",
   "while",
   "(",
   "ii",
   ".",
   "hasNext",
   "(",
   ")",
   ")",
   "{",
   "String",
   "s",
   "=",
   "(",
   "String",
   ")",
   "ii",
   ".",
   "getObjectNext",
   "(",
   ")",
   ";",
   "max_strlen",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "max_strlen",
   ",",
   "s",
   ".",
   "length",
   "(",
   ")",
   ")",
   ";",
   "}",
   "}",
   "catch",
   "(",
   "IOException",
   "e",
   ")",
   "{",
   "e",
   ".",
   "printStackTrace",
   "(",
   ")",
   ";",
   "String",
   "err",
   "=",
   "\"No data found for Variable \"",
   "+",
   "stringVar",
   ".",
   "getShortName",
   "(",
   ")",
   "+",
   "\". Cannot determine the lentgh of the new CHAR variable.\"",
   ";",
   "log",
   ".",
   "error",
   "(",
   "err",
   ")",
   ";",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "err",
   ")",
   ";",
   "}",
   "return",
   "addStringVariable",
   "(",
   "g",
   ",",
   "stringVar",
   ".",
   "getShortName",
   "(",
   ")",
   ",",
   "dims",
   ",",
   "max_strlen",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-470",
  "nl_tokens": [
   "Perform",
   "the",
   "actual",
   "validation",
   "."
  ],
  "pl_tokens": [
   "public",
   "ValidatorMessageHolder",
   "validate",
   "(",
   "Object",
   "fieldValue",
   ",",
   "String",
   "fieldLabel",
   ")",
   "{",
   "ValidatorMessage",
   "validatorMessage",
   "=",
   "new",
   "ValidatorMessage",
   "(",
   ")",
   ";",
   "if",
   "(",
   "fieldValue",
   "==",
   "null",
   ")",
   "{",
   "return",
   "validatorMessage",
   ";",
   "}",
   "int",
   "len",
   "=",
   "Boon",
   ".",
   "len",
   "(",
   "fieldValue",
   ")",
   ";",
   "if",
   "(",
   "!",
   "(",
   "len",
   ">=",
   "<mask>",
   "&&",
   "len",
   "<=",
   "max",
   ")",
   ")",
   "{",
   "populateMessage",
   "(",
   "validatorMessage",
   ",",
   "fieldLabel",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "}",
   "return",
   "validatorMessage",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-471",
  "nl_tokens": [
   "Returns",
   "<code",
   ">",
   "true<",
   "/",
   "code",
   ">",
   "if",
   "substring",
   "exist",
   "at",
   "given",
   "offset",
   "in",
   "a",
   "string",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "boolean",
   "isSubstringAt",
   "(",
   "final",
   "String",
   "string",
   ",",
   "final",
   "String",
   "substring",
   ",",
   "final",
   "int",
   "offset",
   ")",
   "{",
   "int",
   "len",
   "=",
   "substring",
   ".",
   "length",
   "(",
   ")",
   ";",
   "int",
   "<mask>",
   "=",
   "offset",
   "+",
   "len",
   ";",
   "if",
   "(",
   "max",
   ">",
   "string",
   ".",
   "length",
   "(",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "int",
   "ndx",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "offset",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ",",
   "ndx",
   "++",
   ")",
   "{",
   "if",
   "(",
   "string",
   ".",
   "charAt",
   "(",
   "i",
   ")",
   "!=",
   "substring",
   ".",
   "charAt",
   "(",
   "ndx",
   ")",
   ")",
   "{",
   "return",
   "false",
   ";",
   "}",
   "}",
   "return",
   "true",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-472",
  "nl_tokens": [
   "Returns",
   "the",
   "last",
   "key",
   "in",
   "this",
   "map",
   "or",
   "throws",
   "a",
   "NoSuchElementException",
   "if",
   "the",
   "map",
   "is",
   "empty",
   "."
  ],
  "pl_tokens": [
   "@",
   "Override",
   "public",
   "K",
   "lastKey",
   "(",
   ")",
   "{",
   "UnEntry",
   "<",
   "K",
   ",",
   "V",
   ">",
   "<mask>",
   "=",
   "last",
   "(",
   ")",
   ";",
   "if",
   "(",
   "max",
   "==",
   "null",
   ")",
   "{",
   "throw",
   "new",
   "NoSuchElementException",
   "(",
   "\"this map is empty\"",
   ")",
   ";",
   "}",
   "return",
   "max",
   ".",
   "getKey",
   "(",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-473",
  "nl_tokens": [
   "Appends",
   "string",
   "content",
   "to",
   "buffer",
   "."
  ],
  "pl_tokens": [
   "public",
   "FastCharBuffer",
   "append",
   "(",
   "String",
   "string",
   ")",
   "{",
   "int",
   "len",
   "=",
   "string",
   ".",
   "length",
   "(",
   ")",
   ";",
   "if",
   "(",
   "len",
   "==",
   "0",
   ")",
   "{",
   "return",
   "this",
   ";",
   "}",
   "int",
   "end",
   "=",
   "offset",
   "+",
   "len",
   ";",
   "int",
   "newSize",
   "=",
   "size",
   "+",
   "len",
   ";",
   "int",
   "remaining",
   "=",
   "len",
   ";",
   "int",
   "start",
   "=",
   "0",
   ";",
   "if",
   "(",
   "currentBuffer",
   "!=",
   "null",
   ")",
   "{",
   "// first try to fill current buffer",
   "int",
   "part",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "remaining",
   ",",
   "currentBuffer",
   ".",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "string",
   ".",
   "getChars",
   "(",
   "0",
   ",",
   "part",
   ",",
   "currentBuffer",
   ",",
   "offset",
   ")",
   ";",
   "remaining",
   "-=",
   "part",
   ";",
   "offset",
   "+=",
   "part",
   ";",
   "size",
   "+=",
   "part",
   ";",
   "start",
   "+=",
   "part",
   ";",
   "}",
   "if",
   "(",
   "remaining",
   ">",
   "0",
   ")",
   "{",
   "// still some data left",
   "// ask for new buffer",
   "needNewBuffer",
   "(",
   "newSize",
   ")",
   ";",
   "// then copy remaining",
   "// but this time we are sure that it will fit",
   "int",
   "part",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "remaining",
   ",",
   "currentBuffer",
   ".",
   "length",
   "-",
   "offset",
   ")",
   ";",
   "string",
   ".",
   "getChars",
   "(",
   "start",
   ",",
   "start",
   "+",
   "part",
   ",",
   "currentBuffer",
   ",",
   "offset",
   ")",
   ";",
   "offset",
   "+=",
   "part",
   ";",
   "size",
   "+=",
   "part",
   ";",
   "}",
   "return",
   "this",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-474",
  "nl_tokens": [
   "Divide",
   "and",
   "round",
   "."
  ],
  "pl_tokens": [
   "static",
   "public",
   "BigDecimal",
   "divideRound",
   "(",
   "final",
   "BigDecimal",
   "x",
   ",",
   "final",
   "BigDecimal",
   "y",
   ")",
   "{",
   "/* The estimation of the relative error in the result is |err(y)/y|+|err(x)/x|\n         */",
   "MathContext",
   "mc",
   "=",
   "new",
   "MathContext",
   "(",
   "Math",
   ".",
   "<mask>",
   "(",
   "x",
   ".",
   "precision",
   "(",
   ")",
   ",",
   "y",
   ".",
   "precision",
   "(",
   ")",
   ")",
   ")",
   ";",
   "return",
   "x",
   ".",
   "divide",
   "(",
   "y",
   ",",
   "mc",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-475",
  "nl_tokens": [
   "Set",
   "the",
   "data",
   "min",
   "/",
   "max",
   "interval",
   ".",
   "The",
   "color",
   "intervals",
   "are",
   "set",
   "based",
   "on",
   "this",
   ".",
   "A",
   "PropertyChangeEvent",
   "is",
   "sent",
   "when",
   "this",
   "is",
   "called",
   ".",
   "Currently",
   "the",
   "intervals",
   "are",
   "calculated",
   "in",
   "the",
   "following",
   "way",
   "(",
   "where",
   "incr",
   "=",
   "(",
   "max",
   "-",
   "min",
   ")",
   "/",
   "(",
   "n",
   "-",
   "2",
   "))",
   ":",
   "<pre",
   ">",
   "<p",
   "/",
   ">",
   "edge",
   "data",
   "interval",
   "0",
   "min",
   "value",
   "<",
   "=",
   "min",
   "1",
   "min",
   "+",
   "incr",
   "min",
   "<",
   "=",
   "value",
   "<",
   "min",
   "+",
   "incr",
   "2",
   "min",
   "+",
   "2",
   "*",
   "incr",
   "min",
   "+",
   "incr",
   "<",
   "=",
   "value",
   "<",
   "min",
   "+",
   "2",
   "*",
   "incr",
   "ith",
   "min",
   "+",
   "i",
   "*",
   "incr",
   "min",
   "+",
   "(",
   "i",
   "-",
   "1",
   ")",
   "*",
   "incr",
   "<",
   "=",
   "value",
   "<",
   "min",
   "+",
   "i",
   "*",
   "incr",
   "n",
   "-",
   "2",
   "max",
   "min",
   "+",
   "(",
   "n",
   "-",
   "3",
   ")",
   "*",
   "incr",
   "<",
   "=",
   "value",
   "<",
   "max",
   "n",
   "-",
   "1",
   "max",
   "max",
   "<",
   "value",
   "n",
   "value",
   "=",
   "missingDataValue",
   "<",
   "/",
   "pre",
   ">"
  ],
  "pl_tokens": [
   "public",
   "void",
   "setMinMax",
   "(",
   "double",
   "<mask>",
   ",",
   "double",
   "max",
   ")",
   "{",
   "this",
   ".",
   "min",
   "=",
   "min",
   ";",
   "this",
   ".",
   "max",
   "=",
   "max",
   ";",
   "interval",
   "=",
   "(",
   "max",
   "-",
   "min",
   ")",
   "/",
   "(",
   "ncolors",
   "-",
   "2",
   ")",
   ";",
   "// set edges\r",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "ncolors",
   ";",
   "i",
   "++",
   ")",
   "edge",
   "[",
   "i",
   "]",
   "=",
   "min",
   "+",
   "i",
   "*",
   "interval",
   ";",
   "lm",
   ".",
   "sendEvent",
   "(",
   "new",
   "PropertyChangeEvent",
   "(",
   "this",
   ",",
   "\"ColorScaleLimits\"",
   ",",
   "null",
   ",",
   "this",
   ")",
   ")",
   ";",
   "}",
   "/**\r\n   * This is an optimization for counting the number of colors in each interval.\r\n   * the histpogram is populated by calls to getIndexFromValue().\r\n   *\r\n   * @return the index with the maximum histogram count.\r\n   */",
   "public",
   "int",
   "getHistMax",
   "(",
   ")",
   "{",
   "int",
   "max",
   "=",
   "0",
   ",",
   "maxi",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<=",
   "ncolors",
   ";",
   "i",
   "++",
   ")",
   "if",
   "(",
   "hist",
   "[",
   "i",
   "]",
   ">",
   "max",
   ")",
   "{",
   "max",
   "=",
   "hist",
   "[",
   "i",
   "]",
   ";",
   "maxi",
   "=",
   "i",
   ";",
   "}",
   "return",
   "maxi",
   ";",
   "}",
   "/**\r\n   * reset the histogram.\r\n   */",
   "public",
   "void",
   "resetHist",
   "",
   "(",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<=",
   "ncolors",
   ";",
   "i",
   "++",
   ")",
   "hist",
   "[",
   "i",
   "]",
   "=",
   "0",
   ";",
   "}",
   "public",
   "String",
   "toString",
   "",
   "(",
   ")",
   "{",
   "return",
   "name",
   ";",
   "}",
   "public",
   "Object",
   "clone",
   "",
   "(",
   ")",
   "{",
   "ColorScale",
   "cl",
   "=",
   "new",
   "ColorScale",
   "(",
   "name",
   ",",
   "colors",
   ")",
   ";",
   "/*try {\r\n      cl = (ColorScale) super.clone();\r\n    } catch(CloneNotSupportedException e) {\r\n      return null;\r\n    } // ignore\r\n\r\n    // non primitive fields must be cloned separately\r\n    cl.name = new String(name);\r\n    cl.set(this);\r\n    cl.construct();  */",
   "return",
   "(",
   "Object",
   ")",
   "cl",
   ";",
   "}",
   "/////////// private ////////////////////\r",
   "// this is for editing a colorscale\r",
   "private",
   "void",
   "editModeBegin",
   "",
   "(",
   ")",
   "{",
   "Color",
   "[",
   "]",
   "editColors",
   "=",
   "new",
   "Color",
   "[",
   "ncolors",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "colors",
   ",",
   "0",
   ",",
   "editColors",
   ",",
   "0",
   ",",
   "ncolors",
   ")",
   ";",
   "useColors",
   "=",
   "editColors",
   ";",
   "}",
   "private",
   "void",
   "editModeEnd",
   "",
   "(",
   "boolean",
   "accept",
   ")",
   "{",
   "if",
   "(",
   "accept",
   ")",
   "{",
   "System",
   ".",
   "arraycopy",
   "(",
   "useColors",
   ",",
   "0",
   ",",
   "colors",
   ",",
   "0",
   ",",
   "ncolors",
   ")",
   ";",
   "}",
   "useColors",
   "=",
   "colors",
   ";",
   "}",
   "private",
   "void",
   "setColor",
   "",
   "(",
   "int",
   "i",
   ",",
   "Color",
   "c",
   ")",
   "{",
   "if",
   "(",
   "i",
   ">=",
   "0",
   "&&",
   "i",
   "<",
   "ncolors",
   ")",
   "useColors",
   "[",
   "i",
   "]",
   "=",
   "c",
   ";",
   "}",
   "/* private void set( ColorScale cs) {\r\n   set(cs.getColors());\r\n } */",
   "private",
   "void",
   "setColors",
   "",
   "(",
   "Color",
   "[",
   "]",
   "c",
   ")",
   "{",
   "ncolors",
   "=",
   "c",
   ".",
   "length",
   ";",
   "colors",
   "=",
   "new",
   "Color",
   "[",
   "ncolors",
   "]",
   ";",
   "System",
   ".",
   "arraycopy",
   "(",
   "c",
   ",",
   "0",
   ",",
   "colors",
   ",",
   "0",
   ",",
   "ncolors",
   ")",
   ";",
   "edge",
   "=",
   "new",
   "double",
   "[",
   "ncolors",
   "]",
   ";",
   "hist",
   "=",
   "new",
   "int",
   "[",
   "ncolors",
   "+",
   "1",
   "]",
   ";",
   "useColors",
   "=",
   "colors",
   ";",
   "// ??\r",
   "}",
   "// serialization\r",
   "private",
   "void",
   "readObject",
   "",
   "(",
   "ObjectInputStream",
   "s",
   ")",
   "throws",
   "IOException",
   ",",
   "ClassNotFoundException",
   "{",
   "s",
   ".",
   "readInt",
   "(",
   ")",
   ";",
   "this",
   ".",
   "name",
   "=",
   "s",
   ".",
   "readUTF",
   "(",
   ")",
   ";",
   "this",
   ".",
   "colors",
   "=",
   "(",
   "Color",
   "[",
   "]",
   ")",
   "s",
   ".",
   "readObject",
   "(",
   ")",
   ";",
   "this",
   ".",
   "ncolors",
   "=",
   "colors",
   ".",
   "length",
   ";",
   "constructTransient",
   "(",
   ")",
   ";",
   "}",
   "private",
   "void",
   "writeObject",
   "",
   "(",
   "ObjectOutputStream",
   "s",
   ")",
   "throws",
   "IOException",
   "{",
   "s",
   ".",
   "writeInt",
   "(",
   "objectVersion",
   ")",
   ";",
   "s",
   ".",
   "writeUTF",
   "(",
   "this",
   ".",
   "name",
   ")",
   ";",
   "s",
   ".",
   "writeObject",
   "(",
   "this",
   ".",
   "colors",
   ")",
   ";",
   "}",
   "// heres the swing component part of a ColorScale: static so its not part of serialization\r",
   "// originally designed to allow popup editor to change colors; this has been disabled; all\r",
   "// changes made by COlorManager. design could be cleaned up, but maybe I want that back later?\r",
   "public",
   "static",
   "class",
   "Panel",
   "extends",
   "JPanel",
   "{",
   "private",
   "int",
   "type",
   ";",
   "private",
   "int",
   "size",
   "=",
   "50",
   ";",
   "private",
   "ColorScale",
   "cs",
   ";",
   "private",
   "JLabel",
   "unitLabel",
   "=",
   "new",
   "JLabel",
   "(",
   "\"unit\"",
   ",",
   "SwingConstants",
   ".",
   "CENTER",
   ")",
   ";",
   "private",
   "JPanel",
   "lpanel",
   ";",
   "private",
   "boolean",
   "editable",
   "=",
   "false",
   ";",
   "private",
   "int",
   "selected",
   "=",
   "-",
   "1",
   ";",
   "private",
   "int",
   "nColorInterval",
   ";",
   "private",
   "String",
   "[",
   "]",
   "label",
   ";",
   "private",
   "boolean",
   "useLabel",
   "=",
   "true",
   ";",
   "private",
   "FontUtil",
   ".",
   "StandardFont",
   "sf",
   "=",
   "FontUtil",
   ".",
   "getStandardFont",
   "(",
   "10",
   ")",
   ";",
   "public",
   "Panel",
   "(",
   "Component",
   "parent",
   ")",
   "{",
   "this",
   "(",
   "parent",
   ",",
   "ColorScale",
   ".",
   "VERTICAL",
   ",",
   "null",
   ")",
   ";",
   "}",
   "public",
   "Panel",
   "(",
   "Component",
   "parent",
   ",",
   "ColorScale",
   "cscale",
   ")",
   "{",
   "this",
   "(",
   "parent",
   ",",
   "ColorScale",
   ".",
   "VERTICAL",
   ",",
   "cscale",
   ")",
   ";",
   "}",
   "public",
   "Panel",
   "(",
   "Component",
   "parent",
   ",",
   "int",
   "type",
   ",",
   "ColorScale",
   "cscale",
   ")",
   "{",
   "this",
   ".",
   "cs",
   "=",
   "(",
   "cscale",
   "==",
   "null",
   ")",
   "?",
   "new",
   "ColorScale",
   "(",
   "\"default\"",
   ")",
   ":",
   "cscale",
   ";",
   "this",
   ".",
   "type",
   "=",
   "type",
   ";",
   "if",
   "(",
   "type",
   "==",
   "ColorScale",
   ".",
   "VERTICAL",
   ")",
   "{",
   "setPreferredSize",
   "(",
   "new",
   "Dimension",
   "(",
   "size",
   ",",
   "400",
   ")",
   ")",
   ";",
   "setLayout",
   "(",
   "new",
   "BoxLayout",
   "(",
   "this",
   ",",
   "BoxLayout",
   ".",
   "Y_AXIS",
   ")",
   ")",
   ";",
   "}",
   "else",
   "{",
   "setPreferredSize",
   "(",
   "new",
   "Dimension",
   "(",
   "400",
   ",",
   "size",
   ")",
   ")",
   ";",
   "setLayout",
   "(",
   "new",
   "BoxLayout",
   "(",
   "this",
   ",",
   "BoxLayout",
   ".",
   "X_AXIS",
   ")",
   ")",
   ";",
   "}",
   "setListener",
   "(",
   ")",
   ";",
   "nColorInterval",
   "=",
   "cs",
   ".",
   "getNumColors",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "nColorInterval",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ColorInterval",
   "intv",
   "=",
   "new",
   "ColorInterval",
   "(",
   "nColorInterval",
   "-",
   "i",
   "-",
   "1",
   ")",
   ";",
   "add",
   "(",
   "intv",
   ")",
   ";",
   "}",
   "lpanel",
   "=",
   "new",
   "JPanel",
   "(",
   ")",
   ";",
   "lpanel",
   ".",
   "add",
   "(",
   "unitLabel",
   ")",
   ";",
   "//unitLabel.setBorder( new javax.swing.border.EtchedBorder());\r",
   "if",
   "(",
   "type",
   "==",
   "ColorScale",
   ".",
   "VERTICAL",
   ")",
   "lpanel",
   ".",
   "setPreferredSize",
   "(",
   "new",
   "Dimension",
   "(",
   "size",
   ",",
   "0",
   ")",
   ")",
   ";",
   "else",
   "lpanel",
   ".",
   "setPreferredSize",
   "(",
   "new",
   "Dimension",
   "(",
   "0",
   ",",
   "size",
   ")",
   ")",
   ";",
   "add",
   "(",
   "lpanel",
   ")",
   ";",
   "label",
   "=",
   "new",
   "String",
   "[",
   "nColorInterval",
   "]",
   ";",
   "calcLabels",
   "(",
   ")",
   ";",
   "/* creates a popup men, attaches it to this Panel\r\n     PopupMenu popupMenu = new PopupMenu(this, \"options\");\r\n     popupMenu.add(\"Edit\", new AbstractAction() {\r\n       public void actionPerformed(ActionEvent e) {\r\n         System.out.println(\"popup edit action\");\r\n         dialog.show();\r\n       }\r\n     }); */",
   "}",
   "private",
   "void",
   "calcLabels",
   "(",
   ")",
   "{",
   "label",
   "[",
   "0",
   "]",
   "=",
   "\"<\"",
   "+",
   "Format",
   ".",
   "d",
   "(",
   "cs",
   ".",
   "getEdge",
   "(",
   "0",
   ")",
   ",",
   "sigfig",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "1",
   ";",
   "i",
   "<",
   "nColorInterval",
   "-",
   "1",
   ";",
   "i",
   "++",
   ")",
   "{",
   "label",
   "[",
   "i",
   "]",
   "=",
   "Format",
   ".",
   "d",
   "(",
   "cs",
   ".",
   "getEdge",
   "(",
   "i",
   ")",
   ",",
   "sigfig",
   ")",
   ";",
   "}",
   "label",
   "[",
   "nColorInterval",
   "-",
   "1",
   "]",
   "=",
   "\">\"",
   "+",
   "Format",
   ".",
   "d",
   "(",
   "cs",
   ".",
   "getEdge",
   "(",
   "nColorInterval",
   "-",
   "2",
   ")",
   ",",
   "sigfig",
   ")",
   ";",
   "}",
   "private",
   "void",
   "setListener",
   "(",
   ")",
   "{",
   "// listen for changes so we can redraw\r",
   "cs",
   ".",
   "addPropertyChangeListener",
   "(",
   "new",
   "java",
   ".",
   "beans",
   ".",
   "PropertyChangeListener",
   "(",
   ")",
   "{",
   "public",
   "void",
   "propertyChange",
   "(",
   "java",
   ".",
   "beans",
   ".",
   "PropertyChangeEvent",
   "e",
   ")",
   "{",
   "if",
   "(",
   "e",
   ".",
   "getPropertyName",
   "(",
   ")",
   ".",
   "equals",
   "(",
   "\"ColorScaleLimits\"",
   ")",
   ")",
   "calcLabels",
   "(",
   ")",
   ";",
   "repaint",
   "(",
   ")",
   ";",
   "}",
   "}",
   ")",
   ";",
   "}",
   "public",
   "ColorScale",
   "getColorScale",
   "(",
   ")",
   "{",
   "return",
   "cs",
   ";",
   "}",
   "// change the current cscale\r",
   "public",
   "void",
   "setColorScale",
   "(",
   "ColorScale",
   "cscale",
   ")",
   "{",
   "if",
   "(",
   "nColorInterval",
   "!=",
   "cscale",
   ".",
   "getNumColors",
   "(",
   ")",
   ")",
   "{",
   "removeAll",
   "(",
   ")",
   ";",
   "nColorInterval",
   "=",
   "cscale",
   ".",
   "getNumColors",
   "(",
   ")",
   ";",
   "label",
   "=",
   "new",
   "String",
   "[",
   "nColorInterval",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "nColorInterval",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ColorInterval",
   "intv",
   "=",
   "new",
   "ColorInterval",
   "(",
   "nColorInterval",
   "-",
   "i",
   "-",
   "1",
   ")",
   ";",
   "add",
   "(",
   "intv",
   ")",
   ";",
   "label",
   "[",
   "i",
   "]",
   "=",
   "\"none\"",
   ";",
   "}",
   "add",
   "(",
   "lpanel",
   ")",
   ";",
   "revalidate",
   "(",
   ")",
   ";",
   "}",
   "this",
   ".",
   "cs",
   "=",
   "cscale",
   ";",
   "setListener",
   "(",
   ")",
   ";",
   "calcLabels",
   "(",
   ")",
   ";",
   "repaint",
   "(",
   ")",
   ";",
   "}",
   "// set existing colorscale to have new colors\r",
   "public",
   "void",
   "setColors",
   "(",
   "Color",
   "[",
   "]",
   "c",
   ")",
   "{",
   "if",
   "(",
   "nColorInterval",
   "!=",
   "c",
   ".",
   "length",
   ")",
   "{",
   "removeAll",
   "(",
   ")",
   ";",
   "nColorInterval",
   "=",
   "c",
   ".",
   "length",
   ";",
   "label",
   "=",
   "new",
   "String",
   "[",
   "nColorInterval",
   "]",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "nColorInterval",
   ";",
   "i",
   "++",
   ")",
   "{",
   "ColorInterval",
   "intv",
   "=",
   "new",
   "ColorInterval",
   "(",
   "nColorInterval",
   "-",
   "i",
   "-",
   "1",
   ")",
   ";",
   "add",
   "(",
   "intv",
   ")",
   ";",
   "label",
   "[",
   "i",
   "]",
   "=",
   "\"none\"",
   ";",
   "}",
   "add",
   "(",
   "lpanel",
   ")",
   ";",
   "revalidate",
   "(",
   ")",
   ";",
   "}",
   "cs",
   ".",
   "setColors",
   "(",
   "c",
   ")",
   ";",
   "cs",
   ".",
   "editModeBegin",
   "(",
   ")",
   ";",
   "// again\r",
   "if",
   "(",
   "debugColors",
   ")",
   "{",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "cs",
   ".",
   "getNumColors",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "System",
   ".",
   "out",
   ".",
   "println",
   "(",
   "cs",
   ".",
   "getColor",
   "(",
   "i",
   ")",
   ")",
   ";",
   "}",
   "calcLabels",
   "(",
   ")",
   ";",
   "repaint",
   "(",
   ")",
   ";",
   "}",
   "public",
   "void",
   "setColor",
   "(",
   "Color",
   "c",
   ")",
   "{",
   "cs",
   ".",
   "setColor",
   "(",
   "selected",
   ",",
   "c",
   ")",
   ";",
   "}",
   "//public void setEditable( boolean b) { editable = b; }\r",
   "public",
   "void",
   "setEditMode",
   "(",
   "boolean",
   "on",
   ",",
   "boolean",
   "accept",
   ")",
   "{",
   "if",
   "(",
   "on",
   ")",
   "{",
   "editable",
   "=",
   "true",
   ";",
   "cs",
   ".",
   "editModeBegin",
   "(",
   ")",
   ";",
   "}",
   "else",
   "{",
   "cs",
   ".",
   "editModeEnd",
   "(",
   "accept",
   ")",
   ";",
   "if",
   "(",
   "accept",
   ")",
   "setColorScale",
   "(",
   "cs",
   ")",
   ";",
   "selected",
   "=",
   "-",
   "1",
   ";",
   "editable",
   "=",
   "false",
   ";",
   "}",
   "repaint",
   "(",
   ")",
   ";",
   "}",
   "public",
   "void",
   "setSelected",
   "(",
   "int",
   "i",
   ")",
   "{",
   "selected",
   "=",
   "i",
   ";",
   "}",
   "public",
   "void",
   "setShowText",
   "(",
   "boolean",
   "b",
   ")",
   "{",
   "useLabel",
   "=",
   "b",
   ";",
   "}",
   "/*private void edit(int which) {\r\n      if (!editable)\r\n        return;\r\n      selected = which;\r\n      repaint();\r\n      cs.setEditMode(true);\r\n      //dialog.show();\r\n    }*/",
   "public",
   "void",
   "setUnitString",
   "(",
   "String",
   "s",
   ")",
   "{",
   "unitLabel",
   ".",
   "setText",
   "(",
   "s",
   ")",
   ";",
   "//System.out.println(\"new text = \"+s);\r",
   "//unitLabel.repaint(s);\r",
   "}",
   "public",
   "void",
   "print",
   "(",
   "Graphics2D",
   "g",
   ",",
   "double",
   "x",
   ",",
   "double",
   "y",
   ",",
   "double",
   "width",
   ",",
   "double",
   "height",
   ")",
   "{",
   "int",
   "n",
   "=",
   "cs",
   ".",
   "getNumColors",
   "(",
   ")",
   ";",
   "double",
   "size",
   "=",
   "(",
   "type",
   "==",
   "ColorScale",
   ".",
   "VERTICAL",
   ")",
   "?",
   "height",
   "/",
   "n",
   ":",
   "width",
   "/",
   "n",
   ";",
   "int",
   "count",
   "=",
   "0",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "0",
   ";",
   "i",
   "<",
   "getComponentCount",
   "(",
   ")",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Component",
   "c",
   "=",
   "getComponent",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "c",
   "instanceof",
   "ColorInterval",
   ")",
   "{",
   "ColorInterval",
   "intv",
   "=",
   "(",
   "ColorInterval",
   ")",
   "c",
   ";",
   "if",
   "(",
   "type",
   "==",
   "ColorScale",
   ".",
   "VERTICAL",
   ")",
   "intv",
   ".",
   "printV",
   "(",
   "g",
   ",",
   "(",
   "int",
   ")",
   "x",
   ",",
   "(",
   "int",
   ")",
   "(",
   "y",
   "+",
   "count",
   "*",
   "size",
   ")",
   ",",
   "(",
   "int",
   ")",
   "width",
   ",",
   "(",
   "int",
   ")",
   "size",
   ")",
   ";",
   "else",
   "{",
   "double",
   "xpos",
   "=",
   "x",
   "+",
   "width",
   "-",
   "(",
   "count",
   "+",
   "1",
   ")",
   "*",
   "size",
   ";",
   "intv",
   ".",
   "printH",
   "(",
   "g",
   ",",
   "(",
   "int",
   ")",
   "xpos",
   ",",
   "(",
   "int",
   ")",
   "y",
   ",",
   "(",
   "int",
   ")",
   "size",
   ",",
   "(",
   "int",
   ")",
   "height",
   ")",
   ";",
   "}",
   "count",
   "++",
   ";",
   "}",
   "}",
   "}",
   "/* private class OkListener implements ActionListener {\r\n      public void actionPerformed(ActionEvent e) {\r\n        selected = -1;\r\n        cs.accept();\r\n        repaint();\r\n      }\r\n    }  // end inner class OkListener\r\n\r\n    private class CancelListener implements ActionListener {\r\n      public void actionPerformed(ActionEvent e) {\r\n        selected = -1;\r\n        cs.cancel();\r\n        repaint();\r\n      }\r\n    } // end inner class CancelListener  */",
   "private",
   "class",
   "ColorInterval",
   "extends",
   "JComponent",
   "{",
   "private",
   "int",
   "rank",
   ";",
   "ColorInterval",
   "(",
   "int",
   "r",
   ")",
   "{",
   "this",
   ".",
   "rank",
   "=",
   "r",
   ";",
   "//setPreferredSize( new Dimension(40,40));\r",
   "addMouseListener",
   "(",
   "new",
   "MouseAdapter",
   "(",
   ")",
   "{",
   "public",
   "void",
   "mousePressed",
   "(",
   "MouseEvent",
   "e",
   ")",
   "{",
   "if",
   "(",
   "editable",
   ")",
   "{",
   "selected",
   "=",
   "rank",
   ";",
   "Panel",
   ".",
   "this",
   ".",
   "repaint",
   "(",
   ")",
   ";",
   "}",
   "}",
   "}",
   ")",
   ";",
   "}",
   "public",
   "void",
   "printV",
   "(",
   "Graphics2D",
   "g",
   ",",
   "int",
   "x",
   ",",
   "int",
   "y",
   ",",
   "int",
   "width",
   ",",
   "int",
   "height",
   ")",
   "{",
   "int",
   "textSize",
   "=",
   "15",
   ";",
   "// LOOK : neeed to calculate this\r",
   "g",
   ".",
   "setColor",
   "(",
   "cs",
   ".",
   "getColor",
   "(",
   "rank",
   ")",
   ")",
   ";",
   "g",
   ".",
   "fillRect",
   "(",
   "x",
   ",",
   "y",
   "+",
   "textSize",
   ",",
   "width",
   ",",
   "height",
   "-",
   "textSize",
   ")",
   ";",
   "//g.setColor( Color.black);\r",
   "//g.drawRect( x, y+textSize, width, height-textSize);\r",
   "if",
   "(",
   "useLabel",
   ")",
   "{",
   "g",
   ".",
   "setColor",
   "(",
   "Color",
   ".",
   "black",
   ")",
   ";",
   "g",
   ".",
   "setFont",
   "(",
   "sf",
   ".",
   "getFont",
   "(",
   ")",
   ")",
   ";",
   "g",
   ".",
   "drawString",
   "(",
   "label",
   "[",
   "rank",
   "]",
   ",",
   "x",
   "+",
   "3",
   ",",
   "y",
   "+",
   "10",
   ")",
   ";",
   "}",
   "}",
   "public",
   "void",
   "printH",
   "(",
   "Graphics2D",
   "g",
   ",",
   "int",
   "x",
   ",",
   "int",
   "y",
   ",",
   "int",
   "width",
   ",",
   "int",
   "height",
   ")",
   "{",
   "int",
   "textSize",
   "=",
   "15",
   ";",
   "// LOOK : neeed to calculate this\r",
   "g",
   ".",
   "setColor",
   "(",
   "cs",
   ".",
   "getColor",
   "(",
   "rank",
   ")",
   ")",
   ";",
   "g",
   ".",
   "fillRect",
   "(",
   "x",
   ",",
   "y",
   "+",
   "textSize",
   ",",
   "width",
   ",",
   "height",
   "-",
   "2",
   "*",
   "textSize",
   ")",
   ";",
   "g",
   ".",
   "setColor",
   "(",
   "Color",
   ".",
   "white",
   ")",
   ";",
   "g",
   ".",
   "drawRect",
   "(",
   "x",
   ",",
   "y",
   "+",
   "textSize",
   ",",
   "width",
   ",",
   "height",
   "-",
   "2",
   "*",
   "textSize",
   ")",
   ";",
   "if",
   "(",
   "useLabel",
   ")",
   "{",
   "g",
   ".",
   "setColor",
   "(",
   "Color",
   ".",
   "black",
   ")",
   ";",
   "g",
   ".",
   "setFont",
   "(",
   "sf",
   ".",
   "getFont",
   "(",
   ")",
   ")",
   ";",
   "if",
   "(",
   "rank",
   "%",
   "2",
   "==",
   "0",
   ")",
   "// even\r",
   "g",
   ".",
   "drawString",
   "(",
   "label",
   "[",
   "rank",
   "]",
   ",",
   "x",
   ",",
   "y",
   "+",
   "textSize",
   ")",
   ";",
   "else",
   "g",
   ".",
   "drawString",
   "(",
   "label",
   "[",
   "rank",
   "]",
   ",",
   "x",
   ",",
   "y",
   "+",
   "height",
   ")",
   ";",
   "}",
   "}",
   "public",
   "void",
   "paintComponent",
   "(",
   "Graphics",
   "g",
   ")",
   "{",
   "Rectangle",
   "b",
   "=",
   "getBounds",
   "(",
   ")",
   ";",
   "g",
   ".",
   "setColor",
   "(",
   "cs",
   ".",
   "getColor",
   "(",
   "rank",
   ")",
   ")",
   ";",
   "g",
   ".",
   "fillRect",
   "(",
   "0",
   ",",
   "0",
   ",",
   "b",
   ".",
   "width",
   "-",
   "1",
   ",",
   "b",
   ".",
   "height",
   "-",
   "1",
   ")",
   ";",
   "g",
   ".",
   "setColor",
   "(",
   "(",
   "selected",
   "==",
   "rank",
   ")",
   "?",
   "Color",
   ".",
   "magenta",
   ":",
   "Color",
   ".",
   "black",
   ")",
   ";",
   "g",
   ".",
   "drawRect",
   "(",
   "0",
   ",",
   "0",
   ",",
   "b",
   ".",
   "width",
   "-",
   "1",
   ",",
   "b",
   ".",
   "height",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "selected",
   "==",
   "rank",
   ")",
   "{",
   "g",
   ".",
   "drawLine",
   "(",
   "0",
   ",",
   "0",
   ",",
   "b",
   ".",
   "width",
   ",",
   "b",
   ".",
   "height",
   ")",
   ";",
   "g",
   ".",
   "drawLine",
   "(",
   "0",
   ",",
   "b",
   ".",
   "height",
   ",",
   "b",
   ".",
   "width",
   ",",
   "0",
   ")",
   ";",
   "}",
   "if",
   "(",
   "useLabel",
   ")",
   "{",
   "g",
   ".",
   "setColor",
   "(",
   "Color",
   ".",
   "black",
   ")",
   ";",
   "g",
   ".",
   "setFont",
   "(",
   "sf",
   ".",
   "getFont",
   "(",
   ")",
   ")",
   ";",
   "g",
   ".",
   "drawString",
   "(",
   "label",
   "[",
   "rank",
   "]",
   ",",
   "3",
   ",",
   "10",
   ")",
   ";",
   "}",
   "}",
   "}",
   "// end inner class ColorInterval\r",
   "}",
   "// end inner class ColorScale.Panel\r",
   "}"
  ]
 },
 {
  "idx": "maxmin-476",
  "nl_tokens": [
   "Update",
   "the",
   "publishers",
   "limit",
   "for",
   "flow",
   "control",
   "as",
   "part",
   "of",
   "the",
   "conductor",
   "duty",
   "cycle",
   "."
  ],
  "pl_tokens": [
   "final",
   "int",
   "updatePublisherLimit",
   "(",
   ")",
   "{",
   "int",
   "workCount",
   "=",
   "0",
   ";",
   "final",
   "long",
   "senderPosition",
   "=",
   "this",
   ".",
   "senderPosition",
   ".",
   "getVolatile",
   "(",
   ")",
   ";",
   "if",
   "(",
   "hasReceivers",
   "||",
   "(",
   "spiesSimulateConnection",
   "&&",
   "spyPositions",
   ".",
   "length",
   ">",
   "0",
   ")",
   ")",
   "{",
   "long",
   "minConsumerPosition",
   "=",
   "senderPosition",
   ";",
   "for",
   "(",
   "final",
   "ReadablePosition",
   "spyPosition",
   ":",
   "spyPositions",
   ")",
   "{",
   "minConsumerPosition",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "minConsumerPosition",
   ",",
   "spyPosition",
   ".",
   "getVolatile",
   "(",
   ")",
   ")",
   ";",
   "}",
   "final",
   "long",
   "proposedPublisherLimit",
   "=",
   "minConsumerPosition",
   "+",
   "termWindowLength",
   ";",
   "if",
   "(",
   "publisherLimit",
   ".",
   "proposeMaxOrdered",
   "(",
   "proposedPublisherLimit",
   ")",
   ")",
   "{",
   "cleanBuffer",
   "(",
   "proposedPublisherLimit",
   ")",
   ";",
   "workCount",
   "=",
   "1",
   ";",
   "}",
   "}",
   "else",
   "if",
   "(",
   "publisherLimit",
   ".",
   "get",
   "(",
   ")",
   ">",
   "senderPosition",
   ")",
   "{",
   "publisherLimit",
   ".",
   "setOrdered",
   "(",
   "senderPosition",
   ")",
   ";",
   "}",
   "return",
   "workCount",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-477",
  "nl_tokens": [
   "Update",
   "the",
   "allocated",
   "size",
   "of",
   "each",
   "writer",
   "based",
   "on",
   "the",
   "current",
   "allocations",
   "and",
   "pool",
   "size",
   "."
  ],
  "pl_tokens": [
   "private",
   "void",
   "updateAllocation",
   "(",
   ")",
   "{",
   "long",
   "totalAllocations",
   "=",
   "0",
   ";",
   "for",
   "(",
   "Long",
   "allocation",
   ":",
   "writerList",
   ".",
   "values",
   "(",
   ")",
   ")",
   "{",
   "totalAllocations",
   "+=",
   "allocation",
   ";",
   "}",
   "if",
   "(",
   "totalAllocations",
   "<=",
   "totalMemoryPool",
   ")",
   "{",
   "scale",
   "=",
   "1.0",
   ";",
   "}",
   "else",
   "{",
   "scale",
   "=",
   "(",
   "double",
   ")",
   "totalMemoryPool",
   "/",
   "totalAllocations",
   ";",
   "LOG",
   ".",
   "warn",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\"",
   "+",
   "\"Scaling row group sizes to %.2f%% for %d writers\"",
   ",",
   "100",
   "*",
   "memoryPoolRatio",
   ",",
   "totalMemoryPool",
   ",",
   "100",
   "*",
   "scale",
   ",",
   "writerList",
   ".",
   "size",
   "(",
   ")",
   ")",
   ")",
   ";",
   "for",
   "(",
   "Runnable",
   "callBack",
   ":",
   "callBacks",
   ".",
   "values",
   "(",
   ")",
   ")",
   "{",
   "// we do not really want to start a new thread here.",
   "callBack",
   ".",
   "run",
   "(",
   ")",
   ";",
   "}",
   "}",
   "int",
   "maxColCount",
   "=",
   "0",
   ";",
   "for",
   "(",
   "InternalParquetRecordWriter",
   "w",
   ":",
   "writerList",
   ".",
   "keySet",
   "(",
   ")",
   ")",
   "{",
   "maxColCount",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "w",
   ".",
   "getSchema",
   "(",
   ")",
   ".",
   "getColumns",
   "(",
   ")",
   ".",
   "size",
   "(",
   ")",
   ",",
   "maxColCount",
   ")",
   ";",
   "}",
   "for",
   "(",
   "Map",
   ".",
   "Entry",
   "<",
   "InternalParquetRecordWriter",
   ",",
   "Long",
   ">",
   "entry",
   ":",
   "writerList",
   ".",
   "entrySet",
   "(",
   ")",
   ")",
   "{",
   "long",
   "newSize",
   "=",
   "(",
   "long",
   ")",
   "Math",
   ".",
   "floor",
   "(",
   "entry",
   ".",
   "getValue",
   "(",
   ")",
   "*",
   "scale",
   ")",
   ";",
   "if",
   "(",
   "scale",
   "<",
   "1.0",
   "&&",
   "minMemoryAllocation",
   ">",
   "0",
   "&&",
   "newSize",
   "<",
   "minMemoryAllocation",
   ")",
   "{",
   "throw",
   "new",
   "ParquetRuntimeException",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"New Memory allocation %d bytes\"",
   "+",
   "\" is smaller than the minimum allocation size of %d bytes.\"",
   ",",
   "newSize",
   ",",
   "minMemoryAllocation",
   ")",
   ")",
   "{",
   "}",
   ";",
   "}",
   "entry",
   ".",
   "getKey",
   "(",
   ")",
   ".",
   "setRowGroupSizeThreshold",
   "(",
   "newSize",
   ")",
   ";",
   "LOG",
   ".",
   "debug",
   "(",
   "String",
   ".",
   "format",
   "(",
   "\"Adjust block size from %,d to %,d for writer: %s\"",
   ",",
   "entry",
   ".",
   "getValue",
   "(",
   ")",
   ",",
   "newSize",
   ",",
   "entry",
   ".",
   "getKey",
   "(",
   ")",
   ")",
   ")",
   ";",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-478",
  "nl_tokens": [
   "Creates",
   "a",
   "new",
   "float",
   "range",
   "type",
   "with",
   "the",
   "specified",
   "name",
   "if",
   "it",
   "does",
   "not",
   "already",
   "exist",
   "."
  ],
  "pl_tokens": [
   "public",
   "static",
   "Type",
   "createInstance",
   "(",
   "String",
   "name",
   ",",
   "float",
   "<mask>",
   ",",
   "float",
   "max",
   ")",
   "{",
   "// Ensure that min is less than or equal to max.",
   "if",
   "(",
   "min",
   ">",
   "max",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"'min' must be less than or equal to 'max'.\"",
   ")",
   ";",
   "}",
   "synchronized",
   "(",
   "FLOAT_RANGE_TYPES",
   ")",
   "{",
   "// Add the newly created type to the map of all types.",
   "FloatRangeType",
   "newType",
   "=",
   "new",
   "FloatRangeType",
   "(",
   "name",
   ",",
   "min",
   ",",
   "max",
   ")",
   ";",
   "// Ensure that the named type does not already exist, unless it has an identical definition already, in which",
   "// case the old definition can be re-used and the new one discarded.",
   "FloatRangeType",
   "oldType",
   "=",
   "FLOAT_RANGE_TYPES",
   ".",
   "get",
   "(",
   "name",
   ")",
   ";",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "!",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"The type '\"",
   "+",
   "name",
   "+",
   "\"' already exists and cannot be redefined.\"",
   ")",
   ";",
   "}",
   "else",
   "if",
   "(",
   "(",
   "oldType",
   "!=",
   "null",
   ")",
   "&&",
   "oldType",
   ".",
   "equals",
   "(",
   "newType",
   ")",
   ")",
   "{",
   "return",
   "oldType",
   ";",
   "}",
   "else",
   "{",
   "FLOAT_RANGE_TYPES",
   ".",
   "put",
   "(",
   "name",
   ",",
   "newType",
   ")",
   ";",
   "return",
   "newType",
   ";",
   "}",
   "}",
   "}"
  ]
 },
 {
  "idx": "maxmin-479",
  "nl_tokens": [
   "Signals",
   "a",
   "range",
   "of",
   "long",
   "values",
   "the",
   "first",
   "after",
   "some",
   "initial",
   "delay",
   "and",
   "the",
   "rest",
   "periodically",
   "after",
   ".",
   "<p",
   ">",
   "The",
   "sequence",
   "completes",
   "immediately",
   "after",
   "the",
   "last",
   "value",
   "(",
   "start",
   "+",
   "count",
   "-",
   "1",
   ")",
   "has",
   "been",
   "reached",
   ".",
   "<p",
   ">",
   "<img",
   "width",
   "=",
   "640",
   "height",
   "=",
   "195",
   "src",
   "=",
   "https",
   ":",
   "//",
   "raw",
   ".",
   "github",
   ".",
   "com",
   "/",
   "wiki",
   "/",
   "ReactiveX",
   "/",
   "RxJava",
   "/",
   "images",
   "/",
   "rx",
   "-",
   "operators",
   "/",
   "intervalRange",
   ".",
   "s",
   ".",
   "png",
   "alt",
   "=",
   ">",
   "*",
   "<dl",
   ">",
   "<dt",
   ">",
   "<b",
   ">",
   "Scheduler",
   ":",
   "<",
   "/",
   "b",
   ">",
   "<",
   "/",
   "dt",
   ">",
   "<dd",
   ">",
   "you",
   "provide",
   "the",
   "{"
  ],
  "pl_tokens": [
   "@",
   "CheckReturnValue",
   "@",
   "NonNull",
   "@",
   "SchedulerSupport",
   "(",
   "SchedulerSupport",
   ".",
   "CUSTOM",
   ")",
   "public",
   "static",
   "Observable",
   "<",
   "Long",
   ">",
   "intervalRange",
   "(",
   "long",
   "start",
   ",",
   "long",
   "count",
   ",",
   "long",
   "initialDelay",
   ",",
   "long",
   "period",
   ",",
   "TimeUnit",
   "unit",
   ",",
   "Scheduler",
   "scheduler",
   ")",
   "{",
   "if",
   "(",
   "count",
   "<",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"count >= 0 required but it was \"",
   "+",
   "count",
   ")",
   ";",
   "}",
   "if",
   "(",
   "count",
   "==",
   "0L",
   ")",
   "{",
   "return",
   "Observable",
   ".",
   "<",
   "Long",
   ">",
   "empty",
   "(",
   ")",
   ".",
   "delay",
   "(",
   "initialDelay",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ";",
   "}",
   "long",
   "end",
   "=",
   "start",
   "+",
   "(",
   "count",
   "-",
   "1",
   ")",
   ";",
   "if",
   "(",
   "start",
   ">",
   "0",
   "&&",
   "end",
   "<",
   "0",
   ")",
   "{",
   "throw",
   "new",
   "IllegalArgumentException",
   "(",
   "\"Overflow! start + count is bigger than Long.MAX_VALUE\"",
   ")",
   ";",
   "}",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "unit",
   ",",
   "\"unit is null\"",
   ")",
   ";",
   "ObjectHelper",
   ".",
   "requireNonNull",
   "(",
   "scheduler",
   ",",
   "\"scheduler is null\"",
   ")",
   ";",
   "return",
   "RxJavaPlugins",
   ".",
   "onAssembly",
   "(",
   "new",
   "ObservableIntervalRange",
   "(",
   "start",
   ",",
   "end",
   ",",
   "Math",
   ".",
   "<mask>",
   "(",
   "0L",
   ",",
   "initialDelay",
   ")",
   ",",
   "Math",
   ".",
   "max",
   "(",
   "0L",
   ",",
   "period",
   ")",
   ",",
   "unit",
   ",",
   "scheduler",
   ")",
   ")",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-480",
  "nl_tokens": [
   "/",
   "*",
   "calculate",
   "the",
   "master",
   "frequency",
   "table",
   "from",
   "k0",
   "k2",
   "bs_freq_scale",
   "and",
   "bs_alter_scale"
  ],
  "pl_tokens": [
   "public",
   "static",
   "int",
   "master_frequency_table_fs0",
   "(",
   "SBR",
   "sbr",
   ",",
   "int",
   "k0",
   ",",
   "int",
   "k2",
   ",",
   "boolean",
   "bs_alter_scale",
   ")",
   "{",
   "int",
   "incr",
   ";",
   "int",
   "k",
   ";",
   "int",
   "dk",
   ";",
   "int",
   "nrBands",
   ",",
   "k2Achieved",
   ";",
   "int",
   "k2Diff",
   ";",
   "int",
   "[",
   "]",
   "vDk",
   "=",
   "new",
   "int",
   "[",
   "64",
   "]",
   ";",
   "/* mft only defined for k2 > k0 */",
   "if",
   "(",
   "k2",
   "<=",
   "k0",
   ")",
   "{",
   "sbr",
   ".",
   "N_master",
   "=",
   "0",
   ";",
   "return",
   "1",
   ";",
   "}",
   "dk",
   "=",
   "bs_alter_scale",
   "?",
   "2",
   ":",
   "1",
   ";",
   "if",
   "(",
   "bs_alter_scale",
   ")",
   "{",
   "nrBands",
   "=",
   "(",
   "(",
   "(",
   "k2",
   "-",
   "k0",
   "+",
   "2",
   ")",
   ">>",
   "2",
   ")",
   "<<",
   "1",
   ")",
   ";",
   "}",
   "else",
   "{",
   "nrBands",
   "=",
   "(",
   "(",
   "(",
   "k2",
   "-",
   "k0",
   ")",
   ">>",
   "1",
   ")",
   "<<",
   "1",
   ")",
   ";",
   "}",
   "nrBands",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "nrBands",
   ",",
   "63",
   ")",
   ";",
   "if",
   "(",
   "nrBands",
   "<=",
   "0",
   ")",
   "return",
   "1",
   ";",
   "k2Achieved",
   "=",
   "k0",
   "+",
   "nrBands",
   "*",
   "dk",
   ";",
   "k2Diff",
   "=",
   "k2",
   "-",
   "k2Achieved",
   ";",
   "for",
   "(",
   "k",
   "=",
   "0",
   ";",
   "k",
   "<",
   "nrBands",
   ";",
   "k",
   "++",
   ")",
   "{",
   "vDk",
   "[",
   "k",
   "]",
   "=",
   "dk",
   ";",
   "}",
   "if",
   "(",
   "k2Diff",
   "!=",
   "0",
   ")",
   "{",
   "incr",
   "=",
   "(",
   "k2Diff",
   ">",
   "0",
   ")",
   "?",
   "-",
   "1",
   ":",
   "1",
   ";",
   "k",
   "=",
   "(",
   "(",
   "k2Diff",
   ">",
   "0",
   ")",
   "?",
   "(",
   "nrBands",
   "-",
   "1",
   ")",
   ":",
   "0",
   ")",
   ";",
   "while",
   "(",
   "k2Diff",
   "!=",
   "0",
   ")",
   "{",
   "vDk",
   "[",
   "k",
   "]",
   "-=",
   "incr",
   ";",
   "k",
   "+=",
   "incr",
   ";",
   "k2Diff",
   "+=",
   "incr",
   ";",
   "}",
   "}",
   "sbr",
   ".",
   "f_master",
   "[",
   "0",
   "]",
   "=",
   "k0",
   ";",
   "for",
   "(",
   "k",
   "=",
   "1",
   ";",
   "k",
   "<=",
   "nrBands",
   ";",
   "k",
   "++",
   ")",
   "{",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "]",
   "=",
   "(",
   "sbr",
   ".",
   "f_master",
   "[",
   "k",
   "-",
   "1",
   "]",
   "+",
   "vDk",
   "[",
   "k",
   "-",
   "1",
   "]",
   ")",
   ";",
   "}",
   "sbr",
   ".",
   "N_master",
   "=",
   "nrBands",
   ";",
   "sbr",
   ".",
   "N_master",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "sbr",
   ".",
   "N_master",
   ",",
   "64",
   ")",
   ";",
   "return",
   "0",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-481",
  "nl_tokens": [
   "Returns",
   "this",
   "node",
   "s",
   "next",
   "<b",
   ">",
   "element<",
   "/",
   "b",
   ">",
   "."
  ],
  "pl_tokens": [
   "public",
   "Node",
   "getNextSiblingElement",
   "(",
   ")",
   "{",
   "parentNode",
   ".",
   "initChildElementNodes",
   "(",
   ")",
   ";",
   "if",
   "(",
   "siblingElementIndex",
   "==",
   "-",
   "1",
   ")",
   "{",
   "int",
   "<mask>",
   "=",
   "parentNode",
   ".",
   "getChildNodesCount",
   "(",
   ")",
   ";",
   "for",
   "(",
   "int",
   "i",
   "=",
   "siblingIndex",
   ";",
   "i",
   "<",
   "max",
   ";",
   "i",
   "++",
   ")",
   "{",
   "Node",
   "sibling",
   "=",
   "parentNode",
   ".",
   "childNodes",
   ".",
   "get",
   "(",
   "i",
   ")",
   ";",
   "if",
   "(",
   "sibling",
   ".",
   "getNodeType",
   "(",
   ")",
   "==",
   "NodeType",
   ".",
   "ELEMENT",
   ")",
   "{",
   "return",
   "sibling",
   ";",
   "}",
   "}",
   "return",
   "null",
   ";",
   "}",
   "int",
   "index",
   "=",
   "siblingElementIndex",
   "+",
   "1",
   ";",
   "if",
   "(",
   "index",
   ">=",
   "parentNode",
   ".",
   "childElementNodesCount",
   ")",
   "{",
   "return",
   "null",
   ";",
   "}",
   "return",
   "parentNode",
   ".",
   "childElementNodes",
   "[",
   "index",
   "]",
   ";",
   "}"
  ]
 },
 {
  "idx": "maxmin-482",
  "nl_tokens": [
   "Adds",
   "a",
   "point",
   "specified",
   "by",
   "the",
   "double",
   "precision",
   "arguments",
   "<code",
   ">",
   "newx<",
   "/",
   "code",
   ">",
   "and",
   "<code",
   ">",
   "newy<",
   "/",
   "code",
   ">",
   "to",
   "this",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   ".",
   "The",
   "resulting",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "is",
   "the",
   "smallest",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "that",
   "contains",
   "both",
   "the",
   "original",
   "<code",
   ">",
   "Rectangle2D<",
   "/",
   "code",
   ">",
   "and",
   "the",
   "specified",
   "point",
   ".",
   "<p",
   ">",
   "After",
   "adding",
   "a",
   "point",
   "a",
   "call",
   "to",
   "<code",
   ">",
   "contains<",
   "/",
   "code",
   ">",
   "with",
   "the",
   "added",
   "point",
   "as",
   "an",
   "argument",
   "does",
   "not",
   "necessarily",
   "return",
   "<code",
   ">",
   "true<",
   "/",
   "code",
   ">",
   ".",
   "The",
   "<code",
   ">",
   "contains<",
   "/",
   "code",
   ">",
   "method",
   "does",
   "not",
   "return",
   "<code",
   ">",
   "true<",
   "/",
   "code",
   ">",
   "for",
   "points",
   "on",
   "the",
   "right",
   "or",
   "bottom",
   "edges",
   "of",
   "a",
   "rectangle",
   ".",
   "Therefore",
   "if",
   "the",
   "added",
   "point",
   "falls",
   "on",
   "the",
   "left",
   "or",
   "bottom",
   "edge",
   "of",
   "the",
   "enlarged",
   "rectangle",
   "<code",
   ">",
   "contains<",
   "/",
   "code",
   ">",
   "returns",
   "<code",
   ">",
   "false<",
   "/",
   "code",
   ">",
   "for",
   "that",
   "point",
   "."
  ],
  "pl_tokens": [
   "public",
   "void",
   "add",
   "(",
   "double",
   "newx",
   ",",
   "double",
   "newy",
   ")",
   "{",
   "double",
   "x1",
   "=",
   "Math",
   ".",
   "<mask>",
   "(",
   "getMinX",
   "(",
   ")",
   ",",
   "newx",
   ")",
   ";",
   "double",
   "x2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "getMaxX",
   "(",
   ")",
   ",",
   "newx",
   ")",
   ";",
   "double",
   "y1",
   "=",
   "Math",
   ".",
   "min",
   "(",
   "getMinY",
   "(",
   ")",
   ",",
   "newy",
   ")",
   ";",
   "double",
   "y2",
   "=",
   "Math",
   ".",
   "max",
   "(",
   "getMaxY",
   "(",
   ")",
   ",",
   "newy",
   ")",
   ";",
   "setRect",
   "(",
   "x1",
   ",",
   "y1",
   ",",
   "x2",
   "-",
   "x1",
   ",",
   "y2",
   "-",
   "y1",
   ")",
   ";",
   "}"
  ]
 }
]